
{********************************************************************************************************************************************}
{                                                                                                                                            }
{                                                              XML Data Binding                                                              }
{                                                                                                                                             }
{         Generated on: 2024-04-11 13:08:47                                                                                                  }
{       Generated from: C:\Users\laran\OneDrive\Dokument\WoodSupport\Fakturering\Papinet\Schema\V2R31-Non_Name_Spaced\InvoiceWoodV2R31.xsd   }
{   Settings stored in: C:\Users\laran\OneDrive\Dokument\WoodSupport\Fakturering\Papinet\Schema\V2R31-Non_Name_Spaced\InvoiceWoodV2R31.xdb   }
{                                                                                                                                            }
{********************************************************************************************************************************************}

unit InvoiceWoodV2R31;

interface

uses Xml.xmldom, Xml.XMLDoc, Xml.XMLIntf;

type

{ Forward Decls }

  IXMLInvoiceWood = interface;
  IXMLInvoiceWoodHeader = interface;
  IXMLInvoiceDate = interface;
  IXMLDateBasis = interface;
  IXMLOtherDate = interface;
  IXMLOtherDateList = interface;
  IXMLDateTimeRange = interface;
  IXMLDateTimeRangeList = interface;
  IXMLDateTimeFrom = interface;
  IXMLDateTimeTo = interface;
  IXMLInvoiceReference = interface;
  IXMLInvoiceReferenceList = interface;
  IXMLParty = interface;
  IXMLPartyList = interface;
  IXMLPartyIdentifier = interface;
  IXMLPartyIdentifierList = interface;
  IXMLNameAddress = interface;
  IXMLOrganisationUnit = interface;
  IXMLPostalCode = interface;
  IXMLCountry = interface;
  IXMLGPSCoordinates = interface;
  IXMLMeasurement = interface;
  IXMLMeasurementList = interface;
  IXMLValue = interface;
  IXMLRangeMin = interface;
  IXMLRangeMax = interface;
  IXMLMapCoordinates = interface;
  IXMLMapCoordinatesList = interface;
  IXMLCoordinates = interface;
  IXMLCoordinatesList = interface;
  IXMLURL = interface;
  IXMLURLList = interface;
  IXMLCommonContact = interface;
  IXMLCommonContactList = interface;
  IXMLContactIdentifier = interface;
  IXMLContactAvailability = interface;
  IXMLContactAvailabilityList = interface;
  IXMLTimeSlot = interface;
  IXMLTimeSlotList = interface;
  IXMLShipToCharacteristics = interface;
  IXMLTypedParty = interface;
  IXMLTypedPartyList = interface;
  IXMLSupplyPoint = interface;
  IXMLSupplyPointList = interface;
  IXMLSupplyPointCode = interface;
  IXMLSupplyPointCodeList = interface;
  IXMLSupplyPointCharacteristics = interface;
  IXMLSupplyPointProperty = interface;
  IXMLSupplyPointPropertyList = interface;
  IXMLSupplyPointPropertyCode = interface;
  IXMLSupplyPointPropertyCodeValue = interface;
  IXMLDetailMeasurement = interface;
  IXMLDetailValue = interface;
  IXMLDetailRangeMin = interface;
  IXMLDetailRangeMax = interface;
  IXMLStandardDeviation = interface;
  IXMLTwoSigmaLower = interface;
  IXMLTwoSigmaUpper = interface;
  IXMLQuantityInformation = interface;
  IXMLQuantity = interface;
  IXMLInformationalQuantity = interface;
  IXMLInformationalQuantityList = interface;
  IXMLMapPoint = interface;
  IXMLMapPointList = interface;
  IXMLMapPointID = interface;
  IXMLMapPointIDList = interface;
  IXMLAreaInfo = interface;
  IXMLAreaInfoList = interface;
  IXMLCodeInfo = interface;
  IXMLCodeInfoList = interface;
  IXMLCodeValue = interface;
  IXMLCodeValueList = interface;
  IXMLPropertyValue = interface;
  IXMLPropertyValueList = interface;
  IXMLPositionOnItem = interface;
  IXMLPropertySubValue = interface;
  IXMLPropertySubValueList = interface;
  IXMLEAttachment = interface;
  IXMLAttachmentFileName = interface;
  IXMLAttachmentFileNameList = interface;
  IXMLDocumentReferenceInformation = interface;
  IXMLDocumentReferenceInformationList = interface;
  IXMLDocumentReferenceID = interface;
  IXMLDocumentReference = interface;
  IXMLDocumentReferenceList = interface;
  IXMLLocationCode = interface;
  IXMLTermsOfDelivery = interface;
  IXMLIncotermsLocation = interface;
  IXMLShipmentMethodOfPayment = interface;
  IXMLServiceLevel = interface;
  IXMLServiceLevelList = interface;
  IXMLServiceLevelReference = interface;
  IXMLServiceLevelReferenceList = interface;
  IXMLDeliveryRouteCode = interface;
  IXMLLocationParty = interface;
  IXMLLocationPartyList = interface;
  IXMLCountryOfOrigin = interface;
  IXMLCountryOfDestination = interface;
  IXMLCountryOfConsumption = interface;
  IXMLTransportVehicleIdentifier = interface;
  IXMLTransportVehicleIdentifierList = interface;
  IXMLTransportUnitIdentifier = interface;
  IXMLTransportUnitIdentifierList = interface;
  IXMLInsurance = interface;
  IXMLInsuredValue = interface;
  IXMLCurrencyValue = interface;
  IXMLCreditDebitNoteReason = interface;
  IXMLCreditDebitNoteReasonCode = interface;
  IXMLInvoiceShipment = interface;
  IXMLInvoiceShipmentList = interface;
  IXMLShipmentID = interface;
  IXMLInvoiceProductGroup = interface;
  IXMLInvoiceProductGroupList = interface;
  IXMLProductGroupID = interface;
  IXMLInvoiceWoodLineItem = interface;
  IXMLInvoiceWoodLineItemList = interface;
  IXMLPurchaseOrderInformation = interface;
  IXMLDateTimeBasis = interface;
  IXMLPurchaseOrderReference = interface;
  IXMLPurchaseOrderReferenceList = interface;
  IXMLEndsDiscountInformation = interface;
  IXMLChargeOrAllowance = interface;
  IXMLProductClass = interface;
  IXMLProductIdentifier = interface;
  IXMLProductIdentifierList = interface;
  IXMLProductDescription = interface;
  IXMLProductDescriptionList = interface;
  IXMLClassification = interface;
  IXMLClassificationList = interface;
  IXMLClassificationCode = interface;
  IXMLProductReference = interface;
  IXMLProductReferenceList = interface;
  IXMLBookManufacturing = interface;
  IXMLBookClassification = interface;
  IXMLBookClassificationList = interface;
  IXMLBookSubClassification = interface;
  IXMLBookSubClassificationList = interface;
  IXMLProofInformationalQuantity = interface;
  IXMLProofInformationalQuantityList = interface;
  IXMLProofApprovalDate = interface;
  IXMLProofDueDate = interface;
  IXMLPrepInformation = interface;
  IXMLPrepInformationList = interface;
  IXMLPrepReference = interface;
  IXMLPrepReferenceList = interface;
  IXMLSuppliedComponentInformation = interface;
  IXMLSuppliedComponentInformationList = interface;
  IXMLPaper = interface;
  IXMLPaperCharacteristics = interface;
  IXMLAbrasion = interface;
  IXMLAbrasionList = interface;
  IXMLAbsorptionInk = interface;
  IXMLAbsorptionInkList = interface;
  IXMLAbsorptionLight = interface;
  IXMLAbsorptionLightList = interface;
  IXMLAbsorptionWater = interface;
  IXMLAbsorptionWaterList = interface;
  IXMLAppearance = interface;
  IXMLAppearanceList = interface;
  IXMLAsh = interface;
  IXMLAshList = interface;
  IXMLBasisWeight = interface;
  IXMLBasisWeightList = interface;
  IXMLIncrementalValue = interface;
  IXMLIncrementalValueList = interface;
  IXMLBendingResistance = interface;
  IXMLBendingResistanceList = interface;
  IXMLBendingStiffness = interface;
  IXMLBendingStiffnessList = interface;
  IXMLBrightness = interface;
  IXMLBrightnessList = interface;
  IXMLBulk = interface;
  IXMLBulkList = interface;
  IXMLBurst = interface;
  IXMLBurstList = interface;
  IXMLBurstIndex = interface;
  IXMLBurstIndexList = interface;
  IXMLCaliper = interface;
  IXMLCaliperList = interface;
  IXMLCoatWeight = interface;
  IXMLCoatWeightList = interface;
  IXMLColourDetail = interface;
  IXMLColourDetailList = interface;
  IXMLCMYK = interface;
  IXMLColourShade = interface;
  IXMLHSB = interface;
  IXMLLab = interface;
  IXMLRGB = interface;
  IXMLColourCode = interface;
  IXMLDensity = interface;
  IXMLDensityList = interface;
  IXMLDirt = interface;
  IXMLDirtList = interface;
  IXMLDominantWavelength = interface;
  IXMLDominantWavelengthList = interface;
  IXMLExcitationPurity = interface;
  IXMLExcitationPurityList = interface;
  IXMLFibreLength = interface;
  IXMLFibreLengthList = interface;
  IXMLFibreClassification = interface;
  IXMLFibreClassificationList = interface;
  IXMLFolding = interface;
  IXMLFoldingList = interface;
  IXMLFormation = interface;
  IXMLFormationList = interface;
  IXMLFreeness = interface;
  IXMLFreenessList = interface;
  IXMLFriction = interface;
  IXMLFrictionList = interface;
  IXMLGloss = interface;
  IXMLGlossList = interface;
  IXMLLightScattering = interface;
  IXMLLightScatteringList = interface;
  IXMLLuminance = interface;
  IXMLLuminanceList = interface;
  IXMLMoisture = interface;
  IXMLMoistureList = interface;
  IXMLMullen = interface;
  IXMLMullenList = interface;
  IXMLOpacity = interface;
  IXMLOpacityList = interface;
  IXMLPermeability = interface;
  IXMLPermeabilityList = interface;
  IXMLPH = interface;
  IXMLPHList = interface;
  IXMLPlyBond = interface;
  IXMLPlyBondList = interface;
  IXMLPorosity = interface;
  IXMLPorosityList = interface;
  IXMLPostConsumerWaste = interface;
  IXMLPostConsumerWasteList = interface;
  IXMLPreConsumerWaste = interface;
  IXMLPreConsumerWasteList = interface;
  IXMLRecycled = interface;
  IXMLRecycledList = interface;
  IXMLResistance = interface;
  IXMLResistanceList = interface;
  IXMLRingCrush = interface;
  IXMLRingCrushList = interface;
  IXMLRoughness = interface;
  IXMLRoughnessList = interface;
  IXMLRunnabilityIndex = interface;
  IXMLRunnabilityIndexList = interface;
  IXMLShowThrough = interface;
  IXMLShowThroughList = interface;
  IXMLSizing = interface;
  IXMLSizingList = interface;
  IXMLSmoothness = interface;
  IXMLSmoothnessList = interface;
  IXMLStiffness = interface;
  IXMLStiffnessList = interface;
  IXMLStretch = interface;
  IXMLStretchList = interface;
  IXMLSurfaceStrength = interface;
  IXMLSurfaceStrengthList = interface;
  IXMLTEA = interface;
  IXMLTEAList = interface;
  IXMLTear = interface;
  IXMLTearList = interface;
  IXMLTearIndex = interface;
  IXMLTearIndexList = interface;
  IXMLTensile = interface;
  IXMLTensileList = interface;
  IXMLTensileIndex = interface;
  IXMLTensileIndexList = interface;
  IXMLWhiteness = interface;
  IXMLWhitenessList = interface;
  IXMLAdditionalTest = interface;
  IXMLPlyAttributes = interface;
  IXMLPlyAttributesList = interface;
  IXMLPlySet = interface;
  IXMLPlySetList = interface;
  IXMLReel = interface;
  IXMLReelConversionCharacteristicsClass = interface;
  IXMLConversionCode = interface;
  IXMLCoreCharacteristics = interface;
  IXMLCoreCharacteristicsList = interface;
  IXMLCoreCode = interface;
  IXMLCoreStrengthCode = interface;
  IXMLEmbossing = interface;
  IXMLEmbossingList = interface;
  IXMLEmbossingCode = interface;
  IXMLWatermark = interface;
  IXMLWatermarkList = interface;
  IXMLWatermarkCode = interface;
  IXMLReelPackagingCharacteristicsClass = interface;
  IXMLPackagingCode = interface;
  IXMLPackagingCodeList = interface;
  IXMLPackagingDescription = interface;
  IXMLPackagingDescriptionList = interface;
  IXMLWrap = interface;
  IXMLWrapList = interface;
  IXMLBandCharacteristics = interface;
  IXMLBandCharacteristicsList = interface;
  IXMLPalletCharacteristics = interface;
  IXMLPalletCharacteristicsList = interface;
  IXMLProductIdentification = interface;
  IXMLProductIdentificationList = interface;
  IXMLLabelCharacteristics = interface;
  IXMLLabelCharacteristicsList = interface;
  IXMLCustomerMarks = interface;
  IXMLCustomerMarksList = interface;
  IXMLStencilCharacteristics = interface;
  IXMLStencilCharacteristicsList = interface;
  IXMLMaximumClampingForce = interface;
  IXMLSheet = interface;
  IXMLSheetConversionCharacteristicsClass = interface;
  IXMLSheetSize = interface;
  IXMLSheetSizeList = interface;
  IXMLPunchedHoleDetails = interface;
  IXMLPunchedHoleDetailsList = interface;
  IXMLNumberOfHoles = interface;
  IXMLSizeOfHolePunch = interface;
  IXMLHoleSpacing = interface;
  IXMLEvenSpacing = interface;
  IXMLDistanceFromEdge = interface;
  IXMLDistanceFromEdgeList = interface;
  IXMLCuttingDetails = interface;
  IXMLCuttingDetailsList = interface;
  IXMLCuttingTemplateCode = interface;
  IXMLSheetPackagingCharacteristicsClass = interface;
  IXMLSheetCount = interface;
  IXMLSheetCountList = interface;
  IXMLSuppliedComponentReference = interface;
  IXMLSuppliedComponentReferenceList = interface;
  IXMLComponentShipDate = interface;
  IXMLComponentDueDate = interface;
  IXMLComponentNeededDate = interface;
  IXMLOrderStatusInformation = interface;
  IXMLOrderPrimaryStatus = interface;
  IXMLOrderSecondaryStatus = interface;
  IXMLOrderStatusInformationDate = interface;
  IXMLPackagingCharacteristics = interface;
  IXMLPackagingCharacteristicsList = interface;
  IXMLBoxCharacteristics = interface;
  IXMLWrapCharacteristics = interface;
  IXMLPalletPackagingCharacteristics = interface;
  IXMLBookUnitPacking = interface;
  IXMLUnitCharacteristics = interface;
  IXMLDocumentInformation = interface;
  IXMLDocumentInformationList = interface;
  IXMLNumberOfDocuments = interface;
  IXMLNumberOfDocumentsList = interface;
  IXMLDocumentInstruction = interface;
  IXMLDocumentContent = interface;
  IXMLDocumentContentList = interface;
  IXMLForestWood = interface;
  IXMLTreeSpeciesGroup = interface;
  IXMLTreeSpeciesGroupList = interface;
  IXMLTreeSpeciesGroupCode = interface;
  IXMLForestWoodClass = interface;
  IXMLForestWoodClassList = interface;
  IXMLForestWoodClassCode = interface;
  IXMLForestWoodCharacteristics = interface;
  IXMLProductAdaptedFor = interface;
  IXMLForestWoodPackagingCharacteristics = interface;
  IXMLPackagingCodeSpecification = interface;
  IXMLForestWoodProcessingCharacteristics = interface;
  IXMLProcessingCodeSpecification = interface;
  IXMLProcessingCode = interface;
  IXMLSafetyAndEnvironmentalInformationClass = interface;
  IXMLSafetyAndEnvironmentalInformationClassList = interface;
  IXMLChainOfCustody = interface;
  IXMLLabelStock = interface;
  IXMLLabelStockCharacteristics = interface;
  IXMLLabelStockLayer = interface;
  IXMLLabelStockLayerList = interface;
  IXMLLayerMaterial = interface;
  IXMLExtraFeature = interface;
  IXMLExtraFeatureList = interface;
  IXMLSingleWidthReel = interface;
  IXMLSingleWidthReelConversionCharacteristics = interface;
  IXMLTrimmedReel = interface;
  IXMLTrimmedReelConversionCharacteristics = interface;
  IXMLSlitReel = interface;
  IXMLSlitReelList = interface;
  IXMLSlitReelOrderQuantity = interface;
  IXMLSlitReelReference = interface;
  IXMLSlitReelReferenceList = interface;
  IXMLPulpClass = interface;
  IXMLPulpCharacteristics = interface;
  IXMLDrainageResistance = interface;
  IXMLDrainageResistanceList = interface;
  IXMLViscosity = interface;
  IXMLViscosityList = interface;
  IXMLBale = interface;
  IXMLBaleConversionCharacteristics = interface;
  IXMLBalePackagingCharacteristics = interface;
  IXMLPulpUnitCharacteristics = interface;
  IXMLSlurry = interface;
  IXMLNonStandardPulp = interface;
  IXMLRecoveredPaper = interface;
  IXMLVirginFibre = interface;
  IXMLTimberCharacteristics = interface;
  IXMLLumberSpeciesClass = interface;
  IXMLLumberSpeciesClassList = interface;
  IXMLLog = interface;
  IXMLLogCharacteristics = interface;
  IXMLLogPackagingCharacteristics = interface;
  IXMLIdentifierS60 = interface;
  IXMLIdentifierS60List = interface;
  IXMLChip = interface;
  IXMLChipCharacteristics = interface;
  IXMLBark = interface;
  IXMLSawdust = interface;
  IXMLChipPackagingCharacteristics = interface;
  IXMLWoodProducts = interface;
  IXMLWoodTimbersDimensionalLumberBoards = interface;
  IXMLSoftwoodLumber = interface;
  IXMLSoftwoodLumberCharacteristicsClass = interface;
  IXMLLumberGradeClass = interface;
  IXMLDimensionConstructionClass = interface;
  IXMLDimensionConstructionClassList = interface;
  IXMLDimensionThicknessClass = interface;
  IXMLDimensionThicknessClassList = interface;
  IXMLLumberSeasoningClass = interface;
  IXMLLumberMoistureContentClass = interface;
  IXMLHeatTreatmentClass = interface;
  IXMLLumberManufacturingProcessClass = interface;
  IXMLLumberManufacturingProcessClassList = interface;
  IXMLLumberPatternProfileClass = interface;
  IXMLLumberTrimClass = interface;
  IXMLLumberJoiningClass = interface;
  IXMLPressureTreatmentClass = interface;
  IXMLPressureTreatmentCompoundClass = interface;
  IXMLPressureTreatmentConcentration = interface;
  IXMLFireTreatmentClass = interface;
  IXMLOtherTreatmentClass = interface;
  IXMLConstructionGradeStampClass = interface;
  IXMLExLogClass = interface;
  IXMLLengthCutDescription = interface;
  IXMLPackaging = interface;
  IXMLProductPackagingClass = interface;
  IXMLUnitDimensionType = interface;
  IXMLDimensionMeasurementClass = interface;
  IXMLLumberPackageCodeClass = interface;
  IXMLHardwoodLumber = interface;
  IXMLRoofingSidingDeckingFencing = interface;
  IXMLNaturalWoodSiding = interface;
  IXMLNaturalWoodSidingOther = interface;
  IXMLDeckAndPorchFlooringMaterialsNaturalWood = interface;
  IXMLCompositeAndVeneerWoodPanels = interface;
  IXMLNAPlywoodOSBCharacteristicsClass = interface;
  IXMLPlywoodOSBGradeClass = interface;
  IXMLPlywoodOSBSurfaceClass = interface;
  IXMLPlywoodOSBOverlayClass = interface;
  IXMLPlywoodOSBOverlayClassList = interface;
  IXMLPlywoodOSBEdgeClass = interface;
  IXMLPlywoodOSBSupplementalClass = interface;
  IXMLPlywoodOSBSupplementalClassList = interface;
  IXMLWoodPanelProductsClass = interface;
  IXMLPlywoodLayupStructureClass = interface;
  IXMLPlywoodPlySetClass = interface;
  IXMLPlywoodPlyCharacteristicsClass = interface;
  IXMLPlywoodPlyCharacteristicsClassList = interface;
  IXMLWoodPanelCharacteristicsClass = interface;
  IXMLPlywoodPlyGrade = interface;
  IXMLWoodPanelGlueExposureClass = interface;
  IXMLWoodPanelGlueExposureClassList = interface;
  IXMLEdgeClass = interface;
  IXMLEdgeClassList = interface;
  IXMLPlywoodSideClass = interface;
  IXMLPlywoodSideClassList = interface;
  IXMLPlywoodMachining = interface;
  IXMLConstructionPackagesAndPreFabPanels = interface;
  IXMLFloor = interface;
  IXMLWall = interface;
  IXMLRoof = interface;
  IXMLOtherProducts = interface;
  IXMLOtherProductsClass = interface;
  IXMLOtherProductsClassList = interface;
  IXMLOtherProductsCharacteristics = interface;
  IXMLOtherProductsPackagingCharacteristics = interface;
  IXMLOtherProductsProcessingCharacteristics = interface;
  IXMLInvoiceLineBaseAmountInformation = interface;
  IXMLPriceDetails = interface;
  IXMLPricePerUnit = interface;
  IXMLInformationalPricePerUnit = interface;
  IXMLInformationalPricePerUnitList = interface;
  IXMLExchangeRate = interface;
  IXMLMinCurrencyValue = interface;
  IXMLMaxCurrencyValue = interface;
  IXMLMonetaryAdjustment = interface;
  IXMLMonetaryAdjustmentList = interface;
  IXMLMonetaryAdjustmentStartAmount = interface;
  IXMLMonetaryAdjustmentStartQuantity = interface;
  IXMLPriceAdjustment = interface;
  IXMLFlatAmountAdjustment = interface;
  IXMLAdjustmentFixedAmount = interface;
  IXMLTaxAdjustment = interface;
  IXMLTaxAmount = interface;
  IXMLInformationalAmount = interface;
  IXMLInformationalAmountList = interface;
  IXMLGeneralLedgerAccount = interface;
  IXMLMonetaryAdjustmentAmount = interface;
  IXMLMonetaryAdjustmentReference = interface;
  IXMLMonetaryAdjustmentReferenceList = interface;
  IXMLPriceSpecification = interface;
  IXMLPriceSpecificationList = interface;
  IXMLBookSpecIdentification = interface;
  IXMLSpecIssueDate = interface;
  IXMLInvoiceLineBaseAmount = interface;
  IXMLChargeInformation = interface;
  IXMLChargeInformationList = interface;
  IXMLCostComponent = interface;
  IXMLCostComponentList = interface;
  IXMLCostComponentCode = interface;
  IXMLCostComponentCodeValue = interface;
  IXMLCostComponentDescription = interface;
  IXMLCostComponentDescriptionList = interface;
  IXMLTransportUnitCharacteristics = interface;
  IXMLTransportUnitCharacteristicsList = interface;
  IXMLTransportUnitCode = interface;
  IXMLTransportUnitMeasurements = interface;
  IXMLTransportUnitMeasurementsList = interface;
  IXMLTransportUnitEquipment = interface;
  IXMLTransportUnitEquipmentList = interface;
  IXMLTransportUnitEquipmentCode = interface;
  IXMLTransportUnitEquipmentDescription = interface;
  IXMLTransportUnitEquipmentDescriptionList = interface;
  IXMLEquipmentPropertyValue = interface;
  IXMLEquipmentPropertyValueList = interface;
  IXMLTransportUnitDetail = interface;
  IXMLTransportUnitDetailCode = interface;
  IXMLTransportUnitReferenceIDInfo = interface;
  IXMLTransportUnitReferenceIDInfoList = interface;
  IXMLTransportVehicleCharacteristics = interface;
  IXMLTransportVehicleCode = interface;
  IXMLTransportVehicleMeasurements = interface;
  IXMLTransportVehicleEquipment = interface;
  IXMLTransportVehicleEquipmentList = interface;
  IXMLTransportVehicleEquipmentCode = interface;
  IXMLTransportVehicleEquipmentDescription = interface;
  IXMLTransportVehicleEquipmentDescriptionList = interface;
  IXMLBrandAndModel = interface;
  IXMLModel = interface;
  IXMLTransportVehicleDetail = interface;
  IXMLChargeReference = interface;
  IXMLChargeReferenceList = interface;
  IXMLChargeAmount = interface;
  IXMLChargeNetAmount = interface;
  IXMLInvoiceLineAmount = interface;
  IXMLInvoiceDeliveryInformation = interface;
  IXMLInvoiceDeliveryInformationList = interface;
  IXMLDeliveryMessageDate = interface;
  IXMLDeliveryDate = interface;
  IXMLDeliveryMessageReference = interface;
  IXMLDeliveryMessageReferenceList = interface;
  IXMLMillCharacteristics = interface;
  IXMLTransportModeCharacteristics = interface;
  IXMLTransportModeCharacteristicsList = interface;
  IXMLTransportModeCode = interface;
  IXMLDeliveryDateWindow = interface;
  IXMLDeliveryDateWindowList = interface;
  IXMLTaxStatement = interface;
  IXMLTaxStatementCode = interface;
  IXMLStatisticalGoodsInformation = interface;
  IXMLCommodityGoodsCode = interface;
  IXMLProductGroupSummary = interface;
  IXMLTotalQuantity = interface;
  IXMLTotalQuantityList = interface;
  IXMLTotalInformationalQuantity = interface;
  IXMLTotalInformationalQuantityList = interface;
  IXMLProductSummary = interface;
  IXMLLengthSpecification = interface;
  IXMLLengthSpecificationList = interface;
  IXMLLengthCategory = interface;
  IXMLShipmentSummary = interface;
  IXMLInvoiceWoodSummary = interface;
  IXMLLineItemSubTotal = interface;
  IXMLTotalAdjustments = interface;
  IXMLTotalTaxAmount = interface;
  IXMLTotalFASAmount = interface;
  IXMLTotalNetAmount = interface;
  IXMLTotalAmount = interface;
  IXMLTermsOfPayment = interface;
  IXMLTermsOfPaymentList = interface;
  IXMLTermsOfPaymentCode = interface;
  IXMLTermsBasisDate = interface;
  IXMLTermsDiscountDueDate = interface;
  IXMLTermsNetDueDate = interface;
  IXMLTotalNetOfTermsDiscount = interface;
  IXMLTotalNetOfTermsDiscountList = interface;
  IXMLAmountSubjectToTermsDiscount = interface;
  IXMLTotalTermsDiscountNetAmount = interface;
  IXMLTotalTermsDiscountNetAmountTax = interface;
  IXMLTotalTermsDiscountAmount = interface;
  IXMLTotalTermsDiscountNetAmountDue = interface;
  IXMLTotalTermsDiscountTaxAmount = interface;
  IXMLTotalTermsDiscountAmountDue = interface;
  IXMLCustomsTotals = interface;
  IXMLCustomsTotalsList = interface;
  IXMLCustomsStampInformation = interface;
  IXMLCustomsStampInformationList = interface;
  IXMLCustomsStampDate = interface;
  IXMLCustomsReferenceNumber = interface;
  IXMLSupplierCustomsReference = interface;
  IXMLTermsAndDisclaimers = interface;
  IXMLTermsAndDisclaimersList = interface;
  IXMLBusinessParty = interface;
  IXMLCurrencyPerUnit = interface;
  IXMLDeliveryInformationType = interface;
  IXMLDeliveryMessageHeader = interface;
  IXMLDeliveryMessageReason = interface;
  IXMLDeliveryMessageReasonList = interface;
  IXMLDeliveryMessageReasonCode = interface;
  IXMLCoLoading = interface;
  IXMLCoLoadingList = interface;
  IXMLCoLoadingNumber = interface;
  IXMLCoLoadingReference = interface;
  IXMLCoLoadingReferenceList = interface;
  IXMLDeliveryLeg = interface;
  IXMLDeliveryLegList = interface;
  IXMLDeliveryOrigin = interface;
  IXMLDeliveryOriginList = interface;
  IXMLLocationCharacteristics = interface;
  IXMLResourceInformation = interface;
  IXMLResourceInformationIssueDate = interface;
  IXMLResourceCharacteristics = interface;
  IXMLResourceCharacteristicsList = interface;
  IXMLResourceTypeCode = interface;
  IXMLResourceIDInfo = interface;
  IXMLResourceIDInfoList = interface;
  IXMLResourceIdentifier = interface;
  IXMLResourceReferenceIDInfo = interface;
  IXMLResourceReferenceIDInfoList = interface;
  IXMLResourceReference = interface;
  IXMLResourceReferenceList = interface;
  IXMLResourceIntroductionDate = interface;
  IXMLResourceAvailability = interface;
  IXMLResourceShiftInformation = interface;
  IXMLResourceShiftInformationList = interface;
  IXMLResourceShiftCode = interface;
  IXMLResourcePropertyValue = interface;
  IXMLResourcePropertyValueList = interface;
  IXMLPropertyCode = interface;
  IXMLQuantityValue = interface;
  IXMLQuantityValueList = interface;
  IXMLTransportLoadingCharacteristics = interface;
  IXMLTransportLoadingCharacteristicsList = interface;
  IXMLTransportLoadingCode = interface;
  IXMLTransportLoadingCodeDescription = interface;
  IXMLGoodsLoadingSequence = interface;
  IXMLLoadingSequence = interface;
  IXMLLoadingSequenceList = interface;
  IXMLLoadingFrom = interface;
  IXMLTransportUnloadingCharacteristics = interface;
  IXMLTransportUnloadingCharacteristicsList = interface;
  IXMLTransportUnloadingCode = interface;
  IXMLTransportUnloadingCodeDescription = interface;
  IXMLTransportOtherInstructions = interface;
  IXMLTransportOtherInstructionsList = interface;
  IXMLTransportInstructionCode = interface;
  IXMLTransportPropertyValue = interface;
  IXMLTransportPropertyValueList = interface;
  IXMLRoute = interface;
  IXMLRouteList = interface;
  IXMLRouteLocation = interface;
  IXMLRouteLocationList = interface;
  IXMLRouteReference = interface;
  IXMLRouteReferenceList = interface;
  IXMLRouteLength = interface;
  IXMLRouteLengthList = interface;
  IXMLRouteDefinition = interface;
  IXMLRouteLeg = interface;
  IXMLRouteLegList = interface;
  IXMLRouteLegLength = interface;
  IXMLRouteLegLengthList = interface;
  IXMLRoadCharacteristics = interface;
  IXMLRoadClassification = interface;
  IXMLRoadClassificationList = interface;
  IXMLRoadClassificationCode = interface;
  IXMLRoadBearingCapacity = interface;
  IXMLRoadBearingCapacityList = interface;
  IXMLRoadObstruction = interface;
  IXMLRoadObstructionList = interface;
  IXMLRoadMaintenanceInfo = interface;
  IXMLRoadMaintenanceInfoList = interface;
  IXMLDeliveryTransitTime = interface;
  IXMLDeliveryDestination = interface;
  IXMLDeliveryDestinationList = interface;
  IXMLDeliveryLegReference = interface;
  IXMLDeliveryLegReferenceList = interface;
  IXMLTermsOfChartering = interface;
  IXMLTermsOfCharteringList = interface;
  IXMLBusinessChainInfo = interface;
  IXMLValidityPeriod = interface;
  IXMLBusinessChainSequence = interface;
  IXMLBusinessChainSequenceList = interface;
  IXMLDocumentRequiredInfo = interface;
  IXMLDocumentRequiredInfoList = interface;
  IXMLDeliveryMessageLineItem = interface;
  IXMLInventoryClass = interface;
  IXMLInventoryClassCode = interface;
  IXMLInventoryClassCodeList = interface;
  IXMLPackageInformationClass = interface;
  IXMLPackageInformationClassList = interface;
  IXMLPackageCharacteristics = interface;
  IXMLBaleItem = interface;
  IXMLBaleItemList = interface;
  IXMLBaleCharacteristics = interface;
  IXMLDateMade = interface;
  IXMLDateFinished = interface;
  IXMLBaleReference = interface;
  IXMLBaleReferenceList = interface;
  IXMLBoxItem = interface;
  IXMLBoxItemList = interface;
  IXMLReamItem = interface;
  IXMLReamItemList = interface;
  IXMLSheetItem = interface;
  IXMLSheetItemList = interface;
  IXMLDateSheeted = interface;
  IXMLUnitItem = interface;
  IXMLUnitItemList = interface;
  IXMLUnitReference = interface;
  IXMLUnitReferenceList = interface;
  IXMLBoxReference = interface;
  IXMLBoxReferenceList = interface;
  IXMLReelItem = interface;
  IXMLReelItemList = interface;
  IXMLDeliveryMessageReelCharacteristics = interface;
  IXMLMillJoinLocation = interface;
  IXMLMillJoinLocationList = interface;
  IXMLDateWound = interface;
  IXMLWoodItem = interface;
  IXMLWoodItemList = interface;
  IXMLPackageReference = interface;
  IXMLPackageReferenceList = interface;
  IXMLMeasuringSpecification = interface;
  IXMLMeasuringSpecificationList = interface;
  IXMLMeasuringLocation = interface;
  IXMLMeasuringUnitIdentifier = interface;
  IXMLMeasuringUnitIdentifierList = interface;
  IXMLMeasuringUnitBrandAndModel = interface;
  IXMLMeasuringEquipment = interface;
  IXMLMeasuringEquipmentList = interface;
  IXMLMeasuringEquipmentCode = interface;
  IXMLMeasuringEquipmentCodeList = interface;
  IXMLMeasurementModule = interface;
  IXMLCalibration = interface;
  IXMLCalibrationDate = interface;
  IXMLMeasuringReference = interface;
  IXMLMeasuringReferenceList = interface;
  IXMLMeasuringCodeInfo = interface;
  IXMLMeasuringCodeInfoList = interface;
  IXMLMeasuringCode = interface;
  IXMLMeasuringProduct = interface;
  IXMLMeasurementSpecification = interface;
  IXMLPropertySpecification = interface;
  IXMLPropertySpecificationList = interface;
  IXMLPropertySubSpecification = interface;
  IXMLPropertySubSpecificationList = interface;
  IXMLQuantitySpecification = interface;
  IXMLQuantitySpecificationList = interface;
  IXMLDeliveryMessageSummary = interface;
  IXMLDeliveryPlanningBucket = interface;
  IXMLTimePeriod = interface;
  IXMLPlanningOutcome = interface;
  IXMLPlanningOutcomeList = interface;
  IXMLPlanningPropertyValue = interface;
  IXMLPlanningPropertyValueList = interface;
  IXMLDeviationReason = interface;
  IXMLDeviationReasonList = interface;
  IXMLDeviationReasonCode = interface;
  IXMLPlanningReferenceInformation = interface;
  IXMLPlanningReferenceInformationList = interface;
  IXMLInvoiceDocument = interface;
  IXMLDocumentDate = interface;
  IXMLDeliverySchedule = interface;
  IXMLDeliveryScheduleList = interface;
  IXMLProductionStatus = interface;
  IXMLProductionLastDateOfChange = interface;
  IXMLDeliveryStatus = interface;
  IXMLDeliveryLastDateOfChange = interface;
  IXMLDeliveryScheduleReference = interface;
  IXMLDeliveryScheduleReferenceList = interface;
  IXMLGoodsReceiptHeader = interface;
  IXMLGoodsReceiptIssueDate = interface;
  IXMLGoodsReceiptArrivalDate = interface;
  IXMLGoodsReceiptUnloadDate = interface;
  IXMLGoodsReceiptReference = interface;
  IXMLGoodsReceiptReferenceList = interface;
  IXMLTransportationComment = interface;
  IXMLTransportationCommentList = interface;
  IXMLGoodsReceiptLineItem = interface;
  IXMLGoodsReceiptPackage = interface;
  IXMLGoodsReceiptPackageList = interface;
  IXMLGoodsReceiptSummary = interface;
  IXMLMeasurementWithText = interface;
  IXMLPlanningOutcomeBucket = interface;
  IXMLScaleHouse = interface;
  IXMLShippingInstructionsHeader = interface;
  IXMLShippingInstructionsInformation = interface;
  IXMLShippingInstructionsIssuedDate = interface;
  IXMLShippingInstructionsConfirmationIssuedDate = interface;
  IXMLShippingInstructionsReference = interface;
  IXMLShippingInstructionsReferenceList = interface;
  IXMLShippingInstructionsLineItemByProduct = interface;
  IXMLShipToInformation = interface;
  IXMLShipToInformationList = interface;
  IXMLShippingInstructionsLineItemByShipTo = interface;
  IXMLShippingInstructionsPurchaseOrderLineItem = interface;
  IXMLPackageIdentifier = interface;
  IXMLShippingInstructionsSummary = interface;
  IXMLTrimSize = interface;
  IXMLBookBlockBulk = interface;
  IXMLSpineSize = interface;
  IXMLPlywoodOSBSpeciesTypeList = interface;
  IXMLS60List = interface;
  IXMLS72List = interface;
  IXMLS20List = interface;
  IXMLNni1List = interface;
  IXMLReamTypeList = interface;
  IXMLRoadAvailabilityTypeList = interface;
  IXMLGlueExposureIDTypeList = interface;
  IXMLBooleanList = interface;
  IXMLS30List = interface;
  IXMLS255List = interface;

{ IXMLInvoiceWood }

  IXMLInvoiceWood = interface(IXMLNode)
    ['{0BCB4A29-D4E0-4BAA-BCCE-BAFB5E96ABB5}']
    { Property Accessors }
    function Get_InvoiceType: UnicodeString;
    function Get_InvoiceContextType: UnicodeString;
    function Get_Reissued: UnicodeString;
    function Get_Language: UnicodeString;
    function Get_InvoiceWoodHeader: IXMLInvoiceWoodHeader;
    function Get_InvoiceShipment: IXMLInvoiceShipmentList;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_InvoiceWoodSummary: IXMLInvoiceWoodSummary;
    procedure Set_InvoiceType(Value: UnicodeString);
    procedure Set_InvoiceContextType(Value: UnicodeString);
    procedure Set_Reissued(Value: UnicodeString);
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property InvoiceType: UnicodeString read Get_InvoiceType write Set_InvoiceType;
    property InvoiceContextType: UnicodeString read Get_InvoiceContextType write Set_InvoiceContextType;
    property Reissued: UnicodeString read Get_Reissued write Set_Reissued;
    property Language: UnicodeString read Get_Language write Set_Language;
    property InvoiceWoodHeader: IXMLInvoiceWoodHeader read Get_InvoiceWoodHeader;
    property InvoiceShipment: IXMLInvoiceShipmentList read Get_InvoiceShipment;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property InvoiceWoodSummary: IXMLInvoiceWoodSummary read Get_InvoiceWoodSummary;
  end;

{ IXMLInvoiceWoodHeader }

  IXMLInvoiceWoodHeader = interface(IXMLNode)
    ['{EBD1B5BE-710C-4E40-B4B6-5060D5E3A9D2}']
    { Property Accessors }
    function Get_InvoiceNumber: UnicodeString;
    function Get_InvoiceDate: IXMLInvoiceDate;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_InvoiceReference: IXMLInvoiceReferenceList;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_BuyerParty: IXMLParty;
    function Get_RemitToParty: IXMLPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_LocationParty: IXMLLocationPartyList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_CarrierParty: IXMLParty;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifier;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifier;
    function Get_Insurance: IXMLInsurance;
    function Get_CreditDebitNoteReason: IXMLCreditDebitNoteReason;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_InvoiceNumber(Value: UnicodeString);
    { Methods & Properties }
    property InvoiceNumber: UnicodeString read Get_InvoiceNumber write Set_InvoiceNumber;
    property InvoiceDate: IXMLInvoiceDate read Get_InvoiceDate;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property InvoiceReference: IXMLInvoiceReferenceList read Get_InvoiceReference;
    property BillToParty: IXMLParty read Get_BillToParty;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property BuyerParty: IXMLParty read Get_BuyerParty;
    property RemitToParty: IXMLPartyList read Get_RemitToParty;
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property SenderParty: IXMLTypedParty read Get_SenderParty;
    property ReceiverParty: IXMLTypedPartyList read Get_ReceiverParty;
    property LocationParty: IXMLLocationPartyList read Get_LocationParty;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property CarrierParty: IXMLParty read Get_CarrierParty;
    property TransportVehicleIdentifier: IXMLTransportVehicleIdentifier read Get_TransportVehicleIdentifier;
    property TransportUnitIdentifier: IXMLTransportUnitIdentifier read Get_TransportUnitIdentifier;
    property Insurance: IXMLInsurance read Get_Insurance;
    property CreditDebitNoteReason: IXMLCreditDebitNoteReason read Get_CreditDebitNoteReason;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLInvoiceDate }

  IXMLInvoiceDate = interface(IXMLNode)
    ['{EE8421A0-6ABC-4A25-A472-EB19DE317BB6}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDateBasis }

  IXMLDateBasis = interface(IXMLNode)
    ['{7B23A698-E863-496F-8310-BE3828F00D7F}']
    { Property Accessors }
    function Get_Year: UnicodeString;
    function Get_Month: LongWord;
    function Get_Day: LongWord;
    procedure Set_Year(Value: UnicodeString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Day(Value: LongWord);
    { Methods & Properties }
    property Year: UnicodeString read Get_Year write Set_Year;
    property Month: LongWord read Get_Month write Set_Month;
    property Day: LongWord read Get_Day write Set_Day;
  end;

{ IXMLOtherDate }

  IXMLOtherDate = interface(IXMLNode)
    ['{7ADDCC45-AB34-4621-91A5-0E9BACA53286}']
    { Property Accessors }
    function Get_DateType: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_Year: UnicodeString;
    function Get_YearMonth: UnicodeString;
    function Get_Week: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    procedure Set_DateType(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    procedure Set_Year(Value: UnicodeString);
    procedure Set_YearMonth(Value: UnicodeString);
    procedure Set_Week(Value: UnicodeString);
    { Methods & Properties }
    property DateType: UnicodeString read Get_DateType write Set_DateType;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
    property Year: UnicodeString read Get_Year write Set_Year;
    property YearMonth: UnicodeString read Get_YearMonth write Set_YearMonth;
    property Week: UnicodeString read Get_Week write Set_Week;
    property DateTimeRange: IXMLDateTimeRange read Get_DateTimeRange;
  end;

{ IXMLOtherDateList }

  IXMLOtherDateList = interface(IXMLNodeCollection)
    ['{8CEE0E97-B1F3-45E7-B6DE-CDAB5E2E7488}']
    { Methods & Properties }
    function Add: IXMLOtherDate;
    function Insert(const Index: Integer): IXMLOtherDate;

    function Get_Item(Index: Integer): IXMLOtherDate;
    property Items[Index: Integer]: IXMLOtherDate read Get_Item; default;
  end;

{ IXMLDateTimeRange }

  IXMLDateTimeRange = interface(IXMLNode)
    ['{5A1495E9-A983-4D4A-9F6A-EF1C3FD19C91}']
    { Property Accessors }
    function Get_DateTimeFrom: IXMLDateTimeFrom;
    function Get_DateTimeTo: IXMLDateTimeTo;
    { Methods & Properties }
    property DateTimeFrom: IXMLDateTimeFrom read Get_DateTimeFrom;
    property DateTimeTo: IXMLDateTimeTo read Get_DateTimeTo;
  end;

{ IXMLDateTimeRangeList }

  IXMLDateTimeRangeList = interface(IXMLNodeCollection)
    ['{17E6BE9F-C02F-4047-996A-B4D482E5F60E}']
    { Methods & Properties }
    function Add: IXMLDateTimeRange;
    function Insert(const Index: Integer): IXMLDateTimeRange;

    function Get_Item(Index: Integer): IXMLDateTimeRange;
    property Items[Index: Integer]: IXMLDateTimeRange read Get_Item; default;
  end;

{ IXMLDateTimeFrom }

  IXMLDateTimeFrom = interface(IXMLNode)
    ['{96A0AE04-0349-4413-B106-6804A4FA7F0C}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDateTimeTo }

  IXMLDateTimeTo = interface(IXMLNode)
    ['{047EF16B-0C4E-407B-AF20-A76B349C2340}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLInvoiceReference }

  IXMLInvoiceReference = interface(IXMLNode)
    ['{2900DB83-E00B-4EFA-8C1A-8E5D65F0F7CD}']
    { Property Accessors }
    function Get_InvoiceReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_InvoiceReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property InvoiceReferenceType: UnicodeString read Get_InvoiceReferenceType write Set_InvoiceReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLInvoiceReferenceList }

  IXMLInvoiceReferenceList = interface(IXMLNodeCollection)
    ['{4482F57B-9A83-44DE-AD43-1646CE3703BA}']
    { Methods & Properties }
    function Add: IXMLInvoiceReference;
    function Insert(const Index: Integer): IXMLInvoiceReference;

    function Get_Item(Index: Integer): IXMLInvoiceReference;
    property Items[Index: Integer]: IXMLInvoiceReference read Get_Item; default;
  end;

{ IXMLParty }

  IXMLParty = interface(IXMLNode)
    ['{B59F9A7B-7442-46BE-9653-EBDA8BB2EC89}']
    { Property Accessors }
    function Get_LogisticsRole: UnicodeString;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_NameAddress: IXMLNameAddress;
    function Get_URL: IXMLURL;
    function Get_CommonContact: IXMLCommonContactList;
    procedure Set_LogisticsRole(Value: UnicodeString);
    { Methods & Properties }
    property LogisticsRole: UnicodeString read Get_LogisticsRole write Set_LogisticsRole;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property NameAddress: IXMLNameAddress read Get_NameAddress;
    property URL: IXMLURL read Get_URL;
    property CommonContact: IXMLCommonContactList read Get_CommonContact;
  end;

{ IXMLPartyList }

  IXMLPartyList = interface(IXMLNodeCollection)
    ['{32B89182-57AB-4F6D-A9CF-E1C2FF46BDAD}']
    { Methods & Properties }
    function Add: IXMLParty;
    function Insert(const Index: Integer): IXMLParty;

    function Get_Item(Index: Integer): IXMLParty;
    property Items[Index: Integer]: IXMLParty read Get_Item; default;
  end;

{ IXMLPartyIdentifier }

  IXMLPartyIdentifier = interface(IXMLNode)
    ['{92BF7BAE-756E-4BB7-9A94-5C93535B4F5D}']
    { Property Accessors }
    function Get_PartyIdentifierType: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_PartyIdentifierType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property PartyIdentifierType: UnicodeString read Get_PartyIdentifierType write Set_PartyIdentifierType;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLPartyIdentifierList }

  IXMLPartyIdentifierList = interface(IXMLNodeCollection)
    ['{E03DDC6B-4B54-457D-BA1E-0009A862FF8A}']
    { Methods & Properties }
    function Add: IXMLPartyIdentifier;
    function Insert(const Index: Integer): IXMLPartyIdentifier;

    function Get_Item(Index: Integer): IXMLPartyIdentifier;
    property Items[Index: Integer]: IXMLPartyIdentifier read Get_Item; default;
  end;

{ IXMLNameAddress }

  IXMLNameAddress = interface(IXMLNode)
    ['{9B80C3F2-3E8E-438A-84E4-11C79B5CDE2F}']
    { Property Accessors }
    function Get_CommunicationRole: UnicodeString;
    function Get_AddressRoleType: UnicodeString;
    function Get_Name1: UnicodeString;
    function Get_Name2: UnicodeString;
    function Get_Name3: UnicodeString;
    function Get_OrganisationUnit: IXMLOrganisationUnit;
    function Get_Address1: UnicodeString;
    function Get_Address2: UnicodeString;
    function Get_Address3: UnicodeString;
    function Get_Address4: UnicodeString;
    function Get_City: UnicodeString;
    function Get_County: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_PostalCode: IXMLPostalCode;
    function Get_Country: IXMLCountry;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_CommunicationRole(Value: UnicodeString);
    procedure Set_AddressRoleType(Value: UnicodeString);
    procedure Set_Name1(Value: UnicodeString);
    procedure Set_Name2(Value: UnicodeString);
    procedure Set_Name3(Value: UnicodeString);
    procedure Set_Address1(Value: UnicodeString);
    procedure Set_Address2(Value: UnicodeString);
    procedure Set_Address3(Value: UnicodeString);
    procedure Set_Address4(Value: UnicodeString);
    procedure Set_City(Value: UnicodeString);
    procedure Set_County(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_PostalCode(Value: IXMLPostalCode);
    { Methods & Properties }
    property CommunicationRole: UnicodeString read Get_CommunicationRole write Set_CommunicationRole;
    property AddressRoleType: UnicodeString read Get_AddressRoleType write Set_AddressRoleType;
    property Name1: UnicodeString read Get_Name1 write Set_Name1;
    property Name2: UnicodeString read Get_Name2 write Set_Name2;
    property Name3: UnicodeString read Get_Name3 write Set_Name3;
    property OrganisationUnit: IXMLOrganisationUnit read Get_OrganisationUnit;
    property Address1: UnicodeString read Get_Address1 write Set_Address1;
    property Address2: UnicodeString read Get_Address2 write Set_Address2;
    property Address3: UnicodeString read Get_Address3 write Set_Address3;
    property Address4: UnicodeString read Get_Address4 write Set_Address4;
    property City: UnicodeString read Get_City write Set_City;
    property County: UnicodeString read Get_County write Set_County;
    property StateOrProvince: UnicodeString read Get_StateOrProvince write Set_StateOrProvince;
    property PostalCode: IXMLPostalCode read Get_PostalCode write Set_PostalCode;
    property Country: IXMLCountry read Get_Country;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
  end;

{ IXMLOrganisationUnit }

  IXMLOrganisationUnit = interface(IXMLNode)
    ['{FDF29410-D5F4-4BA0-9E13-1AF4291BEF54}']
    { Property Accessors }
    function Get_OrganisationUnitType: UnicodeString;
    function Get_OrganisationUnitName: UnicodeString;
    function Get_OrganisationUnitCode: UnicodeString;
    procedure Set_OrganisationUnitType(Value: UnicodeString);
    procedure Set_OrganisationUnitName(Value: UnicodeString);
    procedure Set_OrganisationUnitCode(Value: UnicodeString);
    { Methods & Properties }
    property OrganisationUnitType: UnicodeString read Get_OrganisationUnitType write Set_OrganisationUnitType;
    property OrganisationUnitName: UnicodeString read Get_OrganisationUnitName write Set_OrganisationUnitName;
    property OrganisationUnitCode: UnicodeString read Get_OrganisationUnitCode write Set_OrganisationUnitCode;
  end;

{ IXMLPostalCode }

  IXMLPostalCode = interface(IXMLNode)
    ['{EA5A3FD7-2ABC-4118-9F09-DD94DCEC337C}']
  end;

{ IXMLCountry }

  IXMLCountry = interface(IXMLNode)
    ['{7C0DD13E-F553-4D73-84E7-5446B7795D13}']
    { Property Accessors }
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    { Methods & Properties }
    property ISOCountryCode: UnicodeString read Get_ISOCountryCode write Set_ISOCountryCode;
    property ISOCountryCodeAlpha3: UnicodeString read Get_ISOCountryCodeAlpha3 write Set_ISOCountryCodeAlpha3;
    property ISOCountryCodeNumeric: UnicodeString read Get_ISOCountryCodeNumeric write Set_ISOCountryCodeNumeric;
  end;

{ IXMLGPSCoordinates }

  IXMLGPSCoordinates = interface(IXMLNode)
    ['{803CDE19-74C2-4818-9C18-A30324C0D33B}']
    { Property Accessors }
    function Get_GPSSystem: UnicodeString;
    function Get_Latitude: Double;
    function Get_Longitude: Double;
    function Get_Height: IXMLMeasurement;
    procedure Set_GPSSystem(Value: UnicodeString);
    procedure Set_Latitude(Value: Double);
    procedure Set_Longitude(Value: Double);
    { Methods & Properties }
    property GPSSystem: UnicodeString read Get_GPSSystem write Set_GPSSystem;
    property Latitude: Double read Get_Latitude write Set_Latitude;
    property Longitude: Double read Get_Longitude write Set_Longitude;
    property Height: IXMLMeasurement read Get_Height;
  end;

{ IXMLMeasurement }

  IXMLMeasurement = interface(IXMLNode)
    ['{EF89FC62-DE56-487D-86E1-339991571F5C}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLMeasurementList }

  IXMLMeasurementList = interface(IXMLNodeCollection)
    ['{F68BE614-3371-4174-B79D-648F1309B47F}']
    { Methods & Properties }
    function Add: IXMLMeasurement;
    function Insert(const Index: Integer): IXMLMeasurement;

    function Get_Item(Index: Integer): IXMLMeasurement;
    property Items[Index: Integer]: IXMLMeasurement read Get_Item; default;
  end;

{ IXMLValue }

  IXMLValue = interface(IXMLNode)
    ['{6A866434-AB6A-407A-AA7C-75B4B97C39A2}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLRangeMin }

  IXMLRangeMin = interface(IXMLNode)
    ['{58A39667-9EC2-4367-9339-BF4881E54E80}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLRangeMax }

  IXMLRangeMax = interface(IXMLNode)
    ['{B9DABB7A-EA6B-4FAB-8F62-6637C95D99F3}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLMapCoordinates }

  IXMLMapCoordinates = interface(IXMLNode)
    ['{38765C90-1984-4CC0-B4FB-8174C6682C66}']
    { Property Accessors }
    function Get_MapReferenceSystem: UnicodeString;
    function Get_MapCoordinateType: UnicodeString;
    function Get_MapAreaBorderType: UnicodeString;
    function Get_Coordinates: IXMLCoordinatesList;
    function Get_Altitude: IXMLMeasurementList;
    procedure Set_MapReferenceSystem(Value: UnicodeString);
    procedure Set_MapCoordinateType(Value: UnicodeString);
    procedure Set_MapAreaBorderType(Value: UnicodeString);
    { Methods & Properties }
    property MapReferenceSystem: UnicodeString read Get_MapReferenceSystem write Set_MapReferenceSystem;
    property MapCoordinateType: UnicodeString read Get_MapCoordinateType write Set_MapCoordinateType;
    property MapAreaBorderType: UnicodeString read Get_MapAreaBorderType write Set_MapAreaBorderType;
    property Coordinates: IXMLCoordinatesList read Get_Coordinates;
    property Altitude: IXMLMeasurementList read Get_Altitude;
  end;

{ IXMLMapCoordinatesList }

  IXMLMapCoordinatesList = interface(IXMLNodeCollection)
    ['{0E580C8D-EBB4-46E8-BF02-A571585B85CE}']
    { Methods & Properties }
    function Add: IXMLMapCoordinates;
    function Insert(const Index: Integer): IXMLMapCoordinates;

    function Get_Item(Index: Integer): IXMLMapCoordinates;
    property Items[Index: Integer]: IXMLMapCoordinates read Get_Item; default;
  end;

{ IXMLCoordinates }

  IXMLCoordinates = interface(IXMLNode)
    ['{F1E72C87-1CE4-4740-9C3A-4BE250A84455}']
    { Property Accessors }
    function Get_CoordinateFormatType: UnicodeString;
    function Get_CoordinateDisplayOrder: LongWord;
    procedure Set_CoordinateFormatType(Value: UnicodeString);
    procedure Set_CoordinateDisplayOrder(Value: LongWord);
    { Methods & Properties }
    property CoordinateFormatType: UnicodeString read Get_CoordinateFormatType write Set_CoordinateFormatType;
    property CoordinateDisplayOrder: LongWord read Get_CoordinateDisplayOrder write Set_CoordinateDisplayOrder;
  end;

{ IXMLCoordinatesList }

  IXMLCoordinatesList = interface(IXMLNodeCollection)
    ['{8F76F1F4-C6CC-4E2C-84AF-6CC49C382E4C}']
    { Methods & Properties }
    function Add: IXMLCoordinates;
    function Insert(const Index: Integer): IXMLCoordinates;

    function Get_Item(Index: Integer): IXMLCoordinates;
    property Items[Index: Integer]: IXMLCoordinates read Get_Item; default;
  end;

{ IXMLURL }

  IXMLURL = interface(IXMLNode)
    ['{C7BFABBC-D392-43D6-B977-084EE7705FF2}']
    { Property Accessors }
    function Get_URLContext: UnicodeString;
    procedure Set_URLContext(Value: UnicodeString);
    { Methods & Properties }
    property URLContext: UnicodeString read Get_URLContext write Set_URLContext;
  end;

{ IXMLURLList }

  IXMLURLList = interface(IXMLNodeCollection)
    ['{BF127326-9D54-4A8A-AA0A-FF46751B57A8}']
    { Methods & Properties }
    function Add: IXMLURL;
    function Insert(const Index: Integer): IXMLURL;

    function Get_Item(Index: Integer): IXMLURL;
    property Items[Index: Integer]: IXMLURL read Get_Item; default;
  end;

{ IXMLCommonContact }

  IXMLCommonContact = interface(IXMLNode)
    ['{1CDA3203-0465-4EFA-9171-AE4FE80CB82B}']
    { Property Accessors }
    function Get_ContactType: UnicodeString;
    function Get_ContactName: UnicodeString;
    function Get_ContactIdentifier: IXMLContactIdentifier;
    function Get_Telephone: UnicodeString;
    function Get_MobilePhone: UnicodeString;
    function Get_Email: UnicodeString;
    function Get_Fax: UnicodeString;
    function Get_ContactAvailability: IXMLContactAvailabilityList;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_ContactType(Value: UnicodeString);
    procedure Set_ContactName(Value: UnicodeString);
    procedure Set_Telephone(Value: UnicodeString);
    procedure Set_MobilePhone(Value: UnicodeString);
    procedure Set_Email(Value: UnicodeString);
    procedure Set_Fax(Value: UnicodeString);
    { Methods & Properties }
    property ContactType: UnicodeString read Get_ContactType write Set_ContactType;
    property ContactName: UnicodeString read Get_ContactName write Set_ContactName;
    property ContactIdentifier: IXMLContactIdentifier read Get_ContactIdentifier;
    property Telephone: UnicodeString read Get_Telephone write Set_Telephone;
    property MobilePhone: UnicodeString read Get_MobilePhone write Set_MobilePhone;
    property Email: UnicodeString read Get_Email write Set_Email;
    property Fax: UnicodeString read Get_Fax write Set_Fax;
    property ContactAvailability: IXMLContactAvailabilityList read Get_ContactAvailability;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
  end;

{ IXMLCommonContactList }

  IXMLCommonContactList = interface(IXMLNodeCollection)
    ['{46A3939B-5D8A-4C26-9E38-524F1F367BD8}']
    { Methods & Properties }
    function Add: IXMLCommonContact;
    function Insert(const Index: Integer): IXMLCommonContact;

    function Get_Item(Index: Integer): IXMLCommonContact;
    property Items[Index: Integer]: IXMLCommonContact read Get_Item; default;
  end;

{ IXMLContactIdentifier }

  IXMLContactIdentifier = interface(IXMLNode)
    ['{34098C55-C6D0-43AB-A94E-B110252B919D}']
    { Property Accessors }
    function Get_ContactIdentifierType: UnicodeString;
    procedure Set_ContactIdentifierType(Value: UnicodeString);
    { Methods & Properties }
    property ContactIdentifierType: UnicodeString read Get_ContactIdentifierType write Set_ContactIdentifierType;
  end;

{ IXMLContactAvailability }

  IXMLContactAvailability = interface(IXMLNode)
    ['{DC326ED9-19A3-4850-BFB3-597466C215BC}']
    { Property Accessors }
    function Get_CalendarPeriod: UnicodeString;
    function Get_IsTimeSlotAvailable: UnicodeString;
    function Get_TimeSlot: IXMLTimeSlotList;
    function Get_DateTimeRange: IXMLDateTimeRangeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CalendarPeriod(Value: UnicodeString);
    procedure Set_IsTimeSlotAvailable(Value: UnicodeString);
    { Methods & Properties }
    property CalendarPeriod: UnicodeString read Get_CalendarPeriod write Set_CalendarPeriod;
    property IsTimeSlotAvailable: UnicodeString read Get_IsTimeSlotAvailable write Set_IsTimeSlotAvailable;
    property TimeSlot: IXMLTimeSlotList read Get_TimeSlot;
    property DateTimeRange: IXMLDateTimeRangeList read Get_DateTimeRange;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLContactAvailabilityList }

  IXMLContactAvailabilityList = interface(IXMLNodeCollection)
    ['{08BFDCB6-B264-442D-8217-5A2E62965823}']
    { Methods & Properties }
    function Add: IXMLContactAvailability;
    function Insert(const Index: Integer): IXMLContactAvailability;

    function Get_Item(Index: Integer): IXMLContactAvailability;
    property Items[Index: Integer]: IXMLContactAvailability read Get_Item; default;
  end;

{ IXMLTimeSlot }

  IXMLTimeSlot = interface(IXMLNode)
    ['{B6A910E1-6C7E-494C-B41D-AA4B348DF770}']
    { Property Accessors }
    function Get_From: UnicodeString;
    function Get_To_: UnicodeString;
    procedure Set_From(Value: UnicodeString);
    procedure Set_To_(Value: UnicodeString);
    { Methods & Properties }
    property From: UnicodeString read Get_From write Set_From;
    property To_: UnicodeString read Get_To_ write Set_To_;
  end;

{ IXMLTimeSlotList }

  IXMLTimeSlotList = interface(IXMLNodeCollection)
    ['{FE0F4D8E-FB37-49F2-A05E-D5AF5715FEA7}']
    { Methods & Properties }
    function Add: IXMLTimeSlot;
    function Insert(const Index: Integer): IXMLTimeSlot;

    function Get_Item(Index: Integer): IXMLTimeSlot;
    property Items[Index: Integer]: IXMLTimeSlot read Get_Item; default;
  end;

{ IXMLShipToCharacteristics }

  IXMLShipToCharacteristics = interface(IXMLNode)
    ['{9A494238-9B35-45FA-BC05-44666A28C218}']
    { Property Accessors }
    function Get_ShipToParty: IXMLTypedParty;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_LocationCode: IXMLLocationCode;
    function Get_TermsOfDelivery: IXMLTermsOfDelivery;
    function Get_DeliveryRouteCode: IXMLDeliveryRouteCode;
    { Methods & Properties }
    property ShipToParty: IXMLTypedParty read Get_ShipToParty;
    property SupplyPoint: IXMLSupplyPointList read Get_SupplyPoint;
    property LocationCode: IXMLLocationCode read Get_LocationCode;
    property TermsOfDelivery: IXMLTermsOfDelivery read Get_TermsOfDelivery;
    property DeliveryRouteCode: IXMLDeliveryRouteCode read Get_DeliveryRouteCode;
  end;

{ IXMLTypedParty }

  IXMLTypedParty = interface(IXMLParty)
    ['{53DF92C9-BE7A-4767-BE3B-93E439ACED9D}']
    { Property Accessors }
    function Get_PartyType: UnicodeString;
    procedure Set_PartyType(Value: UnicodeString);
    { Methods & Properties }
    property PartyType: UnicodeString read Get_PartyType write Set_PartyType;
  end;

{ IXMLTypedPartyList }

  IXMLTypedPartyList = interface(IXMLNodeCollection)
    ['{849F9FD6-6A12-4AAA-BE1B-060820F183CC}']
    { Methods & Properties }
    function Add: IXMLTypedParty;
    function Insert(const Index: Integer): IXMLTypedParty;

    function Get_Item(Index: Integer): IXMLTypedParty;
    property Items[Index: Integer]: IXMLTypedParty read Get_Item; default;
  end;

{ IXMLSupplyPoint }

  IXMLSupplyPoint = interface(IXMLNode)
    ['{98E26530-C32A-438D-87C0-B550B3DA0594}']
    { Property Accessors }
    function Get_LocationType: UnicodeString;
    function Get_SupplyPointCode: IXMLSupplyPointCodeList;
    function Get_SupplyPointDescription: IXMLS255List;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    function Get_SupplyPointCharacteristics: IXMLSupplyPointCharacteristics;
    procedure Set_LocationType(Value: UnicodeString);
    { Methods & Properties }
    property LocationType: UnicodeString read Get_LocationType write Set_LocationType;
    property SupplyPointCode: IXMLSupplyPointCodeList read Get_SupplyPointCode;
    property SupplyPointDescription: IXMLS255List read Get_SupplyPointDescription;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
    property SupplyPointCharacteristics: IXMLSupplyPointCharacteristics read Get_SupplyPointCharacteristics;
  end;

{ IXMLSupplyPointList }

  IXMLSupplyPointList = interface(IXMLNodeCollection)
    ['{28F20E43-4F73-4D67-8A94-7703C184681A}']
    { Methods & Properties }
    function Add: IXMLSupplyPoint;
    function Insert(const Index: Integer): IXMLSupplyPoint;

    function Get_Item(Index: Integer): IXMLSupplyPoint;
    property Items[Index: Integer]: IXMLSupplyPoint read Get_Item; default;
  end;

{ IXMLSupplyPointCode }

  IXMLSupplyPointCode = interface(IXMLNode)
    ['{46B051D7-71AB-4FBF-9D9E-6A188D4F99D2}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLSupplyPointCodeList }

  IXMLSupplyPointCodeList = interface(IXMLNodeCollection)
    ['{F68DCC94-5615-470C-9471-2C7E58E3CF65}']
    { Methods & Properties }
    function Add: IXMLSupplyPointCode;
    function Insert(const Index: Integer): IXMLSupplyPointCode;

    function Get_Item(Index: Integer): IXMLSupplyPointCode;
    property Items[Index: Integer]: IXMLSupplyPointCode read Get_Item; default;
  end;

{ IXMLSupplyPointCharacteristics }

  IXMLSupplyPointCharacteristics = interface(IXMLNode)
    ['{043BFD74-3C27-4073-BB4B-9642DB4625E6}']
    { Property Accessors }
    function Get_SupplyPointProperty: IXMLSupplyPointPropertyList;
    function Get_QuantityInformation: IXMLQuantityInformation;
    function Get_MapPoint: IXMLMapPointList;
    function Get_AreaInfo: IXMLAreaInfoList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    { Methods & Properties }
    property SupplyPointProperty: IXMLSupplyPointPropertyList read Get_SupplyPointProperty;
    property QuantityInformation: IXMLQuantityInformation read Get_QuantityInformation;
    property MapPoint: IXMLMapPointList read Get_MapPoint;
    property AreaInfo: IXMLAreaInfoList read Get_AreaInfo;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
  end;

{ IXMLSupplyPointProperty }

  IXMLSupplyPointProperty = interface(IXMLNode)
    ['{BAE0CD93-A1F9-4287-875C-D9181A7396B3}']
    { Property Accessors }
    function Get_SupplyPointPropertyCode: IXMLSupplyPointPropertyCode;
    function Get_SupplyPointPropertyCodeValue: IXMLSupplyPointPropertyCodeValue;
    function Get_SupplyPointPropertyDescription: IXMLS255List;
    { Methods & Properties }
    property SupplyPointPropertyCode: IXMLSupplyPointPropertyCode read Get_SupplyPointPropertyCode;
    property SupplyPointPropertyCodeValue: IXMLSupplyPointPropertyCodeValue read Get_SupplyPointPropertyCodeValue;
    property SupplyPointPropertyDescription: IXMLS255List read Get_SupplyPointPropertyDescription;
  end;

{ IXMLSupplyPointPropertyList }

  IXMLSupplyPointPropertyList = interface(IXMLNodeCollection)
    ['{5F5A1266-423C-4A59-99B9-3D5E6DA987FB}']
    { Methods & Properties }
    function Add: IXMLSupplyPointProperty;
    function Insert(const Index: Integer): IXMLSupplyPointProperty;

    function Get_Item(Index: Integer): IXMLSupplyPointProperty;
    property Items[Index: Integer]: IXMLSupplyPointProperty read Get_Item; default;
  end;

{ IXMLSupplyPointPropertyCode }

  IXMLSupplyPointPropertyCode = interface(IXMLNode)
    ['{EBB88281-EFE9-4CDB-818A-A2C4FEFB05E2}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLSupplyPointPropertyCodeValue }

  IXMLSupplyPointPropertyCodeValue = interface(IXMLNode)
    ['{89BAE1A0-3909-44E1-AA17-AE1E3CB1A6B7}']
    { Property Accessors }
    function Get_BooleanValue: Boolean;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
  end;

{ IXMLDetailMeasurement }

  IXMLDetailMeasurement = interface(IXMLNode)
    ['{41C9ABD2-F4F1-4DFE-AA35-C5D65FA4BB31}']
    { Property Accessors }
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_SampleSize(Value: LongWord);
    { Methods & Properties }
    property DetailValue: IXMLDetailValue read Get_DetailValue;
    property DetailRangeMin: IXMLDetailRangeMin read Get_DetailRangeMin;
    property DetailRangeMax: IXMLDetailRangeMax read Get_DetailRangeMax;
    property StandardDeviation: IXMLStandardDeviation read Get_StandardDeviation;
    property SampleSize: LongWord read Get_SampleSize write Set_SampleSize;
    property TwoSigmaLower: IXMLTwoSigmaLower read Get_TwoSigmaLower;
    property TwoSigmaUpper: IXMLTwoSigmaUpper read Get_TwoSigmaUpper;
  end;

{ IXMLDetailValue }

  IXMLDetailValue = interface(IXMLNode)
    ['{49DE069A-9D22-4518-880C-D50934F36080}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLDetailRangeMin }

  IXMLDetailRangeMin = interface(IXMLNode)
    ['{A62A020F-687E-4C8C-9D8C-E22F8DE670BD}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLDetailRangeMax }

  IXMLDetailRangeMax = interface(IXMLNode)
    ['{8BB1E008-9114-4DE4-811E-16CE5C63B37E}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLStandardDeviation }

  IXMLStandardDeviation = interface(IXMLNode)
    ['{35253376-EA63-41BD-82AE-B98820BC7B29}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLTwoSigmaLower }

  IXMLTwoSigmaLower = interface(IXMLNode)
    ['{93095F93-2283-46A4-805D-9DCE68076462}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLTwoSigmaUpper }

  IXMLTwoSigmaUpper = interface(IXMLNode)
    ['{CD62CB3F-2977-496E-A986-CC8D8C9E5F79}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLQuantityInformation }

  IXMLQuantityInformation = interface(IXMLNode)
    ['{B3AAE85D-4752-4EC4-822F-4386B0F20685}']
    { Property Accessors }
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    { Methods & Properties }
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLQuantity }

  IXMLQuantity = interface(IXMLMeasurement)
    ['{B71A75E2-2672-4879-BD94-D99F1E496405}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
  end;

{ IXMLInformationalQuantity }

  IXMLInformationalQuantity = interface(IXMLMeasurement)
    ['{28A66B2B-ADC9-4E84-B21C-0D702C52FC16}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
  end;

{ IXMLInformationalQuantityList }

  IXMLInformationalQuantityList = interface(IXMLNodeCollection)
    ['{BA63695E-7186-412E-9184-83BF2D6AE383}']
    { Methods & Properties }
    function Add: IXMLInformationalQuantity;
    function Insert(const Index: Integer): IXMLInformationalQuantity;

    function Get_Item(Index: Integer): IXMLInformationalQuantity;
    property Items[Index: Integer]: IXMLInformationalQuantity read Get_Item; default;
  end;

{ IXMLMapPoint }

  IXMLMapPoint = interface(IXMLNode)
    ['{A1D12196-6608-42F9-8EDE-CE54AA01F91D}']
    { Property Accessors }
    function Get_MapPointType: UnicodeString;
    function Get_MapPointDisplayType: UnicodeString;
    function Get_MapPointName: UnicodeString;
    function Get_MapPointID: IXMLMapPointIDList;
    function Get_MapPointComment: IXMLS255List;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_MapPointType(Value: UnicodeString);
    procedure Set_MapPointDisplayType(Value: UnicodeString);
    procedure Set_MapPointName(Value: UnicodeString);
    { Methods & Properties }
    property MapPointType: UnicodeString read Get_MapPointType write Set_MapPointType;
    property MapPointDisplayType: UnicodeString read Get_MapPointDisplayType write Set_MapPointDisplayType;
    property MapPointName: UnicodeString read Get_MapPointName write Set_MapPointName;
    property MapPointID: IXMLMapPointIDList read Get_MapPointID;
    property MapPointComment: IXMLS255List read Get_MapPointComment;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
  end;

{ IXMLMapPointList }

  IXMLMapPointList = interface(IXMLNodeCollection)
    ['{3F90282F-1F33-4E2A-B8DA-5E31E18BF09D}']
    { Methods & Properties }
    function Add: IXMLMapPoint;
    function Insert(const Index: Integer): IXMLMapPoint;

    function Get_Item(Index: Integer): IXMLMapPoint;
    property Items[Index: Integer]: IXMLMapPoint read Get_Item; default;
  end;

{ IXMLMapPointID }

  IXMLMapPointID = interface(IXMLNode)
    ['{54FF4745-DD65-4010-BDB1-85922DDE348E}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLMapPointIDList }

  IXMLMapPointIDList = interface(IXMLNodeCollection)
    ['{C7915498-5F49-4D77-B300-DB67734A3B6C}']
    { Methods & Properties }
    function Add: IXMLMapPointID;
    function Insert(const Index: Integer): IXMLMapPointID;

    function Get_Item(Index: Integer): IXMLMapPointID;
    property Items[Index: Integer]: IXMLMapPointID read Get_Item; default;
  end;

{ IXMLAreaInfo }

  IXMLAreaInfo = interface(IXMLNode)
    ['{C4A0BE98-E306-43F1-807A-8FFAFF62A3EE}']
    { Property Accessors }
    function Get_AreaProperty: IXMLCodeInfoList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_PropertyValue: IXMLPropertyValueList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property AreaProperty: IXMLCodeInfoList read Get_AreaProperty;
    property MapPoint: IXMLMapPointList read Get_MapPoint;
    property PropertyValue: IXMLPropertyValueList read Get_PropertyValue;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLAreaInfoList }

  IXMLAreaInfoList = interface(IXMLNodeCollection)
    ['{C5B8947E-02A8-49A7-9182-9F5F515B11AC}']
    { Methods & Properties }
    function Add: IXMLAreaInfo;
    function Insert(const Index: Integer): IXMLAreaInfo;

    function Get_Item(Index: Integer): IXMLAreaInfo;
    property Items[Index: Integer]: IXMLAreaInfo read Get_Item; default;
  end;

{ IXMLCodeInfo }

  IXMLCodeInfo = interface(IXMLNode)
    ['{C247E413-0EAF-46DB-BE5E-26989EAFC14F}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    function Get_Code: UnicodeString;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_Code(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property Code: UnicodeString read Get_Code write Set_Code;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property CodeDescription: IXMLS255List read Get_CodeDescription;
  end;

{ IXMLCodeInfoList }

  IXMLCodeInfoList = interface(IXMLNodeCollection)
    ['{8A17D025-E108-44DF-A5A4-98171DEB82D9}']
    { Methods & Properties }
    function Add: IXMLCodeInfo;
    function Insert(const Index: Integer): IXMLCodeInfo;

    function Get_Item(Index: Integer): IXMLCodeInfo;
    property Items[Index: Integer]: IXMLCodeInfo read Get_Item; default;
  end;

{ IXMLCodeValue }

  IXMLCodeValue = interface(IXMLNode)
    ['{CD8910FC-6B8B-45BA-B785-8E8C01CA8531}']
    { Property Accessors }
    function Get_BooleanValue: Boolean;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
  end;

{ IXMLCodeValueList }

  IXMLCodeValueList = interface(IXMLNodeCollection)
    ['{D9ECABDC-5B03-4980-B368-71B75FFBA01C}']
    { Methods & Properties }
    function Add: IXMLCodeValue;
    function Insert(const Index: Integer): IXMLCodeValue;

    function Get_Item(Index: Integer): IXMLCodeValue;
    property Items[Index: Integer]: IXMLCodeValue read Get_Item; default;
  end;

{ IXMLPropertyValue }

  IXMLPropertyValue = interface(IXMLNode)
    ['{28C4EE25-BB98-4FCB-BC55-A90DB261BA0E}']
    { Property Accessors }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_IsAverageValue: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    function Get_PropertySubValue: IXMLPropertySubValueList;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_IsAverageValue(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property PropertyType: UnicodeString read Get_PropertyType write Set_PropertyType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
    property IsAverageValue: UnicodeString read Get_IsAverageValue write Set_IsAverageValue;
    property ItemType: UnicodeString read Get_ItemType write Set_ItemType;
    property PositionOnItem: IXMLPositionOnItem read Get_PositionOnItem;
    property BinaryValue: UnicodeString read Get_BinaryValue write Set_BinaryValue;
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property DateTimeValue: UnicodeString read Get_DateTimeValue write Set_DateTimeValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
    property PropertySubValue: IXMLPropertySubValueList read Get_PropertySubValue;
  end;

{ IXMLPropertyValueList }

  IXMLPropertyValueList = interface(IXMLNodeCollection)
    ['{06777361-C8B3-4498-883D-CFF7C2C5EB1E}']
    { Methods & Properties }
    function Add: IXMLPropertyValue;
    function Insert(const Index: Integer): IXMLPropertyValue;

    function Get_Item(Index: Integer): IXMLPropertyValue;
    property Items[Index: Integer]: IXMLPropertyValue read Get_Item; default;
  end;

{ IXMLPositionOnItem }

  IXMLPositionOnItem = interface(IXMLNode)
    ['{AC25A25B-E091-4945-A2E7-1C416D7FA43F}']
    { Property Accessors }
    function Get_PositionMeasuredFrom: UnicodeString;
    function Get_UOM: UnicodeString;
    procedure Set_PositionMeasuredFrom(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property PositionMeasuredFrom: UnicodeString read Get_PositionMeasuredFrom write Set_PositionMeasuredFrom;
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLPropertySubValue }

  IXMLPropertySubValue = interface(IXMLNode)
    ['{81A04753-C351-4BE6-BEFA-629B5A22597F}']
    { Property Accessors }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_IsAverageValue: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_IsAverageValue(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property PropertyType: UnicodeString read Get_PropertyType write Set_PropertyType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
    property IsAverageValue: UnicodeString read Get_IsAverageValue write Set_IsAverageValue;
    property ItemType: UnicodeString read Get_ItemType write Set_ItemType;
    property PositionOnItem: IXMLPositionOnItem read Get_PositionOnItem;
    property BinaryValue: UnicodeString read Get_BinaryValue write Set_BinaryValue;
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property DateTimeValue: UnicodeString read Get_DateTimeValue write Set_DateTimeValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
  end;

{ IXMLPropertySubValueList }

  IXMLPropertySubValueList = interface(IXMLNodeCollection)
    ['{BB3A7CAB-4FB8-4866-A18E-727CA860C373}']
    { Methods & Properties }
    function Add: IXMLPropertySubValue;
    function Insert(const Index: Integer): IXMLPropertySubValue;

    function Get_Item(Index: Integer): IXMLPropertySubValue;
    property Items[Index: Integer]: IXMLPropertySubValue read Get_Item; default;
  end;

{ IXMLEAttachment }

  IXMLEAttachment = interface(IXMLNode)
    ['{1B3A2391-B487-4144-B4E3-7B5DE54E906A}']
    { Property Accessors }
    function Get_AttachmentFileName: IXMLAttachmentFileNameList;
    function Get_NumberOfAttachments: LongWord;
    function Get_URL: IXMLURLList;
    procedure Set_NumberOfAttachments(Value: LongWord);
    { Methods & Properties }
    property AttachmentFileName: IXMLAttachmentFileNameList read Get_AttachmentFileName;
    property NumberOfAttachments: LongWord read Get_NumberOfAttachments write Set_NumberOfAttachments;
    property URL: IXMLURLList read Get_URL;
  end;

{ IXMLAttachmentFileName }

  IXMLAttachmentFileName = interface(IXMLNode)
    ['{84892233-E776-476B-BC6D-4391909A4303}']
    { Property Accessors }
    function Get_AttachmentContext: UnicodeString;
    procedure Set_AttachmentContext(Value: UnicodeString);
    { Methods & Properties }
    property AttachmentContext: UnicodeString read Get_AttachmentContext write Set_AttachmentContext;
  end;

{ IXMLAttachmentFileNameList }

  IXMLAttachmentFileNameList = interface(IXMLNodeCollection)
    ['{6B277C40-84FD-41D5-816A-41059EB2A5C6}']
    { Methods & Properties }
    function Add: IXMLAttachmentFileName;
    function Insert(const Index: Integer): IXMLAttachmentFileName;

    function Get_Item(Index: Integer): IXMLAttachmentFileName;
    property Items[Index: Integer]: IXMLAttachmentFileName read Get_Item; default;
  end;

{ IXMLDocumentReferenceInformation }

  IXMLDocumentReferenceInformation = interface(IXMLNode)
    ['{CA35F4CF-7794-4674-B546-445A55A64631}']
    { Property Accessors }
    function Get_DocumentReferenceID: IXMLDocumentReferenceID;
    function Get_DocumentReferenceIDLineItemNumber: LongWord;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DocumentVersionNumber: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_NumberOfDocumentsRequired: LongWord;
    function Get_DocumentReference: IXMLDocumentReferenceList;
    procedure Set_DocumentReferenceIDLineItemNumber(Value: LongWord);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    procedure Set_DocumentVersionNumber(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    procedure Set_NumberOfDocumentsRequired(Value: LongWord);
    { Methods & Properties }
    property DocumentReferenceID: IXMLDocumentReferenceID read Get_DocumentReferenceID;
    property DocumentReferenceIDLineItemNumber: LongWord read Get_DocumentReferenceIDLineItemNumber write Set_DocumentReferenceIDLineItemNumber;
    property TransactionHistoryNumber: LongWord read Get_TransactionHistoryNumber write Set_TransactionHistoryNumber;
    property DocumentVersionNumber: UnicodeString read Get_DocumentVersionNumber write Set_DocumentVersionNumber;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
    property NumberOfDocumentsRequired: LongWord read Get_NumberOfDocumentsRequired write Set_NumberOfDocumentsRequired;
    property DocumentReference: IXMLDocumentReferenceList read Get_DocumentReference;
  end;

{ IXMLDocumentReferenceInformationList }

  IXMLDocumentReferenceInformationList = interface(IXMLNodeCollection)
    ['{A35D05A9-6CD7-4E9A-A3B8-304F883EDA69}']
    { Methods & Properties }
    function Add: IXMLDocumentReferenceInformation;
    function Insert(const Index: Integer): IXMLDocumentReferenceInformation;

    function Get_Item(Index: Integer): IXMLDocumentReferenceInformation;
    property Items[Index: Integer]: IXMLDocumentReferenceInformation read Get_Item; default;
  end;

{ IXMLDocumentReferenceID }

  IXMLDocumentReferenceID = interface(IXMLNode)
    ['{7021D1E8-BBA6-4E6D-B2DA-78E592272370}']
    { Property Accessors }
    function Get_DocumentReferenceIDType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DocumentReferenceIDType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property DocumentReferenceIDType: UnicodeString read Get_DocumentReferenceIDType write Set_DocumentReferenceIDType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDocumentReference }

  IXMLDocumentReference = interface(IXMLNode)
    ['{B72C79A3-03E0-45D7-816F-12337065D5C0}']
    { Property Accessors }
    function Get_DocumentReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DocumentReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property DocumentReferenceType: UnicodeString read Get_DocumentReferenceType write Set_DocumentReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDocumentReferenceList }

  IXMLDocumentReferenceList = interface(IXMLNodeCollection)
    ['{BA6ABAE7-563A-4454-9E25-EBF3A564B192}']
    { Methods & Properties }
    function Add: IXMLDocumentReference;
    function Insert(const Index: Integer): IXMLDocumentReference;

    function Get_Item(Index: Integer): IXMLDocumentReference;
    property Items[Index: Integer]: IXMLDocumentReference read Get_Item; default;
  end;

{ IXMLLocationCode }

  IXMLLocationCode = interface(IXMLNode)
    ['{75CD7161-D6AC-4AB6-9A68-0B2F6CE8B089}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTermsOfDelivery }

  IXMLTermsOfDelivery = interface(IXMLNode)
    ['{CE5021F8-9D45-4AC9-B6FD-8FF7A95B1913}']
    { Property Accessors }
    function Get_IncotermsLocation: IXMLIncotermsLocation;
    function Get_ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment;
    function Get_FreightPayableAt: UnicodeString;
    function Get_AdditionalText: IXMLS255List;
    function Get_ServiceLevel: IXMLServiceLevelList;
    procedure Set_FreightPayableAt(Value: UnicodeString);
    { Methods & Properties }
    property IncotermsLocation: IXMLIncotermsLocation read Get_IncotermsLocation;
    property ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment read Get_ShipmentMethodOfPayment;
    property FreightPayableAt: UnicodeString read Get_FreightPayableAt write Set_FreightPayableAt;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property ServiceLevel: IXMLServiceLevelList read Get_ServiceLevel;
  end;

{ IXMLIncotermsLocation }

  IXMLIncotermsLocation = interface(IXMLNode)
    ['{5CF0B064-AA15-4DB5-BF38-5F46F65168E7}']
    { Property Accessors }
    function Get_Incoterms: UnicodeString;
    function Get_IncotermsVersion: UnicodeString;
    procedure Set_Incoterms(Value: UnicodeString);
    procedure Set_IncotermsVersion(Value: UnicodeString);
    { Methods & Properties }
    property Incoterms: UnicodeString read Get_Incoterms write Set_Incoterms;
    property IncotermsVersion: UnicodeString read Get_IncotermsVersion write Set_IncotermsVersion;
  end;

{ IXMLShipmentMethodOfPayment }

  IXMLShipmentMethodOfPayment = interface(IXMLNode)
    ['{FD3FACCA-437F-4C86-BC3F-3ECF1B73CE2D}']
    { Property Accessors }
    function Get_LocationQualifier: UnicodeString;
    function Get_Method: UnicodeString;
    procedure Set_LocationQualifier(Value: UnicodeString);
    procedure Set_Method(Value: UnicodeString);
    { Methods & Properties }
    property LocationQualifier: UnicodeString read Get_LocationQualifier write Set_LocationQualifier;
    property Method: UnicodeString read Get_Method write Set_Method;
  end;

{ IXMLServiceLevel }

  IXMLServiceLevel = interface(IXMLNode)
    ['{B9427794-7AA2-4DAC-9EFD-1188DB216966}']
    { Property Accessors }
    function Get_ServiceLevelContextType: UnicodeString;
    function Get_ServiceLevelText: IXMLS255List;
    function Get_ServiceLevelReference: IXMLServiceLevelReferenceList;
    procedure Set_ServiceLevelContextType(Value: UnicodeString);
    { Methods & Properties }
    property ServiceLevelContextType: UnicodeString read Get_ServiceLevelContextType write Set_ServiceLevelContextType;
    property ServiceLevelText: IXMLS255List read Get_ServiceLevelText;
    property ServiceLevelReference: IXMLServiceLevelReferenceList read Get_ServiceLevelReference;
  end;

{ IXMLServiceLevelList }

  IXMLServiceLevelList = interface(IXMLNodeCollection)
    ['{AAB942CD-A2E4-45E5-8C5E-23C2C120C9FA}']
    { Methods & Properties }
    function Add: IXMLServiceLevel;
    function Insert(const Index: Integer): IXMLServiceLevel;

    function Get_Item(Index: Integer): IXMLServiceLevel;
    property Items[Index: Integer]: IXMLServiceLevel read Get_Item; default;
  end;

{ IXMLServiceLevelReference }

  IXMLServiceLevelReference = interface(IXMLNode)
    ['{5DC8912C-620E-42B2-AF89-5D7D591EDD32}']
    { Property Accessors }
    function Get_ServiceLevelReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ServiceLevelReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property ServiceLevelReferenceType: UnicodeString read Get_ServiceLevelReferenceType write Set_ServiceLevelReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLServiceLevelReferenceList }

  IXMLServiceLevelReferenceList = interface(IXMLNodeCollection)
    ['{66DDFF88-F95B-4D97-9BF3-24D7EA6B4B53}']
    { Methods & Properties }
    function Add: IXMLServiceLevelReference;
    function Insert(const Index: Integer): IXMLServiceLevelReference;

    function Get_Item(Index: Integer): IXMLServiceLevelReference;
    property Items[Index: Integer]: IXMLServiceLevelReference read Get_Item; default;
  end;

{ IXMLDeliveryRouteCode }

  IXMLDeliveryRouteCode = interface(IXMLNode)
    ['{8BC807CE-ABA9-4CE6-A3DC-663AE568BAC9}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLLocationParty }

  IXMLLocationParty = interface(IXMLTypedParty)
    ['{62A717D9-BE61-4A90-8FA6-5A59D2002518}']
    { Property Accessors }
    function Get_LocationType: UnicodeString;
    procedure Set_LocationType(Value: UnicodeString);
    { Methods & Properties }
    property LocationType: UnicodeString read Get_LocationType write Set_LocationType;
  end;

{ IXMLLocationPartyList }

  IXMLLocationPartyList = interface(IXMLNodeCollection)
    ['{CEE7E71E-17C0-480F-8BC1-C19FF4951063}']
    { Methods & Properties }
    function Add: IXMLLocationParty;
    function Insert(const Index: Integer): IXMLLocationParty;

    function Get_Item(Index: Integer): IXMLLocationParty;
    property Items[Index: Integer]: IXMLLocationParty read Get_Item; default;
  end;

{ IXMLCountryOfOrigin }

  IXMLCountryOfOrigin = interface(IXMLNode)
    ['{634DE5CC-A9CE-4061-B0F8-7E9495EC6C76}']
    { Property Accessors }
    function Get_Country: IXMLCountry;
    { Methods & Properties }
    property Country: IXMLCountry read Get_Country;
  end;

{ IXMLCountryOfDestination }

  IXMLCountryOfDestination = interface(IXMLNode)
    ['{881B2522-83B8-44E6-83A2-0AC659761339}']
    { Property Accessors }
    function Get_Country: IXMLCountry;
    { Methods & Properties }
    property Country: IXMLCountry read Get_Country;
  end;

{ IXMLCountryOfConsumption }

  IXMLCountryOfConsumption = interface(IXMLNode)
    ['{A773F69B-1989-4B3C-876E-F1A525802FE5}']
    { Property Accessors }
    function Get_Country: IXMLCountry;
    { Methods & Properties }
    property Country: IXMLCountry read Get_Country;
  end;

{ IXMLTransportVehicleIdentifier }

  IXMLTransportVehicleIdentifier = interface(IXMLNode)
    ['{ABCC6DE2-66FA-4066-862A-80C0FE0BBC75}']
    { Property Accessors }
    function Get_TransportVehicleIdentifierType: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_TransportVehicleIdentifierType(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property TransportVehicleIdentifierType: UnicodeString read Get_TransportVehicleIdentifierType write Set_TransportVehicleIdentifierType;
    property StateOrProvince: UnicodeString read Get_StateOrProvince write Set_StateOrProvince;
    property ISOCountryCode: UnicodeString read Get_ISOCountryCode write Set_ISOCountryCode;
    property ISOCountryCodeAlpha3: UnicodeString read Get_ISOCountryCodeAlpha3 write Set_ISOCountryCodeAlpha3;
    property ISOCountryCodeNumeric: UnicodeString read Get_ISOCountryCodeNumeric write Set_ISOCountryCodeNumeric;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportVehicleIdentifierList }

  IXMLTransportVehicleIdentifierList = interface(IXMLNodeCollection)
    ['{1AF0F60F-B82F-460D-9111-26F9083F4EA3}']
    { Methods & Properties }
    function Add: IXMLTransportVehicleIdentifier;
    function Insert(const Index: Integer): IXMLTransportVehicleIdentifier;

    function Get_Item(Index: Integer): IXMLTransportVehicleIdentifier;
    property Items[Index: Integer]: IXMLTransportVehicleIdentifier read Get_Item; default;
  end;

{ IXMLTransportUnitIdentifier }

  IXMLTransportUnitIdentifier = interface(IXMLNode)
    ['{4F499A55-1019-4CB9-8175-44AB694BE738}']
    { Property Accessors }
    function Get_TransportUnitIdentifierType: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_TransportUnitIdentifierType(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property TransportUnitIdentifierType: UnicodeString read Get_TransportUnitIdentifierType write Set_TransportUnitIdentifierType;
    property StateOrProvince: UnicodeString read Get_StateOrProvince write Set_StateOrProvince;
    property ISOCountryCode: UnicodeString read Get_ISOCountryCode write Set_ISOCountryCode;
    property ISOCountryCodeAlpha3: UnicodeString read Get_ISOCountryCodeAlpha3 write Set_ISOCountryCodeAlpha3;
    property ISOCountryCodeNumeric: UnicodeString read Get_ISOCountryCodeNumeric write Set_ISOCountryCodeNumeric;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnitIdentifierList }

  IXMLTransportUnitIdentifierList = interface(IXMLNodeCollection)
    ['{1A17A333-B3EB-43F3-8048-D9E6951AF22D}']
    { Methods & Properties }
    function Add: IXMLTransportUnitIdentifier;
    function Insert(const Index: Integer): IXMLTransportUnitIdentifier;

    function Get_Item(Index: Integer): IXMLTransportUnitIdentifier;
    property Items[Index: Integer]: IXMLTransportUnitIdentifier read Get_Item; default;
  end;

{ IXMLInsurance }

  IXMLInsurance = interface(IXMLNode)
    ['{52BCEEBC-FBBF-420E-9C46-25DB36F5DB95}']
    { Property Accessors }
    function Get_Insurer: UnicodeString;
    function Get_InsuranceContractNo: UnicodeString;
    function Get_InsuredValue: IXMLInsuredValue;
    function Get_InsuranceInfo: UnicodeString;
    procedure Set_Insurer(Value: UnicodeString);
    procedure Set_InsuranceContractNo(Value: UnicodeString);
    procedure Set_InsuranceInfo(Value: UnicodeString);
    { Methods & Properties }
    property Insurer: UnicodeString read Get_Insurer write Set_Insurer;
    property InsuranceContractNo: UnicodeString read Get_InsuranceContractNo write Set_InsuranceContractNo;
    property InsuredValue: IXMLInsuredValue read Get_InsuredValue;
    property InsuranceInfo: UnicodeString read Get_InsuranceInfo write Set_InsuranceInfo;
  end;

{ IXMLInsuredValue }

  IXMLInsuredValue = interface(IXMLNode)
    ['{D5FD1A4D-17E5-423A-975E-82438DE13F65}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLCurrencyValue }

  IXMLCurrencyValue = interface(IXMLNode)
    ['{3B44D770-24E9-4E66-8549-7AAEA89B0FF4}']
    { Property Accessors }
    function Get_CurrencyType: UnicodeString;
    procedure Set_CurrencyType(Value: UnicodeString);
    { Methods & Properties }
    property CurrencyType: UnicodeString read Get_CurrencyType write Set_CurrencyType;
  end;

{ IXMLCreditDebitNoteReason }

  IXMLCreditDebitNoteReason = interface(IXMLNode)
    ['{CACA6D5B-CCE0-4942-9D65-0E519B1C9B65}']
    { Property Accessors }
    function Get_CreditDebitNoteReasonCode: IXMLCreditDebitNoteReasonCode;
    function Get_ReasonDescription: UnicodeString;
    procedure Set_ReasonDescription(Value: UnicodeString);
    { Methods & Properties }
    property CreditDebitNoteReasonCode: IXMLCreditDebitNoteReasonCode read Get_CreditDebitNoteReasonCode;
    property ReasonDescription: UnicodeString read Get_ReasonDescription write Set_ReasonDescription;
  end;

{ IXMLCreditDebitNoteReasonCode }

  IXMLCreditDebitNoteReasonCode = interface(IXMLNode)
    ['{9D0542E4-5981-4A18-AAD3-75D9DB952991}']
    { Property Accessors }
    function Get_CreditDebitNoteReasonType: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_CreditDebitNoteReasonType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property CreditDebitNoteReasonType: UnicodeString read Get_CreditDebitNoteReasonType write Set_CreditDebitNoteReasonType;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLInvoiceShipment }

  IXMLInvoiceShipment = interface(IXMLNode)
    ['{DF945206-D3D6-4B09-9591-5E39940CF38F}']
    { Property Accessors }
    function Get_ShipmentID: IXMLShipmentID;
    function Get_InvoiceProductGroup: IXMLInvoiceProductGroupList;
    function Get_ShipmentSummary: IXMLShipmentSummary;
    { Methods & Properties }
    property ShipmentID: IXMLShipmentID read Get_ShipmentID;
    property InvoiceProductGroup: IXMLInvoiceProductGroupList read Get_InvoiceProductGroup;
    property ShipmentSummary: IXMLShipmentSummary read Get_ShipmentSummary;
  end;

{ IXMLInvoiceShipmentList }

  IXMLInvoiceShipmentList = interface(IXMLNodeCollection)
    ['{A8546F53-FA41-42A1-938C-10E5ACDA0CCD}']
    { Methods & Properties }
    function Add: IXMLInvoiceShipment;
    function Insert(const Index: Integer): IXMLInvoiceShipment;

    function Get_Item(Index: Integer): IXMLInvoiceShipment;
    property Items[Index: Integer]: IXMLInvoiceShipment read Get_Item; default;
  end;

{ IXMLShipmentID }

  IXMLShipmentID = interface(IXMLNode)
    ['{4C7546B2-B48E-4732-8553-E012981C7C81}']
    { Property Accessors }
    function Get_ShipmentIDType: UnicodeString;
    procedure Set_ShipmentIDType(Value: UnicodeString);
    { Methods & Properties }
    property ShipmentIDType: UnicodeString read Get_ShipmentIDType write Set_ShipmentIDType;
  end;

{ IXMLInvoiceProductGroup }

  IXMLInvoiceProductGroup = interface(IXMLNode)
    ['{113F4FF0-251C-449D-AFD7-B06D8A33BA35}']
    { Property Accessors }
    function Get_ProductGroupID: IXMLProductGroupID;
    function Get_InvoiceWoodLineItem: IXMLInvoiceWoodLineItemList;
    function Get_ProductGroupSummary: IXMLProductGroupSummary;
    { Methods & Properties }
    property ProductGroupID: IXMLProductGroupID read Get_ProductGroupID;
    property InvoiceWoodLineItem: IXMLInvoiceWoodLineItemList read Get_InvoiceWoodLineItem;
    property ProductGroupSummary: IXMLProductGroupSummary read Get_ProductGroupSummary;
  end;

{ IXMLInvoiceProductGroupList }

  IXMLInvoiceProductGroupList = interface(IXMLNodeCollection)
    ['{22227E4D-49D6-40B8-B034-A0D94A31766A}']
    { Methods & Properties }
    function Add: IXMLInvoiceProductGroup;
    function Insert(const Index: Integer): IXMLInvoiceProductGroup;

    function Get_Item(Index: Integer): IXMLInvoiceProductGroup;
    property Items[Index: Integer]: IXMLInvoiceProductGroup read Get_Item; default;
  end;

{ IXMLProductGroupID }

  IXMLProductGroupID = interface(IXMLNode)
    ['{E7F50CC0-8577-40A8-B11B-E2001E5AF7FA}']
    { Property Accessors }
    function Get_ProductGroupIDType: UnicodeString;
    procedure Set_ProductGroupIDType(Value: UnicodeString);
    { Methods & Properties }
    property ProductGroupIDType: UnicodeString read Get_ProductGroupIDType write Set_ProductGroupIDType;
  end;

{ IXMLInvoiceWoodLineItem }

  IXMLInvoiceWoodLineItem = interface(IXMLNode)
    ['{23FA8279-1DFA-4961-ACA2-FA402F9248C0}']
    { Property Accessors }
    function Get_InvoiceLineNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_EndsDiscountInformation: IXMLEndsDiscountInformation;
    function Get_ChargeOrAllowance: IXMLChargeOrAllowance;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InvoiceLineBaseAmountInformation: IXMLInvoiceLineBaseAmountInformation;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_ChargeInformation: IXMLChargeInformationList;
    function Get_InvoiceLineAmount: IXMLInvoiceLineAmount;
    function Get_InvoiceDeliveryInformation: IXMLInvoiceDeliveryInformationList;
    function Get_InvoiceReference: IXMLInvoiceReferenceList;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_AdditionalText: IXMLS255List;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_MillCharacteristics: IXMLMillCharacteristics;
    function Get_TransportModeCharacteristics: IXMLTransportModeCharacteristicsList;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindow;
    function Get_TaxStatement: IXMLTaxStatement;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_LocationParty: IXMLLocationPartyList;
    function Get_StatisticalGoodsInformation: IXMLStatisticalGoodsInformation;
    procedure Set_InvoiceLineNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property InvoiceLineNumber: LongWord read Get_InvoiceLineNumber write Set_InvoiceLineNumber;
    property PurchaseOrderInformation: IXMLPurchaseOrderInformation read Get_PurchaseOrderInformation;
    property PurchaseOrderLineItemNumber: LongWord read Get_PurchaseOrderLineItemNumber write Set_PurchaseOrderLineItemNumber;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property EndsDiscountInformation: IXMLEndsDiscountInformation read Get_EndsDiscountInformation;
    property ChargeOrAllowance: IXMLChargeOrAllowance read Get_ChargeOrAllowance;
    property Product: IXMLProductClass read Get_Product;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property InvoiceLineBaseAmountInformation: IXMLInvoiceLineBaseAmountInformation read Get_InvoiceLineBaseAmountInformation;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property ChargeInformation: IXMLChargeInformationList read Get_ChargeInformation;
    property InvoiceLineAmount: IXMLInvoiceLineAmount read Get_InvoiceLineAmount;
    property InvoiceDeliveryInformation: IXMLInvoiceDeliveryInformationList read Get_InvoiceDeliveryInformation;
    property InvoiceReference: IXMLInvoiceReferenceList read Get_InvoiceReference;
    property GeneralLedgerAccount: IXMLGeneralLedgerAccount read Get_GeneralLedgerAccount;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property MillCharacteristics: IXMLMillCharacteristics read Get_MillCharacteristics;
    property TransportModeCharacteristics: IXMLTransportModeCharacteristicsList read Get_TransportModeCharacteristics;
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList read Get_TransportUnitCharacteristics;
    property TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics read Get_TransportVehicleCharacteristics;
    property DeliveryDateWindow: IXMLDeliveryDateWindow read Get_DeliveryDateWindow;
    property TaxStatement: IXMLTaxStatement read Get_TaxStatement;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property LocationParty: IXMLLocationPartyList read Get_LocationParty;
    property StatisticalGoodsInformation: IXMLStatisticalGoodsInformation read Get_StatisticalGoodsInformation;
  end;

{ IXMLInvoiceWoodLineItemList }

  IXMLInvoiceWoodLineItemList = interface(IXMLNodeCollection)
    ['{2892E96A-03A9-46CF-8B6F-70E8641EB6C0}']
    { Methods & Properties }
    function Add: IXMLInvoiceWoodLineItem;
    function Insert(const Index: Integer): IXMLInvoiceWoodLineItem;

    function Get_Item(Index: Integer): IXMLInvoiceWoodLineItem;
    property Items[Index: Integer]: IXMLInvoiceWoodLineItem read Get_Item; default;
  end;

{ IXMLPurchaseOrderInformation }

  IXMLPurchaseOrderInformation = interface(IXMLNode)
    ['{84DD7103-5A7D-4C62-9078-244EB56E69FD}']
    { Property Accessors }
    function Get_PurchaseOrderNumber: UnicodeString;
    function Get_PurchaseOrderReleaseNumber: UnicodeString;
    function Get_PurchaseOrderIssuedDate: IXMLDateTimeBasis;
    function Get_OrderTitle: IXMLS255List;
    function Get_PurchaseOrderReference: IXMLPurchaseOrderReferenceList;
    function Get_ServiceLevel: IXMLServiceLevelList;
    procedure Set_PurchaseOrderNumber(Value: UnicodeString);
    procedure Set_PurchaseOrderReleaseNumber(Value: UnicodeString);
    { Methods & Properties }
    property PurchaseOrderNumber: UnicodeString read Get_PurchaseOrderNumber write Set_PurchaseOrderNumber;
    property PurchaseOrderReleaseNumber: UnicodeString read Get_PurchaseOrderReleaseNumber write Set_PurchaseOrderReleaseNumber;
    property PurchaseOrderIssuedDate: IXMLDateTimeBasis read Get_PurchaseOrderIssuedDate;
    property OrderTitle: IXMLS255List read Get_OrderTitle;
    property PurchaseOrderReference: IXMLPurchaseOrderReferenceList read Get_PurchaseOrderReference;
    property ServiceLevel: IXMLServiceLevelList read Get_ServiceLevel;
  end;

{ IXMLDateTimeBasis }

  IXMLDateTimeBasis = interface(IXMLNode)
    ['{D4B185BE-8B1B-4BF3-8109-3302DD24D5E6}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLPurchaseOrderReference }

  IXMLPurchaseOrderReference = interface(IXMLNode)
    ['{B8F90822-CDAA-4DCA-BCF8-D3414A1FB7CC}']
    { Property Accessors }
    function Get_PurchaseOrderReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_PurchaseOrderReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property PurchaseOrderReferenceType: UnicodeString read Get_PurchaseOrderReferenceType write Set_PurchaseOrderReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLPurchaseOrderReferenceList }

  IXMLPurchaseOrderReferenceList = interface(IXMLNodeCollection)
    ['{D39F8DE0-7C41-41CB-A710-CD3684E4B663}']
    { Methods & Properties }
    function Add: IXMLPurchaseOrderReference;
    function Insert(const Index: Integer): IXMLPurchaseOrderReference;

    function Get_Item(Index: Integer): IXMLPurchaseOrderReference;
    property Items[Index: Integer]: IXMLPurchaseOrderReference read Get_Item; default;
  end;

{ IXMLEndsDiscountInformation }

  IXMLEndsDiscountInformation = interface(IXMLNode)
    ['{020406F2-C45E-45B7-B03B-B593362E8C98}']
    { Property Accessors }
    function Get_EndsDiscountRule: UnicodeString;
    function Get_EndsLengthMax: IXMLMeasurement;
    function Get_EndsPermittedPercent: IXMLMeasurement;
    function Get_EndsDiscountPercent: IXMLMeasurement;
    procedure Set_EndsDiscountRule(Value: UnicodeString);
    { Methods & Properties }
    property EndsDiscountRule: UnicodeString read Get_EndsDiscountRule write Set_EndsDiscountRule;
    property EndsLengthMax: IXMLMeasurement read Get_EndsLengthMax;
    property EndsPermittedPercent: IXMLMeasurement read Get_EndsPermittedPercent;
    property EndsDiscountPercent: IXMLMeasurement read Get_EndsDiscountPercent;
  end;

{ IXMLChargeOrAllowance }

  IXMLChargeOrAllowance = interface(IXMLNode)
    ['{F75A0602-7D6A-41EC-9AEA-F47CFE7E99D3}']
    { Property Accessors }
    function Get_ChargeOrAllowanceType: UnicodeString;
    procedure Set_ChargeOrAllowanceType(Value: UnicodeString);
    { Methods & Properties }
    property ChargeOrAllowanceType: UnicodeString read Get_ChargeOrAllowanceType write Set_ChargeOrAllowanceType;
  end;

{ IXMLProductClass }

  IXMLProductClass = interface(IXMLNode)
    ['{ADC50542-F94C-4402-B11F-95CD380775A3}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_ProductReference: IXMLProductReferenceList;
    function Get_BookManufacturing: IXMLBookManufacturing;
    function Get_ForestWood: IXMLForestWood;
    function Get_LabelStock: IXMLLabelStock;
    function Get_Paper: IXMLPaper;
    function Get_Pulp: IXMLPulpClass;
    function Get_RecoveredPaper: IXMLRecoveredPaper;
    function Get_VirginFibre: IXMLVirginFibre;
    function Get_WoodProducts: IXMLWoodProducts;
    function Get_OtherProducts: IXMLOtherProducts;
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifierList read Get_ProductIdentifier;
    property ProductDescription: IXMLProductDescriptionList read Get_ProductDescription;
    property Classification: IXMLClassificationList read Get_Classification;
    property ProductReference: IXMLProductReferenceList read Get_ProductReference;
    property BookManufacturing: IXMLBookManufacturing read Get_BookManufacturing;
    property ForestWood: IXMLForestWood read Get_ForestWood;
    property LabelStock: IXMLLabelStock read Get_LabelStock;
    property Paper: IXMLPaper read Get_Paper;
    property Pulp: IXMLPulpClass read Get_Pulp;
    property RecoveredPaper: IXMLRecoveredPaper read Get_RecoveredPaper;
    property VirginFibre: IXMLVirginFibre read Get_VirginFibre;
    property WoodProducts: IXMLWoodProducts read Get_WoodProducts;
    property OtherProducts: IXMLOtherProducts read Get_OtherProducts;
  end;

{ IXMLProductIdentifier }

  IXMLProductIdentifier = interface(IXMLNode)
    ['{5ED365C2-5936-44F5-8E48-3CA71E0ED5FA}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    function Get_ProductIdentifierType: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_ProductIdentifierType(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property ProductIdentifierType: UnicodeString read Get_ProductIdentifierType write Set_ProductIdentifierType;
  end;

{ IXMLProductIdentifierList }

  IXMLProductIdentifierList = interface(IXMLNodeCollection)
    ['{4D38211D-86D3-49EE-8B7C-10E797D11CA4}']
    { Methods & Properties }
    function Add: IXMLProductIdentifier;
    function Insert(const Index: Integer): IXMLProductIdentifier;

    function Get_Item(Index: Integer): IXMLProductIdentifier;
    property Items[Index: Integer]: IXMLProductIdentifier read Get_Item; default;
  end;

{ IXMLProductDescription }

  IXMLProductDescription = interface(IXMLNode)
    ['{F2D60856-23B8-4B44-B9F1-84182EEE247B}']
    { Property Accessors }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property Language: UnicodeString read Get_Language write Set_Language;
  end;

{ IXMLProductDescriptionList }

  IXMLProductDescriptionList = interface(IXMLNodeCollection)
    ['{0681571F-286D-4F39-AD4B-FCA8F7B8DB33}']
    { Methods & Properties }
    function Add: IXMLProductDescription;
    function Insert(const Index: Integer): IXMLProductDescription;

    function Get_Item(Index: Integer): IXMLProductDescription;
    property Items[Index: Integer]: IXMLProductDescription read Get_Item; default;
  end;

{ IXMLClassification }

  IXMLClassification = interface(IXMLNode)
    ['{BB829BA7-560B-4DDB-AA37-F24980B2C0A8}']
    { Property Accessors }
    function Get_ClassificationCode: IXMLClassificationCode;
    function Get_ClassificationDescription: IXMLS255List;
    { Methods & Properties }
    property ClassificationCode: IXMLClassificationCode read Get_ClassificationCode;
    property ClassificationDescription: IXMLS255List read Get_ClassificationDescription;
  end;

{ IXMLClassificationList }

  IXMLClassificationList = interface(IXMLNodeCollection)
    ['{09A1F791-35E0-45B4-8170-5CEA894C7A58}']
    { Methods & Properties }
    function Add: IXMLClassification;
    function Insert(const Index: Integer): IXMLClassification;

    function Get_Item(Index: Integer): IXMLClassification;
    property Items[Index: Integer]: IXMLClassification read Get_Item; default;
  end;

{ IXMLClassificationCode }

  IXMLClassificationCode = interface(IXMLNode)
    ['{E7535335-0D88-4D39-845A-260EF7DAA0B2}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    function Get_ClassificationCodeType: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_ClassificationCodeType(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property ClassificationCodeType: UnicodeString read Get_ClassificationCodeType write Set_ClassificationCodeType;
  end;

{ IXMLProductReference }

  IXMLProductReference = interface(IXMLNode)
    ['{4EDAF98F-5942-4530-B3AB-F261CFA226FA}']
    { Property Accessors }
    function Get_ProductReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ProductReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property ProductReferenceType: UnicodeString read Get_ProductReferenceType write Set_ProductReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLProductReferenceList }

  IXMLProductReferenceList = interface(IXMLNodeCollection)
    ['{383FF9F3-954F-4464-A2FA-68411F4F0DD5}']
    { Methods & Properties }
    function Add: IXMLProductReference;
    function Insert(const Index: Integer): IXMLProductReference;

    function Get_Item(Index: Integer): IXMLProductReference;
    property Items[Index: Integer]: IXMLProductReference read Get_Item; default;
  end;

{ IXMLBookManufacturing }

  IXMLBookManufacturing = interface(IXMLNode)
    ['{8AC95B50-585E-43DF-B01F-A515999426FB}']
    { Property Accessors }
    function Get_BookClassification: IXMLBookClassificationList;
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_PrepInformation: IXMLPrepInformationList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
    { Methods & Properties }
    property BookClassification: IXMLBookClassificationList read Get_BookClassification;
    property ProofInformationalQuantity: IXMLProofInformationalQuantityList read Get_ProofInformationalQuantity;
    property PrepInformation: IXMLPrepInformationList read Get_PrepInformation;
    property SuppliedComponentInformation: IXMLSuppliedComponentInformationList read Get_SuppliedComponentInformation;
    property PackagingCharacteristics: IXMLPackagingCharacteristicsList read Get_PackagingCharacteristics;
  end;

{ IXMLBookClassification }

  IXMLBookClassification = interface(IXMLNode)
    ['{B384653C-03B1-4959-B323-7133666E5E77}']
    { Property Accessors }
    function Get_BookClassificationType: UnicodeString;
    function Get_ClassificationDescription: IXMLS255List;
    function Get_BookSubClassification: IXMLBookSubClassificationList;
    procedure Set_BookClassificationType(Value: UnicodeString);
    { Methods & Properties }
    property BookClassificationType: UnicodeString read Get_BookClassificationType write Set_BookClassificationType;
    property ClassificationDescription: IXMLS255List read Get_ClassificationDescription;
    property BookSubClassification: IXMLBookSubClassificationList read Get_BookSubClassification;
  end;

{ IXMLBookClassificationList }

  IXMLBookClassificationList = interface(IXMLNodeCollection)
    ['{436AEC93-4DAA-48AE-B29B-1BCF0F9FDAD7}']
    { Methods & Properties }
    function Add: IXMLBookClassification;
    function Insert(const Index: Integer): IXMLBookClassification;

    function Get_Item(Index: Integer): IXMLBookClassification;
    property Items[Index: Integer]: IXMLBookClassification read Get_Item; default;
  end;

{ IXMLBookSubClassification }

  IXMLBookSubClassification = interface(IXMLNodeCollection)
    ['{7A79C5E4-25F0-4F4E-BDEC-187A91557FB2}']
    { Property Accessors }
    function Get_BookSubClassificationType: UnicodeString;
    function Get_ClassificationDescription(Index: Integer): UnicodeString;
    procedure Set_BookSubClassificationType(Value: UnicodeString);
    { Methods & Properties }
    function Add(const ClassificationDescription: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const ClassificationDescription: UnicodeString): IXMLNode;
    property BookSubClassificationType: UnicodeString read Get_BookSubClassificationType write Set_BookSubClassificationType;
    property ClassificationDescription[Index: Integer]: UnicodeString read Get_ClassificationDescription; default;
  end;

{ IXMLBookSubClassificationList }

  IXMLBookSubClassificationList = interface(IXMLNodeCollection)
    ['{8E004D82-DD15-47F4-BD38-48171838769F}']
    { Methods & Properties }
    function Add: IXMLBookSubClassification;
    function Insert(const Index: Integer): IXMLBookSubClassification;

    function Get_Item(Index: Integer): IXMLBookSubClassification;
    property Items[Index: Integer]: IXMLBookSubClassification read Get_Item; default;
  end;

{ IXMLProofInformationalQuantity }

  IXMLProofInformationalQuantity = interface(IXMLNode)
    ['{BFAB368F-01E7-4DC9-9D9A-91126DFFAB3B}']
    { Property Accessors }
    function Get_ProofType: UnicodeString;
    function Get_ProofColourType: UnicodeString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_OtherParty: IXMLTypedParty;
    function Get_ProofApprovalDate: IXMLProofApprovalDate;
    function Get_ProofDueDate: IXMLProofDueDate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ProofType(Value: UnicodeString);
    procedure Set_ProofColourType(Value: UnicodeString);
    { Methods & Properties }
    property ProofType: UnicodeString read Get_ProofType write Set_ProofType;
    property ProofColourType: UnicodeString read Get_ProofColourType write Set_ProofColourType;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property OtherParty: IXMLTypedParty read Get_OtherParty;
    property ProofApprovalDate: IXMLProofApprovalDate read Get_ProofApprovalDate;
    property ProofDueDate: IXMLProofDueDate read Get_ProofDueDate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLProofInformationalQuantityList }

  IXMLProofInformationalQuantityList = interface(IXMLNodeCollection)
    ['{956122A2-2256-4E67-B61E-02003439C483}']
    { Methods & Properties }
    function Add: IXMLProofInformationalQuantity;
    function Insert(const Index: Integer): IXMLProofInformationalQuantity;

    function Get_Item(Index: Integer): IXMLProofInformationalQuantity;
    property Items[Index: Integer]: IXMLProofInformationalQuantity read Get_Item; default;
  end;

{ IXMLProofApprovalDate }

  IXMLProofApprovalDate = interface(IXMLNode)
    ['{B8151400-6AB6-40B8-9EF4-627EB43C1635}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLProofDueDate }

  IXMLProofDueDate = interface(IXMLNode)
    ['{3004BFA4-C336-4269-944D-C0B5D0780F56}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLPrepInformation }

  IXMLPrepInformation = interface(IXMLNode)
    ['{15F91EF6-19D4-4857-9F0F-ABA16342F56D}']
    { Property Accessors }
    function Get_PrepType: UnicodeString;
    function Get_SupplierParty: IXMLParty;
    function Get_PrepShipDate: IXMLDateTimeBasis;
    function Get_PrepDueDate: IXMLDateTimeBasis;
    function Get_PrepNeededDate: IXMLDateTimeBasis;
    function Get_AdditionalText: IXMLS255List;
    function Get_PrepReference: IXMLPrepReferenceList;
    procedure Set_PrepType(Value: UnicodeString);
    { Methods & Properties }
    property PrepType: UnicodeString read Get_PrepType write Set_PrepType;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property PrepShipDate: IXMLDateTimeBasis read Get_PrepShipDate;
    property PrepDueDate: IXMLDateTimeBasis read Get_PrepDueDate;
    property PrepNeededDate: IXMLDateTimeBasis read Get_PrepNeededDate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property PrepReference: IXMLPrepReferenceList read Get_PrepReference;
  end;

{ IXMLPrepInformationList }

  IXMLPrepInformationList = interface(IXMLNodeCollection)
    ['{B0C19963-3A9A-45B1-9B2D-5FF540AD8D48}']
    { Methods & Properties }
    function Add: IXMLPrepInformation;
    function Insert(const Index: Integer): IXMLPrepInformation;

    function Get_Item(Index: Integer): IXMLPrepInformation;
    property Items[Index: Integer]: IXMLPrepInformation read Get_Item; default;
  end;

{ IXMLPrepReference }

  IXMLPrepReference = interface(IXMLNode)
    ['{951CCAC1-D464-40F3-949B-C98E7C1CC668}']
    { Property Accessors }
    function Get_PrepReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_PrepReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property PrepReferenceType: UnicodeString read Get_PrepReferenceType write Set_PrepReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLPrepReferenceList }

  IXMLPrepReferenceList = interface(IXMLNodeCollection)
    ['{669DECD9-06CE-4433-90A1-CE104178293C}']
    { Methods & Properties }
    function Add: IXMLPrepReference;
    function Insert(const Index: Integer): IXMLPrepReference;

    function Get_Item(Index: Integer): IXMLPrepReference;
    property Items[Index: Integer]: IXMLPrepReference read Get_Item; default;
  end;

{ IXMLSuppliedComponentInformation }

  IXMLSuppliedComponentInformation = interface(IXMLNode)
    ['{6E46E947-BE26-4420-9F60-BEFC8F24CC8C}']
    { Property Accessors }
    function Get_SuppliedComponentType: UnicodeString;
    function Get_SupplierParty: IXMLParty;
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_BookClassification: IXMLBookClassificationList;
    function Get_Paper: IXMLPaper;
    function Get_SuppliedComponentReference: IXMLSuppliedComponentReferenceList;
    function Get_Quantity: IXMLQuantity;
    function Get_ComponentShipDate: IXMLComponentShipDate;
    function Get_ComponentDueDate: IXMLComponentDueDate;
    function Get_ComponentNeededDate: IXMLComponentNeededDate;
    function Get_OrderStatusInformation: IXMLOrderStatusInformation;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SuppliedComponentType(Value: UnicodeString);
    { Methods & Properties }
    property SuppliedComponentType: UnicodeString read Get_SuppliedComponentType write Set_SuppliedComponentType;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property ProductIdentifier: IXMLProductIdentifierList read Get_ProductIdentifier;
    property ProductDescription: IXMLProductDescriptionList read Get_ProductDescription;
    property Classification: IXMLClassificationList read Get_Classification;
    property BookClassification: IXMLBookClassificationList read Get_BookClassification;
    property Paper: IXMLPaper read Get_Paper;
    property SuppliedComponentReference: IXMLSuppliedComponentReferenceList read Get_SuppliedComponentReference;
    property Quantity: IXMLQuantity read Get_Quantity;
    property ComponentShipDate: IXMLComponentShipDate read Get_ComponentShipDate;
    property ComponentDueDate: IXMLComponentDueDate read Get_ComponentDueDate;
    property ComponentNeededDate: IXMLComponentNeededDate read Get_ComponentNeededDate;
    property OrderStatusInformation: IXMLOrderStatusInformation read Get_OrderStatusInformation;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSuppliedComponentInformationList }

  IXMLSuppliedComponentInformationList = interface(IXMLNodeCollection)
    ['{408ED57E-4F33-4EEE-A408-0284AA86D8B9}']
    { Methods & Properties }
    function Add: IXMLSuppliedComponentInformation;
    function Insert(const Index: Integer): IXMLSuppliedComponentInformation;

    function Get_Item(Index: Integer): IXMLSuppliedComponentInformation;
    property Items[Index: Integer]: IXMLSuppliedComponentInformation read Get_Item; default;
  end;

{ IXMLPaper }

  IXMLPaper = interface(IXMLNode)
    ['{7223929A-01D1-4809-96D3-52C77398D1D3}']
    { Property Accessors }
    function Get_PaperCharacteristics: IXMLPaperCharacteristics;
    function Get_Reel: IXMLReel;
    function Get_Sheet: IXMLSheet;
    { Methods & Properties }
    property PaperCharacteristics: IXMLPaperCharacteristics read Get_PaperCharacteristics;
    property Reel: IXMLReel read Get_Reel;
    property Sheet: IXMLSheet read Get_Sheet;
  end;

{ IXMLPaperCharacteristics }

  IXMLPaperCharacteristics = interface(IXMLNode)
    ['{2A32DFA7-B831-48E4-BF08-10A402EAF949}']
    { Property Accessors }
    function Get_CoatingTop: UnicodeString;
    function Get_CoatingBottom: UnicodeString;
    function Get_FinishType: UnicodeString;
    function Get_PrintType: UnicodeString;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_ExcitationPurity: IXMLExcitationPurityList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Luminance: IXMLLuminanceList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Mullen: IXMLMullenList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    function Get_PlySet: IXMLPlySetList;
    procedure Set_CoatingTop(Value: UnicodeString);
    procedure Set_CoatingBottom(Value: UnicodeString);
    procedure Set_FinishType(Value: UnicodeString);
    procedure Set_PrintType(Value: UnicodeString);
    { Methods & Properties }
    property CoatingTop: UnicodeString read Get_CoatingTop write Set_CoatingTop;
    property CoatingBottom: UnicodeString read Get_CoatingBottom write Set_CoatingBottom;
    property FinishType: UnicodeString read Get_FinishType write Set_FinishType;
    property PrintType: UnicodeString read Get_PrintType write Set_PrintType;
    property Abrasion: IXMLAbrasionList read Get_Abrasion;
    property AbsorptionInk: IXMLAbsorptionInkList read Get_AbsorptionInk;
    property AbsorptionLight: IXMLAbsorptionLightList read Get_AbsorptionLight;
    property AbsorptionWater: IXMLAbsorptionWaterList read Get_AbsorptionWater;
    property Appearance: IXMLAppearanceList read Get_Appearance;
    property Ash: IXMLAshList read Get_Ash;
    property BasisWeight: IXMLBasisWeightList read Get_BasisWeight;
    property BendingResistance: IXMLBendingResistanceList read Get_BendingResistance;
    property BendingStiffness: IXMLBendingStiffnessList read Get_BendingStiffness;
    property Brightness: IXMLBrightnessList read Get_Brightness;
    property Bulk: IXMLBulkList read Get_Bulk;
    property Burst: IXMLBurstList read Get_Burst;
    property BurstIndex: IXMLBurstIndexList read Get_BurstIndex;
    property Caliper: IXMLCaliperList read Get_Caliper;
    property CoatWeight: IXMLCoatWeightList read Get_CoatWeight;
    property ColourDetail: IXMLColourDetailList read Get_ColourDetail;
    property Density: IXMLDensityList read Get_Density;
    property Dirt: IXMLDirtList read Get_Dirt;
    property DominantWavelength: IXMLDominantWavelengthList read Get_DominantWavelength;
    property ExcitationPurity: IXMLExcitationPurityList read Get_ExcitationPurity;
    property FibreLength: IXMLFibreLengthList read Get_FibreLength;
    property FibreClassification: IXMLFibreClassificationList read Get_FibreClassification;
    property Folding: IXMLFoldingList read Get_Folding;
    property Formation: IXMLFormationList read Get_Formation;
    property Freeness: IXMLFreenessList read Get_Freeness;
    property Friction: IXMLFrictionList read Get_Friction;
    property Gloss: IXMLGlossList read Get_Gloss;
    property LightScattering: IXMLLightScatteringList read Get_LightScattering;
    property Luminance: IXMLLuminanceList read Get_Luminance;
    property Moisture: IXMLMoistureList read Get_Moisture;
    property Mullen: IXMLMullenList read Get_Mullen;
    property Opacity: IXMLOpacityList read Get_Opacity;
    property Permeability: IXMLPermeabilityList read Get_Permeability;
    property PH: IXMLPHList read Get_PH;
    property PlyBond: IXMLPlyBondList read Get_PlyBond;
    property Porosity: IXMLPorosityList read Get_Porosity;
    property PostConsumerWaste: IXMLPostConsumerWasteList read Get_PostConsumerWaste;
    property PPI: IXMLMeasurementList read Get_PPI;
    property PreConsumerWaste: IXMLPreConsumerWasteList read Get_PreConsumerWaste;
    property Recycled: IXMLRecycledList read Get_Recycled;
    property Resistance: IXMLResistanceList read Get_Resistance;
    property RingCrush: IXMLRingCrushList read Get_RingCrush;
    property Roughness: IXMLRoughnessList read Get_Roughness;
    property RunnabilityIndex: IXMLRunnabilityIndexList read Get_RunnabilityIndex;
    property ShowThrough: IXMLShowThroughList read Get_ShowThrough;
    property Sizing: IXMLSizingList read Get_Sizing;
    property Smoothness: IXMLSmoothnessList read Get_Smoothness;
    property Stiffness: IXMLStiffnessList read Get_Stiffness;
    property Stretch: IXMLStretchList read Get_Stretch;
    property SurfaceStrength: IXMLSurfaceStrengthList read Get_SurfaceStrength;
    property TEA: IXMLTEAList read Get_TEA;
    property Tear: IXMLTearList read Get_Tear;
    property TearIndex: IXMLTearIndexList read Get_TearIndex;
    property Tensile: IXMLTensileList read Get_Tensile;
    property TensileIndex: IXMLTensileIndexList read Get_TensileIndex;
    property Whiteness: IXMLWhitenessList read Get_Whiteness;
    property AdditionalTest: IXMLAdditionalTest read Get_AdditionalTest;
    property NumberOfPlies: IXMLNni1List read Get_NumberOfPlies;
    property PlyAttributes: IXMLPlyAttributesList read Get_PlyAttributes;
    property PlySet: IXMLPlySetList read Get_PlySet;
  end;

{ IXMLAbrasion }

  IXMLAbrasion = interface(IXMLDetailMeasurement)
    ['{6DBD2FBE-4286-4FF1-A2C7-DB5AAD13777D}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbrasionList }

  IXMLAbrasionList = interface(IXMLNodeCollection)
    ['{8A32FA54-1124-473A-B9F7-35A3BE22E3CB}']
    { Methods & Properties }
    function Add: IXMLAbrasion;
    function Insert(const Index: Integer): IXMLAbrasion;

    function Get_Item(Index: Integer): IXMLAbrasion;
    property Items[Index: Integer]: IXMLAbrasion read Get_Item; default;
  end;

{ IXMLAbsorptionInk }

  IXMLAbsorptionInk = interface(IXMLDetailMeasurement)
    ['{C5C7FE25-9A16-4FBB-92D2-69BC2FDD9A31}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbsorptionInkList }

  IXMLAbsorptionInkList = interface(IXMLNodeCollection)
    ['{179BE4D5-C3A4-4E75-956C-0666DD1AB995}']
    { Methods & Properties }
    function Add: IXMLAbsorptionInk;
    function Insert(const Index: Integer): IXMLAbsorptionInk;

    function Get_Item(Index: Integer): IXMLAbsorptionInk;
    property Items[Index: Integer]: IXMLAbsorptionInk read Get_Item; default;
  end;

{ IXMLAbsorptionLight }

  IXMLAbsorptionLight = interface(IXMLDetailMeasurement)
    ['{E1137AE5-A948-4ECD-A605-7B721641C1AA}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbsorptionLightList }

  IXMLAbsorptionLightList = interface(IXMLNodeCollection)
    ['{8BDB0BCC-A6EB-46BC-B9C1-1444EA4B50DE}']
    { Methods & Properties }
    function Add: IXMLAbsorptionLight;
    function Insert(const Index: Integer): IXMLAbsorptionLight;

    function Get_Item(Index: Integer): IXMLAbsorptionLight;
    property Items[Index: Integer]: IXMLAbsorptionLight read Get_Item; default;
  end;

{ IXMLAbsorptionWater }

  IXMLAbsorptionWater = interface(IXMLDetailMeasurement)
    ['{2BFB9E8D-55A1-4E2A-8B3B-478D6E6259A9}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbsorptionWaterList }

  IXMLAbsorptionWaterList = interface(IXMLNodeCollection)
    ['{2ABD77B0-62AE-4F10-9D28-3B5CBEFBB361}']
    { Methods & Properties }
    function Add: IXMLAbsorptionWater;
    function Insert(const Index: Integer): IXMLAbsorptionWater;

    function Get_Item(Index: Integer): IXMLAbsorptionWater;
    property Items[Index: Integer]: IXMLAbsorptionWater read Get_Item; default;
  end;

{ IXMLAppearance }

  IXMLAppearance = interface(IXMLDetailMeasurement)
    ['{88E4376A-B173-4249-8D7F-D0C6ECB9A852}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAppearanceList }

  IXMLAppearanceList = interface(IXMLNodeCollection)
    ['{2C631117-C380-4ABC-8546-1CF5CA19F73F}']
    { Methods & Properties }
    function Add: IXMLAppearance;
    function Insert(const Index: Integer): IXMLAppearance;

    function Get_Item(Index: Integer): IXMLAppearance;
    property Items[Index: Integer]: IXMLAppearance read Get_Item; default;
  end;

{ IXMLAsh }

  IXMLAsh = interface(IXMLDetailMeasurement)
    ['{42F75D53-43D9-4103-9DE6-75F667422C28}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAshList }

  IXMLAshList = interface(IXMLNodeCollection)
    ['{A70FA74C-4118-404B-9FBB-E41693EBD70C}']
    { Methods & Properties }
    function Add: IXMLAsh;
    function Insert(const Index: Integer): IXMLAsh;

    function Get_Item(Index: Integer): IXMLAsh;
    property Items[Index: Integer]: IXMLAsh read Get_Item; default;
  end;

{ IXMLBasisWeight }

  IXMLBasisWeight = interface(IXMLNode)
    ['{335B0977-4C25-4E86-8F11-5A65A793C6F5}']
    { Property Accessors }
    function Get_ProductBasisSizeType: UnicodeString;
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    function Get_IncrementalValue: IXMLIncrementalValueList;
    procedure Set_ProductBasisSizeType(Value: UnicodeString);
    procedure Set_SampleSize(Value: LongWord);
    { Methods & Properties }
    property ProductBasisSizeType: UnicodeString read Get_ProductBasisSizeType write Set_ProductBasisSizeType;
    property DetailValue: IXMLDetailValue read Get_DetailValue;
    property DetailRangeMin: IXMLDetailRangeMin read Get_DetailRangeMin;
    property DetailRangeMax: IXMLDetailRangeMax read Get_DetailRangeMax;
    property StandardDeviation: IXMLStandardDeviation read Get_StandardDeviation;
    property SampleSize: LongWord read Get_SampleSize write Set_SampleSize;
    property TwoSigmaLower: IXMLTwoSigmaLower read Get_TwoSigmaLower;
    property TwoSigmaUpper: IXMLTwoSigmaUpper read Get_TwoSigmaUpper;
    property IncrementalValue: IXMLIncrementalValueList read Get_IncrementalValue;
  end;

{ IXMLBasisWeightList }

  IXMLBasisWeightList = interface(IXMLNodeCollection)
    ['{FFE22ED8-212B-4179-BA27-8F97469C7441}']
    { Methods & Properties }
    function Add: IXMLBasisWeight;
    function Insert(const Index: Integer): IXMLBasisWeight;

    function Get_Item(Index: Integer): IXMLBasisWeight;
    property Items[Index: Integer]: IXMLBasisWeight read Get_Item; default;
  end;


{ IXMLIncrementalValue }

  IXMLIncrementalValue = interface(IXMLNode)
    ['{B413914D-ADF5-4179-935B-487B95ECA86B}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLIncrementalValueList }

  IXMLIncrementalValueList = interface(IXMLNodeCollection)
    ['{20B79999-F47E-462E-A392-D09D841E1667}']
    { Methods & Properties }
    function Add: IXMLIncrementalValue;
    function Insert(const Index: Integer): IXMLIncrementalValue;

    function Get_Item(Index: Integer): IXMLIncrementalValue;
    property Items[Index: Integer]: IXMLIncrementalValue read Get_Item; default;
  end;

{ IXMLBendingResistance }

  IXMLBendingResistance = interface(IXMLDetailMeasurement)
    ['{F3F095A1-F45E-4F6D-9A2C-5EB8A4D62B94}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBendingResistanceList }

  IXMLBendingResistanceList = interface(IXMLNodeCollection)
    ['{D5B711E7-5E36-419F-9A43-46723525EF69}']
    { Methods & Properties }
    function Add: IXMLBendingResistance;
    function Insert(const Index: Integer): IXMLBendingResistance;

    function Get_Item(Index: Integer): IXMLBendingResistance;
    property Items[Index: Integer]: IXMLBendingResistance read Get_Item; default;
  end;

{ IXMLBendingStiffness }

  IXMLBendingStiffness = interface(IXMLDetailMeasurement)
    ['{4A2A2E52-E13F-4A21-960C-09071E6D5775}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBendingStiffnessList }

  IXMLBendingStiffnessList = interface(IXMLNodeCollection)
    ['{DCD37981-A05B-45EF-9B47-E8A775F8316C}']
    { Methods & Properties }
    function Add: IXMLBendingStiffness;
    function Insert(const Index: Integer): IXMLBendingStiffness;

    function Get_Item(Index: Integer): IXMLBendingStiffness;
    property Items[Index: Integer]: IXMLBendingStiffness read Get_Item; default;
  end;

{ IXMLBrightness }

  IXMLBrightness = interface(IXMLDetailMeasurement)
    ['{5480874F-B90C-4373-8523-82337C835ED7}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBrightnessList }

  IXMLBrightnessList = interface(IXMLNodeCollection)
    ['{6E613261-19D7-4142-B69F-5864C63471F6}']
    { Methods & Properties }
    function Add: IXMLBrightness;
    function Insert(const Index: Integer): IXMLBrightness;

    function Get_Item(Index: Integer): IXMLBrightness;
    property Items[Index: Integer]: IXMLBrightness read Get_Item; default;
  end;

{ IXMLBulk }

  IXMLBulk = interface(IXMLDetailMeasurement)
    ['{16EC2416-2513-4988-9D8A-51A06A0BAEF8}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBulkList }

  IXMLBulkList = interface(IXMLNodeCollection)
    ['{95511351-DFBA-4B95-964A-6860142262B8}']
    { Methods & Properties }
    function Add: IXMLBulk;
    function Insert(const Index: Integer): IXMLBulk;

    function Get_Item(Index: Integer): IXMLBulk;
    property Items[Index: Integer]: IXMLBulk read Get_Item; default;
  end;

{ IXMLBurst }

  IXMLBurst = interface(IXMLDetailMeasurement)
    ['{F9E05F22-84E0-4FDE-A5E3-CB31AD529A62}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBurstList }

  IXMLBurstList = interface(IXMLNodeCollection)
    ['{ED980839-3C4B-4780-919E-0768B79C6487}']
    { Methods & Properties }
    function Add: IXMLBurst;
    function Insert(const Index: Integer): IXMLBurst;

    function Get_Item(Index: Integer): IXMLBurst;
    property Items[Index: Integer]: IXMLBurst read Get_Item; default;
  end;

{ IXMLBurstIndex }

  IXMLBurstIndex = interface(IXMLDetailMeasurement)
    ['{B54626BC-A355-47BA-A723-5F05B0274ECF}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBurstIndexList }

  IXMLBurstIndexList = interface(IXMLNodeCollection)
    ['{52146CE9-965F-453D-9313-1810112C1549}']
    { Methods & Properties }
    function Add: IXMLBurstIndex;
    function Insert(const Index: Integer): IXMLBurstIndex;

    function Get_Item(Index: Integer): IXMLBurstIndex;
    property Items[Index: Integer]: IXMLBurstIndex read Get_Item; default;
  end;

{ IXMLCaliper }

  IXMLCaliper = interface(IXMLDetailMeasurement)
    ['{4C62454B-8595-44E8-BEB5-0690804BDF71}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLCaliperList }

  IXMLCaliperList = interface(IXMLNodeCollection)
    ['{A12E7631-61ED-48D6-A877-08EA16E454B2}']
    { Methods & Properties }
    function Add: IXMLCaliper;
    function Insert(const Index: Integer): IXMLCaliper;

    function Get_Item(Index: Integer): IXMLCaliper;
    property Items[Index: Integer]: IXMLCaliper read Get_Item; default;
  end;

{ IXMLCoatWeight }

  IXMLCoatWeight = interface(IXMLDetailMeasurement)
    ['{CCE0A81F-6C50-4334-AD0B-6A9CF1DA827E}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLCoatWeightList }

  IXMLCoatWeightList = interface(IXMLNodeCollection)
    ['{0D517DB0-796D-4214-9A1C-D82AE68C0C06}']
    { Methods & Properties }
    function Add: IXMLCoatWeight;
    function Insert(const Index: Integer): IXMLCoatWeight;

    function Get_Item(Index: Integer): IXMLCoatWeight;
    property Items[Index: Integer]: IXMLCoatWeight read Get_Item; default;
  end;

{ IXMLColourDetail }

  IXMLColourDetail = interface(IXMLNode)
    ['{403E1E88-AD4C-403B-909B-C1AAB9F762DC}']
    { Property Accessors }
    function Get_CMYK: IXMLCMYK;
    function Get_ColourShade: IXMLColourShade;
    function Get_HSB: IXMLHSB;
    function Get_Lab: IXMLLab;
    function Get_RGB: IXMLRGB;
    function Get_ColourDescription: IXMLS72List;
    function Get_ColourCode: IXMLColourCode;
    { Methods & Properties }
    property CMYK: IXMLCMYK read Get_CMYK;
    property ColourShade: IXMLColourShade read Get_ColourShade;
    property HSB: IXMLHSB read Get_HSB;
    property Lab: IXMLLab read Get_Lab;
    property RGB: IXMLRGB read Get_RGB;
    property ColourDescription: IXMLS72List read Get_ColourDescription;
    property ColourCode: IXMLColourCode read Get_ColourCode;
  end;

{ IXMLColourDetailList }

  IXMLColourDetailList = interface(IXMLNodeCollection)
    ['{6F093B4A-FECD-4B0A-A677-D6B7A9884544}']
    { Methods & Properties }
    function Add: IXMLColourDetail;
    function Insert(const Index: Integer): IXMLColourDetail;

    function Get_Item(Index: Integer): IXMLColourDetail;
    property Items[Index: Integer]: IXMLColourDetail read Get_Item; default;
  end;

{ IXMLCMYK }

  IXMLCMYK = interface(IXMLNode)
    ['{22E8A976-B1BA-4BC6-879E-DDF908C96606}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_Cyan: IXMLDetailMeasurement;
    function Get_Magenta: IXMLDetailMeasurement;
    function Get_Yellow: IXMLDetailMeasurement;
    function Get_Black: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
    property Cyan: IXMLDetailMeasurement read Get_Cyan;
    property Magenta: IXMLDetailMeasurement read Get_Magenta;
    property Yellow: IXMLDetailMeasurement read Get_Yellow;
    property Black: IXMLDetailMeasurement read Get_Black;
  end;

{ IXMLColourShade }

  IXMLColourShade = interface(IXMLNode)
    ['{2B95D603-CF97-45D4-8C97-20DE5C454BB2}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLHSB }

  IXMLHSB = interface(IXMLNode)
    ['{65E6CAC2-D781-4360-947E-89254DCC3B4E}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_Hue: IXMLDetailMeasurement;
    function Get_Saturation: IXMLDetailMeasurement;
    function Get_Brilliance: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
    property Hue: IXMLDetailMeasurement read Get_Hue;
    property Saturation: IXMLDetailMeasurement read Get_Saturation;
    property Brilliance: IXMLDetailMeasurement read Get_Brilliance;
  end;

{ IXMLLab }

  IXMLLab = interface(IXMLNode)
    ['{C0D9306E-08ED-4CFE-85D0-3CEC81643B4D}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_L: IXMLDetailMeasurement;
    function Get_A: IXMLDetailMeasurement;
    function Get_B: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
    property L: IXMLDetailMeasurement read Get_L;
    property A: IXMLDetailMeasurement read Get_A;
    property B: IXMLDetailMeasurement read Get_B;
  end;

{ IXMLRGB }

  IXMLRGB = interface(IXMLNode)
    ['{701541F6-A8C0-43CC-A1B9-4385991D1870}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_Red: IXMLDetailMeasurement;
    function Get_Green: IXMLDetailMeasurement;
    function Get_Blue: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
    property Red: IXMLDetailMeasurement read Get_Red;
    property Green: IXMLDetailMeasurement read Get_Green;
    property Blue: IXMLDetailMeasurement read Get_Blue;
  end;

{ IXMLColourCode }

  IXMLColourCode = interface(IXMLNode)
    ['{ED4C2260-8EDA-42F1-87F2-21514D38E8B2}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLDensity }

  IXMLDensity = interface(IXMLDetailMeasurement)
    ['{7921C3B1-BBAA-42E2-AEEC-953F55951352}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDensityList }

  IXMLDensityList = interface(IXMLNodeCollection)
    ['{17EE90A9-8703-44E8-B83A-5D8D085715E3}']
    { Methods & Properties }
    function Add: IXMLDensity;
    function Insert(const Index: Integer): IXMLDensity;

    function Get_Item(Index: Integer): IXMLDensity;
    property Items[Index: Integer]: IXMLDensity read Get_Item; default;
  end;

{ IXMLDirt }

  IXMLDirt = interface(IXMLDetailMeasurement)
    ['{594E5CE1-E3C0-464E-A338-361AF51C9605}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDirtList }

  IXMLDirtList = interface(IXMLNodeCollection)
    ['{A410E6BC-C8C0-40D7-9D84-007DBC338B28}']
    { Methods & Properties }
    function Add: IXMLDirt;
    function Insert(const Index: Integer): IXMLDirt;

    function Get_Item(Index: Integer): IXMLDirt;
    property Items[Index: Integer]: IXMLDirt read Get_Item; default;
  end;

{ IXMLDominantWavelength }

  IXMLDominantWavelength = interface(IXMLDetailMeasurement)
    ['{58A59136-D435-4FE4-9574-065308FFAD79}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDominantWavelengthList }

  IXMLDominantWavelengthList = interface(IXMLNodeCollection)
    ['{50D7E163-083D-46D5-8B86-3DC1C40281CD}']
    { Methods & Properties }
    function Add: IXMLDominantWavelength;
    function Insert(const Index: Integer): IXMLDominantWavelength;

    function Get_Item(Index: Integer): IXMLDominantWavelength;
    property Items[Index: Integer]: IXMLDominantWavelength read Get_Item; default;
  end;

{ IXMLExcitationPurity }

  IXMLExcitationPurity = interface(IXMLDetailMeasurement)
    ['{0031357A-C25C-4AD0-B8D8-69105D6257CF}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLExcitationPurityList }

  IXMLExcitationPurityList = interface(IXMLNodeCollection)
    ['{E67DA2CE-8E9B-414B-B4B1-880B9C7D15CF}']
    { Methods & Properties }
    function Add: IXMLExcitationPurity;
    function Insert(const Index: Integer): IXMLExcitationPurity;

    function Get_Item(Index: Integer): IXMLExcitationPurity;
    property Items[Index: Integer]: IXMLExcitationPurity read Get_Item; default;
  end;

{ IXMLFibreLength }

  IXMLFibreLength = interface(IXMLDetailMeasurement)
    ['{3C999D0A-561C-4701-8BDF-738F60ACC88C}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFibreLengthList }

  IXMLFibreLengthList = interface(IXMLNodeCollection)
    ['{BC1FAA6B-C260-4419-937E-239D2B02FF92}']
    { Methods & Properties }
    function Add: IXMLFibreLength;
    function Insert(const Index: Integer): IXMLFibreLength;

    function Get_Item(Index: Integer): IXMLFibreLength;
    property Items[Index: Integer]: IXMLFibreLength read Get_Item; default;
  end;

{ IXMLFibreClassification }

  IXMLFibreClassification = interface(IXMLDetailMeasurement)
    ['{67DF9892-4ED5-40F8-9DE5-2296882D1C42}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFibreClassificationList }

  IXMLFibreClassificationList = interface(IXMLNodeCollection)
    ['{24752E3E-9BF0-4133-BCAF-E420CB6B189E}']
    { Methods & Properties }
    function Add: IXMLFibreClassification;
    function Insert(const Index: Integer): IXMLFibreClassification;

    function Get_Item(Index: Integer): IXMLFibreClassification;
    property Items[Index: Integer]: IXMLFibreClassification read Get_Item; default;
  end;

{ IXMLFolding }

  IXMLFolding = interface(IXMLDetailMeasurement)
    ['{F0F37C2B-0514-46D5-A86B-9E056F1FCD8F}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFoldingList }

  IXMLFoldingList = interface(IXMLNodeCollection)
    ['{94C6DD54-677B-4D81-A2E9-FC33C42745A5}']
    { Methods & Properties }
    function Add: IXMLFolding;
    function Insert(const Index: Integer): IXMLFolding;

    function Get_Item(Index: Integer): IXMLFolding;
    property Items[Index: Integer]: IXMLFolding read Get_Item; default;
  end;

{ IXMLFormation }

  IXMLFormation = interface(IXMLDetailMeasurement)
    ['{74D8875C-3FBB-48EF-BE31-9D9955CCFAB5}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFormationList }

  IXMLFormationList = interface(IXMLNodeCollection)
    ['{FAA9BDF9-CC51-43B7-A00F-2F5151235B4A}']
    { Methods & Properties }
    function Add: IXMLFormation;
    function Insert(const Index: Integer): IXMLFormation;

    function Get_Item(Index: Integer): IXMLFormation;
    property Items[Index: Integer]: IXMLFormation read Get_Item; default;
  end;

{ IXMLFreeness }

  IXMLFreeness = interface(IXMLDetailMeasurement)
    ['{560C0756-B8F2-41E7-9071-31AE9049C8A0}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFreenessList }

  IXMLFreenessList = interface(IXMLNodeCollection)
    ['{AFA3304E-E4BA-48B6-832A-DD478548DFE6}']
    { Methods & Properties }
    function Add: IXMLFreeness;
    function Insert(const Index: Integer): IXMLFreeness;

    function Get_Item(Index: Integer): IXMLFreeness;
    property Items[Index: Integer]: IXMLFreeness read Get_Item; default;
  end;

{ IXMLFriction }

  IXMLFriction = interface(IXMLDetailMeasurement)
    ['{6633285D-E3B2-4573-AD6A-170D24A17050}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFrictionList }

  IXMLFrictionList = interface(IXMLNodeCollection)
    ['{CD3CA45F-1E21-4AFB-BDC0-0FC178F36141}']
    { Methods & Properties }
    function Add: IXMLFriction;
    function Insert(const Index: Integer): IXMLFriction;

    function Get_Item(Index: Integer): IXMLFriction;
    property Items[Index: Integer]: IXMLFriction read Get_Item; default;
  end;

{ IXMLGloss }

  IXMLGloss = interface(IXMLDetailMeasurement)
    ['{C0DA5453-4B08-45D9-8496-6A6719687944}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLGlossList }

  IXMLGlossList = interface(IXMLNodeCollection)
    ['{88F11329-999B-4FB7-83B2-7D7471A883E9}']
    { Methods & Properties }
    function Add: IXMLGloss;
    function Insert(const Index: Integer): IXMLGloss;

    function Get_Item(Index: Integer): IXMLGloss;
    property Items[Index: Integer]: IXMLGloss read Get_Item; default;
  end;

{ IXMLLightScattering }

  IXMLLightScattering = interface(IXMLDetailMeasurement)
    ['{5B8A93AC-F69D-46AA-BB51-91FC2A22C3AD}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLLightScatteringList }

  IXMLLightScatteringList = interface(IXMLNodeCollection)
    ['{701B9DC5-53C0-4500-AD4A-6412A2C9D163}']
    { Methods & Properties }
    function Add: IXMLLightScattering;
    function Insert(const Index: Integer): IXMLLightScattering;

    function Get_Item(Index: Integer): IXMLLightScattering;
    property Items[Index: Integer]: IXMLLightScattering read Get_Item; default;
  end;

{ IXMLLuminance }

  IXMLLuminance = interface(IXMLDetailMeasurement)
    ['{72C232C0-2CF1-4DBE-8B0B-FD8E1633CACB}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLLuminanceList }

  IXMLLuminanceList = interface(IXMLNodeCollection)
    ['{0D235E78-D621-48F5-9FB2-25547BB280E3}']
    { Methods & Properties }
    function Add: IXMLLuminance;
    function Insert(const Index: Integer): IXMLLuminance;

    function Get_Item(Index: Integer): IXMLLuminance;
    property Items[Index: Integer]: IXMLLuminance read Get_Item; default;
  end;

{ IXMLMoisture }

  IXMLMoisture = interface(IXMLDetailMeasurement)
    ['{2B41F6BC-DCC6-45A7-BDE7-25720767E90C}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLMoistureList }

  IXMLMoistureList = interface(IXMLNodeCollection)
    ['{A880881B-7B76-4737-BE1B-177170C0E0D3}']
    { Methods & Properties }
    function Add: IXMLMoisture;
    function Insert(const Index: Integer): IXMLMoisture;

    function Get_Item(Index: Integer): IXMLMoisture;
    property Items[Index: Integer]: IXMLMoisture read Get_Item; default;
  end;

{ IXMLMullen }

  IXMLMullen = interface(IXMLDetailMeasurement)
    ['{CFAE4BF4-0ABD-411A-A3E1-116A2CE743FF}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLMullenList }

  IXMLMullenList = interface(IXMLNodeCollection)
    ['{C729544A-979D-4BEF-9CEB-9D98BAE48B7D}']
    { Methods & Properties }
    function Add: IXMLMullen;
    function Insert(const Index: Integer): IXMLMullen;

    function Get_Item(Index: Integer): IXMLMullen;
    property Items[Index: Integer]: IXMLMullen read Get_Item; default;
  end;

{ IXMLOpacity }

  IXMLOpacity = interface(IXMLDetailMeasurement)
    ['{7E7CA5D1-0A09-4526-9F3F-0F4D82A48C84}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLOpacityList }

  IXMLOpacityList = interface(IXMLNodeCollection)
    ['{3A5BDA63-2786-4492-9AE7-EEE36E1A0993}']
    { Methods & Properties }
    function Add: IXMLOpacity;
    function Insert(const Index: Integer): IXMLOpacity;

    function Get_Item(Index: Integer): IXMLOpacity;
    property Items[Index: Integer]: IXMLOpacity read Get_Item; default;
  end;

{ IXMLPermeability }

  IXMLPermeability = interface(IXMLDetailMeasurement)
    ['{92B591DE-09FE-4401-88BB-72205A1D492F}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPermeabilityList }

  IXMLPermeabilityList = interface(IXMLNodeCollection)
    ['{E218694C-D927-4E97-A6DB-D37691B3D536}']
    { Methods & Properties }
    function Add: IXMLPermeability;
    function Insert(const Index: Integer): IXMLPermeability;

    function Get_Item(Index: Integer): IXMLPermeability;
    property Items[Index: Integer]: IXMLPermeability read Get_Item; default;
  end;

{ IXMLPH }

  IXMLPH = interface(IXMLDetailMeasurement)
    ['{5B22D0B8-9E72-4621-A230-569272C7F7BC}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPHList }

  IXMLPHList = interface(IXMLNodeCollection)
    ['{F8B7FB1F-63DE-4001-87A2-F544F25F5231}']
    { Methods & Properties }
    function Add: IXMLPH;
    function Insert(const Index: Integer): IXMLPH;

    function Get_Item(Index: Integer): IXMLPH;
    property Items[Index: Integer]: IXMLPH read Get_Item; default;
  end;

{ IXMLPlyBond }

  IXMLPlyBond = interface(IXMLDetailMeasurement)
    ['{A7854B6C-04DF-41A6-AE16-3D0F3EA7240F}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPlyBondList }

  IXMLPlyBondList = interface(IXMLNodeCollection)
    ['{A6648019-DFF5-4171-AB81-CD8FE27D6518}']
    { Methods & Properties }
    function Add: IXMLPlyBond;
    function Insert(const Index: Integer): IXMLPlyBond;

    function Get_Item(Index: Integer): IXMLPlyBond;
    property Items[Index: Integer]: IXMLPlyBond read Get_Item; default;
  end;

{ IXMLPorosity }

  IXMLPorosity = interface(IXMLDetailMeasurement)
    ['{17B1882B-04DB-404F-A8C5-CB06A4B140EF}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPorosityList }

  IXMLPorosityList = interface(IXMLNodeCollection)
    ['{9D035759-0DD7-45FA-921B-2954D24ACEE2}']
    { Methods & Properties }
    function Add: IXMLPorosity;
    function Insert(const Index: Integer): IXMLPorosity;

    function Get_Item(Index: Integer): IXMLPorosity;
    property Items[Index: Integer]: IXMLPorosity read Get_Item; default;
  end;

{ IXMLPostConsumerWaste }

  IXMLPostConsumerWaste = interface(IXMLDetailMeasurement)
    ['{539296D2-5F85-455D-9BDF-64855BDC94D3}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPostConsumerWasteList }

  IXMLPostConsumerWasteList = interface(IXMLNodeCollection)
    ['{4A77B398-D3F1-424F-8430-0493C22581C8}']
    { Methods & Properties }
    function Add: IXMLPostConsumerWaste;
    function Insert(const Index: Integer): IXMLPostConsumerWaste;

    function Get_Item(Index: Integer): IXMLPostConsumerWaste;
    property Items[Index: Integer]: IXMLPostConsumerWaste read Get_Item; default;
  end;

{ IXMLPreConsumerWaste }

  IXMLPreConsumerWaste = interface(IXMLDetailMeasurement)
    ['{FD07E53B-3C74-48B7-9B7B-DE385ED144A4}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPreConsumerWasteList }

  IXMLPreConsumerWasteList = interface(IXMLNodeCollection)
    ['{66BFD5A1-2EDC-4277-A157-01C1F99DA3CB}']
    { Methods & Properties }
    function Add: IXMLPreConsumerWaste;
    function Insert(const Index: Integer): IXMLPreConsumerWaste;

    function Get_Item(Index: Integer): IXMLPreConsumerWaste;
    property Items[Index: Integer]: IXMLPreConsumerWaste read Get_Item; default;
  end;

{ IXMLRecycled }

  IXMLRecycled = interface(IXMLDetailMeasurement)
    ['{0B3BED9E-6D4D-4021-8C55-FC1F813C3082}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRecycledList }

  IXMLRecycledList = interface(IXMLNodeCollection)
    ['{6D13D20A-713A-494A-B4DC-EE30B99B4320}']
    { Methods & Properties }
    function Add: IXMLRecycled;
    function Insert(const Index: Integer): IXMLRecycled;

    function Get_Item(Index: Integer): IXMLRecycled;
    property Items[Index: Integer]: IXMLRecycled read Get_Item; default;
  end;

{ IXMLResistance }

  IXMLResistance = interface(IXMLDetailMeasurement)
    ['{ADD94100-C165-44CE-A997-43736046DB00}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLResistanceList }

  IXMLResistanceList = interface(IXMLNodeCollection)
    ['{9D65B466-6221-411B-A29F-3070EC133A97}']
    { Methods & Properties }
    function Add: IXMLResistance;
    function Insert(const Index: Integer): IXMLResistance;

    function Get_Item(Index: Integer): IXMLResistance;
    property Items[Index: Integer]: IXMLResistance read Get_Item; default;
  end;

{ IXMLRingCrush }

  IXMLRingCrush = interface(IXMLDetailMeasurement)
    ['{33B550D1-FDA4-4925-84DE-06DF1B45E29D}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRingCrushList }

  IXMLRingCrushList = interface(IXMLNodeCollection)
    ['{3A9425C9-4C42-4838-936E-E146BDE3C85C}']
    { Methods & Properties }
    function Add: IXMLRingCrush;
    function Insert(const Index: Integer): IXMLRingCrush;

    function Get_Item(Index: Integer): IXMLRingCrush;
    property Items[Index: Integer]: IXMLRingCrush read Get_Item; default;
  end;

{ IXMLRoughness }

  IXMLRoughness = interface(IXMLDetailMeasurement)
    ['{EF265291-4A52-4767-953E-91A507F268F9}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRoughnessList }

  IXMLRoughnessList = interface(IXMLNodeCollection)
    ['{04293F08-7200-4B7E-8D55-1A4741463F80}']
    { Methods & Properties }
    function Add: IXMLRoughness;
    function Insert(const Index: Integer): IXMLRoughness;

    function Get_Item(Index: Integer): IXMLRoughness;
    property Items[Index: Integer]: IXMLRoughness read Get_Item; default;
  end;

{ IXMLRunnabilityIndex }

  IXMLRunnabilityIndex = interface(IXMLDetailMeasurement)
    ['{9CC858DE-7C02-4C18-97CE-CFD85A6203FF}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRunnabilityIndexList }

  IXMLRunnabilityIndexList = interface(IXMLNodeCollection)
    ['{00833A25-55D2-42DB-BCD2-4AF859E431E3}']
    { Methods & Properties }
    function Add: IXMLRunnabilityIndex;
    function Insert(const Index: Integer): IXMLRunnabilityIndex;

    function Get_Item(Index: Integer): IXMLRunnabilityIndex;
    property Items[Index: Integer]: IXMLRunnabilityIndex read Get_Item; default;
  end;

{ IXMLShowThrough }

  IXMLShowThrough = interface(IXMLDetailMeasurement)
    ['{30881CA7-C942-47BC-B890-5AEC815636DE}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLShowThroughList }

  IXMLShowThroughList = interface(IXMLNodeCollection)
    ['{0F86D315-F2AF-42F4-ABA9-ABB912058C8A}']
    { Methods & Properties }
    function Add: IXMLShowThrough;
    function Insert(const Index: Integer): IXMLShowThrough;

    function Get_Item(Index: Integer): IXMLShowThrough;
    property Items[Index: Integer]: IXMLShowThrough read Get_Item; default;
  end;

{ IXMLSizing }

  IXMLSizing = interface(IXMLDetailMeasurement)
    ['{32DE579E-F49E-4FD9-B2BB-9A253884169E}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSizingList }

  IXMLSizingList = interface(IXMLNodeCollection)
    ['{532953FB-BCEF-4DFA-8887-34EBC489D57D}']
    { Methods & Properties }
    function Add: IXMLSizing;
    function Insert(const Index: Integer): IXMLSizing;

    function Get_Item(Index: Integer): IXMLSizing;
    property Items[Index: Integer]: IXMLSizing read Get_Item; default;
  end;

{ IXMLSmoothness }

  IXMLSmoothness = interface(IXMLDetailMeasurement)
    ['{10D6B2C1-BED7-4115-BF3E-4DE4B5E9148F}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSmoothnessList }

  IXMLSmoothnessList = interface(IXMLNodeCollection)
    ['{063EA016-1EAD-4CE6-B1E3-5CAAF4CD30E1}']
    { Methods & Properties }
    function Add: IXMLSmoothness;
    function Insert(const Index: Integer): IXMLSmoothness;

    function Get_Item(Index: Integer): IXMLSmoothness;
    property Items[Index: Integer]: IXMLSmoothness read Get_Item; default;
  end;

{ IXMLStiffness }

  IXMLStiffness = interface(IXMLDetailMeasurement)
    ['{85EBD6BA-BE94-43B9-9E8E-79FC1249A030}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLStiffnessList }

  IXMLStiffnessList = interface(IXMLNodeCollection)
    ['{2AC13C0C-C7A3-44C7-8C6D-2531A1BB5882}']
    { Methods & Properties }
    function Add: IXMLStiffness;
    function Insert(const Index: Integer): IXMLStiffness;

    function Get_Item(Index: Integer): IXMLStiffness;
    property Items[Index: Integer]: IXMLStiffness read Get_Item; default;
  end;

{ IXMLStretch }

  IXMLStretch = interface(IXMLDetailMeasurement)
    ['{1D8E9A9C-E0E9-46AC-85FB-666FECBA10AC}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLStretchList }

  IXMLStretchList = interface(IXMLNodeCollection)
    ['{2F42489D-7587-4459-9F46-3C7B804B4E2F}']
    { Methods & Properties }
    function Add: IXMLStretch;
    function Insert(const Index: Integer): IXMLStretch;

    function Get_Item(Index: Integer): IXMLStretch;
    property Items[Index: Integer]: IXMLStretch read Get_Item; default;
  end;

{ IXMLSurfaceStrength }

  IXMLSurfaceStrength = interface(IXMLDetailMeasurement)
    ['{5B52B96E-8575-4DBE-86A7-6E04B9E97A0E}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSurfaceStrengthList }

  IXMLSurfaceStrengthList = interface(IXMLNodeCollection)
    ['{AB33E2C7-2AB7-4303-ADB1-9C3FCB6AF9A1}']
    { Methods & Properties }
    function Add: IXMLSurfaceStrength;
    function Insert(const Index: Integer): IXMLSurfaceStrength;

    function Get_Item(Index: Integer): IXMLSurfaceStrength;
    property Items[Index: Integer]: IXMLSurfaceStrength read Get_Item; default;
  end;

{ IXMLTEA }

  IXMLTEA = interface(IXMLDetailMeasurement)
    ['{F13768E6-81FE-4886-B07B-C83CD3D6F810}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTEAList }

  IXMLTEAList = interface(IXMLNodeCollection)
    ['{4C57042F-8577-47FC-88EA-04412379D01B}']
    { Methods & Properties }
    function Add: IXMLTEA;
    function Insert(const Index: Integer): IXMLTEA;

    function Get_Item(Index: Integer): IXMLTEA;
    property Items[Index: Integer]: IXMLTEA read Get_Item; default;
  end;

{ IXMLTear }

  IXMLTear = interface(IXMLDetailMeasurement)
    ['{664FA2A9-1FE2-4397-8FD1-17D94C1DFB4A}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTearList }

  IXMLTearList = interface(IXMLNodeCollection)
    ['{C298B26B-4FF2-4166-BB11-70491E6CC595}']
    { Methods & Properties }
    function Add: IXMLTear;
    function Insert(const Index: Integer): IXMLTear;

    function Get_Item(Index: Integer): IXMLTear;
    property Items[Index: Integer]: IXMLTear read Get_Item; default;
  end;

{ IXMLTearIndex }

  IXMLTearIndex = interface(IXMLDetailMeasurement)
    ['{065001C3-A26E-46D2-824A-05B3A097B2DB}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTearIndexList }

  IXMLTearIndexList = interface(IXMLNodeCollection)
    ['{962015A4-8120-487B-B40E-62A1662A634E}']
    { Methods & Properties }
    function Add: IXMLTearIndex;
    function Insert(const Index: Integer): IXMLTearIndex;

    function Get_Item(Index: Integer): IXMLTearIndex;
    property Items[Index: Integer]: IXMLTearIndex read Get_Item; default;
  end;

{ IXMLTensile }

  IXMLTensile = interface(IXMLDetailMeasurement)
    ['{4DCA9A26-A19B-4D76-97F3-46877C1E21B3}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTensileList }

  IXMLTensileList = interface(IXMLNodeCollection)
    ['{14946B6B-352C-4B47-AD49-B114AED5032C}']
    { Methods & Properties }
    function Add: IXMLTensile;
    function Insert(const Index: Integer): IXMLTensile;

    function Get_Item(Index: Integer): IXMLTensile;
    property Items[Index: Integer]: IXMLTensile read Get_Item; default;
  end;

{ IXMLTensileIndex }

  IXMLTensileIndex = interface(IXMLDetailMeasurement)
    ['{313CEA2E-6898-4789-AABF-39EC17B2C9BF}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTensileIndexList }

  IXMLTensileIndexList = interface(IXMLNodeCollection)
    ['{E5D3CFD9-1A13-4DAE-8722-D3624CAAE59E}']
    { Methods & Properties }
    function Add: IXMLTensileIndex;
    function Insert(const Index: Integer): IXMLTensileIndex;

    function Get_Item(Index: Integer): IXMLTensileIndex;
    property Items[Index: Integer]: IXMLTensileIndex read Get_Item; default;
  end;

{ IXMLWhiteness }

  IXMLWhiteness = interface(IXMLDetailMeasurement)
    ['{CBD5AA6D-D08D-4CB3-9DB3-EB2EBC9CE995}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLWhitenessList }

  IXMLWhitenessList = interface(IXMLNodeCollection)
    ['{D5CC1BC5-37FE-4B85-BCC4-65433963DF90}']
    { Methods & Properties }
    function Add: IXMLWhiteness;
    function Insert(const Index: Integer): IXMLWhiteness;

    function Get_Item(Index: Integer): IXMLWhiteness;
    property Items[Index: Integer]: IXMLWhiteness read Get_Item; default;
  end;

{ IXMLAdditionalTest }

  IXMLAdditionalTest = interface(IXMLNode)
    ['{2DCA9D69-6042-40EB-B19F-D7A555AB6C85}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_AdditionalTestName: UnicodeString;
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    procedure Set_AdditionalTestName(Value: UnicodeString);
    procedure Set_SampleSize(Value: LongWord);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
    property AdditionalTestName: UnicodeString read Get_AdditionalTestName write Set_AdditionalTestName;
    property DetailValue: IXMLDetailValue read Get_DetailValue;
    property DetailRangeMin: IXMLDetailRangeMin read Get_DetailRangeMin;
    property DetailRangeMax: IXMLDetailRangeMax read Get_DetailRangeMax;
    property StandardDeviation: IXMLStandardDeviation read Get_StandardDeviation;
    property SampleSize: LongWord read Get_SampleSize write Set_SampleSize;
    property TwoSigmaLower: IXMLTwoSigmaLower read Get_TwoSigmaLower;
    property TwoSigmaUpper: IXMLTwoSigmaUpper read Get_TwoSigmaUpper;
  end;

{ IXMLPlyAttributes }

  IXMLPlyAttributes = interface(IXMLNode)
    ['{1A681124-902A-4A10-ACA9-03CCAFC94F08}']
    { Property Accessors }
    function Get_CoatingLocation: UnicodeString;
    function Get_PlyNumber: LongWord;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_CoatingLocation(Value: UnicodeString);
    procedure Set_PlyNumber(Value: LongWord);
    { Methods & Properties }
    property CoatingLocation: UnicodeString read Get_CoatingLocation write Set_CoatingLocation;
    property PlyNumber: LongWord read Get_PlyNumber write Set_PlyNumber;
    property Abrasion: IXMLAbrasionList read Get_Abrasion;
    property AbsorptionInk: IXMLAbsorptionInkList read Get_AbsorptionInk;
    property AbsorptionLight: IXMLAbsorptionLightList read Get_AbsorptionLight;
    property AbsorptionWater: IXMLAbsorptionWaterList read Get_AbsorptionWater;
    property Appearance: IXMLAppearanceList read Get_Appearance;
    property Ash: IXMLAshList read Get_Ash;
    property BasisWeight: IXMLBasisWeightList read Get_BasisWeight;
    property BendingResistance: IXMLBendingResistanceList read Get_BendingResistance;
    property BendingStiffness: IXMLBendingStiffnessList read Get_BendingStiffness;
    property Brightness: IXMLBrightnessList read Get_Brightness;
    property Bulk: IXMLBulkList read Get_Bulk;
    property Burst: IXMLBurstList read Get_Burst;
    property BurstIndex: IXMLBurstIndexList read Get_BurstIndex;
    property Caliper: IXMLCaliperList read Get_Caliper;
    property CoatWeight: IXMLCoatWeightList read Get_CoatWeight;
    property ColourDetail: IXMLColourDetailList read Get_ColourDetail;
    property Density: IXMLDensityList read Get_Density;
    property Dirt: IXMLDirtList read Get_Dirt;
    property DominantWavelength: IXMLDominantWavelengthList read Get_DominantWavelength;
    property FibreLength: IXMLFibreLengthList read Get_FibreLength;
    property FibreClassification: IXMLFibreClassificationList read Get_FibreClassification;
    property Folding: IXMLFoldingList read Get_Folding;
    property Formation: IXMLFormationList read Get_Formation;
    property Freeness: IXMLFreenessList read Get_Freeness;
    property Friction: IXMLFrictionList read Get_Friction;
    property Gloss: IXMLGlossList read Get_Gloss;
    property LightScattering: IXMLLightScatteringList read Get_LightScattering;
    property Moisture: IXMLMoistureList read Get_Moisture;
    property Opacity: IXMLOpacityList read Get_Opacity;
    property Permeability: IXMLPermeabilityList read Get_Permeability;
    property PH: IXMLPHList read Get_PH;
    property PlyBond: IXMLPlyBondList read Get_PlyBond;
    property Porosity: IXMLPorosityList read Get_Porosity;
    property PostConsumerWaste: IXMLPostConsumerWasteList read Get_PostConsumerWaste;
    property PPI: IXMLMeasurementList read Get_PPI;
    property PreConsumerWaste: IXMLPreConsumerWasteList read Get_PreConsumerWaste;
    property Recycled: IXMLRecycledList read Get_Recycled;
    property Resistance: IXMLResistanceList read Get_Resistance;
    property RingCrush: IXMLRingCrushList read Get_RingCrush;
    property Roughness: IXMLRoughnessList read Get_Roughness;
    property RunnabilityIndex: IXMLRunnabilityIndexList read Get_RunnabilityIndex;
    property ShowThrough: IXMLShowThroughList read Get_ShowThrough;
    property Sizing: IXMLSizingList read Get_Sizing;
    property Smoothness: IXMLSmoothnessList read Get_Smoothness;
    property Stiffness: IXMLStiffnessList read Get_Stiffness;
    property Stretch: IXMLStretchList read Get_Stretch;
    property SurfaceStrength: IXMLSurfaceStrengthList read Get_SurfaceStrength;
    property TEA: IXMLTEAList read Get_TEA;
    property Tear: IXMLTearList read Get_Tear;
    property TearIndex: IXMLTearIndexList read Get_TearIndex;
    property Tensile: IXMLTensileList read Get_Tensile;
    property TensileIndex: IXMLTensileIndexList read Get_TensileIndex;
    property Whiteness: IXMLWhitenessList read Get_Whiteness;
    property AdditionalTest: IXMLAdditionalTest read Get_AdditionalTest;
  end;

{ IXMLPlyAttributesList }

  IXMLPlyAttributesList = interface(IXMLNodeCollection)
    ['{40388564-07FE-4135-8371-6D01BEAE6D2A}']
    { Methods & Properties }
    function Add: IXMLPlyAttributes;
    function Insert(const Index: Integer): IXMLPlyAttributes;

    function Get_Item(Index: Integer): IXMLPlyAttributes;
    property Items[Index: Integer]: IXMLPlyAttributes read Get_Item; default;
  end;

{ IXMLPlySet }

  IXMLPlySet = interface(IXMLNode)
    ['{501C249F-CD8D-4D19-8C78-7793AC2C5082}']
    { Property Accessors }
    function Get_EdgePaddable: UnicodeString;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    procedure Set_EdgePaddable(Value: UnicodeString);
    { Methods & Properties }
    property EdgePaddable: UnicodeString read Get_EdgePaddable write Set_EdgePaddable;
    property NumberOfPlies: IXMLNni1List read Get_NumberOfPlies;
    property PlyAttributes: IXMLPlyAttributesList read Get_PlyAttributes;
  end;

{ IXMLPlySetList }

  IXMLPlySetList = interface(IXMLNodeCollection)
    ['{AC7DCDD6-8C6B-4691-93A2-857E7C84FCEE}']
    { Methods & Properties }
    function Add: IXMLPlySet;
    function Insert(const Index: Integer): IXMLPlySet;

    function Get_Item(Index: Integer): IXMLPlySet;
    property Items[Index: Integer]: IXMLPlySet read Get_Item; default;
  end;

{ IXMLReel }

  IXMLReel = interface(IXMLNode)
    ['{083AA5E4-5E0A-4138-8DE9-C05926909FBF}']
    { Property Accessors }
    function Get_ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
    { Methods & Properties }
    property ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass read Get_ReelConversionCharacteristics;
    property ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass read Get_ReelPackagingCharacteristics;
  end;

{ IXMLReelConversionCharacteristicsClass }

  IXMLReelConversionCharacteristicsClass = interface(IXMLNode)
    ['{CF62EC7A-0C3D-4EA6-B5BE-0001E2E9128A}']
    { Property Accessors }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_WindingDirection: UnicodeString;
    function Get_MakeTo: UnicodeString;
    function Get_ReelWidth: IXMLMeasurementList;
    function Get_ReelDiameter: IXMLMeasurementList;
    function Get_ReelLength: IXMLMeasurementList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristicsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: UnicodeString);
    procedure Set_MakeTo(Value: UnicodeString);
    { Methods & Properties }
    property ConversionCode: IXMLConversionCode read Get_ConversionCode;
    property WindingDirection: UnicodeString read Get_WindingDirection write Set_WindingDirection;
    property MakeTo: UnicodeString read Get_MakeTo write Set_MakeTo;
    property ReelWidth: IXMLMeasurementList read Get_ReelWidth;
    property ReelDiameter: IXMLMeasurementList read Get_ReelDiameter;
    property ReelLength: IXMLMeasurementList read Get_ReelLength;
    property TargetProductWeight: IXMLMeasurement read Get_TargetProductWeight;
    property CoreCharacteristics: IXMLCoreCharacteristicsList read Get_CoreCharacteristics;
    property Embossing: IXMLEmbossingList read Get_Embossing;
    property Watermark: IXMLWatermarkList read Get_Watermark;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLConversionCode }

  IXMLConversionCode = interface(IXMLNode)
    ['{51066CD9-D5DC-41A7-9004-F379F51C2C88}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLCoreCharacteristics }

  IXMLCoreCharacteristics = interface(IXMLNode)
    ['{7477C209-8526-4932-8420-6354EE812A68}']
    { Property Accessors }
    function Get_CoreEndType: UnicodeString;
    function Get_CoreMaterialType: UnicodeString;
    function Get_CoreCode: IXMLCoreCode;
    function Get_CoreDiameterInside: IXMLMeasurement;
    function Get_CoreDiameterOutside: IXMLMeasurement;
    function Get_CoreStrengthCode: IXMLCoreStrengthCode;
    procedure Set_CoreEndType(Value: UnicodeString);
    procedure Set_CoreMaterialType(Value: UnicodeString);
    { Methods & Properties }
    property CoreEndType: UnicodeString read Get_CoreEndType write Set_CoreEndType;
    property CoreMaterialType: UnicodeString read Get_CoreMaterialType write Set_CoreMaterialType;
    property CoreCode: IXMLCoreCode read Get_CoreCode;
    property CoreDiameterInside: IXMLMeasurement read Get_CoreDiameterInside;
    property CoreDiameterOutside: IXMLMeasurement read Get_CoreDiameterOutside;
    property CoreStrengthCode: IXMLCoreStrengthCode read Get_CoreStrengthCode;
  end;

{ IXMLCoreCharacteristicsList }

  IXMLCoreCharacteristicsList = interface(IXMLNodeCollection)
    ['{D2DB9E08-6546-45CD-9756-232D5D6A1016}']
    { Methods & Properties }
    function Add: IXMLCoreCharacteristics;
    function Insert(const Index: Integer): IXMLCoreCharacteristics;

    function Get_Item(Index: Integer): IXMLCoreCharacteristics;
    property Items[Index: Integer]: IXMLCoreCharacteristics read Get_Item; default;
  end;

{ IXMLCoreCode }

  IXMLCoreCode = interface(IXMLNode)
    ['{E71A0791-03A4-4FE7-9FCC-0E0EB1D517AA}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLCoreStrengthCode }

  IXMLCoreStrengthCode = interface(IXMLNode)
    ['{07F6C99E-E138-49A1-801E-B33C4EB905A0}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLEmbossing }

  IXMLEmbossing = interface(IXMLNode)
    ['{711031DD-8380-4144-88EC-DCAA1F792022}']
    { Property Accessors }
    function Get_EmbossingCode: IXMLEmbossingCode;
    function Get_EmbossingDescription: IXMLS60List;
    { Methods & Properties }
    property EmbossingCode: IXMLEmbossingCode read Get_EmbossingCode;
    property EmbossingDescription: IXMLS60List read Get_EmbossingDescription;
  end;

{ IXMLEmbossingList }

  IXMLEmbossingList = interface(IXMLNodeCollection)
    ['{824D605A-1B9C-448A-9266-1158D3A21825}']
    { Methods & Properties }
    function Add: IXMLEmbossing;
    function Insert(const Index: Integer): IXMLEmbossing;

    function Get_Item(Index: Integer): IXMLEmbossing;
    property Items[Index: Integer]: IXMLEmbossing read Get_Item; default;
  end;

{ IXMLEmbossingCode }

  IXMLEmbossingCode = interface(IXMLNode)
    ['{15AA5596-245F-48E6-AC75-F9EFB7A7BD12}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLWatermark }

  IXMLWatermark = interface(IXMLNode)
    ['{C72C3F6D-F00A-4D76-B3CA-55162BE5C66B}']
    { Property Accessors }
    function Get_WatermarkCode: IXMLWatermarkCode;
    function Get_WatermarkDescription: IXMLS60List;
    { Methods & Properties }
    property WatermarkCode: IXMLWatermarkCode read Get_WatermarkCode;
    property WatermarkDescription: IXMLS60List read Get_WatermarkDescription;
  end;

{ IXMLWatermarkList }

  IXMLWatermarkList = interface(IXMLNodeCollection)
    ['{80FC5EC4-4249-4760-9088-35D48FFB9B25}']
    { Methods & Properties }
    function Add: IXMLWatermark;
    function Insert(const Index: Integer): IXMLWatermark;

    function Get_Item(Index: Integer): IXMLWatermark;
    property Items[Index: Integer]: IXMLWatermark read Get_Item; default;
  end;

{ IXMLWatermarkCode }

  IXMLWatermarkCode = interface(IXMLNode)
    ['{689A5012-4AEB-48DA-AC0B-A1166A85BBE7}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLReelPackagingCharacteristicsClass }

  IXMLReelPackagingCharacteristicsClass = interface(IXMLNode)
    ['{21BF42A3-1D0E-4E83-8ED7-B6677EA03A3B}']
    { Property Accessors }
    function Get_ActionType: UnicodeString;
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_ReelsPerPack: LongWord;
    function Get_Wrap: IXMLWrapList;
    function Get_EndCaps: IXMLS20List;
    function Get_CorePlugs: IXMLBooleanList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_MaximumClampingForce: IXMLMaximumClampingForce;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: UnicodeString);
    procedure Set_ReelsPerPack(Value: LongWord);
    { Methods & Properties }
    property ActionType: UnicodeString read Get_ActionType write Set_ActionType;
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescription read Get_PackagingDescription;
    property ReelsPerPack: LongWord read Get_ReelsPerPack write Set_ReelsPerPack;
    property Wrap: IXMLWrapList read Get_Wrap;
    property EndCaps: IXMLS20List read Get_EndCaps;
    property CorePlugs: IXMLBooleanList read Get_CorePlugs;
    property BandCharacteristics: IXMLBandCharacteristicsList read Get_BandCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristicsList read Get_PalletCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property MaximumClampingForce: IXMLMaximumClampingForce read Get_MaximumClampingForce;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPackagingCode }

  IXMLPackagingCode = interface(IXMLNode)
    ['{C53D67F6-2526-4F78-9E18-0739D5EEBE6A}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLPackagingCodeList }

  IXMLPackagingCodeList = interface(IXMLNodeCollection)
    ['{5F72A10B-A731-48F1-9EF9-08CC4875DB3B}']
    { Methods & Properties }
    function Add: IXMLPackagingCode;
    function Insert(const Index: Integer): IXMLPackagingCode;

    function Get_Item(Index: Integer): IXMLPackagingCode;
    property Items[Index: Integer]: IXMLPackagingCode read Get_Item; default;
  end;

{ IXMLPackagingDescription }

  IXMLPackagingDescription = interface(IXMLNode)
    ['{F191292D-6EFA-4AF3-B4FA-C6C7DEBBF307}']
    { Property Accessors }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property Language: UnicodeString read Get_Language write Set_Language;
  end;

{ IXMLPackagingDescriptionList }

  IXMLPackagingDescriptionList = interface(IXMLNodeCollection)
    ['{2FE54CF1-10F1-42AF-9E60-9CC9D9E141BA}']
    { Methods & Properties }
    function Add: IXMLPackagingDescription;
    function Insert(const Index: Integer): IXMLPackagingDescription;

    function Get_Item(Index: Integer): IXMLPackagingDescription;
    property Items[Index: Integer]: IXMLPackagingDescription read Get_Item; default;
  end;

{ IXMLWrap }

  IXMLWrap = interface(IXMLNode)
    ['{4DC14953-78D7-4392-8FED-4FCFCD2F9E2F}']
    { Property Accessors }
    function Get_WrapType: UnicodeString;
    function Get_WrapProperties: UnicodeString;
    function Get_WrapLocation: UnicodeString;
    function Get_NumberOfWraps: Double;
    function Get_Brand: UnicodeString;
    procedure Set_WrapType(Value: UnicodeString);
    procedure Set_WrapProperties(Value: UnicodeString);
    procedure Set_WrapLocation(Value: UnicodeString);
    procedure Set_NumberOfWraps(Value: Double);
    procedure Set_Brand(Value: UnicodeString);
    { Methods & Properties }
    property WrapType: UnicodeString read Get_WrapType write Set_WrapType;
    property WrapProperties: UnicodeString read Get_WrapProperties write Set_WrapProperties;
    property WrapLocation: UnicodeString read Get_WrapLocation write Set_WrapLocation;
    property NumberOfWraps: Double read Get_NumberOfWraps write Set_NumberOfWraps;
    property Brand: UnicodeString read Get_Brand write Set_Brand;
  end;

{ IXMLWrapList }

  IXMLWrapList = interface(IXMLNodeCollection)
    ['{D7B3FA8B-8D8E-4602-A1C8-C79542159796}']
    { Methods & Properties }
    function Add: IXMLWrap;
    function Insert(const Index: Integer): IXMLWrap;

    function Get_Item(Index: Integer): IXMLWrap;
    property Items[Index: Integer]: IXMLWrap read Get_Item; default;
  end;

{ IXMLBandCharacteristics }

  IXMLBandCharacteristics = interface(IXMLNode)
    ['{63FADE2F-59A5-43A9-9883-116093C92F47}']
    { Property Accessors }
    function Get_BandType: UnicodeString;
    function Get_BandsRequired: UnicodeString;
    function Get_BandDirection: UnicodeString;
    function Get_NumberOfBands: LongWord;
    function Get_BandColour: IXMLS20List;
    procedure Set_BandType(Value: UnicodeString);
    procedure Set_BandsRequired(Value: UnicodeString);
    procedure Set_BandDirection(Value: UnicodeString);
    procedure Set_NumberOfBands(Value: LongWord);
    { Methods & Properties }
    property BandType: UnicodeString read Get_BandType write Set_BandType;
    property BandsRequired: UnicodeString read Get_BandsRequired write Set_BandsRequired;
    property BandDirection: UnicodeString read Get_BandDirection write Set_BandDirection;
    property NumberOfBands: LongWord read Get_NumberOfBands write Set_NumberOfBands;
    property BandColour: IXMLS20List read Get_BandColour;
  end;

{ IXMLBandCharacteristicsList }

  IXMLBandCharacteristicsList = interface(IXMLNodeCollection)
    ['{4CE551A7-FFF1-42E6-962B-719434A1D795}']
    { Methods & Properties }
    function Add: IXMLBandCharacteristics;
    function Insert(const Index: Integer): IXMLBandCharacteristics;

    function Get_Item(Index: Integer): IXMLBandCharacteristics;
    property Items[Index: Integer]: IXMLBandCharacteristics read Get_Item; default;
  end;

{ IXMLPalletCharacteristics }

  IXMLPalletCharacteristics = interface(IXMLNode)
    ['{F7CDA8E4-E217-43DD-BEA6-02668EBE5BF4}']
    { Property Accessors }
    function Get_MixedProductPalletIndicator: UnicodeString;
    function Get_PalletType: UnicodeString;
    function Get_PalletLedgeType: UnicodeString;
    function Get_PalletCoverType: UnicodeString;
    function Get_PalletAdditionsType: UnicodeString;
    function Get_PalletTopType: UnicodeString;
    function Get_IsPartialPalletsAllowed: UnicodeString;
    function Get_PalletMaterialType: UnicodeString;
    function Get_ProductIdentification: IXMLProductIdentification;
    function Get_PalletLength: IXMLMeasurement;
    function Get_PalletWidth: IXMLMeasurement;
    function Get_PalletHeight: IXMLMeasurement;
    function Get_ItemsPerPallet: LongWord;
    function Get_StacksPerPallet: LongWord;
    function Get_TiersPerPallet: LongWord;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_StackingMethod: UnicodeString;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_ItemsPerTier: LongWord;
    procedure Set_MixedProductPalletIndicator(Value: UnicodeString);
    procedure Set_PalletType(Value: UnicodeString);
    procedure Set_PalletLedgeType(Value: UnicodeString);
    procedure Set_PalletCoverType(Value: UnicodeString);
    procedure Set_PalletAdditionsType(Value: UnicodeString);
    procedure Set_PalletTopType(Value: UnicodeString);
    procedure Set_IsPartialPalletsAllowed(Value: UnicodeString);
    procedure Set_PalletMaterialType(Value: UnicodeString);
    procedure Set_ItemsPerPallet(Value: LongWord);
    procedure Set_StacksPerPallet(Value: LongWord);
    procedure Set_TiersPerPallet(Value: LongWord);
    procedure Set_StackingMethod(Value: UnicodeString);
    procedure Set_ItemsPerTier(Value: LongWord);
    { Methods & Properties }
    property MixedProductPalletIndicator: UnicodeString read Get_MixedProductPalletIndicator write Set_MixedProductPalletIndicator;
    property PalletType: UnicodeString read Get_PalletType write Set_PalletType;
    property PalletLedgeType: UnicodeString read Get_PalletLedgeType write Set_PalletLedgeType;
    property PalletCoverType: UnicodeString read Get_PalletCoverType write Set_PalletCoverType;
    property PalletAdditionsType: UnicodeString read Get_PalletAdditionsType write Set_PalletAdditionsType;
    property PalletTopType: UnicodeString read Get_PalletTopType write Set_PalletTopType;
    property IsPartialPalletsAllowed: UnicodeString read Get_IsPartialPalletsAllowed write Set_IsPartialPalletsAllowed;
    property PalletMaterialType: UnicodeString read Get_PalletMaterialType write Set_PalletMaterialType;
    property ProductIdentification: IXMLProductIdentification read Get_ProductIdentification;
    property PalletLength: IXMLMeasurement read Get_PalletLength;
    property PalletWidth: IXMLMeasurement read Get_PalletWidth;
    property PalletHeight: IXMLMeasurement read Get_PalletHeight;
    property ItemsPerPallet: LongWord read Get_ItemsPerPallet write Set_ItemsPerPallet;
    property StacksPerPallet: LongWord read Get_StacksPerPallet write Set_StacksPerPallet;
    property TiersPerPallet: LongWord read Get_TiersPerPallet write Set_TiersPerPallet;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property StackingMethod: UnicodeString read Get_StackingMethod write Set_StackingMethod;
    property LabelCharacteristics: IXMLLabelCharacteristics read Get_LabelCharacteristics;
    property ItemsPerTier: LongWord read Get_ItemsPerTier write Set_ItemsPerTier;
  end;

{ IXMLPalletCharacteristicsList }

  IXMLPalletCharacteristicsList = interface(IXMLNodeCollection)
    ['{97575180-43F1-48DC-AA04-436A55F37E8C}']
    { Methods & Properties }
    function Add: IXMLPalletCharacteristics;
    function Insert(const Index: Integer): IXMLPalletCharacteristics;

    function Get_Item(Index: Integer): IXMLPalletCharacteristics;
    property Items[Index: Integer]: IXMLPalletCharacteristics read Get_Item; default;
  end;

{ IXMLProductIdentification }

  IXMLProductIdentification = interface(IXMLNode)
    ['{08C7D9E2-0928-4557-8058-29797F93FF78}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_ProductDescription: IXMLProductDescriptionList;
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifier read Get_ProductIdentifier;
    property ProductDescription: IXMLProductDescriptionList read Get_ProductDescription;
  end;

{ IXMLProductIdentificationList }

  IXMLProductIdentificationList = interface(IXMLNodeCollection)
    ['{D0C1C878-FFD0-42B3-8B7A-04FA562922E9}']
    { Methods & Properties }
    function Add: IXMLProductIdentification;
    function Insert(const Index: Integer): IXMLProductIdentification;

    function Get_Item(Index: Integer): IXMLProductIdentification;
    property Items[Index: Integer]: IXMLProductIdentification read Get_Item; default;
  end;

{ IXMLLabelCharacteristics }

  IXMLLabelCharacteristics = interface(IXMLNode)
    ['{2769BB23-7F12-4FE6-B27D-0D376C77C529}']
    { Property Accessors }
    function Get_CustomerMarks: IXMLCustomerMarksList;
    function Get_LabelStyle: UnicodeString;
    function Get_LabelBrandName: UnicodeString;
    function Get_LabelPosition: UnicodeString;
    function Get_NumberOfLabels: LongWord;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_ColourCode: IXMLColourCode;
    function Get_ColourDescription: UnicodeString;
    procedure Set_LabelStyle(Value: UnicodeString);
    procedure Set_LabelBrandName(Value: UnicodeString);
    procedure Set_LabelPosition(Value: UnicodeString);
    procedure Set_NumberOfLabels(Value: LongWord);
    procedure Set_ColourDescription(Value: UnicodeString);
    { Methods & Properties }
    property CustomerMarks: IXMLCustomerMarksList read Get_CustomerMarks;
    property LabelStyle: UnicodeString read Get_LabelStyle write Set_LabelStyle;
    property LabelBrandName: UnicodeString read Get_LabelBrandName write Set_LabelBrandName;
    property LabelPosition: UnicodeString read Get_LabelPosition write Set_LabelPosition;
    property NumberOfLabels: LongWord read Get_NumberOfLabels write Set_NumberOfLabels;
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property ColourCode: IXMLColourCode read Get_ColourCode;
    property ColourDescription: UnicodeString read Get_ColourDescription write Set_ColourDescription;
  end;

{ IXMLLabelCharacteristicsList }

  IXMLLabelCharacteristicsList = interface(IXMLNodeCollection)
    ['{4A69F41C-BE37-4B51-AAEE-6466BA2157BF}']
    { Methods & Properties }
    function Add: IXMLLabelCharacteristics;
    function Insert(const Index: Integer): IXMLLabelCharacteristics;

    function Get_Item(Index: Integer): IXMLLabelCharacteristics;
    property Items[Index: Integer]: IXMLLabelCharacteristics read Get_Item; default;
  end;

{ IXMLCustomerMarks }

  IXMLCustomerMarks = interface(IXMLNode)
    ['{B6E5DA6C-43EC-4621-8AE9-FE1A49CAAA90}']
    { Property Accessors }
    function Get_CustomerMarksType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_CustomerMarksType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property CustomerMarksType: UnicodeString read Get_CustomerMarksType write Set_CustomerMarksType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLCustomerMarksList }

  IXMLCustomerMarksList = interface(IXMLNodeCollection)
    ['{81BBB6CC-3F9D-4F10-9C58-6AA83B33BB6E}']
    { Methods & Properties }
    function Add: IXMLCustomerMarks;
    function Insert(const Index: Integer): IXMLCustomerMarks;

    function Get_Item(Index: Integer): IXMLCustomerMarks;
    property Items[Index: Integer]: IXMLCustomerMarks read Get_Item; default;
  end;

{ IXMLStencilCharacteristics }

  IXMLStencilCharacteristics = interface(IXMLNodeCollection)
    ['{322DD93B-D9D7-4077-A4DB-240C3AC38C51}']
    { Property Accessors }
    function Get_StencilType: UnicodeString;
    function Get_StencilInkType: UnicodeString;
    function Get_StencilLocation: UnicodeString;
    function Get_StencilFormat: UnicodeString;
    function Get_StencilContent: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    function Get_StencilText(Index: Integer): UnicodeString;
    procedure Set_StencilType(Value: UnicodeString);
    procedure Set_StencilInkType(Value: UnicodeString);
    procedure Set_StencilLocation(Value: UnicodeString);
    procedure Set_StencilFormat(Value: UnicodeString);
    procedure Set_StencilContent(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    function Add(const StencilText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const StencilText: UnicodeString): IXMLNode;
    property StencilType: UnicodeString read Get_StencilType write Set_StencilType;
    property StencilInkType: UnicodeString read Get_StencilInkType write Set_StencilInkType;
    property StencilLocation: UnicodeString read Get_StencilLocation write Set_StencilLocation;
    property StencilFormat: UnicodeString read Get_StencilFormat write Set_StencilFormat;
    property StencilContent: UnicodeString read Get_StencilContent write Set_StencilContent;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
    property StencilText[Index: Integer]: UnicodeString read Get_StencilText; default;
  end;

{ IXMLStencilCharacteristicsList }

  IXMLStencilCharacteristicsList = interface(IXMLNodeCollection)
    ['{F115E06C-66CE-441C-B9A7-A4F7BEC0F620}']
    { Methods & Properties }
    function Add: IXMLStencilCharacteristics;
    function Insert(const Index: Integer): IXMLStencilCharacteristics;

    function Get_Item(Index: Integer): IXMLStencilCharacteristics;
    property Items[Index: Integer]: IXMLStencilCharacteristics read Get_Item; default;
  end;

{ IXMLMaximumClampingForce }

  IXMLMaximumClampingForce = interface(IXMLNode)
    ['{9C713FF9-D7C8-42D5-87E3-DF72FC3A88A9}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLSheet }

  IXMLSheet = interface(IXMLNode)
    ['{EADD334F-5EE0-44F8-8FE4-653D9A943662}']
    { Property Accessors }
    function Get_SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass;
    function Get_SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass;
    { Methods & Properties }
    property SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass read Get_SheetConversionCharacteristics;
    property SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass read Get_SheetPackagingCharacteristics;
  end;

{ IXMLSheetConversionCharacteristicsClass }

  IXMLSheetConversionCharacteristicsClass = interface(IXMLNode)
    ['{7DA859A2-6947-4B1F-83F2-2D0E1798A865}']
    { Property Accessors }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_GrainDirection: UnicodeString;
    function Get_WindingDirection: UnicodeString;
    function Get_SheetSize: IXMLSheetSizeList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_PunchedHoleDetails: IXMLPunchedHoleDetailsList;
    function Get_CuttingDetails: IXMLCuttingDetailsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_GrainDirection(Value: UnicodeString);
    procedure Set_WindingDirection(Value: UnicodeString);
    { Methods & Properties }
    property ConversionCode: IXMLConversionCode read Get_ConversionCode;
    property GrainDirection: UnicodeString read Get_GrainDirection write Set_GrainDirection;
    property WindingDirection: UnicodeString read Get_WindingDirection write Set_WindingDirection;
    property SheetSize: IXMLSheetSizeList read Get_SheetSize;
    property TargetProductWeight: IXMLMeasurement read Get_TargetProductWeight;
    property PunchedHoleDetails: IXMLPunchedHoleDetailsList read Get_PunchedHoleDetails;
    property CuttingDetails: IXMLCuttingDetailsList read Get_CuttingDetails;
    property Embossing: IXMLEmbossingList read Get_Embossing;
    property Watermark: IXMLWatermarkList read Get_Watermark;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSheetSize }

  IXMLSheetSize = interface(IXMLNode)
    ['{E56FA473-49D1-47E2-A7FF-3D9245D5B81D}']
    { Property Accessors }
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_PaperSizeType: UnicodeString;
    procedure Set_PaperSizeType(Value: UnicodeString);
    { Methods & Properties }
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property PaperSizeType: UnicodeString read Get_PaperSizeType write Set_PaperSizeType;
  end;

{ IXMLSheetSizeList }

  IXMLSheetSizeList = interface(IXMLNodeCollection)
    ['{D584E093-053D-428F-BD4E-10672BD5F055}']
    { Methods & Properties }
    function Add: IXMLSheetSize;
    function Insert(const Index: Integer): IXMLSheetSize;

    function Get_Item(Index: Integer): IXMLSheetSize;
    property Items[Index: Integer]: IXMLSheetSize read Get_Item; default;
  end;

{ IXMLPunchedHoleDetails }

  IXMLPunchedHoleDetails = interface(IXMLNode)
    ['{5EACAF7F-2F3D-4A4F-912C-B0A93D3D426A}']
    { Property Accessors }
    function Get_NumberOfHoles: IXMLNumberOfHoles;
    function Get_HoleReinforcement: UnicodeString;
    function Get_HolePunchType: UnicodeString;
    function Get_StandardSpacing: UnicodeString;
    function Get_SizeOfHolePunch: IXMLSizeOfHolePunch;
    function Get_HoleSpacing: IXMLHoleSpacing;
    function Get_DistanceFromEdge: IXMLDistanceFromEdgeList;
    function Get_HolePunchTemplateReference: IXMLS72List;
    procedure Set_HoleReinforcement(Value: UnicodeString);
    procedure Set_HolePunchType(Value: UnicodeString);
    procedure Set_StandardSpacing(Value: UnicodeString);
    { Methods & Properties }
    property NumberOfHoles: IXMLNumberOfHoles read Get_NumberOfHoles;
    property HoleReinforcement: UnicodeString read Get_HoleReinforcement write Set_HoleReinforcement;
    property HolePunchType: UnicodeString read Get_HolePunchType write Set_HolePunchType;
    property StandardSpacing: UnicodeString read Get_StandardSpacing write Set_StandardSpacing;
    property SizeOfHolePunch: IXMLSizeOfHolePunch read Get_SizeOfHolePunch;
    property HoleSpacing: IXMLHoleSpacing read Get_HoleSpacing;
    property DistanceFromEdge: IXMLDistanceFromEdgeList read Get_DistanceFromEdge;
    property HolePunchTemplateReference: IXMLS72List read Get_HolePunchTemplateReference;
  end;

{ IXMLPunchedHoleDetailsList }

  IXMLPunchedHoleDetailsList = interface(IXMLNodeCollection)
    ['{A8BB615B-BA39-4642-B3C7-5B0AA2A1F70D}']
    { Methods & Properties }
    function Add: IXMLPunchedHoleDetails;
    function Insert(const Index: Integer): IXMLPunchedHoleDetails;

    function Get_Item(Index: Integer): IXMLPunchedHoleDetails;
    property Items[Index: Integer]: IXMLPunchedHoleDetails read Get_Item; default;
  end;

{ IXMLNumberOfHoles }

  IXMLNumberOfHoles = interface(IXMLNode)
    ['{D2AC6103-FFD1-40DD-B9A0-6C37B8E7D55A}']
  end;

{ IXMLSizeOfHolePunch }

  IXMLSizeOfHolePunch = interface(IXMLMeasurement)
    ['{04E819E3-7DA3-4465-A9FE-25933B2938FA}']
    { Property Accessors }
    function Get_ShapeOfHole: UnicodeString;
    procedure Set_ShapeOfHole(Value: UnicodeString);
    { Methods & Properties }
    property ShapeOfHole: UnicodeString read Get_ShapeOfHole write Set_ShapeOfHole;
  end;

{ IXMLHoleSpacing }

  IXMLHoleSpacing = interface(IXMLNode)
    ['{BE5FD5BB-C5FC-4BF0-A211-D720D1E605AD}']
    { Property Accessors }
    function Get_EvenSpacing: IXMLEvenSpacing;
    function Get_UnevenSpacing: UnicodeString;
    procedure Set_UnevenSpacing(Value: UnicodeString);
    { Methods & Properties }
    property EvenSpacing: IXMLEvenSpacing read Get_EvenSpacing;
    property UnevenSpacing: UnicodeString read Get_UnevenSpacing write Set_UnevenSpacing;
  end;

{ IXMLEvenSpacing }

  IXMLEvenSpacing = interface(IXMLNode)
    ['{6EEA5695-C888-4327-827A-7CDA82753D18}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
  end;

{ IXMLDistanceFromEdge }

  IXMLDistanceFromEdge = interface(IXMLMeasurement)
    ['{A4AB8988-8883-4605-BEF1-2710359252B5}']
    { Property Accessors }
    function Get_EdgeType: UnicodeString;
    function Get_DistanceMeasuredTo: UnicodeString;
    procedure Set_EdgeType(Value: UnicodeString);
    procedure Set_DistanceMeasuredTo(Value: UnicodeString);
    { Methods & Properties }
    property EdgeType: UnicodeString read Get_EdgeType write Set_EdgeType;
    property DistanceMeasuredTo: UnicodeString read Get_DistanceMeasuredTo write Set_DistanceMeasuredTo;
  end;

{ IXMLDistanceFromEdgeList }

  IXMLDistanceFromEdgeList = interface(IXMLNodeCollection)
    ['{9370BF68-FBF4-4343-B034-AFFE762B012C}']
    { Methods & Properties }
    function Add: IXMLDistanceFromEdge;
    function Insert(const Index: Integer): IXMLDistanceFromEdge;

    function Get_Item(Index: Integer): IXMLDistanceFromEdge;
    property Items[Index: Integer]: IXMLDistanceFromEdge read Get_Item; default;
  end;

{ IXMLCuttingDetails }

  IXMLCuttingDetails = interface(IXMLNode)
    ['{5ED93053-37C6-40AF-81DA-83ABF5E94861}']
    { Property Accessors }
    function Get_CuttingTemplateCode: IXMLCuttingTemplateCode;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property CuttingTemplateCode: IXMLCuttingTemplateCode read Get_CuttingTemplateCode;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLCuttingDetailsList }

  IXMLCuttingDetailsList = interface(IXMLNodeCollection)
    ['{12A3EC1D-B89C-42F5-A356-0A4A2020FC63}']
    { Methods & Properties }
    function Add: IXMLCuttingDetails;
    function Insert(const Index: Integer): IXMLCuttingDetails;

    function Get_Item(Index: Integer): IXMLCuttingDetails;
    property Items[Index: Integer]: IXMLCuttingDetails read Get_Item; default;
  end;

{ IXMLCuttingTemplateCode }

  IXMLCuttingTemplateCode = interface(IXMLNode)
    ['{AF27D3ED-531A-48CA-A521-1AFCDA7E689C}']
    { Property Accessors }
    function Get_AssignedBy: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_AssignedBy(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLSheetPackagingCharacteristicsClass }

  IXMLSheetPackagingCharacteristicsClass = interface(IXMLNode)
    ['{E48034D6-FAEA-491E-83F0-B274C626A20E}']
    { Property Accessors }
    function Get_ActionType: UnicodeString;
    function Get_PackagingCode: IXMLPackagingCodeList;
    function Get_PackagingDescription: IXMLPackagingDescriptionList;
    function Get_ReamType: IXMLReamTypeList;
    function Get_ReamWeight: IXMLMeasurementList;
    function Get_MWeight: IXMLMeasurementList;
    function Get_SheetCount: IXMLSheetCountList;
    function Get_UnitsPerCarton: IXMLMeasurementList;
    function Get_Wrap: IXMLWrapList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: UnicodeString);
    { Methods & Properties }
    property ActionType: UnicodeString read Get_ActionType write Set_ActionType;
    property PackagingCode: IXMLPackagingCodeList read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescriptionList read Get_PackagingDescription;
    property ReamType: IXMLReamTypeList read Get_ReamType;
    property ReamWeight: IXMLMeasurementList read Get_ReamWeight;
    property MWeight: IXMLMeasurementList read Get_MWeight;
    property SheetCount: IXMLSheetCountList read Get_SheetCount;
    property UnitsPerCarton: IXMLMeasurementList read Get_UnitsPerCarton;
    property Wrap: IXMLWrapList read Get_Wrap;
    property BandCharacteristics: IXMLBandCharacteristicsList read Get_BandCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristicsList read Get_PalletCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSheetCount }

  IXMLSheetCount = interface(IXMLNode)
    ['{C4EE5440-C5D5-4B21-BA4A-0BBBB391F27B}']
    { Property Accessors }
    function Get_SheetCountMethodType: UnicodeString;
    function Get_PerCarton: LongWord;
    function Get_PerReam: LongWord;
    function Get_PerPallet: LongWord;
    function Get_PerTab: LongWord;
    procedure Set_SheetCountMethodType(Value: UnicodeString);
    procedure Set_PerCarton(Value: LongWord);
    procedure Set_PerReam(Value: LongWord);
    procedure Set_PerPallet(Value: LongWord);
    procedure Set_PerTab(Value: LongWord);
    { Methods & Properties }
    property SheetCountMethodType: UnicodeString read Get_SheetCountMethodType write Set_SheetCountMethodType;
    property PerCarton: LongWord read Get_PerCarton write Set_PerCarton;
    property PerReam: LongWord read Get_PerReam write Set_PerReam;
    property PerPallet: LongWord read Get_PerPallet write Set_PerPallet;
    property PerTab: LongWord read Get_PerTab write Set_PerTab;
  end;

{ IXMLSheetCountList }

  IXMLSheetCountList = interface(IXMLNodeCollection)
    ['{D8DF406B-B6B3-4A6A-A8B0-41F1D4800EF6}']
    { Methods & Properties }
    function Add: IXMLSheetCount;
    function Insert(const Index: Integer): IXMLSheetCount;

    function Get_Item(Index: Integer): IXMLSheetCount;
    property Items[Index: Integer]: IXMLSheetCount read Get_Item; default;
  end;

{ IXMLSuppliedComponentReference }

  IXMLSuppliedComponentReference = interface(IXMLNode)
    ['{5149C139-15B3-4444-8D87-099B8AFF7419}']
    { Property Accessors }
    function Get_SuppliedComponentReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_SuppliedComponentReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property SuppliedComponentReferenceType: UnicodeString read Get_SuppliedComponentReferenceType write Set_SuppliedComponentReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLSuppliedComponentReferenceList }

  IXMLSuppliedComponentReferenceList = interface(IXMLNodeCollection)
    ['{1E831810-91F2-4584-81C9-418189531CFE}']
    { Methods & Properties }
    function Add: IXMLSuppliedComponentReference;
    function Insert(const Index: Integer): IXMLSuppliedComponentReference;

    function Get_Item(Index: Integer): IXMLSuppliedComponentReference;
    property Items[Index: Integer]: IXMLSuppliedComponentReference read Get_Item; default;
  end;

{ IXMLComponentShipDate }

  IXMLComponentShipDate = interface(IXMLNode)
    ['{8F1B192E-D857-4842-B96A-B3C3C70E27FD}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLComponentDueDate }

  IXMLComponentDueDate = interface(IXMLNode)
    ['{3E130C3E-77F7-4CDF-8381-D6370A9B473A}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLComponentNeededDate }

  IXMLComponentNeededDate = interface(IXMLNode)
    ['{51D5DC4B-49AD-4CF6-8EE2-F5048EBA9D86}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLOrderStatusInformation }

  IXMLOrderStatusInformation = interface(IXMLNode)
    ['{94F61A59-AAE4-4570-AAAD-76371A3E24F4}']
    { Property Accessors }
    function Get_OrderPrimaryStatus: IXMLOrderPrimaryStatus;
    function Get_OrderSecondaryStatus: IXMLOrderSecondaryStatus;
    function Get_OrderStatusInformationDate: IXMLOrderStatusInformationDate;
    function Get_QuantityInformation: IXMLQuantityInformation;
    { Methods & Properties }
    property OrderPrimaryStatus: IXMLOrderPrimaryStatus read Get_OrderPrimaryStatus;
    property OrderSecondaryStatus: IXMLOrderSecondaryStatus read Get_OrderSecondaryStatus;
    property OrderStatusInformationDate: IXMLOrderStatusInformationDate read Get_OrderStatusInformationDate;
    property QuantityInformation: IXMLQuantityInformation read Get_QuantityInformation;
  end;

{ IXMLOrderPrimaryStatus }

  IXMLOrderPrimaryStatus = interface(IXMLNode)
    ['{F5834B35-1A07-469E-8CC5-0AFEAB2D43B9}']
    { Property Accessors }
    function Get_OrderStatusCode: UnicodeString;
    procedure Set_OrderStatusCode(Value: UnicodeString);
    { Methods & Properties }
    property OrderStatusCode: UnicodeString read Get_OrderStatusCode write Set_OrderStatusCode;
  end;

{ IXMLOrderSecondaryStatus }

  IXMLOrderSecondaryStatus = interface(IXMLNode)
    ['{9924DA62-40C4-4534-9742-826F19260C93}']
    { Property Accessors }
    function Get_OrderStatusCode: UnicodeString;
    procedure Set_OrderStatusCode(Value: UnicodeString);
    { Methods & Properties }
    property OrderStatusCode: UnicodeString read Get_OrderStatusCode write Set_OrderStatusCode;
  end;

{ IXMLOrderStatusInformationDate }

  IXMLOrderStatusInformationDate = interface(IXMLNode)
    ['{21C5BB4B-71B5-47C7-ADD2-F2194E4BA615}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLPackagingCharacteristics }

  IXMLPackagingCharacteristics = interface(IXMLNode)
    ['{7A2C6279-401E-4EB6-BB5D-A020A7FA2040}']
    { Property Accessors }
    function Get_IsBoxed: UnicodeString;
    function Get_IsPalletized: UnicodeString;
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics;
    function Get_BookUnitPacking: IXMLBookUnitPacking;
    function Get_DocumentInformation: IXMLDocumentInformationList;
    procedure Set_IsBoxed(Value: UnicodeString);
    procedure Set_IsPalletized(Value: UnicodeString);
    { Methods & Properties }
    property IsBoxed: UnicodeString read Get_IsBoxed write Set_IsBoxed;
    property IsPalletized: UnicodeString read Get_IsPalletized write Set_IsPalletized;
    property BoxCharacteristics: IXMLBoxCharacteristics read Get_BoxCharacteristics;
    property PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics read Get_PalletPackagingCharacteristics;
    property BookUnitPacking: IXMLBookUnitPacking read Get_BookUnitPacking;
    property DocumentInformation: IXMLDocumentInformationList read Get_DocumentInformation;
  end;

{ IXMLPackagingCharacteristicsList }

  IXMLPackagingCharacteristicsList = interface(IXMLNodeCollection)
    ['{03E37D47-1305-4FEA-9507-B02B071386A2}']
    { Methods & Properties }
    function Add: IXMLPackagingCharacteristics;
    function Insert(const Index: Integer): IXMLPackagingCharacteristics;

    function Get_Item(Index: Integer): IXMLPackagingCharacteristics;
    property Items[Index: Integer]: IXMLPackagingCharacteristics read Get_Item; default;
  end;

{ IXMLBoxCharacteristics }

  IXMLBoxCharacteristics = interface(IXMLNode)
    ['{E7CEBEF6-E888-4757-86CD-356043AC1729}']
    { Property Accessors }
    function Get_BoxType: UnicodeString;
    function Get_BoxMeasurementsAppliesTo: UnicodeString;
    function Get_IsRFTagRequired: UnicodeString;
    function Get_ProductIdentification: IXMLProductIdentification;
    function Get_Height: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
    function Get_Burst: IXMLBurst;
    function Get_BurstIndex: IXMLBurstIndex;
    function Get_UnitsPerCarton: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BoxType(Value: UnicodeString);
    procedure Set_BoxMeasurementsAppliesTo(Value: UnicodeString);
    procedure Set_IsRFTagRequired(Value: UnicodeString);
    { Methods & Properties }
    property BoxType: UnicodeString read Get_BoxType write Set_BoxType;
    property BoxMeasurementsAppliesTo: UnicodeString read Get_BoxMeasurementsAppliesTo write Set_BoxMeasurementsAppliesTo;
    property IsRFTagRequired: UnicodeString read Get_IsRFTagRequired write Set_IsRFTagRequired;
    property ProductIdentification: IXMLProductIdentification read Get_ProductIdentification;
    property Height: IXMLMeasurement read Get_Height;
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property Weight: IXMLMeasurement read Get_Weight;
    property Burst: IXMLBurst read Get_Burst;
    property BurstIndex: IXMLBurstIndex read Get_BurstIndex;
    property UnitsPerCarton: IXMLMeasurement read Get_UnitsPerCarton;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property WrapCharacteristics: IXMLWrapCharacteristics read Get_WrapCharacteristics;
    property BandCharacteristics: IXMLBandCharacteristics read Get_BandCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLWrapCharacteristics }

  IXMLWrapCharacteristics = interface(IXMLNode)
    ['{65281052-3C20-4F9E-B3CF-705D9F83F6D0}']
    { Property Accessors }
    function Get_PackagesPerWrap: LongWord;
    function Get_Wrap: IXMLWrapList;
    procedure Set_PackagesPerWrap(Value: LongWord);
    { Methods & Properties }
    property PackagesPerWrap: LongWord read Get_PackagesPerWrap write Set_PackagesPerWrap;
    property Wrap: IXMLWrapList read Get_Wrap;
  end;

{ IXMLPalletPackagingCharacteristics }

  IXMLPalletPackagingCharacteristics = interface(IXMLNode)
    ['{EC7B5D7B-5362-430A-8709-C512132B40AB}']
    { Property Accessors }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescription read Get_PackagingDescription;
    property WrapCharacteristics: IXMLWrapCharacteristics read Get_WrapCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristics read Get_PalletCharacteristics;
    property BandCharacteristics: IXMLBandCharacteristics read Get_BandCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLBookUnitPacking }

  IXMLBookUnitPacking = interface(IXMLNode)
    ['{AA953C23-863D-4391-90C5-7EEDD3A5BD39}']
    { Property Accessors }
    function Get_BookUnitType: UnicodeString;
    function Get_PackageType: UnicodeString;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BookUnitType(Value: UnicodeString);
    procedure Set_PackageType(Value: UnicodeString);
    { Methods & Properties }
    property BookUnitType: UnicodeString read Get_BookUnitType write Set_BookUnitType;
    property PackageType: UnicodeString read Get_PackageType write Set_PackageType;
    property UnitCharacteristics: IXMLUnitCharacteristics read Get_UnitCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property WrapCharacteristics: IXMLWrapCharacteristics read Get_WrapCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLUnitCharacteristics }

  IXMLUnitCharacteristics = interface(IXMLNode)
    ['{F7D48DC3-506D-4F40-B282-8D6247E7E861}']
    { Property Accessors }
    function Get_Height: IXMLMeasurement;
    function Get_Thickness: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
    { Methods & Properties }
    property Height: IXMLMeasurement read Get_Height;
    property Thickness: IXMLMeasurement read Get_Thickness;
    property Width: IXMLMeasurement read Get_Width;
    property Weight: IXMLMeasurement read Get_Weight;
  end;

{ IXMLDocumentInformation }

  IXMLDocumentInformation = interface(IXMLNode)
    ['{A832A47F-089D-4A2F-B859-C5A4A04289A8}']
    { Property Accessors }
    function Get_DocumentType: UnicodeString;
    function Get_NumberOfDocuments: IXMLNumberOfDocumentsList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentInstruction: IXMLDocumentInstruction;
    procedure Set_DocumentType(Value: UnicodeString);
    { Methods & Properties }
    property DocumentType: UnicodeString read Get_DocumentType write Set_DocumentType;
    property NumberOfDocuments: IXMLNumberOfDocumentsList read Get_NumberOfDocuments;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property DocumentInstruction: IXMLDocumentInstruction read Get_DocumentInstruction;
  end;

{ IXMLDocumentInformationList }

  IXMLDocumentInformationList = interface(IXMLNodeCollection)
    ['{FC27B1A0-C561-494C-8447-42F7BED67BAA}']
    { Methods & Properties }
    function Add: IXMLDocumentInformation;
    function Insert(const Index: Integer): IXMLDocumentInformation;

    function Get_Item(Index: Integer): IXMLDocumentInformation;
    property Items[Index: Integer]: IXMLDocumentInformation read Get_Item; default;
  end;

{ IXMLNumberOfDocuments }

  IXMLNumberOfDocuments = interface(IXMLNode)
    ['{D4C1132F-B44D-40AD-B659-E5AB483DCFB7}']
    { Property Accessors }
    function Get_Original: UnicodeString;
    procedure Set_Original(Value: UnicodeString);
    { Methods & Properties }
    property Original: UnicodeString read Get_Original write Set_Original;
  end;

{ IXMLNumberOfDocumentsList }

  IXMLNumberOfDocumentsList = interface(IXMLNodeCollection)
    ['{B049C368-63A3-4157-9D8D-09C0F04EB023}']
    { Methods & Properties }
    function Add: IXMLNumberOfDocuments;
    function Insert(const Index: Integer): IXMLNumberOfDocuments;

    function Get_Item(Index: Integer): IXMLNumberOfDocuments;
    property Items[Index: Integer]: IXMLNumberOfDocuments read Get_Item; default;
  end;

{ IXMLDocumentInstruction }

  IXMLDocumentInstruction = interface(IXMLNode)
    ['{5CB65615-C132-4CE4-A645-E03B245907C1}']
    { Property Accessors }
    function Get_DocumentInstructionText: IXMLS255List;
    function Get_DocumentContent: IXMLDocumentContentList;
    { Methods & Properties }
    property DocumentInstructionText: IXMLS255List read Get_DocumentInstructionText;
    property DocumentContent: IXMLDocumentContentList read Get_DocumentContent;
  end;

{ IXMLDocumentContent }

  IXMLDocumentContent = interface(IXMLNodeCollection)
    ['{8A3DB6F2-6E0A-4FD0-A637-F491F2A02ECB}']
    { Property Accessors }
    function Get_DocumentContentType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    function Get_DocumentContentText(Index: Integer): UnicodeString;
    procedure Set_DocumentContentType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    function Add(const DocumentContentText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const DocumentContentText: UnicodeString): IXMLNode;
    property DocumentContentType: UnicodeString read Get_DocumentContentType write Set_DocumentContentType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
    property DocumentContentText[Index: Integer]: UnicodeString read Get_DocumentContentText; default;
  end;

{ IXMLDocumentContentList }

  IXMLDocumentContentList = interface(IXMLNodeCollection)
    ['{81C0FFF5-2B4C-436E-A0B2-52671F9F59F2}']
    { Methods & Properties }
    function Add: IXMLDocumentContent;
    function Insert(const Index: Integer): IXMLDocumentContent;

    function Get_Item(Index: Integer): IXMLDocumentContent;
    property Items[Index: Integer]: IXMLDocumentContent read Get_Item; default;
  end;

{ IXMLForestWood }

  IXMLForestWood = interface(IXMLNode)
    ['{AB435B04-2415-4F08-85CF-5232700E1524}']
    { Property Accessors }
    function Get_ForestWoodType: UnicodeString;
    function Get_ForestWoodItemType: UnicodeString;
    function Get_IsForestWoodReject: UnicodeString;
    function Get_TreeSpeciesGroup: IXMLTreeSpeciesGroupList;
    function Get_ForestWoodClass: IXMLForestWoodClassList;
    function Get_ForestWoodCharacteristics: IXMLForestWoodCharacteristics;
    function Get_ForestWoodPackagingCharacteristics: IXMLForestWoodPackagingCharacteristics;
    function Get_ForestWoodProcessingCharacteristics: IXMLForestWoodProcessingCharacteristics;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_ForestWoodType(Value: UnicodeString);
    procedure Set_ForestWoodItemType(Value: UnicodeString);
    procedure Set_IsForestWoodReject(Value: UnicodeString);
    { Methods & Properties }
    property ForestWoodType: UnicodeString read Get_ForestWoodType write Set_ForestWoodType;
    property ForestWoodItemType: UnicodeString read Get_ForestWoodItemType write Set_ForestWoodItemType;
    property IsForestWoodReject: UnicodeString read Get_IsForestWoodReject write Set_IsForestWoodReject;
    property TreeSpeciesGroup: IXMLTreeSpeciesGroupList read Get_TreeSpeciesGroup;
    property ForestWoodClass: IXMLForestWoodClassList read Get_ForestWoodClass;
    property ForestWoodCharacteristics: IXMLForestWoodCharacteristics read Get_ForestWoodCharacteristics;
    property ForestWoodPackagingCharacteristics: IXMLForestWoodPackagingCharacteristics read Get_ForestWoodPackagingCharacteristics;
    property ForestWoodProcessingCharacteristics: IXMLForestWoodProcessingCharacteristics read Get_ForestWoodProcessingCharacteristics;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLTreeSpeciesGroup }

  IXMLTreeSpeciesGroup = interface(IXMLNode)
    ['{896C5D12-3653-479C-9EA3-8C5C188FC926}']
    { Property Accessors }
    function Get_TreeSpeciesGroupCode: IXMLTreeSpeciesGroupCode;
    function Get_TreeSpeciesGroupDescription: IXMLS255List;
    { Methods & Properties }
    property TreeSpeciesGroupCode: IXMLTreeSpeciesGroupCode read Get_TreeSpeciesGroupCode;
    property TreeSpeciesGroupDescription: IXMLS255List read Get_TreeSpeciesGroupDescription;
  end;

{ IXMLTreeSpeciesGroupList }

  IXMLTreeSpeciesGroupList = interface(IXMLNodeCollection)
    ['{062BA49C-E581-4238-A73F-6045B47F7AF1}']
    { Methods & Properties }
    function Add: IXMLTreeSpeciesGroup;
    function Insert(const Index: Integer): IXMLTreeSpeciesGroup;

    function Get_Item(Index: Integer): IXMLTreeSpeciesGroup;
    property Items[Index: Integer]: IXMLTreeSpeciesGroup read Get_Item; default;
  end;

{ IXMLTreeSpeciesGroupCode }

  IXMLTreeSpeciesGroupCode = interface(IXMLNode)
    ['{594992F8-F058-485D-AAB8-1252C582560A}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLForestWoodClass }

  IXMLForestWoodClass = interface(IXMLNode)
    ['{770BA658-F54B-43E4-9DCB-5DDFB91B0305}']
    { Property Accessors }
    function Get_ForestWoodClassType: UnicodeString;
    function Get_ForestWoodClassCode: IXMLForestWoodClassCode;
    function Get_ForestWoodClassDescription: IXMLS255List;
    procedure Set_ForestWoodClassType(Value: UnicodeString);
    { Methods & Properties }
    property ForestWoodClassType: UnicodeString read Get_ForestWoodClassType write Set_ForestWoodClassType;
    property ForestWoodClassCode: IXMLForestWoodClassCode read Get_ForestWoodClassCode;
    property ForestWoodClassDescription: IXMLS255List read Get_ForestWoodClassDescription;
  end;

{ IXMLForestWoodClassList }

  IXMLForestWoodClassList = interface(IXMLNodeCollection)
    ['{FAAF4163-B34A-4A49-AE96-FCE70B4FCEF9}']
    { Methods & Properties }
    function Add: IXMLForestWoodClass;
    function Insert(const Index: Integer): IXMLForestWoodClass;

    function Get_Item(Index: Integer): IXMLForestWoodClass;
    property Items[Index: Integer]: IXMLForestWoodClass read Get_Item; default;
  end;

{ IXMLForestWoodClassCode }

  IXMLForestWoodClassCode = interface(IXMLNode)
    ['{9F12238D-F87B-4FE0-8EDB-081C2B6AD695}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLForestWoodCharacteristics }

  IXMLForestWoodCharacteristics = interface(IXMLNode)
    ['{CDF80AF4-54B8-460C-B36E-BD33749FD566}']
    { Property Accessors }
    function Get_PropertyValue: IXMLPropertyValueList;
    function Get_ProductAdaptedFor: IXMLProductAdaptedFor;
    { Methods & Properties }
    property PropertyValue: IXMLPropertyValueList read Get_PropertyValue;
    property ProductAdaptedFor: IXMLProductAdaptedFor read Get_ProductAdaptedFor;
  end;

{ IXMLProductAdaptedFor }

  IXMLProductAdaptedFor = interface(IXMLNode)
    ['{C2321589-9E6B-47C1-B941-DCDAB430E2C0}']
    { Property Accessors }
    function Get_OtherParty: IXMLTypedParty;
    { Methods & Properties }
    property OtherParty: IXMLTypedParty read Get_OtherParty;
  end;

{ IXMLForestWoodPackagingCharacteristics }

  IXMLForestWoodPackagingCharacteristics = interface(IXMLNodeCollection)
    ['{87E6F8EE-0BAD-4904-B1A5-5AC8A9F9FCF0}']
    { Property Accessors }
    function Get_PackagingCodeSpecification(Index: Integer): IXMLPackagingCodeSpecification;
    { Methods & Properties }
    function Add: IXMLPackagingCodeSpecification;
    function Insert(const Index: Integer): IXMLPackagingCodeSpecification;
    property PackagingCodeSpecification[Index: Integer]: IXMLPackagingCodeSpecification read Get_PackagingCodeSpecification; default;
  end;

{ IXMLPackagingCodeSpecification }

  IXMLPackagingCodeSpecification = interface(IXMLNode)
    ['{7709504A-C3F1-4B16-8882-DEC02B85D9C9}']
    { Property Accessors }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescriptionList;
    { Methods & Properties }
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescriptionList read Get_PackagingDescription;
  end;

{ IXMLForestWoodProcessingCharacteristics }

  IXMLForestWoodProcessingCharacteristics = interface(IXMLNodeCollection)
    ['{3C24D9B4-12F4-47BC-A985-2CD8D5E5FBBA}']
    { Property Accessors }
    function Get_ProcessingCodeSpecification(Index: Integer): IXMLProcessingCodeSpecification;
    { Methods & Properties }
    function Add: IXMLProcessingCodeSpecification;
    function Insert(const Index: Integer): IXMLProcessingCodeSpecification;
    property ProcessingCodeSpecification[Index: Integer]: IXMLProcessingCodeSpecification read Get_ProcessingCodeSpecification; default;
  end;

{ IXMLProcessingCodeSpecification }

  IXMLProcessingCodeSpecification = interface(IXMLNode)
    ['{4BE29451-100D-45CF-B4C7-F55AF6BFA158}']
    { Property Accessors }
    function Get_ProcessingCode: IXMLProcessingCode;
    function Get_ProcessingDescription: IXMLS255List;
    { Methods & Properties }
    property ProcessingCode: IXMLProcessingCode read Get_ProcessingCode;
    property ProcessingDescription: IXMLS255List read Get_ProcessingDescription;
  end;

{ IXMLProcessingCode }

  IXMLProcessingCode = interface(IXMLNode)
    ['{580315FA-7A64-4674-8026-EAB358C031DF}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLSafetyAndEnvironmentalInformationClass }

  IXMLSafetyAndEnvironmentalInformationClass = interface(IXMLNode)
    ['{513C20CE-4215-4C8A-BF57-5FD80C684F1D}']
    { Property Accessors }
    function Get_SafetyAndEnvironmentalType: UnicodeString;
    function Get_Agency: UnicodeString;
    function Get_LicenceNumber: UnicodeString;
    function Get_ChainOfCustody: IXMLChainOfCustody;
    function Get_SafetyAndEnvironmentalCertification: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SafetyAndEnvironmentalType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_LicenceNumber(Value: UnicodeString);
    { Methods & Properties }
    property SafetyAndEnvironmentalType: UnicodeString read Get_SafetyAndEnvironmentalType write Set_SafetyAndEnvironmentalType;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property LicenceNumber: UnicodeString read Get_LicenceNumber write Set_LicenceNumber;
    property ChainOfCustody: IXMLChainOfCustody read Get_ChainOfCustody;
    property SafetyAndEnvironmentalCertification: IXMLMeasurement read Get_SafetyAndEnvironmentalCertification;
    property Quantity: IXMLQuantity read Get_Quantity;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSafetyAndEnvironmentalInformationClassList }

  IXMLSafetyAndEnvironmentalInformationClassList = interface(IXMLNodeCollection)
    ['{2C6475B2-BB26-409E-85D7-F0F0BE95AFA1}']
    { Methods & Properties }
    function Add: IXMLSafetyAndEnvironmentalInformationClass;
    function Insert(const Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;

    function Get_Item(Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
    property Items[Index: Integer]: IXMLSafetyAndEnvironmentalInformationClass read Get_Item; default;
  end;

{ IXMLChainOfCustody }

  IXMLChainOfCustody = interface(IXMLNode)
    ['{BE0C7175-A019-41F4-BFA9-079478C711D9}']
    { Property Accessors }
    function Get_CertificationBody: UnicodeString;
    procedure Set_CertificationBody(Value: UnicodeString);
    { Methods & Properties }
    property CertificationBody: UnicodeString read Get_CertificationBody write Set_CertificationBody;
  end;

{ IXMLLabelStock }

  IXMLLabelStock = interface(IXMLNode)
    ['{5D41A9F6-B255-41C7-A344-4BEA3A246A64}']
    { Property Accessors }
    function Get_LabelStockCharacteristics: IXMLLabelStockCharacteristics;
    function Get_SingleWidthReel: IXMLSingleWidthReel;
    function Get_TrimmedReel: IXMLTrimmedReel;
    function Get_Sheet: IXMLSheet;
    { Methods & Properties }
    property LabelStockCharacteristics: IXMLLabelStockCharacteristics read Get_LabelStockCharacteristics;
    property SingleWidthReel: IXMLSingleWidthReel read Get_SingleWidthReel;
    property TrimmedReel: IXMLTrimmedReel read Get_TrimmedReel;
    property Sheet: IXMLSheet read Get_Sheet;
  end;

{ IXMLLabelStockCharacteristics }

  IXMLLabelStockCharacteristics = interface(IXMLNode)
    ['{F3937981-3310-488D-B848-DCD5CB59203B}']
    { Property Accessors }
    function Get_LabelStockLayer: IXMLLabelStockLayerList;
    function Get_ExtraFeature: IXMLExtraFeatureList;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property LabelStockLayer: IXMLLabelStockLayerList read Get_LabelStockLayer;
    property ExtraFeature: IXMLExtraFeatureList read Get_ExtraFeature;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLLabelStockLayer }

  IXMLLabelStockLayer = interface(IXMLNode)
    ['{C1995885-EDC6-4403-9D50-F08B4B6B877B}']
    { Property Accessors }
    function Get_LabelStockLayerType: UnicodeString;
    function Get_LabelStockLayerNumber: LongWord;
    function Get_LayerMaterial: IXMLLayerMaterial;
    procedure Set_LabelStockLayerType(Value: UnicodeString);
    procedure Set_LabelStockLayerNumber(Value: LongWord);
    { Methods & Properties }
    property LabelStockLayerType: UnicodeString read Get_LabelStockLayerType write Set_LabelStockLayerType;
    property LabelStockLayerNumber: LongWord read Get_LabelStockLayerNumber write Set_LabelStockLayerNumber;
    property LayerMaterial: IXMLLayerMaterial read Get_LayerMaterial;
  end;

{ IXMLLabelStockLayerList }

  IXMLLabelStockLayerList = interface(IXMLNodeCollection)
    ['{ED0726E7-8454-423A-9628-27976E5A156C}']
    { Methods & Properties }
    function Add: IXMLLabelStockLayer;
    function Insert(const Index: Integer): IXMLLabelStockLayer;

    function Get_Item(Index: Integer): IXMLLabelStockLayer;
    property Items[Index: Integer]: IXMLLabelStockLayer read Get_Item; default;
  end;

{ IXMLLayerMaterial }

  IXMLLayerMaterial = interface(IXMLNode)
    ['{66F9DB1B-388C-46F7-9F6A-A8E9E7B26094}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_LayerMaterialName: UnicodeString;
    procedure Set_LayerMaterialName(Value: UnicodeString);
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifier read Get_ProductIdentifier;
    property LayerMaterialName: UnicodeString read Get_LayerMaterialName write Set_LayerMaterialName;
  end;

{ IXMLExtraFeature }

  IXMLExtraFeature = interface(IXMLNode)
    ['{254C96FB-4DD5-44DA-9B7E-4734F0000283}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_ExtraFeatureDescription: UnicodeString;
    procedure Set_ExtraFeatureDescription(Value: UnicodeString);
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifier read Get_ProductIdentifier;
    property ExtraFeatureDescription: UnicodeString read Get_ExtraFeatureDescription write Set_ExtraFeatureDescription;
  end;

{ IXMLExtraFeatureList }

  IXMLExtraFeatureList = interface(IXMLNodeCollection)
    ['{052ED6D0-761A-4C18-80FF-2D16DE8E31CB}']
    { Methods & Properties }
    function Add: IXMLExtraFeature;
    function Insert(const Index: Integer): IXMLExtraFeature;

    function Get_Item(Index: Integer): IXMLExtraFeature;
    property Items[Index: Integer]: IXMLExtraFeature read Get_Item; default;
  end;

{ IXMLSingleWidthReel }

  IXMLSingleWidthReel = interface(IXMLNode)
    ['{E0EC707B-8ED7-4D57-8735-5FCAC79A114D}']
    { Property Accessors }
    function Get_SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
    { Methods & Properties }
    property SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics read Get_SingleWidthReelConversionCharacteristics;
    property ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass read Get_ReelPackagingCharacteristics;
  end;

{ IXMLSingleWidthReelConversionCharacteristics }

  IXMLSingleWidthReelConversionCharacteristics = interface(IXMLNode)
    ['{EA98AF96-542C-43EA-B35D-273C1906BA05}']
    { Property Accessors }
    function Get_WindingDirection: UnicodeString;
    function Get_TrimmedOrderType: UnicodeString;
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_MaximumNumberOfJoins: LongWord;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: UnicodeString);
    procedure Set_TrimmedOrderType(Value: UnicodeString);
    procedure Set_MaximumNumberOfJoins(Value: LongWord);
    { Methods & Properties }
    property WindingDirection: UnicodeString read Get_WindingDirection write Set_WindingDirection;
    property TrimmedOrderType: UnicodeString read Get_TrimmedOrderType write Set_TrimmedOrderType;
    property ReelWidth: IXMLMeasurement read Get_ReelWidth;
    property ReelDiameter: IXMLMeasurement read Get_ReelDiameter;
    property ReelLength: IXMLMeasurement read Get_ReelLength;
    property CoreCharacteristics: IXMLCoreCharacteristics read Get_CoreCharacteristics;
    property MaximumNumberOfJoins: LongWord read Get_MaximumNumberOfJoins write Set_MaximumNumberOfJoins;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLTrimmedReel }

  IXMLTrimmedReel = interface(IXMLNode)
    ['{B6CDC43D-76A0-44ED-ADAD-5ABEC48DB294}']
    { Property Accessors }
    function Get_TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
    { Methods & Properties }
    property TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics read Get_TrimmedReelConversionCharacteristics;
    property ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass read Get_ReelPackagingCharacteristics;
  end;

{ IXMLTrimmedReelConversionCharacteristics }

  IXMLTrimmedReelConversionCharacteristics = interface(IXMLNode)
    ['{D2664862-7B6B-4D10-A29E-B81864CDE7A3}']
    { Property Accessors }
    function Get_WindingDirection: UnicodeString;
    function Get_TrimmedOrderType: UnicodeString;
    function Get_MasterReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MaximumOffcut: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_MaximumNumberOfJoins: LongWord;
    function Get_SlitReel: IXMLSlitReelList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: UnicodeString);
    procedure Set_TrimmedOrderType(Value: UnicodeString);
    procedure Set_MaximumNumberOfJoins(Value: LongWord);
    { Methods & Properties }
    property WindingDirection: UnicodeString read Get_WindingDirection write Set_WindingDirection;
    property TrimmedOrderType: UnicodeString read Get_TrimmedOrderType write Set_TrimmedOrderType;
    property MasterReelWidth: IXMLMeasurement read Get_MasterReelWidth;
    property ReelDiameter: IXMLMeasurement read Get_ReelDiameter;
    property ReelLength: IXMLMeasurement read Get_ReelLength;
    property MaximumOffcut: IXMLMeasurement read Get_MaximumOffcut;
    property CoreCharacteristics: IXMLCoreCharacteristics read Get_CoreCharacteristics;
    property MaximumNumberOfJoins: LongWord read Get_MaximumNumberOfJoins write Set_MaximumNumberOfJoins;
    property SlitReel: IXMLSlitReelList read Get_SlitReel;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSlitReel }

  IXMLSlitReel = interface(IXMLNode)
    ['{20167AA6-CED9-41D8-929C-D1CB4236147D}']
    { Property Accessors }
    function Get_DeliveryIndicator: UnicodeString;
    function Get_SlitReelLineNumber: LongWord;
    function Get_SlitReelWidth: IXMLMeasurement;
    function Get_SlitReelOrderQuantity: IXMLSlitReelOrderQuantity;
    function Get_SlitReelsInSet: LongWord;
    function Get_SlitReelReference: IXMLSlitReelReferenceList;
    procedure Set_DeliveryIndicator(Value: UnicodeString);
    procedure Set_SlitReelLineNumber(Value: LongWord);
    procedure Set_SlitReelsInSet(Value: LongWord);
    { Methods & Properties }
    property DeliveryIndicator: UnicodeString read Get_DeliveryIndicator write Set_DeliveryIndicator;
    property SlitReelLineNumber: LongWord read Get_SlitReelLineNumber write Set_SlitReelLineNumber;
    property SlitReelWidth: IXMLMeasurement read Get_SlitReelWidth;
    property SlitReelOrderQuantity: IXMLSlitReelOrderQuantity read Get_SlitReelOrderQuantity;
    property SlitReelsInSet: LongWord read Get_SlitReelsInSet write Set_SlitReelsInSet;
    property SlitReelReference: IXMLSlitReelReferenceList read Get_SlitReelReference;
  end;

{ IXMLSlitReelList }

  IXMLSlitReelList = interface(IXMLNodeCollection)
    ['{7027425F-ECDF-4BD3-B777-32C69D691F2A}']
    { Methods & Properties }
    function Add: IXMLSlitReel;
    function Insert(const Index: Integer): IXMLSlitReel;

    function Get_Item(Index: Integer): IXMLSlitReel;
    property Items[Index: Integer]: IXMLSlitReel read Get_Item; default;
  end;

{ IXMLSlitReelOrderQuantity }

  IXMLSlitReelOrderQuantity = interface(IXMLMeasurement)
    ['{6DB6059C-5FC7-445C-9E28-7B89D3E59C8F}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLSlitReelReference }

  IXMLSlitReelReference = interface(IXMLNode)
    ['{427FEB96-BCA2-4E67-9936-98E8B7336970}']
    { Property Accessors }
    function Get_SlitReelReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_SlitReelReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property SlitReelReferenceType: UnicodeString read Get_SlitReelReferenceType write Set_SlitReelReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLSlitReelReferenceList }

  IXMLSlitReelReferenceList = interface(IXMLNodeCollection)
    ['{14AA8FA4-1A24-47E3-9C39-A406703055AC}']
    { Methods & Properties }
    function Add: IXMLSlitReelReference;
    function Insert(const Index: Integer): IXMLSlitReelReference;

    function Get_Item(Index: Integer): IXMLSlitReelReference;
    property Items[Index: Integer]: IXMLSlitReelReference read Get_Item; default;
  end;

{ IXMLPulpClass }

  IXMLPulpClass = interface(IXMLNode)
    ['{D3FFCABF-E288-472C-9618-A7AD95E8CAA4}']
    { Property Accessors }
    function Get_PulpCharacteristics: IXMLPulpCharacteristics;
    function Get_Bale: IXMLBale;
    function Get_Reel: IXMLReel;
    function Get_Slurry: IXMLSlurry;
    function Get_NonStandardPulp: IXMLNonStandardPulp;
    { Methods & Properties }
    property PulpCharacteristics: IXMLPulpCharacteristics read Get_PulpCharacteristics;
    property Bale: IXMLBale read Get_Bale;
    property Reel: IXMLReel read Get_Reel;
    property Slurry: IXMLSlurry read Get_Slurry;
    property NonStandardPulp: IXMLNonStandardPulp read Get_NonStandardPulp;
  end;

{ IXMLPulpCharacteristics }

  IXMLPulpCharacteristics = interface(IXMLNode)
    ['{932A5A22-892F-4716-AC39-D3C0A9224B45}']
    { Property Accessors }
    function Get_PulpingProcess: UnicodeString;
    function Get_BleachingProcess: UnicodeString;
    function Get_FibreSource: UnicodeString;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DrainageResistance: IXMLDrainageResistanceList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_PH: IXMLPHList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Viscosity: IXMLViscosityList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_PulpingProcess(Value: UnicodeString);
    procedure Set_BleachingProcess(Value: UnicodeString);
    procedure Set_FibreSource(Value: UnicodeString);
    { Methods & Properties }
    property PulpingProcess: UnicodeString read Get_PulpingProcess write Set_PulpingProcess;
    property BleachingProcess: UnicodeString read Get_BleachingProcess write Set_BleachingProcess;
    property FibreSource: UnicodeString read Get_FibreSource write Set_FibreSource;
    property Ash: IXMLAshList read Get_Ash;
    property BasisWeight: IXMLBasisWeightList read Get_BasisWeight;
    property Brightness: IXMLBrightnessList read Get_Brightness;
    property Burst: IXMLBurstList read Get_Burst;
    property BurstIndex: IXMLBurstIndexList read Get_BurstIndex;
    property ColourDetail: IXMLColourDetailList read Get_ColourDetail;
    property Density: IXMLDensityList read Get_Density;
    property Dirt: IXMLDirtList read Get_Dirt;
    property DrainageResistance: IXMLDrainageResistanceList read Get_DrainageResistance;
    property FibreLength: IXMLFibreLengthList read Get_FibreLength;
    property FibreClassification: IXMLFibreClassificationList read Get_FibreClassification;
    property Freeness: IXMLFreenessList read Get_Freeness;
    property LightScattering: IXMLLightScatteringList read Get_LightScattering;
    property Moisture: IXMLMoistureList read Get_Moisture;
    property Opacity: IXMLOpacityList read Get_Opacity;
    property PH: IXMLPHList read Get_PH;
    property PostConsumerWaste: IXMLPostConsumerWasteList read Get_PostConsumerWaste;
    property PreConsumerWaste: IXMLPreConsumerWasteList read Get_PreConsumerWaste;
    property Recycled: IXMLRecycledList read Get_Recycled;
    property Tear: IXMLTearList read Get_Tear;
    property TearIndex: IXMLTearIndexList read Get_TearIndex;
    property Tensile: IXMLTensileList read Get_Tensile;
    property TensileIndex: IXMLTensileIndexList read Get_TensileIndex;
    property Viscosity: IXMLViscosityList read Get_Viscosity;
    property Whiteness: IXMLWhitenessList read Get_Whiteness;
    property AdditionalTest: IXMLAdditionalTest read Get_AdditionalTest;
  end;

{ IXMLDrainageResistance }

  IXMLDrainageResistance = interface(IXMLDetailMeasurement)
    ['{1548F6DD-2D51-4FEB-A05A-FECA606B5DA1}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDrainageResistanceList }

  IXMLDrainageResistanceList = interface(IXMLNodeCollection)
    ['{D41AE674-95A0-4711-8302-7AC3648B61F2}']
    { Methods & Properties }
    function Add: IXMLDrainageResistance;
    function Insert(const Index: Integer): IXMLDrainageResistance;

    function Get_Item(Index: Integer): IXMLDrainageResistance;
    property Items[Index: Integer]: IXMLDrainageResistance read Get_Item; default;
  end;

{ IXMLViscosity }

  IXMLViscosity = interface(IXMLDetailMeasurement)
    ['{82F41481-4886-4128-886D-73B7ADFC301B}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLViscosityList }

  IXMLViscosityList = interface(IXMLNodeCollection)
    ['{3B8C154B-5652-4CDB-859A-D7C7C01BBAC3}']
    { Methods & Properties }
    function Add: IXMLViscosity;
    function Insert(const Index: Integer): IXMLViscosity;

    function Get_Item(Index: Integer): IXMLViscosity;
    property Items[Index: Integer]: IXMLViscosity read Get_Item; default;
  end;

{ IXMLBale }

  IXMLBale = interface(IXMLNode)
    ['{7856532A-EBFC-4F2B-99F7-75C07932FC8E}']
    { Property Accessors }
    function Get_BaleType: UnicodeString;
    function Get_BaleConversionCharacteristics: IXMLBaleConversionCharacteristics;
    function Get_BalePackagingCharacteristics: IXMLBalePackagingCharacteristics;
    procedure Set_BaleType(Value: UnicodeString);
    { Methods & Properties }
    property BaleType: UnicodeString read Get_BaleType write Set_BaleType;
    property BaleConversionCharacteristics: IXMLBaleConversionCharacteristics read Get_BaleConversionCharacteristics;
    property BalePackagingCharacteristics: IXMLBalePackagingCharacteristics read Get_BalePackagingCharacteristics;
  end;

{ IXMLBaleConversionCharacteristics }

  IXMLBaleConversionCharacteristics = interface(IXMLNode)
    ['{02D0631D-2E77-4506-B8DA-84CE9EE4E56E}']
    { Property Accessors }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_BaleHeight: IXMLMeasurement;
    function Get_BaleWidth: IXMLMeasurement;
    function Get_BaleDepth: IXMLMeasurement;
    function Get_BaleStandardWeight: IXMLMeasurement;
    { Methods & Properties }
    property ConversionCode: IXMLConversionCode read Get_ConversionCode;
    property BaleHeight: IXMLMeasurement read Get_BaleHeight;
    property BaleWidth: IXMLMeasurement read Get_BaleWidth;
    property BaleDepth: IXMLMeasurement read Get_BaleDepth;
    property BaleStandardWeight: IXMLMeasurement read Get_BaleStandardWeight;
  end;

{ IXMLBalePackagingCharacteristics }

  IXMLBalePackagingCharacteristics = interface(IXMLNode)
    ['{549745EE-CDB7-4CDC-B8B5-847A51459934}']
    { Property Accessors }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_CustomerMarks: IXMLCustomerMarks;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_PulpUnitCharacteristics: IXMLPulpUnitCharacteristics;
    { Methods & Properties }
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property CustomerMarks: IXMLCustomerMarks read Get_CustomerMarks;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property PulpUnitCharacteristics: IXMLPulpUnitCharacteristics read Get_PulpUnitCharacteristics;
  end;

{ IXMLPulpUnitCharacteristics }

  IXMLPulpUnitCharacteristics = interface(IXMLNode)
    ['{17053EAB-EC9B-47D9-A900-47A95D61246D}']
    { Property Accessors }
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_Wrap: IXMLWrap;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BalesPerUnit: LongWord;
    function Get_LayersPerUnit: LongWord;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BalesPerUnit(Value: LongWord);
    procedure Set_LayersPerUnit(Value: LongWord);
    { Methods & Properties }
    property PackagingDescription: IXMLPackagingDescription read Get_PackagingDescription;
    property Wrap: IXMLWrap read Get_Wrap;
    property PalletCharacteristics: IXMLPalletCharacteristics read Get_PalletCharacteristics;
    property BalesPerUnit: LongWord read Get_BalesPerUnit write Set_BalesPerUnit;
    property LayersPerUnit: LongWord read Get_LayersPerUnit write Set_LayersPerUnit;
    property LabelCharacteristics: IXMLLabelCharacteristics read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSlurry }

  IXMLSlurry = interface(IXMLNode)
    ['{5F225AA4-C469-4917-AE8C-4101C6010D3A}']
    { Property Accessors }
    function Get_TargetSolidsContent: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property TargetSolidsContent: IXMLMeasurement read Get_TargetSolidsContent;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLNonStandardPulp }

  IXMLNonStandardPulp = interface(IXMLNode)
    ['{370B8E6E-5A58-404B-BE00-EE4DA13DE76B}']
    { Property Accessors }
    function Get_TargetMoisture: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property TargetMoisture: IXMLMeasurement read Get_TargetMoisture;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLRecoveredPaper }

  IXMLRecoveredPaper = interface(IXMLNode)
    ['{51DD101B-880A-4D8B-A5A9-74A3C16EED63}']
    { Property Accessors }
    function Get_RecoveredPaperAttributes: UnicodeString;
    procedure Set_RecoveredPaperAttributes(Value: UnicodeString);
    { Methods & Properties }
    property RecoveredPaperAttributes: UnicodeString read Get_RecoveredPaperAttributes write Set_RecoveredPaperAttributes;
  end;

{ IXMLVirginFibre }

  IXMLVirginFibre = interface(IXMLNode)
    ['{A8C1FA80-7EFD-4153-80EB-5B68E591ABB8}']
    { Property Accessors }
    function Get_TimberCharacteristics: IXMLTimberCharacteristics;
    function Get_Log: IXMLLog;
    function Get_Chip: IXMLChip;
    { Methods & Properties }
    property TimberCharacteristics: IXMLTimberCharacteristics read Get_TimberCharacteristics;
    property Log: IXMLLog read Get_Log;
    property Chip: IXMLChip read Get_Chip;
  end;

{ IXMLTimberCharacteristics }

  IXMLTimberCharacteristics = interface(IXMLNode)
    ['{C3C9C2EA-8AEA-4DB5-942F-F7CAC9248C51}']
    { Property Accessors }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_Age: IXMLMeasurement;
    function Get_Grade: UnicodeString;
    procedure Set_Grade(Value: UnicodeString);
    { Methods & Properties }
    property LumberSpecies: IXMLLumberSpeciesClassList read Get_LumberSpecies;
    property Age: IXMLMeasurement read Get_Age;
    property Grade: UnicodeString read Get_Grade write Set_Grade;
  end;

{ IXMLLumberSpeciesClass }

  IXMLLumberSpeciesClass = interface(IXMLNode)
    ['{0C24C0B5-CCD2-45BA-A604-5986935DBD32}']
    { Property Accessors }
    function Get_SpeciesType: UnicodeString;
    function Get_SpeciesOrigin: UnicodeString;
    function Get_SpeciesAgency: UnicodeString;
    function Get_SpeciesCode: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_SpeciesType(Value: UnicodeString);
    procedure Set_SpeciesOrigin(Value: UnicodeString);
    procedure Set_SpeciesAgency(Value: UnicodeString);
    procedure Set_SpeciesCode(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property SpeciesType: UnicodeString read Get_SpeciesType write Set_SpeciesType;
    property SpeciesOrigin: UnicodeString read Get_SpeciesOrigin write Set_SpeciesOrigin;
    property SpeciesAgency: UnicodeString read Get_SpeciesAgency write Set_SpeciesAgency;
    property SpeciesCode: UnicodeString read Get_SpeciesCode write Set_SpeciesCode;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberSpeciesClassList }

  IXMLLumberSpeciesClassList = interface(IXMLNodeCollection)
    ['{11DB53C1-BD78-4EA3-A899-3CE1114D0E93}']
    { Methods & Properties }
    function Add: IXMLLumberSpeciesClass;
    function Insert(const Index: Integer): IXMLLumberSpeciesClass;

    function Get_Item(Index: Integer): IXMLLumberSpeciesClass;
    property Items[Index: Integer]: IXMLLumberSpeciesClass read Get_Item; default;
  end;

{ IXMLLog }

  IXMLLog = interface(IXMLNode)
    ['{F0715544-E973-4153-8541-D08C08094E2C}']
    { Property Accessors }
    function Get_LogCharacteristics: IXMLLogCharacteristics;
    function Get_LogPackagingCharacteristics: IXMLLogPackagingCharacteristics;
    { Methods & Properties }
    property LogCharacteristics: IXMLLogCharacteristics read Get_LogCharacteristics;
    property LogPackagingCharacteristics: IXMLLogPackagingCharacteristics read Get_LogPackagingCharacteristics;
  end;

{ IXMLLogCharacteristics }

  IXMLLogCharacteristics = interface(IXMLNode)
    ['{C4F0D817-A7FA-4AA9-BE13-422734F24F9F}']
    { Property Accessors }
    function Get_LogLengthType: UnicodeString;
    function Get_Debarked: UnicodeString;
    function Get_LogConversionRule: UnicodeString;
    function Get_Length: IXMLMeasurement;
    function Get_SmallEndDiameter: IXMLMeasurement;
    function Get_LargeEndDiameter: IXMLMeasurement;
    function Get_DiameterBreastHeight: IXMLMeasurement;
    procedure Set_LogLengthType(Value: UnicodeString);
    procedure Set_Debarked(Value: UnicodeString);
    procedure Set_LogConversionRule(Value: UnicodeString);
    { Methods & Properties }
    property LogLengthType: UnicodeString read Get_LogLengthType write Set_LogLengthType;
    property Debarked: UnicodeString read Get_Debarked write Set_Debarked;
    property LogConversionRule: UnicodeString read Get_LogConversionRule write Set_LogConversionRule;
    property Length: IXMLMeasurement read Get_Length;
    property SmallEndDiameter: IXMLMeasurement read Get_SmallEndDiameter;
    property LargeEndDiameter: IXMLMeasurement read Get_LargeEndDiameter;
    property DiameterBreastHeight: IXMLMeasurement read Get_DiameterBreastHeight;
  end;

{ IXMLLogPackagingCharacteristics }

  IXMLLogPackagingCharacteristics = interface(IXMLNode)
    ['{365FD786-F559-4F80-8262-A1BA1BF9B5D9}']
    { Property Accessors }
    function Get_DoubleBunked: UnicodeString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_DoubleBunked(Value: UnicodeString);
    { Methods & Properties }
    property DoubleBunked: UnicodeString read Get_DoubleBunked write Set_DoubleBunked;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLIdentifierS60 }

  IXMLIdentifierS60 = interface(IXMLNode)
    ['{8C766B19-0D40-490D-82A6-840C449D32FF}']
    { Property Accessors }
    function Get_IdentifierCodeType: UnicodeString;
    function Get_IdentifierType: UnicodeString;
    function Get_IdentifierFormatType: UnicodeString;
    procedure Set_IdentifierCodeType(Value: UnicodeString);
    procedure Set_IdentifierType(Value: UnicodeString);
    procedure Set_IdentifierFormatType(Value: UnicodeString);
    { Methods & Properties }
    property IdentifierCodeType: UnicodeString read Get_IdentifierCodeType write Set_IdentifierCodeType;
    property IdentifierType: UnicodeString read Get_IdentifierType write Set_IdentifierType;
    property IdentifierFormatType: UnicodeString read Get_IdentifierFormatType write Set_IdentifierFormatType;
  end;

{ IXMLIdentifierS60List }

  IXMLIdentifierS60List = interface(IXMLNodeCollection)
    ['{5E3AF39D-269B-4DD6-BA55-497F94AD9B4C}']
    { Methods & Properties }
    function Add: IXMLIdentifierS60;
    function Insert(const Index: Integer): IXMLIdentifierS60;

    function Get_Item(Index: Integer): IXMLIdentifierS60;
    property Items[Index: Integer]: IXMLIdentifierS60 read Get_Item; default;
  end;

{ IXMLChip }

  IXMLChip = interface(IXMLNode)
    ['{D73DA421-8A3B-418D-BD4D-0C369A74F03F}']
    { Property Accessors }
    function Get_ChipCharacteristics: IXMLChipCharacteristics;
    function Get_ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics;
    { Methods & Properties }
    property ChipCharacteristics: IXMLChipCharacteristics read Get_ChipCharacteristics;
    property ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics read Get_ChipPackagingCharacteristics;
  end;

{ IXMLChipCharacteristics }

  IXMLChipCharacteristics = interface(IXMLNode)
    ['{E7D21CF7-38BA-449D-A6F8-85BACB2476FA}']
    { Property Accessors }
    function Get_Screened: UnicodeString;
    function Get_Debarked: UnicodeString;
    function Get_Thickness: IXMLMeasurement;
    function Get_Moisture: IXMLMoisture;
    function Get_Dirt: IXMLDirt;
    function Get_Bark: IXMLBark;
    function Get_Sawdust: IXMLSawdust;
    procedure Set_Screened(Value: UnicodeString);
    procedure Set_Debarked(Value: UnicodeString);
    { Methods & Properties }
    property Screened: UnicodeString read Get_Screened write Set_Screened;
    property Debarked: UnicodeString read Get_Debarked write Set_Debarked;
    property Thickness: IXMLMeasurement read Get_Thickness;
    property Moisture: IXMLMoisture read Get_Moisture;
    property Dirt: IXMLDirt read Get_Dirt;
    property Bark: IXMLBark read Get_Bark;
    property Sawdust: IXMLSawdust read Get_Sawdust;
  end;

{ IXMLBark }

  IXMLBark = interface(IXMLDetailMeasurement)
    ['{B37309B0-5CA4-4A2D-A6C6-68B0D6765806}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSawdust }

  IXMLSawdust = interface(IXMLDetailMeasurement)
    ['{57B81682-E327-4AF7-B378-98837C471FC2}']
    { Property Accessors }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    { Methods & Properties }
    property TestMethod: UnicodeString read Get_TestMethod write Set_TestMethod;
    property TestAgency: UnicodeString read Get_TestAgency write Set_TestAgency;
    property SampleType: UnicodeString read Get_SampleType write Set_SampleType;
    property ResultSource: UnicodeString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLChipPackagingCharacteristics }

  IXMLChipPackagingCharacteristics = interface(IXMLNode)
    ['{A69DD3D7-1BEA-462B-9B8F-CDF771704C04}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantity;
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60 read Get_Identifier;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantity read Get_InformationalQuantity;
  end;

{ IXMLWoodProducts }

  IXMLWoodProducts = interface(IXMLNode)
    ['{97082E26-2E60-43D8-B6AC-8436150ED00C}']
    { Property Accessors }
    function Get_WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards;
    function Get_RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing;
    function Get_CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels;
    function Get_ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels;
    function Get_Millwork: UnicodeString;
    function Get_Gypsum: UnicodeString;
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_Millwork(Value: UnicodeString);
    procedure Set_Gypsum(Value: UnicodeString);
    { Methods & Properties }
    property WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards read Get_WoodTimbersDimensionalLumberBoards;
    property RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing read Get_RoofingSidingDeckingFencing;
    property CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels read Get_CompositeAndVeneerWoodPanels;
    property ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels read Get_ConstructionPackagesAndPreFabPanels;
    property Millwork: UnicodeString read Get_Millwork write Set_Millwork;
    property Gypsum: UnicodeString read Get_Gypsum write Set_Gypsum;
    property ProofInformationalQuantity: IXMLProofInformationalQuantityList read Get_ProofInformationalQuantity;
    property SuppliedComponentInformation: IXMLSuppliedComponentInformationList read Get_SuppliedComponentInformation;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLWoodTimbersDimensionalLumberBoards }

  IXMLWoodTimbersDimensionalLumberBoards = interface(IXMLNode)
    ['{EDCE9B1B-D497-4685-B7AC-54D6123B37EF}']
    { Property Accessors }
    function Get_SoftwoodLumber: IXMLSoftwoodLumber;
    function Get_HardwoodLumber: IXMLHardwoodLumber;
    { Methods & Properties }
    property SoftwoodLumber: IXMLSoftwoodLumber read Get_SoftwoodLumber;
    property HardwoodLumber: IXMLHardwoodLumber read Get_HardwoodLumber;
  end;

{ IXMLSoftwoodLumber }

  IXMLSoftwoodLumber = interface(IXMLNode)
    ['{A4421E07-E96E-4738-B5A3-1732AA1A8DF7}']
    { Property Accessors }
    function Get_SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_SoftwoodLumberCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLSoftwoodLumberCharacteristicsClass }

  IXMLSoftwoodLumberCharacteristicsClass = interface(IXMLNode)
    ['{5E3D7B43-B461-449E-9591-2E3CD1E06BD2}']
    { Property Accessors }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_LumberGrade: IXMLLumberGradeClass;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Thickness: IXMLDimensionThicknessClassList;
    function Get_Seasoning: IXMLLumberSeasoningClass;
    function Get_MoistureContent: IXMLLumberMoistureContentClass;
    function Get_HeatTreatment: IXMLHeatTreatmentClass;
    function Get_ManufacturingProcess: IXMLLumberManufacturingProcessClassList;
    function Get_PatternProfile: IXMLLumberPatternProfileClass;
    function Get_Trim: IXMLLumberTrimClass;
    function Get_Joining: IXMLLumberJoiningClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_OtherTreatment: IXMLOtherTreatmentClass;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ExLog: IXMLExLogClass;
    function Get_ClassIdentifier: IXMLIdentifierS60List;
    function Get_Weight: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristics;
    function Get_Wrap: IXMLWrap;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_AdditionalText: IXMLS255List;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    function Get_ShippingMark: UnicodeString;
    procedure Set_ShippingMark(Value: UnicodeString);
    { Methods & Properties }
    property LumberSpecies: IXMLLumberSpeciesClassList read Get_LumberSpecies;
    property LumberGrade: IXMLLumberGradeClass read Get_LumberGrade;
    property Length: IXMLDimensionConstructionClassList read Get_Length;
    property Width: IXMLDimensionConstructionClassList read Get_Width;
    property Thickness: IXMLDimensionThicknessClassList read Get_Thickness;
    property Seasoning: IXMLLumberSeasoningClass read Get_Seasoning;
    property MoistureContent: IXMLLumberMoistureContentClass read Get_MoistureContent;
    property HeatTreatment: IXMLHeatTreatmentClass read Get_HeatTreatment;
    property ManufacturingProcess: IXMLLumberManufacturingProcessClassList read Get_ManufacturingProcess;
    property PatternProfile: IXMLLumberPatternProfileClass read Get_PatternProfile;
    property Trim: IXMLLumberTrimClass read Get_Trim;
    property Joining: IXMLLumberJoiningClass read Get_Joining;
    property PressureTreatment: IXMLPressureTreatmentClass read Get_PressureTreatment;
    property FireTreatment: IXMLFireTreatmentClass read Get_FireTreatment;
    property OtherTreatment: IXMLOtherTreatmentClass read Get_OtherTreatment;
    property GradeStamp: IXMLConstructionGradeStampClass read Get_GradeStamp;
    property ExLog: IXMLExLogClass read Get_ExLog;
    property ClassIdentifier: IXMLIdentifierS60List read Get_ClassIdentifier;
    property Weight: IXMLMeasurement read Get_Weight;
    property LabelCharacteristics: IXMLLabelCharacteristics read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristics read Get_StencilCharacteristics;
    property Wrap: IXMLWrap read Get_Wrap;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property LengthCutDescription: IXMLLengthCutDescription read Get_LengthCutDescription;
    property ShippingMark: UnicodeString read Get_ShippingMark write Set_ShippingMark;
  end;

{ IXMLLumberGradeClass }

  IXMLLumberGradeClass = interface(IXMLNode)
    ['{1BDBBCB7-980C-4611-B144-6E52EF8F49E6}']
    { Property Accessors }
    function Get_GradeType: UnicodeString;
    function Get_GradingRule: UnicodeString;
    function Get_GradeAgency: UnicodeString;
    function Get_ModulusElasticity: UnicodeString;
    function Get_Face: UnicodeString;
    function Get_GradeName: UnicodeString;
    function Get_GradeCode: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_GradeType(Value: UnicodeString);
    procedure Set_GradingRule(Value: UnicodeString);
    procedure Set_GradeAgency(Value: UnicodeString);
    procedure Set_ModulusElasticity(Value: UnicodeString);
    procedure Set_Face(Value: UnicodeString);
    procedure Set_GradeName(Value: UnicodeString);
    procedure Set_GradeCode(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property GradeType: UnicodeString read Get_GradeType write Set_GradeType;
    property GradingRule: UnicodeString read Get_GradingRule write Set_GradingRule;
    property GradeAgency: UnicodeString read Get_GradeAgency write Set_GradeAgency;
    property ModulusElasticity: UnicodeString read Get_ModulusElasticity write Set_ModulusElasticity;
    property Face: UnicodeString read Get_Face write Set_Face;
    property GradeName: UnicodeString read Get_GradeName write Set_GradeName;
    property GradeCode: UnicodeString read Get_GradeCode write Set_GradeCode;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLDimensionConstructionClass }

  IXMLDimensionConstructionClass = interface(IXMLNode)
    ['{2143B239-41AC-45CB-B5B0-F01BAE75DDB4}']
    { Property Accessors }
    function Get_ActualNominal: UnicodeString;
    function Get_WithGrain: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActualNominal(Value: UnicodeString);
    procedure Set_WithGrain(Value: UnicodeString);
    { Methods & Properties }
    property ActualNominal: UnicodeString read Get_ActualNominal write Set_ActualNominal;
    property WithGrain: UnicodeString read Get_WithGrain write Set_WithGrain;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDimensionConstructionClassList }

  IXMLDimensionConstructionClassList = interface(IXMLNodeCollection)
    ['{F26AC52B-DC66-4F94-ACAE-6A05DDA2DFC0}']
    { Methods & Properties }
    function Add: IXMLDimensionConstructionClass;
    function Insert(const Index: Integer): IXMLDimensionConstructionClass;

    function Get_Item(Index: Integer): IXMLDimensionConstructionClass;
    property Items[Index: Integer]: IXMLDimensionConstructionClass read Get_Item; default;
  end;

{ IXMLDimensionThicknessClass }

  IXMLDimensionThicknessClass = interface(IXMLNode)
    ['{36AC15E3-CEB9-472C-80BE-E69BFC2B6FAD}']
    { Property Accessors }
    function Get_ActualNominal: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActualNominal(Value: UnicodeString);
    { Methods & Properties }
    property ActualNominal: UnicodeString read Get_ActualNominal write Set_ActualNominal;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDimensionThicknessClassList }

  IXMLDimensionThicknessClassList = interface(IXMLNodeCollection)
    ['{D759B276-F59F-46E7-BA61-8B9451C434AB}']
    { Methods & Properties }
    function Add: IXMLDimensionThicknessClass;
    function Insert(const Index: Integer): IXMLDimensionThicknessClass;

    function Get_Item(Index: Integer): IXMLDimensionThicknessClass;
    property Items[Index: Integer]: IXMLDimensionThicknessClass read Get_Item; default;
  end;

{ IXMLLumberSeasoningClass }

  IXMLLumberSeasoningClass = interface(IXMLNode)
    ['{BE83A551-FF02-4C05-93DD-EB25550A8C54}']
    { Property Accessors }
    function Get_SeasoningType: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_SeasoningType(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property SeasoningType: UnicodeString read Get_SeasoningType write Set_SeasoningType;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberMoistureContentClass }

  IXMLLumberMoistureContentClass = interface(IXMLNode)
    ['{42A85862-4E54-40B1-BE7D-A65153567E25}']
    { Property Accessors }
    function Get_MoistureContentPercentage: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_MoistureContentPercentage(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property MoistureContentPercentage: UnicodeString read Get_MoistureContentPercentage write Set_MoistureContentPercentage;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLHeatTreatmentClass }

  IXMLHeatTreatmentClass = interface(IXMLNodeCollection)
    ['{4B45A021-EACF-48AD-863D-4474BBD148C1}']
    { Property Accessors }
    function Get_HeatTreatmentType: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_HeatTreatmentType(Value: UnicodeString);
    { Methods & Properties }
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
    property HeatTreatmentType: UnicodeString read Get_HeatTreatmentType write Set_HeatTreatmentType;
    property AdditionalText[Index: Integer]: UnicodeString read Get_AdditionalText; default;
  end;

{ IXMLLumberManufacturingProcessClass }

  IXMLLumberManufacturingProcessClass = interface(IXMLNode)
    ['{5A342B3C-174C-46CC-9C3E-8D5CBF87C384}']
    { Property Accessors }
    function Get_ManufacturingProcessType: UnicodeString;
    function Get_ManufacturingProcessAgency: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_AdditionalText: UnicodeString;
    procedure Set_ManufacturingProcessType(Value: UnicodeString);
    procedure Set_ManufacturingProcessAgency(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property ManufacturingProcessType: UnicodeString read Get_ManufacturingProcessType write Set_ManufacturingProcessType;
    property ManufacturingProcessAgency: UnicodeString read Get_ManufacturingProcessAgency write Set_ManufacturingProcessAgency;
    property Value: IXMLValue read Get_Value;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberManufacturingProcessClassList }

  IXMLLumberManufacturingProcessClassList = interface(IXMLNodeCollection)
    ['{83FEA0FF-A545-44E9-8154-D58B52E2DF0C}']
    { Methods & Properties }
    function Add: IXMLLumberManufacturingProcessClass;
    function Insert(const Index: Integer): IXMLLumberManufacturingProcessClass;

    function Get_Item(Index: Integer): IXMLLumberManufacturingProcessClass;
    property Items[Index: Integer]: IXMLLumberManufacturingProcessClass read Get_Item; default;
  end;

{ IXMLLumberPatternProfileClass }

  IXMLLumberPatternProfileClass = interface(IXMLNode)
    ['{99416EC5-A363-4054-ABB7-CEFF949F7C5C}']
    { Property Accessors }
    function Get_PatternProfileType: UnicodeString;
    function Get_PatternProfileAgency: UnicodeString;
    function Get_PatternProfileCode: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_PatternProfileType(Value: UnicodeString);
    procedure Set_PatternProfileAgency(Value: UnicodeString);
    procedure Set_PatternProfileCode(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property PatternProfileType: UnicodeString read Get_PatternProfileType write Set_PatternProfileType;
    property PatternProfileAgency: UnicodeString read Get_PatternProfileAgency write Set_PatternProfileAgency;
    property PatternProfileCode: UnicodeString read Get_PatternProfileCode write Set_PatternProfileCode;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberTrimClass }

  IXMLLumberTrimClass = interface(IXMLNode)
    ['{37187881-A0E2-49EB-A6FE-3BA85265B553}']
    { Property Accessors }
    function Get_TrimType: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_TrimType(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property TrimType: UnicodeString read Get_TrimType write Set_TrimType;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberJoiningClass }

  IXMLLumberJoiningClass = interface(IXMLNode)
    ['{8E46E539-243C-448A-ADA0-5D60C76F27E7}']
    { Property Accessors }
    function Get_JoiningType: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_JoiningType(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property JoiningType: UnicodeString read Get_JoiningType write Set_JoiningType;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLPressureTreatmentClass }

  IXMLPressureTreatmentClass = interface(IXMLNode)
    ['{57DB1197-A527-4AF0-9D9C-7B3FD09C2A70}']
    { Property Accessors }
    function Get_PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass;
    function Get_PressureTreatmentConcentration: IXMLPressureTreatmentConcentration;
    function Get_PressureTreatmentComStdorUseCategory: UnicodeString;
    procedure Set_PressureTreatmentComStdorUseCategory(Value: UnicodeString);
    { Methods & Properties }
    property PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass read Get_PressureTreatmentCompound;
    property PressureTreatmentConcentration: IXMLPressureTreatmentConcentration read Get_PressureTreatmentConcentration;
    property PressureTreatmentComStdorUseCategory: UnicodeString read Get_PressureTreatmentComStdorUseCategory write Set_PressureTreatmentComStdorUseCategory;
  end;

{ IXMLPressureTreatmentCompoundClass }

  IXMLPressureTreatmentCompoundClass = interface(IXMLNode)
    ['{84458233-A0EA-46B6-A340-4E1C7C1CD567}']
    { Property Accessors }
    function Get_CompoundType: UnicodeString;
    function Get_CompoundAgency: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CompoundType(Value: UnicodeString);
    procedure Set_CompoundAgency(Value: UnicodeString);
    { Methods & Properties }
    property CompoundType: UnicodeString read Get_CompoundType write Set_CompoundType;
    property CompoundAgency: UnicodeString read Get_CompoundAgency write Set_CompoundAgency;
    property Value: IXMLValue read Get_Value;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPressureTreatmentConcentration }

  IXMLPressureTreatmentConcentration = interface(IXMLNode)
    ['{AE1E585B-8E4A-4325-A28F-0616232ABCE5}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLFireTreatmentClass }

  IXMLFireTreatmentClass = interface(IXMLNodeCollection)
    ['{F0CD9A36-53E3-47A8-BDD7-D68B6C116B36}']
    { Property Accessors }
    function Get_FireTreatmentType: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_FireTreatmentType(Value: UnicodeString);
    { Methods & Properties }
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
    property FireTreatmentType: UnicodeString read Get_FireTreatmentType write Set_FireTreatmentType;
    property AdditionalText[Index: Integer]: UnicodeString read Get_AdditionalText; default;
  end;

{ IXMLOtherTreatmentClass }

  IXMLOtherTreatmentClass = interface(IXMLNodeCollection)
    ['{4D0490D5-0439-4257-99D5-17740037094F}']
    { Property Accessors }
    function Get_AdditionalText(Index: Integer): UnicodeString;
    { Methods & Properties }
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
    property AdditionalText[Index: Integer]: UnicodeString read Get_AdditionalText; default;
  end;

{ IXMLConstructionGradeStampClass }

  IXMLConstructionGradeStampClass = interface(IXMLNode)
    ['{DF5D54B8-A4DB-4320-97DC-88339C813A61}']
    { Property Accessors }
    function Get_GradeStamped: UnicodeString;
    function Get_GradeStampMillNumber: IXMLS255List;
    function Get_GradeStampLocation: UnicodeString;
    procedure Set_GradeStamped(Value: UnicodeString);
    procedure Set_GradeStampLocation(Value: UnicodeString);
    { Methods & Properties }
    property GradeStamped: UnicodeString read Get_GradeStamped write Set_GradeStamped;
    property GradeStampMillNumber: IXMLS255List read Get_GradeStampMillNumber;
    property GradeStampLocation: UnicodeString read Get_GradeStampLocation write Set_GradeStampLocation;
  end;

{ IXMLExLogClass }

  IXMLExLogClass = interface(IXMLNode)
    ['{C675CF23-76FA-41F6-A271-8089ED690514}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
  end;

{ IXMLLengthCutDescription }

  IXMLLengthCutDescription = interface(IXMLNode)
    ['{482F7D85-EFBA-4756-A359-6AAF82A27B5C}']
    { Property Accessors }
    function Get_LengthCutType: UnicodeString;
    procedure Set_LengthCutType(Value: UnicodeString);
    { Methods & Properties }
    property LengthCutType: UnicodeString read Get_LengthCutType write Set_LengthCutType;
  end;

{ IXMLPackaging }

  IXMLPackaging = interface(IXMLNode)
    ['{C265E2CC-EADC-4210-AB5D-045C3E1D7C0D}']
    { Property Accessors }
    function Get_ProductPackaging: IXMLProductPackagingClass;
    { Methods & Properties }
    property ProductPackaging: IXMLProductPackagingClass read Get_ProductPackaging;
  end;

{ IXMLProductPackagingClass }

  IXMLProductPackagingClass = interface(IXMLNode)
    ['{3724AE77-14B2-4F3B-A4DD-BB742FA732B8}']
    { Property Accessors }
    function Get_QuantityInUnit: IXMLMeasurement;
    function Get_UnitDimension: IXMLUnitDimensionType;
    function Get_Weight: IXMLMeasurement;
    function Get_PackageIDInformation: IXMLLumberPackageCodeClass;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_Wrap: IXMLWrapList;
    function Get_AdditionalText: IXMLS255List;
    function Get_PackageType: UnicodeString;
    procedure Set_PackageType(Value: UnicodeString);
    { Methods & Properties }
    property QuantityInUnit: IXMLMeasurement read Get_QuantityInUnit;
    property UnitDimension: IXMLUnitDimensionType read Get_UnitDimension;
    property Weight: IXMLMeasurement read Get_Weight;
    property PackageIDInformation: IXMLLumberPackageCodeClass read Get_PackageIDInformation;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property BandCharacteristics: IXMLBandCharacteristicsList read Get_BandCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristicsList read Get_PalletCharacteristics;
    property Wrap: IXMLWrapList read Get_Wrap;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property PackageType: UnicodeString read Get_PackageType write Set_PackageType;
  end;

{ IXMLUnitDimensionType }

  IXMLUnitDimensionType = interface(IXMLNode)
    ['{A38A90BC-B2DC-4E46-84D5-C6BE40A6F7CB}']
    { Property Accessors }
    function Get_Length: IXMLDimensionMeasurementClass;
    function Get_Width: IXMLDimensionMeasurementClass;
    function Get_Height: IXMLDimensionMeasurementClass;
    function Get_PiecesPerRow: LongWord;
    function Get_RowsPerUnit: LongWord;
    procedure Set_PiecesPerRow(Value: LongWord);
    procedure Set_RowsPerUnit(Value: LongWord);
    { Methods & Properties }
    property Length: IXMLDimensionMeasurementClass read Get_Length;
    property Width: IXMLDimensionMeasurementClass read Get_Width;
    property Height: IXMLDimensionMeasurementClass read Get_Height;
    property PiecesPerRow: LongWord read Get_PiecesPerRow write Set_PiecesPerRow;
    property RowsPerUnit: LongWord read Get_RowsPerUnit write Set_RowsPerUnit;
  end;

{ IXMLDimensionMeasurementClass }

  IXMLDimensionMeasurementClass = interface(IXMLNode)
    ['{A3858629-6588-4D9C-B7C1-1D6F57C9A9DC}']
    { Property Accessors }
    function Get_ActualNominal: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    procedure Set_ActualNominal(Value: UnicodeString);
    { Methods & Properties }
    property ActualNominal: UnicodeString read Get_ActualNominal write Set_ActualNominal;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLLumberPackageCodeClass }

  IXMLLumberPackageCodeClass = interface(IXMLNode)
    ['{75385836-D4B5-4622-9746-2D98EF77C529}']
    { Property Accessors }
    function Get_PackageAgency: UnicodeString;
    function Get_PackageCode: UnicodeString;
    function Get_PackageName: UnicodeString;
    procedure Set_PackageAgency(Value: UnicodeString);
    procedure Set_PackageCode(Value: UnicodeString);
    procedure Set_PackageName(Value: UnicodeString);
    { Methods & Properties }
    property PackageAgency: UnicodeString read Get_PackageAgency write Set_PackageAgency;
    property PackageCode: UnicodeString read Get_PackageCode write Set_PackageCode;
    property PackageName: UnicodeString read Get_PackageName write Set_PackageName;
  end;

{ IXMLHardwoodLumber }

  IXMLHardwoodLumber = interface(IXMLNode)
    ['{DD9D7EFA-DF05-4243-9F54-D90AED48ABF7}']
    { Property Accessors }
    function Get_HardwoodLumberCharacteristics: UnicodeString;
    function Get_Packaging: IXMLPackaging;
    procedure Set_HardwoodLumberCharacteristics(Value: UnicodeString);
    { Methods & Properties }
    property HardwoodLumberCharacteristics: UnicodeString read Get_HardwoodLumberCharacteristics write Set_HardwoodLumberCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLRoofingSidingDeckingFencing }

  IXMLRoofingSidingDeckingFencing = interface(IXMLNode)
    ['{7E8BD070-2FE1-430D-BB06-BA4A59E0C9D7}']
    { Property Accessors }
    function Get_NaturalWoodSiding: IXMLNaturalWoodSiding;
    function Get_NaturalWoodSidingOther: IXMLNaturalWoodSidingOther;
    function Get_DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood;
    { Methods & Properties }
    property NaturalWoodSiding: IXMLNaturalWoodSiding read Get_NaturalWoodSiding;
    property NaturalWoodSidingOther: IXMLNaturalWoodSidingOther read Get_NaturalWoodSidingOther;
    property DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood read Get_DeckAndPorchFlooringMaterialsNaturalWood;
  end;

{ IXMLNaturalWoodSiding }

  IXMLNaturalWoodSiding = interface(IXMLNode)
    ['{6A5D9889-8263-4D40-B2CF-252FA4C6CCFC}']
    { Property Accessors }
    function Get_NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_NaturalWoodSidingCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLNaturalWoodSidingOther }

  IXMLNaturalWoodSidingOther = interface(IXMLNode)
    ['{EF7CA767-CF15-4B7A-AA70-D1A7CD4A504A}']
    { Property Accessors }
    function Get_NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_NaturalWoodSidingOtherCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLDeckAndPorchFlooringMaterialsNaturalWood }

  IXMLDeckAndPorchFlooringMaterialsNaturalWood = interface(IXMLNode)
    ['{EDAC8083-6877-401E-B2C4-3D40CF0AEF71}']
    { Property Accessors }
    function Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLCompositeAndVeneerWoodPanels }

  IXMLCompositeAndVeneerWoodPanels = interface(IXMLNode)
    ['{82E344E6-0A37-4CF5-B248-0532FE32241F}']
    { Property Accessors }
    function Get_SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass;
    function Get_WoodPanelProducts: IXMLWoodPanelProductsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass read Get_SoftwoodPlywood;
    property WoodPanelProducts: IXMLWoodPanelProductsClass read Get_WoodPanelProducts;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLNAPlywoodOSBCharacteristicsClass }

  IXMLNAPlywoodOSBCharacteristicsClass = interface(IXMLNode)
    ['{3B0E3480-21D2-4765-A3AB-97519D00AB95}']
    { Property Accessors }
    function Get_PlywoodOSBGrade: IXMLPlywoodOSBGradeClass;
    function Get_Thickness: IXMLDimensionThicknessClass;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
    function Get_PlyNumber: LongWord;
    function Get_Surface: IXMLPlywoodOSBSurfaceClass;
    function Get_Overlay: IXMLPlywoodOSBOverlayClassList;
    function Get_GlueExposure: UnicodeString;
    function Get_Edge: IXMLPlywoodOSBEdgeClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
    function Get_Brand: UnicodeString;
    function Get_GradeAgency: UnicodeString;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ClassIdentifier: IXMLIdentifierS60;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_PlyNumber(Value: LongWord);
    procedure Set_GlueExposure(Value: UnicodeString);
    procedure Set_Brand(Value: UnicodeString);
    procedure Set_GradeAgency(Value: UnicodeString);
    { Methods & Properties }
    property PlywoodOSBGrade: IXMLPlywoodOSBGradeClass read Get_PlywoodOSBGrade;
    property Thickness: IXMLDimensionThicknessClass read Get_Thickness;
    property Width: IXMLDimensionConstructionClassList read Get_Width;
    property Length: IXMLDimensionConstructionClassList read Get_Length;
    property PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList read Get_PlywoodOSBSpecies;
    property PlyNumber: LongWord read Get_PlyNumber write Set_PlyNumber;
    property Surface: IXMLPlywoodOSBSurfaceClass read Get_Surface;
    property Overlay: IXMLPlywoodOSBOverlayClassList read Get_Overlay;
    property GlueExposure: UnicodeString read Get_GlueExposure write Set_GlueExposure;
    property Edge: IXMLPlywoodOSBEdgeClass read Get_Edge;
    property PressureTreatment: IXMLPressureTreatmentClass read Get_PressureTreatment;
    property FireTreatment: IXMLFireTreatmentClass read Get_FireTreatment;
    property Supplemental: IXMLPlywoodOSBSupplementalClassList read Get_Supplemental;
    property Brand: UnicodeString read Get_Brand write Set_Brand;
    property GradeAgency: UnicodeString read Get_GradeAgency write Set_GradeAgency;
    property GradeStamp: IXMLConstructionGradeStampClass read Get_GradeStamp;
    property ClassIdentifier: IXMLIdentifierS60 read Get_ClassIdentifier;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLPlywoodOSBGradeClass }

  IXMLPlywoodOSBGradeClass = interface(IXMLNode)
    ['{E9D516B4-EE48-4333-96DC-D4EC306F7D3D}']
    { Property Accessors }
    function Get_Face: UnicodeString;
    function Get_SpanRating: UnicodeString;
    function Get_StrengthGroup: UnicodeString;
    procedure Set_Face(Value: UnicodeString);
    procedure Set_SpanRating(Value: UnicodeString);
    procedure Set_StrengthGroup(Value: UnicodeString);
    { Methods & Properties }
    property Face: UnicodeString read Get_Face write Set_Face;
    property SpanRating: UnicodeString read Get_SpanRating write Set_SpanRating;
    property StrengthGroup: UnicodeString read Get_StrengthGroup write Set_StrengthGroup;
  end;

{ IXMLPlywoodOSBSurfaceClass }

  IXMLPlywoodOSBSurfaceClass = interface(IXMLNodeCollection)
    ['{6FC47BA7-C99C-41C5-8923-3E5EBB124045}']
    { Property Accessors }
    function Get_SurfaceType: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_SurfaceType(Value: UnicodeString);
    { Methods & Properties }
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
    property SurfaceType: UnicodeString read Get_SurfaceType write Set_SurfaceType;
    property AdditionalText[Index: Integer]: UnicodeString read Get_AdditionalText; default;
  end;

{ IXMLPlywoodOSBOverlayClass }

  IXMLPlywoodOSBOverlayClass = interface(IXMLNodeCollection)
    ['{2F2AB296-92AE-419C-A764-C52E835CBA40}']
    { Property Accessors }
    function Get_OverlaySide: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_OverlaySide(Value: UnicodeString);
    { Methods & Properties }
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
    property OverlaySide: UnicodeString read Get_OverlaySide write Set_OverlaySide;
    property AdditionalText[Index: Integer]: UnicodeString read Get_AdditionalText; default;
  end;

{ IXMLPlywoodOSBOverlayClassList }

  IXMLPlywoodOSBOverlayClassList = interface(IXMLNodeCollection)
    ['{817A6B61-336A-43C4-A7CD-1170CF4A3AF9}']
    { Methods & Properties }
    function Add: IXMLPlywoodOSBOverlayClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBOverlayClass;

    function Get_Item(Index: Integer): IXMLPlywoodOSBOverlayClass;
    property Items[Index: Integer]: IXMLPlywoodOSBOverlayClass read Get_Item; default;
  end;

{ IXMLPlywoodOSBEdgeClass }

  IXMLPlywoodOSBEdgeClass = interface(IXMLNode)
    ['{52950D97-6C01-4B5B-ADA4-93E8FA36C7EB}']
    { Property Accessors }
    function Get_EdgeType: UnicodeString;
    function Get_EdgeLocation: UnicodeString;
    function Get_EdgeMachiningProfile: UnicodeString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_EdgeType(Value: UnicodeString);
    procedure Set_EdgeLocation(Value: UnicodeString);
    procedure Set_EdgeMachiningProfile(Value: UnicodeString);
    { Methods & Properties }
    property EdgeType: UnicodeString read Get_EdgeType write Set_EdgeType;
    property EdgeLocation: UnicodeString read Get_EdgeLocation write Set_EdgeLocation;
    property EdgeMachiningProfile: UnicodeString read Get_EdgeMachiningProfile write Set_EdgeMachiningProfile;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPlywoodOSBSupplementalClass }

  IXMLPlywoodOSBSupplementalClass = interface(IXMLNodeCollection)
    ['{9D306FBF-1179-4403-B878-276AEBA35DE9}']
    { Property Accessors }
    function Get_SupplementalSpecification: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_SupplementalSpecification(Value: UnicodeString);
    { Methods & Properties }
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
    property SupplementalSpecification: UnicodeString read Get_SupplementalSpecification write Set_SupplementalSpecification;
    property AdditionalText[Index: Integer]: UnicodeString read Get_AdditionalText; default;
  end;

{ IXMLPlywoodOSBSupplementalClassList }

  IXMLPlywoodOSBSupplementalClassList = interface(IXMLNodeCollection)
    ['{3141BBBA-FACC-4E07-A884-7F8155CEB8F8}']
    { Methods & Properties }
    function Add: IXMLPlywoodOSBSupplementalClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBSupplementalClass;

    function Get_Item(Index: Integer): IXMLPlywoodOSBSupplementalClass;
    property Items[Index: Integer]: IXMLPlywoodOSBSupplementalClass read Get_Item; default;
  end;

{ IXMLWoodPanelProductsClass }

  IXMLWoodPanelProductsClass = interface(IXMLNode)
    ['{038A52D2-5CF9-4ACE-85E2-A16EB7CD7985}']
    { Property Accessors }
    function Get_WoodBasedPanelGrade: IXMLPlywoodOSBGradeClass;
    function Get_WoodPanelSpecies: IXMLLumberSpeciesClassList;
    function Get_Thickness: IXMLDimensionThicknessClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_PlywoodLayupStructure: IXMLPlywoodLayupStructureClass;
    function Get_Edge: IXMLEdgeClassList;
    function Get_Side: IXMLPlywoodSideClassList;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
    function Get_Brand: UnicodeString;
    function Get_GradeAgency: UnicodeString;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ClassIdentifier: IXMLIdentifierS60;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    procedure Set_Brand(Value: UnicodeString);
    procedure Set_GradeAgency(Value: UnicodeString);
    { Methods & Properties }
    property WoodBasedPanelGrade: IXMLPlywoodOSBGradeClass read Get_WoodBasedPanelGrade;
    property WoodPanelSpecies: IXMLLumberSpeciesClassList read Get_WoodPanelSpecies;
    property Thickness: IXMLDimensionThicknessClassList read Get_Thickness;
    property Width: IXMLDimensionConstructionClassList read Get_Width;
    property Length: IXMLDimensionConstructionClassList read Get_Length;
    property PlywoodLayupStructure: IXMLPlywoodLayupStructureClass read Get_PlywoodLayupStructure;
    property Edge: IXMLEdgeClassList read Get_Edge;
    property Side: IXMLPlywoodSideClassList read Get_Side;
    property PressureTreatment: IXMLPressureTreatmentClass read Get_PressureTreatment;
    property FireTreatment: IXMLFireTreatmentClass read Get_FireTreatment;
    property Supplemental: IXMLPlywoodOSBSupplementalClassList read Get_Supplemental;
    property Brand: UnicodeString read Get_Brand write Set_Brand;
    property GradeAgency: UnicodeString read Get_GradeAgency write Set_GradeAgency;
    property GradeStamp: IXMLConstructionGradeStampClass read Get_GradeStamp;
    property ClassIdentifier: IXMLIdentifierS60 read Get_ClassIdentifier;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
  end;

{ IXMLPlywoodLayupStructureClass }

  IXMLPlywoodLayupStructureClass = interface(IXMLNode)
    ['{D47026B7-A9CF-4A32-A5BD-4775E7C2A2FB}']
    { Property Accessors }
    function Get_PlywoodPlySet: IXMLPlywoodPlySetClass;
    function Get_GlueExposure: IXMLWoodPanelGlueExposureClassList;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property PlywoodPlySet: IXMLPlywoodPlySetClass read Get_PlywoodPlySet;
    property GlueExposure: IXMLWoodPanelGlueExposureClassList read Get_GlueExposure;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPlywoodPlySetClass }

  IXMLPlywoodPlySetClass = interface(IXMLNode)
    ['{C9690504-2578-4A85-B781-80F8FB26B18C}']
    { Property Accessors }
    function Get_NumberOfPlies: LongWord;
    function Get_PlywoodPlyCharacteristics: IXMLPlywoodPlyCharacteristicsClassList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_NumberOfPlies(Value: LongWord);
    { Methods & Properties }
    property NumberOfPlies: LongWord read Get_NumberOfPlies write Set_NumberOfPlies;
    property PlywoodPlyCharacteristics: IXMLPlywoodPlyCharacteristicsClassList read Get_PlywoodPlyCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPlywoodPlyCharacteristicsClass }

  IXMLPlywoodPlyCharacteristicsClass = interface(IXMLNode)
    ['{741EDBE0-14C9-44E5-A7E7-0E88350D68A6}']
    { Property Accessors }
    function Get_PlyNumber: LongWord;
    function Get_WoodPanelChracteristics: IXMLWoodPanelCharacteristicsClass;
    procedure Set_PlyNumber(Value: LongWord);
    { Methods & Properties }
    property PlyNumber: LongWord read Get_PlyNumber write Set_PlyNumber;
    property WoodPanelChracteristics: IXMLWoodPanelCharacteristicsClass read Get_WoodPanelChracteristics;
  end;

{ IXMLPlywoodPlyCharacteristicsClassList }

  IXMLPlywoodPlyCharacteristicsClassList = interface(IXMLNodeCollection)
    ['{356E4618-6F0B-41D6-B441-39EA1D68485E}']
    { Methods & Properties }
    function Add: IXMLPlywoodPlyCharacteristicsClass;
    function Insert(const Index: Integer): IXMLPlywoodPlyCharacteristicsClass;

    function Get_Item(Index: Integer): IXMLPlywoodPlyCharacteristicsClass;
    property Items[Index: Integer]: IXMLPlywoodPlyCharacteristicsClass read Get_Item; default;
  end;

{ IXMLWoodPanelCharacteristicsClass }

  IXMLWoodPanelCharacteristicsClass = interface(IXMLNode)
    ['{BF52F738-6BB7-4B69-AB80-30EB416D53AF}']
    { Property Accessors }
    function Get_OrientationWithFaceWoodPanelGrain: UnicodeString;
    function Get_WoodPanelSpecies: IXMLLumberSpeciesClassList;
    function Get_PlywoodPlyGrade: IXMLPlywoodPlyGrade;
    function Get_WoodPanelManufacturingMethod: UnicodeString;
    function Get_Thickness: IXMLDimensionThicknessClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_OrientationWithFaceWoodPanelGrain(Value: UnicodeString);
    procedure Set_WoodPanelManufacturingMethod(Value: UnicodeString);
    { Methods & Properties }
    property OrientationWithFaceWoodPanelGrain: UnicodeString read Get_OrientationWithFaceWoodPanelGrain write Set_OrientationWithFaceWoodPanelGrain;
    property WoodPanelSpecies: IXMLLumberSpeciesClassList read Get_WoodPanelSpecies;
    property PlywoodPlyGrade: IXMLPlywoodPlyGrade read Get_PlywoodPlyGrade;
    property WoodPanelManufacturingMethod: UnicodeString read Get_WoodPanelManufacturingMethod write Set_WoodPanelManufacturingMethod;
    property Thickness: IXMLDimensionThicknessClassList read Get_Thickness;
    property Width: IXMLDimensionConstructionClassList read Get_Width;
    property Length: IXMLDimensionConstructionClassList read Get_Length;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPlywoodPlyGrade }

  IXMLPlywoodPlyGrade = interface(IXMLNode)
    ['{2EAC1163-FE34-4A68-BB7F-B548D03904C7}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLWoodPanelGlueExposureClass }

  IXMLWoodPanelGlueExposureClass = interface(IXMLNode)
    ['{B1E77B45-C4BF-42D8-860F-671F15FEA55B}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    function Get_GlueExposureID: IXMLGlueExposureIDTypeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property GlueExposureID: IXMLGlueExposureIDTypeList read Get_GlueExposureID;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLWoodPanelGlueExposureClassList }

  IXMLWoodPanelGlueExposureClassList = interface(IXMLNodeCollection)
    ['{608C611F-21FE-4A4A-8818-D201A9F4BC2F}']
    { Methods & Properties }
    function Add: IXMLWoodPanelGlueExposureClass;
    function Insert(const Index: Integer): IXMLWoodPanelGlueExposureClass;

    function Get_Item(Index: Integer): IXMLWoodPanelGlueExposureClass;
    property Items[Index: Integer]: IXMLWoodPanelGlueExposureClass read Get_Item; default;
  end;

{ IXMLEdgeClass }

  IXMLEdgeClass = interface(IXMLNode)
    ['{B43C9351-4CC9-4F39-BE08-E8427DE805E4}']
    { Property Accessors }
    function Get_EdgeType: UnicodeString;
    function Get_EdgeLocation: UnicodeString;
    function Get_EdgeMachiningProfile: UnicodeString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_EdgeType(Value: UnicodeString);
    procedure Set_EdgeLocation(Value: UnicodeString);
    procedure Set_EdgeMachiningProfile(Value: UnicodeString);
    { Methods & Properties }
    property EdgeType: UnicodeString read Get_EdgeType write Set_EdgeType;
    property EdgeLocation: UnicodeString read Get_EdgeLocation write Set_EdgeLocation;
    property EdgeMachiningProfile: UnicodeString read Get_EdgeMachiningProfile write Set_EdgeMachiningProfile;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLEdgeClassList }

  IXMLEdgeClassList = interface(IXMLNodeCollection)
    ['{BDA4EADE-8562-4376-94CA-95CA754FC1E2}']
    { Methods & Properties }
    function Add: IXMLEdgeClass;
    function Insert(const Index: Integer): IXMLEdgeClass;

    function Get_Item(Index: Integer): IXMLEdgeClass;
    property Items[Index: Integer]: IXMLEdgeClass read Get_Item; default;
  end;

{ IXMLPlywoodSideClass }

  IXMLPlywoodSideClass = interface(IXMLNode)
    ['{23A07AB8-6AFF-4957-A940-E8B79B8F6C87}']
    { Property Accessors }
    function Get_TopSide: UnicodeString;
    function Get_Surface: IXMLPlywoodOSBSurfaceClass;
    function Get_PlywoodPlyGrade: IXMLPlywoodPlyGrade;
    function Get_Embossing: IXMLEmbossing;
    function Get_PlywoodMachining: IXMLPlywoodMachining;
    procedure Set_TopSide(Value: UnicodeString);
    { Methods & Properties }
    property TopSide: UnicodeString read Get_TopSide write Set_TopSide;
    property Surface: IXMLPlywoodOSBSurfaceClass read Get_Surface;
    property PlywoodPlyGrade: IXMLPlywoodPlyGrade read Get_PlywoodPlyGrade;
    property Embossing: IXMLEmbossing read Get_Embossing;
    property PlywoodMachining: IXMLPlywoodMachining read Get_PlywoodMachining;
  end;

{ IXMLPlywoodSideClassList }

  IXMLPlywoodSideClassList = interface(IXMLNodeCollection)
    ['{1BF6996C-02BD-4A67-9A82-B5E85ADA3472}']
    { Methods & Properties }
    function Add: IXMLPlywoodSideClass;
    function Insert(const Index: Integer): IXMLPlywoodSideClass;

    function Get_Item(Index: Integer): IXMLPlywoodSideClass;
    property Items[Index: Integer]: IXMLPlywoodSideClass read Get_Item; default;
  end;

{ IXMLPlywoodMachining }

  IXMLPlywoodMachining = interface(IXMLNode)
    ['{C830693F-91E6-4E4E-B8C9-28DE260CFDC1}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLConstructionPackagesAndPreFabPanels }

  IXMLConstructionPackagesAndPreFabPanels = interface(IXMLNode)
    ['{AF14247F-4227-4B47-BCAC-2020DE2CE1F9}']
    { Property Accessors }
    function Get_Floor: IXMLFloor;
    function Get_Wall: IXMLWall;
    function Get_Roof: IXMLRoof;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property Floor: IXMLFloor read Get_Floor;
    property Wall: IXMLWall read Get_Wall;
    property Roof: IXMLRoof read Get_Roof;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLFloor }

  IXMLFloor = interface(IXMLNode)
    ['{9D527EE7-F103-495E-972C-F895A2D6ED76}']
    { Property Accessors }
    function Get_FloorPanel: UnicodeString;
    function Get_FloorPackage: UnicodeString;
    function Get_FloorTruss: UnicodeString;
    procedure Set_FloorPanel(Value: UnicodeString);
    procedure Set_FloorPackage(Value: UnicodeString);
    procedure Set_FloorTruss(Value: UnicodeString);
    { Methods & Properties }
    property FloorPanel: UnicodeString read Get_FloorPanel write Set_FloorPanel;
    property FloorPackage: UnicodeString read Get_FloorPackage write Set_FloorPackage;
    property FloorTruss: UnicodeString read Get_FloorTruss write Set_FloorTruss;
  end;

{ IXMLWall }

  IXMLWall = interface(IXMLNode)
    ['{30E318ED-A828-464F-AF3F-87C74823E89C}']
    { Property Accessors }
    function Get_WallPanel: UnicodeString;
    function Get_WallPackage: UnicodeString;
    procedure Set_WallPanel(Value: UnicodeString);
    procedure Set_WallPackage(Value: UnicodeString);
    { Methods & Properties }
    property WallPanel: UnicodeString read Get_WallPanel write Set_WallPanel;
    property WallPackage: UnicodeString read Get_WallPackage write Set_WallPackage;
  end;

{ IXMLRoof }

  IXMLRoof = interface(IXMLNode)
    ['{B1B76619-F156-4FD8-A9F1-FF585CC0A638}']
    { Property Accessors }
    function Get_RoofPanel: UnicodeString;
    function Get_RoofPackage: UnicodeString;
    function Get_RoofTruss: UnicodeString;
    procedure Set_RoofPanel(Value: UnicodeString);
    procedure Set_RoofPackage(Value: UnicodeString);
    procedure Set_RoofTruss(Value: UnicodeString);
    { Methods & Properties }
    property RoofPanel: UnicodeString read Get_RoofPanel write Set_RoofPanel;
    property RoofPackage: UnicodeString read Get_RoofPackage write Set_RoofPackage;
    property RoofTruss: UnicodeString read Get_RoofTruss write Set_RoofTruss;
  end;

{ IXMLOtherProducts }

  IXMLOtherProducts = interface(IXMLNode)
    ['{BFA2CCF3-74F1-4664-95FE-679766381F9F}']
    { Property Accessors }
    function Get_OtherProductsType: UnicodeString;
    function Get_OtherProductsItemType: UnicodeString;
    function Get_OtherProductsItemCodeInfo: IXMLCodeInfo;
    function Get_OtherProductsClass: IXMLOtherProductsClassList;
    function Get_OtherProductsCharacteristics: IXMLOtherProductsCharacteristics;
    function Get_OtherProductsPackagingCharacteristics: IXMLOtherProductsPackagingCharacteristics;
    function Get_OtherProductsProcessingCharacteristics: IXMLOtherProductsProcessingCharacteristics;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_OtherProductsType(Value: UnicodeString);
    procedure Set_OtherProductsItemType(Value: UnicodeString);
    { Methods & Properties }
    property OtherProductsType: UnicodeString read Get_OtherProductsType write Set_OtherProductsType;
    property OtherProductsItemType: UnicodeString read Get_OtherProductsItemType write Set_OtherProductsItemType;
    property OtherProductsItemCodeInfo: IXMLCodeInfo read Get_OtherProductsItemCodeInfo;
    property OtherProductsClass: IXMLOtherProductsClassList read Get_OtherProductsClass;
    property OtherProductsCharacteristics: IXMLOtherProductsCharacteristics read Get_OtherProductsCharacteristics;
    property OtherProductsPackagingCharacteristics: IXMLOtherProductsPackagingCharacteristics read Get_OtherProductsPackagingCharacteristics;
    property OtherProductsProcessingCharacteristics: IXMLOtherProductsProcessingCharacteristics read Get_OtherProductsProcessingCharacteristics;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLOtherProductsClass }

  IXMLOtherProductsClass = interface(IXMLNode)
    ['{45038EAB-5B90-4112-AF3F-E3D1C30540E6}']
    { Property Accessors }
    function Get_OtherProductsClassType: UnicodeString;
    function Get_ClassCodeInfo: IXMLCodeInfo;
    procedure Set_OtherProductsClassType(Value: UnicodeString);
    { Methods & Properties }
    property OtherProductsClassType: UnicodeString read Get_OtherProductsClassType write Set_OtherProductsClassType;
    property ClassCodeInfo: IXMLCodeInfo read Get_ClassCodeInfo;
  end;

{ IXMLOtherProductsClassList }

  IXMLOtherProductsClassList = interface(IXMLNodeCollection)
    ['{4172F41F-6998-4FD8-93DB-7F604B8D767C}']
    { Methods & Properties }
    function Add: IXMLOtherProductsClass;
    function Insert(const Index: Integer): IXMLOtherProductsClass;

    function Get_Item(Index: Integer): IXMLOtherProductsClass;
    property Items[Index: Integer]: IXMLOtherProductsClass read Get_Item; default;
  end;

{ IXMLOtherProductsCharacteristics }

  IXMLOtherProductsCharacteristics = interface(IXMLNodeCollection)
    ['{2FFC7F82-62D0-4F3E-B04B-89ED54508F96}']
    { Property Accessors }
    function Get_PropertyValue(Index: Integer): IXMLPropertyValue;
    { Methods & Properties }
    function Add: IXMLPropertyValue;
    function Insert(const Index: Integer): IXMLPropertyValue;
    property PropertyValue[Index: Integer]: IXMLPropertyValue read Get_PropertyValue; default;
  end;

{ IXMLOtherProductsPackagingCharacteristics }

  IXMLOtherProductsPackagingCharacteristics = interface(IXMLNodeCollection)
    ['{C012D400-DA15-4DEA-BB25-BE312633295A}']
    { Property Accessors }
    function Get_PackagingCodeInfo(Index: Integer): IXMLCodeInfo;
    { Methods & Properties }
    function Add: IXMLCodeInfo;
    function Insert(const Index: Integer): IXMLCodeInfo;
    property PackagingCodeInfo[Index: Integer]: IXMLCodeInfo read Get_PackagingCodeInfo; default;
  end;

{ IXMLOtherProductsProcessingCharacteristics }

  IXMLOtherProductsProcessingCharacteristics = interface(IXMLNodeCollection)
    ['{7C9AC5EB-5B0F-4E70-96AC-38C5AA2660F5}']
    { Property Accessors }
    function Get_ProcessingCodeInfo(Index: Integer): IXMLCodeInfo;
    { Methods & Properties }
    function Add: IXMLCodeInfo;
    function Insert(const Index: Integer): IXMLCodeInfo;
    property ProcessingCodeInfo[Index: Integer]: IXMLCodeInfo read Get_ProcessingCodeInfo; default;
  end;

{ IXMLInvoiceLineBaseAmountInformation }

  IXMLInvoiceLineBaseAmountInformation = interface(IXMLNode)
    ['{AA32177B-4124-4390-9237-3B494DDDE5CD}']
    { Property Accessors }
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_InvoiceLineBaseAmount: IXMLInvoiceLineBaseAmount;
    { Methods & Properties }
    property PriceDetails: IXMLPriceDetails read Get_PriceDetails;
    property InvoiceLineBaseAmount: IXMLInvoiceLineBaseAmount read Get_InvoiceLineBaseAmount;
  end;

{ IXMLPriceDetails }

  IXMLPriceDetails = interface(IXMLNode)
    ['{B9B87612-B745-4D44-9046-82026B7BD9D8}']
    { Property Accessors }
    function Get_PriceQuantityBasis: UnicodeString;
    function Get_PriceTaxBasis: UnicodeString;
    function Get_PricePerUnit: IXMLPricePerUnit;
    function Get_InformationalPricePerUnit: IXMLInformationalPricePerUnitList;
    function Get_AdditionalText: IXMLS255List;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_PriceSpecification: IXMLPriceSpecificationList;
    procedure Set_PriceQuantityBasis(Value: UnicodeString);
    procedure Set_PriceTaxBasis(Value: UnicodeString);
    { Methods & Properties }
    property PriceQuantityBasis: UnicodeString read Get_PriceQuantityBasis write Set_PriceQuantityBasis;
    property PriceTaxBasis: UnicodeString read Get_PriceTaxBasis write Set_PriceTaxBasis;
    property PricePerUnit: IXMLPricePerUnit read Get_PricePerUnit;
    property InformationalPricePerUnit: IXMLInformationalPricePerUnitList read Get_InformationalPricePerUnit;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property ExchangeRate: IXMLExchangeRate read Get_ExchangeRate;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property GeneralLedgerAccount: IXMLGeneralLedgerAccount read Get_GeneralLedgerAccount;
    property PriceSpecification: IXMLPriceSpecificationList read Get_PriceSpecification;
  end;

{ IXMLPricePerUnit }

  IXMLPricePerUnit = interface(IXMLNode)
    ['{CC8FF564-9D42-4C30-8267-95BD565DEA45}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLInformationalPricePerUnit }

  IXMLInformationalPricePerUnit = interface(IXMLPricePerUnit)
    ['{63D554E7-38CF-4095-A27E-1053BE1BF0A5}']
    { Property Accessors }
    function Get_InformationalPricePerUnitType: UnicodeString;
    function Get_Country: IXMLCountry;
    procedure Set_InformationalPricePerUnitType(Value: UnicodeString);
    { Methods & Properties }
    property InformationalPricePerUnitType: UnicodeString read Get_InformationalPricePerUnitType write Set_InformationalPricePerUnitType;
    property Country: IXMLCountry read Get_Country;
  end;

{ IXMLInformationalPricePerUnitList }

  IXMLInformationalPricePerUnitList = interface(IXMLNodeCollection)
    ['{76B0C4DB-A61B-4EE3-8883-83306252BD92}']
    { Methods & Properties }
    function Add: IXMLInformationalPricePerUnit;
    function Insert(const Index: Integer): IXMLInformationalPricePerUnit;

    function Get_Item(Index: Integer): IXMLInformationalPricePerUnit;
    property Items[Index: Integer]: IXMLInformationalPricePerUnit read Get_Item; default;
  end;

{ IXMLExchangeRate }

  IXMLExchangeRate = interface(IXMLNode)
    ['{22D925CB-BCFA-492A-AF25-360A18525ABF}']
    { Property Accessors }
    function Get_ExchangeRateType: UnicodeString;
    function Get_CurrencyFromType: UnicodeString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_MinCurrencyValue: IXMLMinCurrencyValue;
    function Get_MaxCurrencyValue: IXMLMaxCurrencyValue;
    function Get_Date: IXMLDateBasis;
    procedure Set_ExchangeRateType(Value: UnicodeString);
    procedure Set_CurrencyFromType(Value: UnicodeString);
    { Methods & Properties }
    property ExchangeRateType: UnicodeString read Get_ExchangeRateType write Set_ExchangeRateType;
    property CurrencyFromType: UnicodeString read Get_CurrencyFromType write Set_CurrencyFromType;
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property MinCurrencyValue: IXMLMinCurrencyValue read Get_MinCurrencyValue;
    property MaxCurrencyValue: IXMLMaxCurrencyValue read Get_MaxCurrencyValue;
    property Date: IXMLDateBasis read Get_Date;
  end;

{ IXMLMinCurrencyValue }

  IXMLMinCurrencyValue = interface(IXMLNode)
    ['{4593C2F2-75B7-4D21-8EB3-82A62F89A926}']
    { Property Accessors }
    function Get_CurrencyType: UnicodeString;
    procedure Set_CurrencyType(Value: UnicodeString);
    { Methods & Properties }
    property CurrencyType: UnicodeString read Get_CurrencyType write Set_CurrencyType;
  end;

{ IXMLMaxCurrencyValue }

  IXMLMaxCurrencyValue = interface(IXMLNode)
    ['{53A36AE0-A7D4-4440-865C-9F964E8DD81A}']
    { Property Accessors }
    function Get_CurrencyType: UnicodeString;
    procedure Set_CurrencyType(Value: UnicodeString);
    { Methods & Properties }
    property CurrencyType: UnicodeString read Get_CurrencyType write Set_CurrencyType;
  end;

{ IXMLMonetaryAdjustment }

  IXMLMonetaryAdjustment = interface(IXMLNode)
    ['{EF3310D6-277D-44EF-B16D-E6FBA2286FE2}']
    { Property Accessors }
    function Get_AdjustmentType: UnicodeString;
    function Get_MonetaryAdjustmentLine: LongWord;
    function Get_MonetaryAdjustmentComponent: IXMLCodeInfoList;
    function Get_MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount;
    function Get_MonetaryAdjustmentStartQuantity: IXMLMonetaryAdjustmentStartQuantity;
    function Get_PriceAdjustment: IXMLPriceAdjustment;
    function Get_FlatAmountAdjustment: IXMLFlatAmountAdjustment;
    function Get_TaxAdjustment: IXMLTaxAdjustment;
    function Get_InformationalAmount: IXMLInformationalAmount;
    function Get_MonetaryAdjustmentReferenceLine: LongWord;
    function Get_AdditionalText: IXMLS255List;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount;
    function Get_AdjustmentTypeReason: UnicodeString;
    function Get_MonetaryAdjustmentReference: IXMLMonetaryAdjustmentReferenceList;
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MonetaryAdjustmentLine(Value: LongWord);
    procedure Set_MonetaryAdjustmentReferenceLine(Value: LongWord);
    procedure Set_AdjustmentTypeReason(Value: UnicodeString);
    { Methods & Properties }
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MonetaryAdjustmentLine: LongWord read Get_MonetaryAdjustmentLine write Set_MonetaryAdjustmentLine;
    property MonetaryAdjustmentComponent: IXMLCodeInfoList read Get_MonetaryAdjustmentComponent;
    property MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount read Get_MonetaryAdjustmentStartAmount;
    property MonetaryAdjustmentStartQuantity: IXMLMonetaryAdjustmentStartQuantity read Get_MonetaryAdjustmentStartQuantity;
    property PriceAdjustment: IXMLPriceAdjustment read Get_PriceAdjustment;
    property FlatAmountAdjustment: IXMLFlatAmountAdjustment read Get_FlatAmountAdjustment;
    property TaxAdjustment: IXMLTaxAdjustment read Get_TaxAdjustment;
    property InformationalAmount: IXMLInformationalAmount read Get_InformationalAmount;
    property MonetaryAdjustmentReferenceLine: LongWord read Get_MonetaryAdjustmentReferenceLine write Set_MonetaryAdjustmentReferenceLine;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property GeneralLedgerAccount: IXMLGeneralLedgerAccount read Get_GeneralLedgerAccount;
    property MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount read Get_MonetaryAdjustmentAmount;
    property AdjustmentTypeReason: UnicodeString read Get_AdjustmentTypeReason write Set_AdjustmentTypeReason;
    property MonetaryAdjustmentReference: IXMLMonetaryAdjustmentReferenceList read Get_MonetaryAdjustmentReference;
  end;

{ IXMLMonetaryAdjustmentList }

  IXMLMonetaryAdjustmentList = interface(IXMLNodeCollection)
    ['{543798FE-ED7C-433F-A850-ABF3322279A6}']
    { Methods & Properties }
    function Add: IXMLMonetaryAdjustment;
    function Insert(const Index: Integer): IXMLMonetaryAdjustment;

    function Get_Item(Index: Integer): IXMLMonetaryAdjustment;
    property Items[Index: Integer]: IXMLMonetaryAdjustment read Get_Item; default;
  end;

{ IXMLMonetaryAdjustmentStartAmount }

  IXMLMonetaryAdjustmentStartAmount = interface(IXMLNode)
    ['{7DFE3F25-0E7B-48E5-B80D-1A1A48152971}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLMonetaryAdjustmentStartQuantity }

  IXMLMonetaryAdjustmentStartQuantity = interface(IXMLMeasurement)
    ['{1506AA4D-01FF-47FA-B083-CE53EFDA3ACE}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
  end;

{ IXMLPriceAdjustment }

  IXMLPriceAdjustment = interface(IXMLNode)
    ['{406830FF-4283-4443-B229-0AB8E04DA692}']
    { Property Accessors }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentValue: IXMLPricePerUnit;
    { Methods & Properties }
    property AdjustmentPercentage: IXMLMeasurement read Get_AdjustmentPercentage;
    property AdjustmentValue: IXMLPricePerUnit read Get_AdjustmentValue;
  end;

{ IXMLFlatAmountAdjustment }

  IXMLFlatAmountAdjustment = interface(IXMLNode)
    ['{6C3D3106-5D53-4A34-8466-2FB03FB61FE6}']
    { Property Accessors }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentFixedAmount: IXMLAdjustmentFixedAmount;
    { Methods & Properties }
    property AdjustmentPercentage: IXMLMeasurement read Get_AdjustmentPercentage;
    property AdjustmentFixedAmount: IXMLAdjustmentFixedAmount read Get_AdjustmentFixedAmount;
  end;

{ IXMLAdjustmentFixedAmount }

  IXMLAdjustmentFixedAmount = interface(IXMLNode)
    ['{2434A665-2F0A-4412-B88D-87B63CFF7487}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTaxAdjustment }

  IXMLTaxAdjustment = interface(IXMLNode)
    ['{9EF2A73F-0E4A-47CF-BCEC-330E83F11768}']
    { Property Accessors }
    function Get_TaxCategoryType: UnicodeString;
    function Get_TaxType: UnicodeString;
    function Get_TaxPercent: Double;
    function Get_TaxAmount: IXMLTaxAmount;
    function Get_TaxLocation: UnicodeString;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    procedure Set_TaxCategoryType(Value: UnicodeString);
    procedure Set_TaxType(Value: UnicodeString);
    procedure Set_TaxPercent(Value: Double);
    procedure Set_TaxLocation(Value: UnicodeString);
    { Methods & Properties }
    property TaxCategoryType: UnicodeString read Get_TaxCategoryType write Set_TaxCategoryType;
    property TaxType: UnicodeString read Get_TaxType write Set_TaxType;
    property TaxPercent: Double read Get_TaxPercent write Set_TaxPercent;
    property TaxAmount: IXMLTaxAmount read Get_TaxAmount;
    property TaxLocation: UnicodeString read Get_TaxLocation write Set_TaxLocation;
    property InformationalAmount: IXMLInformationalAmountList read Get_InformationalAmount;
  end;

{ IXMLTaxAmount }

  IXMLTaxAmount = interface(IXMLNode)
    ['{59561AE2-54C8-4575-9EE0-ABA68C9B059B}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLInformationalAmount }

  IXMLInformationalAmount = interface(IXMLNode)
    ['{9D898E11-6F56-49D0-AB2F-E54F5DCED4B8}']
    { Property Accessors }
    function Get_AmountType: UnicodeString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_AmountType(Value: UnicodeString);
    { Methods & Properties }
    property AmountType: UnicodeString read Get_AmountType write Set_AmountType;
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property ExchangeRate: IXMLExchangeRate read Get_ExchangeRate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLInformationalAmountList }

  IXMLInformationalAmountList = interface(IXMLNodeCollection)
    ['{93EEC953-CD53-4274-A030-9C4FF41CBBEB}']
    { Methods & Properties }
    function Add: IXMLInformationalAmount;
    function Insert(const Index: Integer): IXMLInformationalAmount;

    function Get_Item(Index: Integer): IXMLInformationalAmount;
    property Items[Index: Integer]: IXMLInformationalAmount read Get_Item; default;
  end;

{ IXMLGeneralLedgerAccount }

  IXMLGeneralLedgerAccount = interface(IXMLNode)
    ['{F1F2C422-92D9-4FCA-8605-DB6999932E4E}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLMonetaryAdjustmentAmount }

  IXMLMonetaryAdjustmentAmount = interface(IXMLNode)
    ['{BA259C35-7B2D-46EA-B36A-31DDB0009FB5}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLMonetaryAdjustmentReference }

  IXMLMonetaryAdjustmentReference = interface(IXMLNode)
    ['{933C75CE-8DB0-406D-A1BA-0123F2D314A3}']
    { Property Accessors }
    function Get_MonetaryAdjustmentReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_MonetaryAdjustmentReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property MonetaryAdjustmentReferenceType: UnicodeString read Get_MonetaryAdjustmentReferenceType write Set_MonetaryAdjustmentReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLMonetaryAdjustmentReferenceList }

  IXMLMonetaryAdjustmentReferenceList = interface(IXMLNodeCollection)
    ['{98717A70-0A09-4C6C-AC68-52A1F26FF095}']
    { Methods & Properties }
    function Add: IXMLMonetaryAdjustmentReference;
    function Insert(const Index: Integer): IXMLMonetaryAdjustmentReference;

    function Get_Item(Index: Integer): IXMLMonetaryAdjustmentReference;
    property Items[Index: Integer]: IXMLMonetaryAdjustmentReference read Get_Item; default;
  end;

{ IXMLPriceSpecification }

  IXMLPriceSpecification = interface(IXMLNode)
    ['{6EBAC01B-00A0-41F4-978A-D4FB6B90655A}']
    { Property Accessors }
    function Get_ProductIdentification: IXMLProductIdentification;
    function Get_BookSpecIdentification: IXMLBookSpecIdentification;
    { Methods & Properties }
    property ProductIdentification: IXMLProductIdentification read Get_ProductIdentification;
    property BookSpecIdentification: IXMLBookSpecIdentification read Get_BookSpecIdentification;
  end;

{ IXMLPriceSpecificationList }

  IXMLPriceSpecificationList = interface(IXMLNodeCollection)
    ['{B0D6A790-64A8-4F2A-9DC8-3BA218438FDD}']
    { Methods & Properties }
    function Add: IXMLPriceSpecification;
    function Insert(const Index: Integer): IXMLPriceSpecification;

    function Get_Item(Index: Integer): IXMLPriceSpecification;
    property Items[Index: Integer]: IXMLPriceSpecification read Get_Item; default;
  end;

{ IXMLBookSpecIdentification }

  IXMLBookSpecIdentification = interface(IXMLNode)
    ['{0B7A1811-1FB3-4673-AA83-64A93CA27BB9}']
    { Property Accessors }
    function Get_SpecificationNumber: UnicodeString;
    function Get_SpecVersion: UnicodeString;
    function Get_SpecIssueDate: IXMLSpecIssueDate;
    procedure Set_SpecificationNumber(Value: UnicodeString);
    procedure Set_SpecVersion(Value: UnicodeString);
    { Methods & Properties }
    property SpecificationNumber: UnicodeString read Get_SpecificationNumber write Set_SpecificationNumber;
    property SpecVersion: UnicodeString read Get_SpecVersion write Set_SpecVersion;
    property SpecIssueDate: IXMLSpecIssueDate read Get_SpecIssueDate;
  end;

{ IXMLSpecIssueDate }

  IXMLSpecIssueDate = interface(IXMLNode)
    ['{E6082B61-7C46-46E7-A9C1-F8E9FCBE002F}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLInvoiceLineBaseAmount }

  IXMLInvoiceLineBaseAmount = interface(IXMLNode)
    ['{41B0B237-F785-410B-B988-BF868CB25451}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLChargeInformation }

  IXMLChargeInformation = interface(IXMLNode)
    ['{BE9B0DB5-B0FF-47CE-B467-C32646945954}']
    { Property Accessors }
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_CostComponent: IXMLCostComponentList;
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_QuantityInformation: IXMLQuantityInformation;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_ChargeReference: IXMLChargeReferenceList;
    function Get_ChargeAmount: IXMLChargeAmount;
    function Get_ChargeNetAmount: IXMLChargeNetAmount;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    { Methods & Properties }
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property CostComponent: IXMLCostComponentList read Get_CostComponent;
    property PriceDetails: IXMLPriceDetails read Get_PriceDetails;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property QuantityInformation: IXMLQuantityInformation read Get_QuantityInformation;
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList read Get_TransportUnitCharacteristics;
    property TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics read Get_TransportVehicleCharacteristics;
    property ChargeReference: IXMLChargeReferenceList read Get_ChargeReference;
    property ChargeAmount: IXMLChargeAmount read Get_ChargeAmount;
    property ChargeNetAmount: IXMLChargeNetAmount read Get_ChargeNetAmount;
    property InformationalAmount: IXMLInformationalAmountList read Get_InformationalAmount;
  end;

{ IXMLChargeInformationList }

  IXMLChargeInformationList = interface(IXMLNodeCollection)
    ['{C95A90EC-2A42-43A3-854F-9A7D66705EE4}']
    { Methods & Properties }
    function Add: IXMLChargeInformation;
    function Insert(const Index: Integer): IXMLChargeInformation;

    function Get_Item(Index: Integer): IXMLChargeInformation;
    property Items[Index: Integer]: IXMLChargeInformation read Get_Item; default;
  end;

{ IXMLCostComponent }

  IXMLCostComponent = interface(IXMLNode)
    ['{86A8298A-C243-45CF-95E8-DFF2AD1BC1E4}']
    { Property Accessors }
    function Get_CostComponentCode: IXMLCostComponentCode;
    function Get_CostComponentCodeValue: IXMLCostComponentCodeValue;
    function Get_CostComponentDescription: IXMLCostComponentDescriptionList;
    { Methods & Properties }
    property CostComponentCode: IXMLCostComponentCode read Get_CostComponentCode;
    property CostComponentCodeValue: IXMLCostComponentCodeValue read Get_CostComponentCodeValue;
    property CostComponentDescription: IXMLCostComponentDescriptionList read Get_CostComponentDescription;
  end;

{ IXMLCostComponentList }

  IXMLCostComponentList = interface(IXMLNodeCollection)
    ['{360395FA-0CE1-4769-9603-39BB5244C1C6}']
    { Methods & Properties }
    function Add: IXMLCostComponent;
    function Insert(const Index: Integer): IXMLCostComponent;

    function Get_Item(Index: Integer): IXMLCostComponent;
    property Items[Index: Integer]: IXMLCostComponent read Get_Item; default;
  end;

{ IXMLCostComponentCode }

  IXMLCostComponentCode = interface(IXMLNode)
    ['{D660238B-3931-4DBB-808B-29A7D0384E94}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLCostComponentCodeValue }

  IXMLCostComponentCodeValue = interface(IXMLNode)
    ['{703456D8-AF81-48B6-A318-BB2C32912DF1}']
    { Property Accessors }
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
  end;

{ IXMLCostComponentDescription }

  IXMLCostComponentDescription = interface(IXMLNode)
    ['{DBD960B5-079E-444E-9162-9DDA85BA7D9D}']
    { Property Accessors }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property Language: UnicodeString read Get_Language write Set_Language;
  end;

{ IXMLCostComponentDescriptionList }

  IXMLCostComponentDescriptionList = interface(IXMLNodeCollection)
    ['{4D63B591-22C4-4E26-8988-6319FF59F1F5}']
    { Methods & Properties }
    function Add: IXMLCostComponentDescription;
    function Insert(const Index: Integer): IXMLCostComponentDescription;

    function Get_Item(Index: Integer): IXMLCostComponentDescription;
    property Items[Index: Integer]: IXMLCostComponentDescription read Get_Item; default;
  end;

{ IXMLTransportUnitCharacteristics }

  IXMLTransportUnitCharacteristics = interface(IXMLNode)
    ['{1CFB24A7-A631-4E74-8C65-C5BDE328F71B}']
    { Property Accessors }
    function Get_TransportUnitType: UnicodeString;
    function Get_TransportUnitVariable: UnicodeString;
    function Get_TransportUnitLevel: LongWord;
    function Get_TransportUnitHorizontalOrder: LongWord;
    function Get_ChangesAllowed: UnicodeString;
    function Get_TransportUnitCode: IXMLTransportUnitCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    function Get_TransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
    function Get_TransportUnitEquipment: IXMLTransportUnitEquipmentList;
    function Get_TransportUnitCount: LongWord;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_TransportUnitText: UnicodeString;
    function Get_TransportUnitDetail: IXMLTransportUnitDetail;
    function Get_TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
    procedure Set_TransportUnitType(Value: UnicodeString);
    procedure Set_TransportUnitVariable(Value: UnicodeString);
    procedure Set_TransportUnitLevel(Value: LongWord);
    procedure Set_TransportUnitHorizontalOrder(Value: LongWord);
    procedure Set_ChangesAllowed(Value: UnicodeString);
    procedure Set_TransportUnitCount(Value: LongWord);
    procedure Set_TransportUnitText(Value: UnicodeString);
    { Methods & Properties }
    property TransportUnitType: UnicodeString read Get_TransportUnitType write Set_TransportUnitType;
    property TransportUnitVariable: UnicodeString read Get_TransportUnitVariable write Set_TransportUnitVariable;
    property TransportUnitLevel: LongWord read Get_TransportUnitLevel write Set_TransportUnitLevel;
    property TransportUnitHorizontalOrder: LongWord read Get_TransportUnitHorizontalOrder write Set_TransportUnitHorizontalOrder;
    property ChangesAllowed: UnicodeString read Get_ChangesAllowed write Set_ChangesAllowed;
    property TransportUnitCode: IXMLTransportUnitCode read Get_TransportUnitCode;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property CodeDescription: IXMLS255List read Get_CodeDescription;
    property TransportUnitMeasurements: IXMLTransportUnitMeasurementsList read Get_TransportUnitMeasurements;
    property TransportUnitEquipment: IXMLTransportUnitEquipmentList read Get_TransportUnitEquipment;
    property TransportUnitCount: LongWord read Get_TransportUnitCount write Set_TransportUnitCount;
    property TransportUnitIdentifier: IXMLTransportUnitIdentifierList read Get_TransportUnitIdentifier;
    property TransportUnitText: UnicodeString read Get_TransportUnitText write Set_TransportUnitText;
    property TransportUnitDetail: IXMLTransportUnitDetail read Get_TransportUnitDetail;
    property TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList read Get_TransportUnitReferenceIDInfo;
  end;

{ IXMLTransportUnitCharacteristicsList }

  IXMLTransportUnitCharacteristicsList = interface(IXMLNodeCollection)
    ['{2680AB22-AA2C-4DD5-A107-76F6ED761949}']
    { Methods & Properties }
    function Add: IXMLTransportUnitCharacteristics;
    function Insert(const Index: Integer): IXMLTransportUnitCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportUnitCharacteristics;
    property Items[Index: Integer]: IXMLTransportUnitCharacteristics read Get_Item; default;
  end;

{ IXMLTransportUnitCode }

  IXMLTransportUnitCode = interface(IXMLNode)
    ['{62C3080A-47B8-421E-8949-9396944B67FB}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnitMeasurements }

  IXMLTransportUnitMeasurements = interface(IXMLNode)
    ['{631B6491-D9A4-45CC-B61E-409F67FBC51C}']
    { Property Accessors }
    function Get_AppliesTo: UnicodeString;
    function Get_IsLoaded: UnicodeString;
    function Get_TransportUnitLength: IXMLMeasurement;
    function Get_TransportUnitWidth: IXMLMeasurement;
    function Get_TransportUnitHeight: IXMLMeasurement;
    function Get_TransportUnitWeight: IXMLMeasurement;
    function Get_TransportUnitCapacity: IXMLMeasurementList;
    procedure Set_AppliesTo(Value: UnicodeString);
    procedure Set_IsLoaded(Value: UnicodeString);
    { Methods & Properties }
    property AppliesTo: UnicodeString read Get_AppliesTo write Set_AppliesTo;
    property IsLoaded: UnicodeString read Get_IsLoaded write Set_IsLoaded;
    property TransportUnitLength: IXMLMeasurement read Get_TransportUnitLength;
    property TransportUnitWidth: IXMLMeasurement read Get_TransportUnitWidth;
    property TransportUnitHeight: IXMLMeasurement read Get_TransportUnitHeight;
    property TransportUnitWeight: IXMLMeasurement read Get_TransportUnitWeight;
    property TransportUnitCapacity: IXMLMeasurementList read Get_TransportUnitCapacity;
  end;

{ IXMLTransportUnitMeasurementsList }

  IXMLTransportUnitMeasurementsList = interface(IXMLNodeCollection)
    ['{E6DB6F1B-60F0-47B2-AAC6-DE9F7F1F44D1}']
    { Methods & Properties }
    function Add: IXMLTransportUnitMeasurements;
    function Insert(const Index: Integer): IXMLTransportUnitMeasurements;

    function Get_Item(Index: Integer): IXMLTransportUnitMeasurements;
    property Items[Index: Integer]: IXMLTransportUnitMeasurements read Get_Item; default;
  end;

{ IXMLTransportUnitEquipment }

  IXMLTransportUnitEquipment = interface(IXMLNode)
    ['{BB437393-472B-42CB-BC17-9ACA525E0859}']
    { Property Accessors }
    function Get_TransportUnitEquipmentType: UnicodeString;
    function Get_TransportUnitEquipmentCode: IXMLTransportUnitEquipmentCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_TransportUnitEquipmentDescription: IXMLTransportUnitEquipmentDescriptionList;
    function Get_EquipmentPropertyValue: IXMLEquipmentPropertyValueList;
    procedure Set_TransportUnitEquipmentType(Value: UnicodeString);
    { Methods & Properties }
    property TransportUnitEquipmentType: UnicodeString read Get_TransportUnitEquipmentType write Set_TransportUnitEquipmentType;
    property TransportUnitEquipmentCode: IXMLTransportUnitEquipmentCode read Get_TransportUnitEquipmentCode;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property TransportUnitEquipmentDescription: IXMLTransportUnitEquipmentDescriptionList read Get_TransportUnitEquipmentDescription;
    property EquipmentPropertyValue: IXMLEquipmentPropertyValueList read Get_EquipmentPropertyValue;
  end;

{ IXMLTransportUnitEquipmentList }

  IXMLTransportUnitEquipmentList = interface(IXMLNodeCollection)
    ['{ACA24A0B-996D-4025-9DF7-B50035A954FA}']
    { Methods & Properties }
    function Add: IXMLTransportUnitEquipment;
    function Insert(const Index: Integer): IXMLTransportUnitEquipment;

    function Get_Item(Index: Integer): IXMLTransportUnitEquipment;
    property Items[Index: Integer]: IXMLTransportUnitEquipment read Get_Item; default;
  end;

{ IXMLTransportUnitEquipmentCode }

  IXMLTransportUnitEquipmentCode = interface(IXMLNode)
    ['{3883B873-7626-4CF8-A798-B5AE1EDD4EC7}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnitEquipmentDescription }

  IXMLTransportUnitEquipmentDescription = interface(IXMLNode)
    ['{434D43AA-B7FB-4005-919A-A04D0B89B13A}']
    { Property Accessors }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property Language: UnicodeString read Get_Language write Set_Language;
  end;

{ IXMLTransportUnitEquipmentDescriptionList }

  IXMLTransportUnitEquipmentDescriptionList = interface(IXMLNodeCollection)
    ['{C7017040-D53E-4416-8692-108EC8429972}']
    { Methods & Properties }
    function Add: IXMLTransportUnitEquipmentDescription;
    function Insert(const Index: Integer): IXMLTransportUnitEquipmentDescription;

    function Get_Item(Index: Integer): IXMLTransportUnitEquipmentDescription;
    property Items[Index: Integer]: IXMLTransportUnitEquipmentDescription read Get_Item; default;
  end;

{ IXMLEquipmentPropertyValue }

  IXMLEquipmentPropertyValue = interface(IXMLNode)
    ['{932F2971-34FD-46C8-86BC-FE6C468965DD}']
    { Property Accessors }
    function Get_EquipmentPropertyType: UnicodeString;
    function Get_AppliesTo: UnicodeString;
    function Get_IsAverageValue: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_EquipmentPropertyType(Value: UnicodeString);
    procedure Set_AppliesTo(Value: UnicodeString);
    procedure Set_IsAverageValue(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property EquipmentPropertyType: UnicodeString read Get_EquipmentPropertyType write Set_EquipmentPropertyType;
    property AppliesTo: UnicodeString read Get_AppliesTo write Set_AppliesTo;
    property IsAverageValue: UnicodeString read Get_IsAverageValue write Set_IsAverageValue;
    property PositionOnItem: IXMLPositionOnItem read Get_PositionOnItem;
    property BinaryValue: UnicodeString read Get_BinaryValue write Set_BinaryValue;
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property DateTimeValue: UnicodeString read Get_DateTimeValue write Set_DateTimeValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
  end;

{ IXMLEquipmentPropertyValueList }

  IXMLEquipmentPropertyValueList = interface(IXMLNodeCollection)
    ['{D8ED76A3-6FBA-4E57-9BB1-0F1DF2ECFFBE}']
    { Methods & Properties }
    function Add: IXMLEquipmentPropertyValue;
    function Insert(const Index: Integer): IXMLEquipmentPropertyValue;

    function Get_Item(Index: Integer): IXMLEquipmentPropertyValue;
    property Items[Index: Integer]: IXMLEquipmentPropertyValue read Get_Item; default;
  end;

{ IXMLTransportUnitDetail }

  IXMLTransportUnitDetail = interface(IXMLNode)
    ['{5DA25CD9-4C38-4983-83D3-B028001EF14A}']
    { Property Accessors }
    function Get_TransportUnitDetailType: UnicodeString;
    function Get_LoadOpeningSide: UnicodeString;
    function Get_FrontCouplingType: UnicodeString;
    function Get_RearCouplingType: UnicodeString;
    function Get_TransportUnitDetailCode: IXMLTransportUnitDetailCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_TransportUnitDetailType(Value: UnicodeString);
    procedure Set_LoadOpeningSide(Value: UnicodeString);
    procedure Set_FrontCouplingType(Value: UnicodeString);
    procedure Set_RearCouplingType(Value: UnicodeString);
    { Methods & Properties }
    property TransportUnitDetailType: UnicodeString read Get_TransportUnitDetailType write Set_TransportUnitDetailType;
    property LoadOpeningSide: UnicodeString read Get_LoadOpeningSide write Set_LoadOpeningSide;
    property FrontCouplingType: UnicodeString read Get_FrontCouplingType write Set_FrontCouplingType;
    property RearCouplingType: UnicodeString read Get_RearCouplingType write Set_RearCouplingType;
    property TransportUnitDetailCode: IXMLTransportUnitDetailCode read Get_TransportUnitDetailCode;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property CodeDescription: IXMLS255List read Get_CodeDescription;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLTransportUnitDetailCode }

  IXMLTransportUnitDetailCode = interface(IXMLNode)
    ['{48DDA658-8A90-41B4-994F-735F9B673471}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnitReferenceIDInfo }

  IXMLTransportUnitReferenceIDInfo = interface(IXMLNodeCollection)
    ['{D1312289-14E2-41B0-A2C8-AE00CFB4B67A}']
    { Property Accessors }
    function Get_TransportUnitType: UnicodeString;
    function Get_TransportUnitLevel: LongWord;
    function Get_TransportUnitIdentifier(Index: Integer): IXMLTransportUnitIdentifier;
    procedure Set_TransportUnitType(Value: UnicodeString);
    procedure Set_TransportUnitLevel(Value: LongWord);
    { Methods & Properties }
    function Add: IXMLTransportUnitIdentifier;
    function Insert(const Index: Integer): IXMLTransportUnitIdentifier;
    property TransportUnitType: UnicodeString read Get_TransportUnitType write Set_TransportUnitType;
    property TransportUnitLevel: LongWord read Get_TransportUnitLevel write Set_TransportUnitLevel;
    property TransportUnitIdentifier[Index: Integer]: IXMLTransportUnitIdentifier read Get_TransportUnitIdentifier; default;
  end;

{ IXMLTransportUnitReferenceIDInfoList }

  IXMLTransportUnitReferenceIDInfoList = interface(IXMLNodeCollection)
    ['{08777677-7639-499E-B2E1-09807A12868B}']
    { Methods & Properties }
    function Add: IXMLTransportUnitReferenceIDInfo;
    function Insert(const Index: Integer): IXMLTransportUnitReferenceIDInfo;

    function Get_Item(Index: Integer): IXMLTransportUnitReferenceIDInfo;
    property Items[Index: Integer]: IXMLTransportUnitReferenceIDInfo read Get_Item; default;
  end;

{ IXMLTransportVehicleCharacteristics }

  IXMLTransportVehicleCharacteristics = interface(IXMLNode)
    ['{140ACC9D-3F6F-42A8-8B2A-AE5B7FA3539A}']
    { Property Accessors }
    function Get_TransportVehicleType: UnicodeString;
    function Get_ChangesAllowed: UnicodeString;
    function Get_TransportVehicleCode: IXMLTransportVehicleCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    function Get_TransportVehicleMeasurements: IXMLTransportVehicleMeasurements;
    function Get_TransportVehicleEquipment: IXMLTransportVehicleEquipmentList;
    function Get_TransportVehicleCount: LongWord;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_BrandAndModel: IXMLBrandAndModel;
    function Get_TransportVehicleText: UnicodeString;
    function Get_TransportVehicleEmissionClass: IXMLCodeInfoList;
    function Get_TransportVehicleDetail: IXMLTransportVehicleDetail;
    procedure Set_TransportVehicleType(Value: UnicodeString);
    procedure Set_ChangesAllowed(Value: UnicodeString);
    procedure Set_TransportVehicleCount(Value: LongWord);
    procedure Set_TransportVehicleText(Value: UnicodeString);
    { Methods & Properties }
    property TransportVehicleType: UnicodeString read Get_TransportVehicleType write Set_TransportVehicleType;
    property ChangesAllowed: UnicodeString read Get_ChangesAllowed write Set_ChangesAllowed;
    property TransportVehicleCode: IXMLTransportVehicleCode read Get_TransportVehicleCode;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property CodeDescription: IXMLS255List read Get_CodeDescription;
    property TransportVehicleMeasurements: IXMLTransportVehicleMeasurements read Get_TransportVehicleMeasurements;
    property TransportVehicleEquipment: IXMLTransportVehicleEquipmentList read Get_TransportVehicleEquipment;
    property TransportVehicleCount: LongWord read Get_TransportVehicleCount write Set_TransportVehicleCount;
    property TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList read Get_TransportVehicleIdentifier;
    property BrandAndModel: IXMLBrandAndModel read Get_BrandAndModel;
    property TransportVehicleText: UnicodeString read Get_TransportVehicleText write Set_TransportVehicleText;
    property TransportVehicleEmissionClass: IXMLCodeInfoList read Get_TransportVehicleEmissionClass;
    property TransportVehicleDetail: IXMLTransportVehicleDetail read Get_TransportVehicleDetail;
  end;

{ IXMLTransportVehicleCode }

  IXMLTransportVehicleCode = interface(IXMLNode)
    ['{C6C89F8B-5120-4C13-9385-655564391049}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportVehicleMeasurements }

  IXMLTransportVehicleMeasurements = interface(IXMLNode)
    ['{C9F7A99B-49F5-49DE-A796-8DAEA689B4FF}']
    { Property Accessors }
    function Get_TransportVehicleLength: IXMLMeasurement;
    function Get_TransportVehicleWidth: IXMLMeasurement;
    function Get_TransportVehicleHeight: IXMLMeasurement;
    function Get_TransportVehicleWeight: IXMLMeasurement;
    { Methods & Properties }
    property TransportVehicleLength: IXMLMeasurement read Get_TransportVehicleLength;
    property TransportVehicleWidth: IXMLMeasurement read Get_TransportVehicleWidth;
    property TransportVehicleHeight: IXMLMeasurement read Get_TransportVehicleHeight;
    property TransportVehicleWeight: IXMLMeasurement read Get_TransportVehicleWeight;
  end;

{ IXMLTransportVehicleEquipment }

  IXMLTransportVehicleEquipment = interface(IXMLNode)
    ['{B898A67C-B4E7-45CC-BC18-B36014FDC235}']
    { Property Accessors }
    function Get_TransportVehicleEquipmentCode: IXMLTransportVehicleEquipmentCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_TransportVehicleEquipmentDescription: IXMLTransportVehicleEquipmentDescriptionList;
    { Methods & Properties }
    property TransportVehicleEquipmentCode: IXMLTransportVehicleEquipmentCode read Get_TransportVehicleEquipmentCode;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property TransportVehicleEquipmentDescription: IXMLTransportVehicleEquipmentDescriptionList read Get_TransportVehicleEquipmentDescription;
  end;

{ IXMLTransportVehicleEquipmentList }

  IXMLTransportVehicleEquipmentList = interface(IXMLNodeCollection)
    ['{683D0A24-FE8D-4D1E-9937-0066B7B06ED6}']
    { Methods & Properties }
    function Add: IXMLTransportVehicleEquipment;
    function Insert(const Index: Integer): IXMLTransportVehicleEquipment;

    function Get_Item(Index: Integer): IXMLTransportVehicleEquipment;
    property Items[Index: Integer]: IXMLTransportVehicleEquipment read Get_Item; default;
  end;

{ IXMLTransportVehicleEquipmentCode }

  IXMLTransportVehicleEquipmentCode = interface(IXMLNode)
    ['{0D3431F1-7AFE-47A6-9E2B-7CF87DD8A760}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportVehicleEquipmentDescription }

  IXMLTransportVehicleEquipmentDescription = interface(IXMLNode)
    ['{00545793-9997-4A81-8C8A-5D5243D0702C}']
    { Property Accessors }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property Language: UnicodeString read Get_Language write Set_Language;
  end;

{ IXMLTransportVehicleEquipmentDescriptionList }

  IXMLTransportVehicleEquipmentDescriptionList = interface(IXMLNodeCollection)
    ['{615D552C-EA1E-449A-83AA-385F4C48FB17}']
    { Methods & Properties }
    function Add: IXMLTransportVehicleEquipmentDescription;
    function Insert(const Index: Integer): IXMLTransportVehicleEquipmentDescription;

    function Get_Item(Index: Integer): IXMLTransportVehicleEquipmentDescription;
    property Items[Index: Integer]: IXMLTransportVehicleEquipmentDescription read Get_Item; default;
  end;

{ IXMLBrandAndModel }

  IXMLBrandAndModel = interface(IXMLNode)
    ['{79612529-F389-4DBE-9F1B-BC542EC14904}']
    { Property Accessors }
    function Get_Brand: UnicodeString;
    function Get_Model: IXMLModel;
    procedure Set_Brand(Value: UnicodeString);
    { Methods & Properties }
    property Brand: UnicodeString read Get_Brand write Set_Brand;
    property Model: IXMLModel read Get_Model;
  end;

{ IXMLModel }

  IXMLModel = interface(IXMLNode)
    ['{7F4D8000-3FE9-47C5-A1B0-93A9EBEF292D}']
    { Property Accessors }
    function Get_ModelYear: UnicodeString;
    procedure Set_ModelYear(Value: UnicodeString);
    { Methods & Properties }
    property ModelYear: UnicodeString read Get_ModelYear write Set_ModelYear;
  end;

{ IXMLTransportVehicleDetail }

  IXMLTransportVehicleDetail = interface(IXMLNode)
    ['{2CCC4909-F46A-404D-AD3A-01B999405303}']
    { Property Accessors }
    function Get_RearCouplingType: UnicodeString;
    procedure Set_RearCouplingType(Value: UnicodeString);
    { Methods & Properties }
    property RearCouplingType: UnicodeString read Get_RearCouplingType write Set_RearCouplingType;
  end;

{ IXMLChargeReference }

  IXMLChargeReference = interface(IXMLNode)
    ['{1F2A0D03-9DD3-4727-B2CB-EC61AFE1E018}']
    { Property Accessors }
    function Get_ChargeReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ChargeReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property ChargeReferenceType: UnicodeString read Get_ChargeReferenceType write Set_ChargeReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLChargeReferenceList }

  IXMLChargeReferenceList = interface(IXMLNodeCollection)
    ['{87C8317A-2F72-406E-B3CC-A6EDA2267C91}']
    { Methods & Properties }
    function Add: IXMLChargeReference;
    function Insert(const Index: Integer): IXMLChargeReference;

    function Get_Item(Index: Integer): IXMLChargeReference;
    property Items[Index: Integer]: IXMLChargeReference read Get_Item; default;
  end;

{ IXMLChargeAmount }

  IXMLChargeAmount = interface(IXMLNode)
    ['{3CD07DB6-7F41-42BB-94E3-98EC94C672D0}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLChargeNetAmount }

  IXMLChargeNetAmount = interface(IXMLNode)
    ['{A5833AEE-8C5C-44DF-9883-CA2881592AA7}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLInvoiceLineAmount }

  IXMLInvoiceLineAmount = interface(IXMLNode)
    ['{4615ECBA-E47A-4889-8001-E161FE2E1B83}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLInvoiceDeliveryInformation }

  IXMLInvoiceDeliveryInformation = interface(IXMLNode)
    ['{EB2EC78E-F37C-4B37-8719-26E8B96414F4}']
    { Property Accessors }
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryDate: IXMLDeliveryDate;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ChargeInformation: IXMLChargeInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryMessageNumber: UnicodeString read Get_DeliveryMessageNumber write Set_DeliveryMessageNumber;
    property DeliveryMessageLineItemNumber: LongWord read Get_DeliveryMessageLineItemNumber write Set_DeliveryMessageLineItemNumber;
    property DeliveryMessageDate: IXMLDeliveryMessageDate read Get_DeliveryMessageDate;
    property DeliveryDate: IXMLDeliveryDate read Get_DeliveryDate;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property ChargeInformation: IXMLChargeInformationList read Get_ChargeInformation;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList read Get_TransportVehicleIdentifier;
    property TransportUnitIdentifier: IXMLTransportUnitIdentifierList read Get_TransportUnitIdentifier;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property DeliveryMessageReference: IXMLDeliveryMessageReferenceList read Get_DeliveryMessageReference;
  end;

{ IXMLInvoiceDeliveryInformationList }

  IXMLInvoiceDeliveryInformationList = interface(IXMLNodeCollection)
    ['{D5ADDCAB-160E-41D0-8DC5-B5B5C9C7EB9C}']
    { Methods & Properties }
    function Add: IXMLInvoiceDeliveryInformation;
    function Insert(const Index: Integer): IXMLInvoiceDeliveryInformation;

    function Get_Item(Index: Integer): IXMLInvoiceDeliveryInformation;
    property Items[Index: Integer]: IXMLInvoiceDeliveryInformation read Get_Item; default;
  end;

{ IXMLDeliveryMessageDate }

  IXMLDeliveryMessageDate = interface(IXMLNode)
    ['{793B2E9C-1588-44F5-95B2-DE400398C737}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryDate }

  IXMLDeliveryDate = interface(IXMLNode)
    ['{53CB9EB9-353D-4C50-B5DB-9265B1B4A19A}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryMessageReference }

  IXMLDeliveryMessageReference = interface(IXMLNode)
    ['{F36C267B-3A2B-47F2-999E-1FED7AB87E27}']
    { Property Accessors }
    function Get_DeliveryMessageReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DeliveryMessageReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property DeliveryMessageReferenceType: UnicodeString read Get_DeliveryMessageReferenceType write Set_DeliveryMessageReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDeliveryMessageReferenceList }

  IXMLDeliveryMessageReferenceList = interface(IXMLNodeCollection)
    ['{131BB2B0-40B6-4702-86DD-FA4D8AD896E5}']
    { Methods & Properties }
    function Add: IXMLDeliveryMessageReference;
    function Insert(const Index: Integer): IXMLDeliveryMessageReference;

    function Get_Item(Index: Integer): IXMLDeliveryMessageReference;
    property Items[Index: Integer]: IXMLDeliveryMessageReference read Get_Item; default;
  end;

{ IXMLMillCharacteristics }

  IXMLMillCharacteristics = interface(IXMLNode)
    ['{7514D131-2017-42C9-90EA-675403ACF90E}']
    { Property Accessors }
    function Get_MillParty: IXMLParty;
    function Get_MachineID: UnicodeString;
    procedure Set_MachineID(Value: UnicodeString);
    { Methods & Properties }
    property MillParty: IXMLParty read Get_MillParty;
    property MachineID: UnicodeString read Get_MachineID write Set_MachineID;
  end;

{ IXMLTransportModeCharacteristics }

  IXMLTransportModeCharacteristics = interface(IXMLNode)
    ['{7A8703C8-4235-4F0B-8364-57DB8D5BB6C8}']
    { Property Accessors }
    function Get_TransportModeType: UnicodeString;
    function Get_TransportModeCode: IXMLTransportModeCode;
    function Get_TransportModeText: UnicodeString;
    procedure Set_TransportModeType(Value: UnicodeString);
    procedure Set_TransportModeText(Value: UnicodeString);
    { Methods & Properties }
    property TransportModeType: UnicodeString read Get_TransportModeType write Set_TransportModeType;
    property TransportModeCode: IXMLTransportModeCode read Get_TransportModeCode;
    property TransportModeText: UnicodeString read Get_TransportModeText write Set_TransportModeText;
  end;

{ IXMLTransportModeCharacteristicsList }

  IXMLTransportModeCharacteristicsList = interface(IXMLNodeCollection)
    ['{475E98DB-4F85-4CAE-82B1-1D9557C39345}']
    { Methods & Properties }
    function Add: IXMLTransportModeCharacteristics;
    function Insert(const Index: Integer): IXMLTransportModeCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportModeCharacteristics;
    property Items[Index: Integer]: IXMLTransportModeCharacteristics read Get_Item; default;
  end;

{ IXMLTransportModeCode }

  IXMLTransportModeCode = interface(IXMLNode)
    ['{BA98E1D5-B74D-49A3-80B0-204440D37D36}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLDeliveryDateWindow }

  IXMLDeliveryDateWindow = interface(IXMLNode)
    ['{BB49B65B-E369-4133-8A63-1DF401EE9B7A}']
    { Property Accessors }
    function Get_DeliveryDateType: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    function Get_Year: UnicodeString;
    function Get_YearMonth: UnicodeString;
    function Get_Month: LongWord;
    function Get_Week: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_DeliveryDateType(Value: UnicodeString);
    procedure Set_Year(Value: UnicodeString);
    procedure Set_YearMonth(Value: UnicodeString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Week(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property DeliveryDateType: UnicodeString read Get_DeliveryDateType write Set_DeliveryDateType;
    property DateTimeRange: IXMLDateTimeRange read Get_DateTimeRange;
    property Year: UnicodeString read Get_Year write Set_Year;
    property YearMonth: UnicodeString read Get_YearMonth write Set_YearMonth;
    property Month: LongWord read Get_Month write Set_Month;
    property Week: UnicodeString read Get_Week write Set_Week;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryDateWindowList }

  IXMLDeliveryDateWindowList = interface(IXMLNodeCollection)
    ['{A925AEE8-B24B-442F-86E3-6D7689C365EF}']
    { Methods & Properties }
    function Add: IXMLDeliveryDateWindow;
    function Insert(const Index: Integer): IXMLDeliveryDateWindow;

    function Get_Item(Index: Integer): IXMLDeliveryDateWindow;
    property Items[Index: Integer]: IXMLDeliveryDateWindow read Get_Item; default;
  end;

{ IXMLTaxStatement }

  IXMLTaxStatement = interface(IXMLNode)
    ['{35D351CF-9429-4552-9FF8-97DD0538154C}']
    { Property Accessors }
    function Get_TaxStatementCode: IXMLTaxStatementCode;
    function Get_TaxStatementDescription: UnicodeString;
    procedure Set_TaxStatementDescription(Value: UnicodeString);
    { Methods & Properties }
    property TaxStatementCode: IXMLTaxStatementCode read Get_TaxStatementCode;
    property TaxStatementDescription: UnicodeString read Get_TaxStatementDescription write Set_TaxStatementDescription;
  end;

{ IXMLTaxStatementCode }

  IXMLTaxStatementCode = interface(IXMLNode)
    ['{95ED5EC1-1BFE-48A2-B76E-848882682117}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLStatisticalGoodsInformation }

  IXMLStatisticalGoodsInformation = interface(IXMLNode)
    ['{F0266E87-BA38-4D08-AB25-3FE700F84493}']
    { Property Accessors }
    function Get_CommodityGoodsCode: IXMLCommodityGoodsCode;
    function Get_PriceDetails: IXMLPriceDetails;
    { Methods & Properties }
    property CommodityGoodsCode: IXMLCommodityGoodsCode read Get_CommodityGoodsCode;
    property PriceDetails: IXMLPriceDetails read Get_PriceDetails;
  end;

{ IXMLCommodityGoodsCode }

  IXMLCommodityGoodsCode = interface(IXMLNode)
    ['{865BAAEE-A164-429E-90EA-6FAE31092A25}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLProductGroupSummary }

  IXMLProductGroupSummary = interface(IXMLNode)
    ['{FFD3ECCD-A837-4BF4-AE42-13F070C58469}']
    { Property Accessors }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    { Methods & Properties }
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
  end;

{ IXMLTotalQuantity }

  IXMLTotalQuantity = interface(IXMLMeasurement)
    ['{E9521EB0-9EC3-4788-AD7C-3B85B1416476}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
  end;

{ IXMLTotalQuantityList }

  IXMLTotalQuantityList = interface(IXMLNodeCollection)
    ['{48860163-FF2F-4C85-B9A4-C49A9266D05E}']
    { Methods & Properties }
    function Add: IXMLTotalQuantity;
    function Insert(const Index: Integer): IXMLTotalQuantity;

    function Get_Item(Index: Integer): IXMLTotalQuantity;
    property Items[Index: Integer]: IXMLTotalQuantity read Get_Item; default;
  end;

{ IXMLTotalInformationalQuantity }

  IXMLTotalInformationalQuantity = interface(IXMLMeasurement)
    ['{3BD42F14-B29E-4AA9-AF08-F673086A7E4A}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
  end;

{ IXMLTotalInformationalQuantityList }

  IXMLTotalInformationalQuantityList = interface(IXMLNodeCollection)
    ['{49025668-0C47-4E05-A1F9-33397F0E9C14}']
    { Methods & Properties }
    function Add: IXMLTotalInformationalQuantity;
    function Insert(const Index: Integer): IXMLTotalInformationalQuantity;

    function Get_Item(Index: Integer): IXMLTotalInformationalQuantity;
    property Items[Index: Integer]: IXMLTotalInformationalQuantity read Get_Item; default;
  end;

{ IXMLProductSummary }

  IXMLProductSummary = interface(IXMLNode)
    ['{B17AB14E-80AF-46D9-896D-5CD6654203D1}']
    { Property Accessors }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    { Methods & Properties }
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
  end;

{ IXMLLengthSpecification }

  IXMLLengthSpecification = interface(IXMLNode)
    ['{516007E6-F1E4-414F-85FE-4CD01A777E33}']
    { Property Accessors }
    function Get_LengthCategory: IXMLLengthCategory;
    function Get_TotalNumberOfUnits: IXMLMeasurement;
    { Methods & Properties }
    property LengthCategory: IXMLLengthCategory read Get_LengthCategory;
    property TotalNumberOfUnits: IXMLMeasurement read Get_TotalNumberOfUnits;
  end;

{ IXMLLengthSpecificationList }

  IXMLLengthSpecificationList = interface(IXMLNodeCollection)
    ['{70261D28-A4DE-48A3-8E34-A89A3510F061}']
    { Methods & Properties }
    function Add: IXMLLengthSpecification;
    function Insert(const Index: Integer): IXMLLengthSpecification;

    function Get_Item(Index: Integer): IXMLLengthSpecification;
    property Items[Index: Integer]: IXMLLengthSpecification read Get_Item; default;
  end;

{ IXMLLengthCategory }

  IXMLLengthCategory = interface(IXMLNode)
    ['{E3127439-69D2-4A3D-9EBF-0CF8BF9A2FB9}']
    { Property Accessors }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLShipmentSummary }

  IXMLShipmentSummary = interface(IXMLNode)
    ['{DBC953BF-31B4-4F02-9416-6A9CC254B4DE}']
    { Property Accessors }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    { Methods & Properties }
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
  end;

{ IXMLInvoiceWoodSummary }

  IXMLInvoiceWoodSummary = interface(IXMLNode)
    ['{89D55452-F5B3-4A7A-B7E5-FD4C8580E8C1}']
    { Property Accessors }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_LineItemSubTotal: IXMLLineItemSubTotal;
    function Get_TotalAdjustments: IXMLTotalAdjustments;
    function Get_TotalTaxAmount: IXMLTotalTaxAmount;
    function Get_TotalFASAmount: IXMLTotalFASAmount;
    function Get_TotalNetAmount: IXMLTotalNetAmount;
    function Get_TotalAmount: IXMLTotalAmount;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    function Get_TermsOfPayment: IXMLTermsOfPaymentList;
    function Get_TotalNetOfTermsDiscount: IXMLTotalNetOfTermsDiscountList;
    function Get_CustomsTotals: IXMLCustomsTotalsList;
    function Get_CustomsStampInformation: IXMLCustomsStampInformationList;
    function Get_AdditionalText: IXMLS255List;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    function Get_TaxStatement: IXMLTaxStatement;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
    { Methods & Properties }
    property TotalNumberOfLineItems: LongWord read Get_TotalNumberOfLineItems write Set_TotalNumberOfLineItems;
    property TotalQuantity: IXMLTotalQuantityList read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property LineItemSubTotal: IXMLLineItemSubTotal read Get_LineItemSubTotal;
    property TotalAdjustments: IXMLTotalAdjustments read Get_TotalAdjustments;
    property TotalTaxAmount: IXMLTotalTaxAmount read Get_TotalTaxAmount;
    property TotalFASAmount: IXMLTotalFASAmount read Get_TotalFASAmount;
    property TotalNetAmount: IXMLTotalNetAmount read Get_TotalNetAmount;
    property TotalAmount: IXMLTotalAmount read Get_TotalAmount;
    property InformationalAmount: IXMLInformationalAmountList read Get_InformationalAmount;
    property TermsOfPayment: IXMLTermsOfPaymentList read Get_TermsOfPayment;
    property TotalNetOfTermsDiscount: IXMLTotalNetOfTermsDiscountList read Get_TotalNetOfTermsDiscount;
    property CustomsTotals: IXMLCustomsTotalsList read Get_CustomsTotals;
    property CustomsStampInformation: IXMLCustomsStampInformationList read Get_CustomsStampInformation;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property TermsAndDisclaimers: IXMLTermsAndDisclaimersList read Get_TermsAndDisclaimers;
    property TaxStatement: IXMLTaxStatement read Get_TaxStatement;
  end;

{ IXMLLineItemSubTotal }

  IXMLLineItemSubTotal = interface(IXMLNode)
    ['{6233A49B-2CD5-4AEC-B8EE-2CE1348D2059}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalAdjustments }

  IXMLTotalAdjustments = interface(IXMLNode)
    ['{D7B72276-4717-47D6-A85E-68A2DBF8AD3B}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTaxAmount }

  IXMLTotalTaxAmount = interface(IXMLNode)
    ['{1277CB9E-C87F-40A8-A634-322002EA28ED}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalFASAmount }

  IXMLTotalFASAmount = interface(IXMLNode)
    ['{5094C2A4-442C-4A91-9B7E-74225A1027D1}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalNetAmount }

  IXMLTotalNetAmount = interface(IXMLNode)
    ['{F0B5742D-A0ED-49EA-A61B-7CFBC2D2CA5B}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalAmount }

  IXMLTotalAmount = interface(IXMLNode)
    ['{87205600-9931-4E83-8556-2248BBFE5977}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTermsOfPayment }

  IXMLTermsOfPayment = interface(IXMLNode)
    ['{435FE9DB-51D7-41BE-832E-4C198E541BB6}']
    { Property Accessors }
    function Get_TermsBasisDateType: UnicodeString;
    function Get_TermsOfPaymentCode: IXMLTermsOfPaymentCode;
    function Get_TermsDescription: UnicodeString;
    function Get_TermsBasisDate: IXMLTermsBasisDate;
    function Get_TermsDiscountPercent: IXMLMeasurement;
    function Get_TermsDiscountDueDate: IXMLTermsDiscountDueDate;
    function Get_TermsDiscountDaysDue: LongWord;
    function Get_TermsNetDueDate: IXMLTermsNetDueDate;
    function Get_TermsNetDaysDue: LongWord;
    function Get_TermsInterestPenaltyPercent: Double;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_MethodOfPayment: UnicodeString;
    procedure Set_TermsBasisDateType(Value: UnicodeString);
    procedure Set_TermsDescription(Value: UnicodeString);
    procedure Set_TermsDiscountDaysDue(Value: LongWord);
    procedure Set_TermsNetDaysDue(Value: LongWord);
    procedure Set_TermsInterestPenaltyPercent(Value: Double);
    procedure Set_MethodOfPayment(Value: UnicodeString);
    { Methods & Properties }
    property TermsBasisDateType: UnicodeString read Get_TermsBasisDateType write Set_TermsBasisDateType;
    property TermsOfPaymentCode: IXMLTermsOfPaymentCode read Get_TermsOfPaymentCode;
    property TermsDescription: UnicodeString read Get_TermsDescription write Set_TermsDescription;
    property TermsBasisDate: IXMLTermsBasisDate read Get_TermsBasisDate;
    property TermsDiscountPercent: IXMLMeasurement read Get_TermsDiscountPercent;
    property TermsDiscountDueDate: IXMLTermsDiscountDueDate read Get_TermsDiscountDueDate;
    property TermsDiscountDaysDue: LongWord read Get_TermsDiscountDaysDue write Set_TermsDiscountDaysDue;
    property TermsNetDueDate: IXMLTermsNetDueDate read Get_TermsNetDueDate;
    property TermsNetDaysDue: LongWord read Get_TermsNetDaysDue write Set_TermsNetDaysDue;
    property TermsInterestPenaltyPercent: Double read Get_TermsInterestPenaltyPercent write Set_TermsInterestPenaltyPercent;
    property ExchangeRate: IXMLExchangeRate read Get_ExchangeRate;
    property MethodOfPayment: UnicodeString read Get_MethodOfPayment write Set_MethodOfPayment;
  end;

{ IXMLTermsOfPaymentList }

  IXMLTermsOfPaymentList = interface(IXMLNodeCollection)
    ['{2EFDAF85-9DF4-4AD3-B4AA-4E6995AF0728}']
    { Methods & Properties }
    function Add: IXMLTermsOfPayment;
    function Insert(const Index: Integer): IXMLTermsOfPayment;

    function Get_Item(Index: Integer): IXMLTermsOfPayment;
    property Items[Index: Integer]: IXMLTermsOfPayment read Get_Item; default;
  end;

{ IXMLTermsOfPaymentCode }

  IXMLTermsOfPaymentCode = interface(IXMLNode)
    ['{A9F907E8-ABC4-4F0C-A66B-FB0D78C9DFDA}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTermsBasisDate }

  IXMLTermsBasisDate = interface(IXMLNode)
    ['{38202AF0-C61B-4DE0-92B5-0821644C370E}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLTermsDiscountDueDate }

  IXMLTermsDiscountDueDate = interface(IXMLNode)
    ['{FA2B79CF-31F6-46A5-8BEF-F5572FA21CF1}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLTermsNetDueDate }

  IXMLTermsNetDueDate = interface(IXMLNode)
    ['{B6F74101-B0E5-4719-A9FC-821DA6D7D04A}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLTotalNetOfTermsDiscount }

  IXMLTotalNetOfTermsDiscount = interface(IXMLNode)
    ['{83B8AC56-C32C-406D-9F8A-26466AC0A649}']
    { Property Accessors }
    function Get_AmountSubjectToTermsDiscount: IXMLAmountSubjectToTermsDiscount;
    function Get_TotalTermsDiscountNetAmount: IXMLTotalTermsDiscountNetAmount;
    function Get_TotalTermsDiscountNetAmountTax: IXMLTotalTermsDiscountNetAmountTax;
    function Get_TotalTermsDiscountAmount: IXMLTotalTermsDiscountAmount;
    function Get_TotalTermsDiscountNetAmountDue: IXMLTotalTermsDiscountNetAmountDue;
    function Get_TotalTermsDiscountTaxAmount: IXMLTotalTermsDiscountTaxAmount;
    function Get_TotalTermsDiscountAmountDue: IXMLTotalTermsDiscountAmountDue;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    { Methods & Properties }
    property AmountSubjectToTermsDiscount: IXMLAmountSubjectToTermsDiscount read Get_AmountSubjectToTermsDiscount;
    property TotalTermsDiscountNetAmount: IXMLTotalTermsDiscountNetAmount read Get_TotalTermsDiscountNetAmount;
    property TotalTermsDiscountNetAmountTax: IXMLTotalTermsDiscountNetAmountTax read Get_TotalTermsDiscountNetAmountTax;
    property TotalTermsDiscountAmount: IXMLTotalTermsDiscountAmount read Get_TotalTermsDiscountAmount;
    property TotalTermsDiscountNetAmountDue: IXMLTotalTermsDiscountNetAmountDue read Get_TotalTermsDiscountNetAmountDue;
    property TotalTermsDiscountTaxAmount: IXMLTotalTermsDiscountTaxAmount read Get_TotalTermsDiscountTaxAmount;
    property TotalTermsDiscountAmountDue: IXMLTotalTermsDiscountAmountDue read Get_TotalTermsDiscountAmountDue;
    property InformationalAmount: IXMLInformationalAmountList read Get_InformationalAmount;
  end;

{ IXMLTotalNetOfTermsDiscountList }

  IXMLTotalNetOfTermsDiscountList = interface(IXMLNodeCollection)
    ['{B873925D-AC3A-48D3-8121-22046FC3948F}']
    { Methods & Properties }
    function Add: IXMLTotalNetOfTermsDiscount;
    function Insert(const Index: Integer): IXMLTotalNetOfTermsDiscount;

    function Get_Item(Index: Integer): IXMLTotalNetOfTermsDiscount;
    property Items[Index: Integer]: IXMLTotalNetOfTermsDiscount read Get_Item; default;
  end;

{ IXMLAmountSubjectToTermsDiscount }

  IXMLAmountSubjectToTermsDiscount = interface(IXMLNode)
    ['{65BE99CE-27C9-4575-AE67-29DDFE08550B}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTermsDiscountNetAmount }

  IXMLTotalTermsDiscountNetAmount = interface(IXMLNode)
    ['{28194987-399C-4E94-B51C-20E16AF60F6D}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTermsDiscountNetAmountTax }

  IXMLTotalTermsDiscountNetAmountTax = interface(IXMLNode)
    ['{F56787B1-9E65-4D53-A72F-CE5B43A26A29}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTermsDiscountAmount }

  IXMLTotalTermsDiscountAmount = interface(IXMLNode)
    ['{42E6548C-BC8D-4EE2-8ECF-08BF6608ADBE}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTermsDiscountNetAmountDue }

  IXMLTotalTermsDiscountNetAmountDue = interface(IXMLNode)
    ['{4054F97D-B465-4F37-B5E8-23E9E29BBCA7}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTermsDiscountTaxAmount }

  IXMLTotalTermsDiscountTaxAmount = interface(IXMLNode)
    ['{08F2113F-5918-4E7B-AA72-35E49454923A}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTotalTermsDiscountAmountDue }

  IXMLTotalTermsDiscountAmountDue = interface(IXMLNode)
    ['{136BC64E-5AE5-49F8-805C-43B650C687E6}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLCustomsTotals }

  IXMLCustomsTotals = interface(IXMLNode)
    ['{B1CF4D3A-E1B2-4758-9DCB-BC611FF58EBD}']
    { Property Accessors }
    function Get_CustomsTariffCode: UnicodeString;
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_CustomsTariffCode(Value: UnicodeString);
    { Methods & Properties }
    property CustomsTariffCode: UnicodeString read Get_CustomsTariffCode write Set_CustomsTariffCode;
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLCustomsTotalsList }

  IXMLCustomsTotalsList = interface(IXMLNodeCollection)
    ['{89F302F5-4F81-4303-8BAA-B9A3FD1DEB07}']
    { Methods & Properties }
    function Add: IXMLCustomsTotals;
    function Insert(const Index: Integer): IXMLCustomsTotals;

    function Get_Item(Index: Integer): IXMLCustomsTotals;
    property Items[Index: Integer]: IXMLCustomsTotals read Get_Item; default;
  end;

{ IXMLCustomsStampInformation }

  IXMLCustomsStampInformation = interface(IXMLNode)
    ['{35F5472E-9CF6-454D-8628-209038FA4EDB}']
    { Property Accessors }
    function Get_CustomsStampHeaderText: IXMLS255List;
    function Get_CustomsParty: IXMLParty;
    function Get_CustomsStampDate: IXMLCustomsStampDate;
    function Get_CustomsReferenceNumber: IXMLCustomsReferenceNumber;
    function Get_SupplierCustomsReference: IXMLSupplierCustomsReference;
    function Get_MillParty: IXMLParty;
    function Get_CustomsStampTrailerText: IXMLS255List;
    { Methods & Properties }
    property CustomsStampHeaderText: IXMLS255List read Get_CustomsStampHeaderText;
    property CustomsParty: IXMLParty read Get_CustomsParty;
    property CustomsStampDate: IXMLCustomsStampDate read Get_CustomsStampDate;
    property CustomsReferenceNumber: IXMLCustomsReferenceNumber read Get_CustomsReferenceNumber;
    property SupplierCustomsReference: IXMLSupplierCustomsReference read Get_SupplierCustomsReference;
    property MillParty: IXMLParty read Get_MillParty;
    property CustomsStampTrailerText: IXMLS255List read Get_CustomsStampTrailerText;
  end;

{ IXMLCustomsStampInformationList }

  IXMLCustomsStampInformationList = interface(IXMLNodeCollection)
    ['{1A6D600A-28A6-4998-8566-F2AD39D5475A}']
    { Methods & Properties }
    function Add: IXMLCustomsStampInformation;
    function Insert(const Index: Integer): IXMLCustomsStampInformation;

    function Get_Item(Index: Integer): IXMLCustomsStampInformation;
    property Items[Index: Integer]: IXMLCustomsStampInformation read Get_Item; default;
  end;

{ IXMLCustomsStampDate }

  IXMLCustomsStampDate = interface(IXMLNode)
    ['{103E1413-7360-4346-98B9-C892C651B112}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLCustomsReferenceNumber }

  IXMLCustomsReferenceNumber = interface(IXMLNode)
    ['{9CD55084-0A8A-4780-AE63-B19739D8736A}']
    { Property Accessors }
    function Get_CustomsReferenceNumberType: UnicodeString;
    procedure Set_CustomsReferenceNumberType(Value: UnicodeString);
    { Methods & Properties }
    property CustomsReferenceNumberType: UnicodeString read Get_CustomsReferenceNumberType write Set_CustomsReferenceNumberType;
  end;

{ IXMLSupplierCustomsReference }

  IXMLSupplierCustomsReference = interface(IXMLNode)
    ['{6800E18E-4A05-4F50-8893-9162D7B8695F}']
    { Property Accessors }
    function Get_SupplierCustomsReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_SupplierCustomsReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property SupplierCustomsReferenceType: UnicodeString read Get_SupplierCustomsReferenceType write Set_SupplierCustomsReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLTermsAndDisclaimers }

  IXMLTermsAndDisclaimers = interface(IXMLNode)
    ['{8E209380-24D5-46FD-98ED-63E48D04AE90}']
    { Property Accessors }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
    { Methods & Properties }
    property Language: UnicodeString read Get_Language write Set_Language;
  end;

{ IXMLTermsAndDisclaimersList }

  IXMLTermsAndDisclaimersList = interface(IXMLNodeCollection)
    ['{69452052-9785-460F-BB6F-0C8470D14024}']
    { Methods & Properties }
    function Add: IXMLTermsAndDisclaimers;
    function Insert(const Index: Integer): IXMLTermsAndDisclaimers;

    function Get_Item(Index: Integer): IXMLTermsAndDisclaimers;
    property Items[Index: Integer]: IXMLTermsAndDisclaimers read Get_Item; default;
  end;

{ IXMLBusinessParty }

  IXMLBusinessParty = interface(IXMLNode)
    ['{7DCDA7F6-5BA1-4CF0-AB10-13A7BF4C298F}']
    { Property Accessors }
    function Get_PartyType: UnicodeString;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_NameAddress: IXMLNameAddress;
    function Get_URL: IXMLURL;
    function Get_CommonContact: IXMLCommonContactList;
    procedure Set_PartyType(Value: UnicodeString);
    { Methods & Properties }
    property PartyType: UnicodeString read Get_PartyType write Set_PartyType;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property NameAddress: IXMLNameAddress read Get_NameAddress;
    property URL: IXMLURL read Get_URL;
    property CommonContact: IXMLCommonContactList read Get_CommonContact;
  end;

{ IXMLCurrencyPerUnit }

  IXMLCurrencyPerUnit = interface(IXMLNode)
    ['{42AFDA32-5B8C-49E4-B09F-3972E084D368}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLDeliveryInformationType }

  IXMLDeliveryInformationType = interface(IXMLNode)
    ['{2743ADCE-795F-45FF-AE2C-7C8D6B366975}']
    { Property Accessors }
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryDate: IXMLDeliveryDate;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ChargeInformation: IXMLChargeInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryMessageNumber: UnicodeString read Get_DeliveryMessageNumber write Set_DeliveryMessageNumber;
    property DeliveryMessageLineItemNumber: LongWord read Get_DeliveryMessageLineItemNumber write Set_DeliveryMessageLineItemNumber;
    property DeliveryMessageDate: IXMLDeliveryMessageDate read Get_DeliveryMessageDate;
    property DeliveryDate: IXMLDeliveryDate read Get_DeliveryDate;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property ChargeInformation: IXMLChargeInformationList read Get_ChargeInformation;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList read Get_TransportVehicleIdentifier;
    property TransportUnitIdentifier: IXMLTransportUnitIdentifierList read Get_TransportUnitIdentifier;
    property DeliveryMessageReference: IXMLDeliveryMessageReferenceList read Get_DeliveryMessageReference;
  end;

{ IXMLDeliveryMessageHeader }

  IXMLDeliveryMessageHeader = interface(IXMLNode)
    ['{215BA40A-FAC7-4AF2-A321-3B379CE8EB66}']
    { Property Accessors }
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryMessageReason: IXMLDeliveryMessageReasonList;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DocumentInformation: IXMLDocumentInformationList;
    function Get_CoLoading: IXMLCoLoadingList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DeliveryLeg: IXMLDeliveryLegList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_AdditionalItemInfo: IXMLCodeInfoList;
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryMessageNumber: UnicodeString read Get_DeliveryMessageNumber write Set_DeliveryMessageNumber;
    property TransactionHistoryNumber: LongWord read Get_TransactionHistoryNumber write Set_TransactionHistoryNumber;
    property DeliveryMessageDate: IXMLDeliveryMessageDate read Get_DeliveryMessageDate;
    property DeliveryMessageReason: IXMLDeliveryMessageReasonList read Get_DeliveryMessageReason;
    property DeliveryMessageReference: IXMLDeliveryMessageReferenceList read Get_DeliveryMessageReference;
    property BuyerParty: IXMLParty read Get_BuyerParty;
    property BillToParty: IXMLParty read Get_BillToParty;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property SenderParty: IXMLTypedParty read Get_SenderParty;
    property ReceiverParty: IXMLTypedPartyList read Get_ReceiverParty;
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property DocumentInformation: IXMLDocumentInformationList read Get_DocumentInformation;
    property CoLoading: IXMLCoLoadingList read Get_CoLoading;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property DeliveryLeg: IXMLDeliveryLegList read Get_DeliveryLeg;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property AdditionalItemInfo: IXMLCodeInfoList read Get_AdditionalItemInfo;
  end;

{ IXMLDeliveryMessageReason }

  IXMLDeliveryMessageReason = interface(IXMLNode)
    ['{F238464F-9E26-4658-A5AD-89C178CC991F}']
    { Property Accessors }
    function Get_DeliveryMessageReasonCode: IXMLDeliveryMessageReasonCode;
    function Get_DeliveryMessageReasonDescription: IXMLS255List;
    { Methods & Properties }
    property DeliveryMessageReasonCode: IXMLDeliveryMessageReasonCode read Get_DeliveryMessageReasonCode;
    property DeliveryMessageReasonDescription: IXMLS255List read Get_DeliveryMessageReasonDescription;
  end;

{ IXMLDeliveryMessageReasonList }

  IXMLDeliveryMessageReasonList = interface(IXMLNodeCollection)
    ['{2169B4C4-7402-4EBB-BE02-71EE6C757A21}']
    { Methods & Properties }
    function Add: IXMLDeliveryMessageReason;
    function Insert(const Index: Integer): IXMLDeliveryMessageReason;

    function Get_Item(Index: Integer): IXMLDeliveryMessageReason;
    property Items[Index: Integer]: IXMLDeliveryMessageReason read Get_Item; default;
  end;

{ IXMLDeliveryMessageReasonCode }

  IXMLDeliveryMessageReasonCode = interface(IXMLNode)
    ['{12458515-2801-40F4-988B-612B016331EA}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLCoLoading }

  IXMLCoLoading = interface(IXMLNode)
    ['{7D5C12AA-46D8-42BB-A941-AA773B4767CD}']
    { Property Accessors }
    function Get_CoLoadingType: UnicodeString;
    function Get_CoLoadingNumber: IXMLCoLoadingNumber;
    function Get_DeliveryInstructionNumber: UnicodeString;
    function Get_DeliveryInstructionSequenceNumber: LongWord;
    function Get_CoLoadingReference: IXMLCoLoadingReferenceList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CoLoadingType(Value: UnicodeString);
    procedure Set_DeliveryInstructionNumber(Value: UnicodeString);
    procedure Set_DeliveryInstructionSequenceNumber(Value: LongWord);
    { Methods & Properties }
    property CoLoadingType: UnicodeString read Get_CoLoadingType write Set_CoLoadingType;
    property CoLoadingNumber: IXMLCoLoadingNumber read Get_CoLoadingNumber;
    property DeliveryInstructionNumber: UnicodeString read Get_DeliveryInstructionNumber write Set_DeliveryInstructionNumber;
    property DeliveryInstructionSequenceNumber: LongWord read Get_DeliveryInstructionSequenceNumber write Set_DeliveryInstructionSequenceNumber;
    property CoLoadingReference: IXMLCoLoadingReferenceList read Get_CoLoadingReference;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLCoLoadingList }

  IXMLCoLoadingList = interface(IXMLNodeCollection)
    ['{166A792E-A4B3-405E-AD91-F70D9225ED3E}']
    { Methods & Properties }
    function Add: IXMLCoLoading;
    function Insert(const Index: Integer): IXMLCoLoading;

    function Get_Item(Index: Integer): IXMLCoLoading;
    property Items[Index: Integer]: IXMLCoLoading read Get_Item; default;
  end;

{ IXMLCoLoadingNumber }

  IXMLCoLoadingNumber = interface(IXMLNode)
    ['{695CFEA2-A969-47F7-8291-A72BF6E973F1}']
    { Property Accessors }
    function Get_AssignedBy: UnicodeString;
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLCoLoadingReference }

  IXMLCoLoadingReference = interface(IXMLNode)
    ['{52081C43-F06B-45EC-AC8C-CCEE07BD2639}']
    { Property Accessors }
    function Get_CoLoadingReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_CoLoadingReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property CoLoadingReferenceType: UnicodeString read Get_CoLoadingReferenceType write Set_CoLoadingReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLCoLoadingReferenceList }

  IXMLCoLoadingReferenceList = interface(IXMLNodeCollection)
    ['{8D81265B-2219-4CAA-9A77-EB04D1D6D0A7}']
    { Methods & Properties }
    function Add: IXMLCoLoadingReference;
    function Insert(const Index: Integer): IXMLCoLoadingReference;

    function Get_Item(Index: Integer): IXMLCoLoadingReference;
    property Items[Index: Integer]: IXMLCoLoadingReference read Get_Item; default;
  end;

{ IXMLDeliveryLeg }

  IXMLDeliveryLeg = interface(IXMLNode)
    ['{F4CBFA93-C6B4-494E-816B-2A1D291F2A65}']
    { Property Accessors }
    function Get_DeliveryModeType: UnicodeString;
    function Get_DeliveryLegType: UnicodeString;
    function Get_EventType: UnicodeString;
    function Get_LegStageType: UnicodeString;
    function Get_TransportContextType: UnicodeString;
    function Get_IsOpenDeliveryAgreement: UnicodeString;
    function Get_DeliveryLegSequenceNumber: LongWord;
    function Get_DeliveryOrigin: IXMLDeliveryOriginList;
    function Get_CarrierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_TransportModeCharacteristics: IXMLTransportModeCharacteristics;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_ResourceInformation: IXMLResourceInformation;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_Route: IXMLRouteList;
    function Get_DeliveryTransitTime: IXMLDeliveryTransitTime;
    function Get_DeliveryDestination: IXMLDeliveryDestinationList;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_DeliveryLegReference: IXMLDeliveryLegReferenceList;
    function Get_TermsOfChartering: IXMLTermsOfCharteringList;
    function Get_BusinessChainInfo: IXMLBusinessChainInfo;
    procedure Set_DeliveryModeType(Value: UnicodeString);
    procedure Set_DeliveryLegType(Value: UnicodeString);
    procedure Set_EventType(Value: UnicodeString);
    procedure Set_LegStageType(Value: UnicodeString);
    procedure Set_TransportContextType(Value: UnicodeString);
    procedure Set_IsOpenDeliveryAgreement(Value: UnicodeString);
    procedure Set_DeliveryLegSequenceNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryModeType: UnicodeString read Get_DeliveryModeType write Set_DeliveryModeType;
    property DeliveryLegType: UnicodeString read Get_DeliveryLegType write Set_DeliveryLegType;
    property EventType: UnicodeString read Get_EventType write Set_EventType;
    property LegStageType: UnicodeString read Get_LegStageType write Set_LegStageType;
    property TransportContextType: UnicodeString read Get_TransportContextType write Set_TransportContextType;
    property IsOpenDeliveryAgreement: UnicodeString read Get_IsOpenDeliveryAgreement write Set_IsOpenDeliveryAgreement;
    property DeliveryLegSequenceNumber: LongWord read Get_DeliveryLegSequenceNumber write Set_DeliveryLegSequenceNumber;
    property DeliveryOrigin: IXMLDeliveryOriginList read Get_DeliveryOrigin;
    property CarrierParty: IXMLParty read Get_CarrierParty;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property TransportModeCharacteristics: IXMLTransportModeCharacteristics read Get_TransportModeCharacteristics;
    property TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics read Get_TransportVehicleCharacteristics;
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList read Get_TransportUnitCharacteristics;
    property ResourceInformation: IXMLResourceInformation read Get_ResourceInformation;
    property TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList read Get_TransportLoadingCharacteristics;
    property TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList read Get_TransportUnloadingCharacteristics;
    property TransportOtherInstructions: IXMLTransportOtherInstructionsList read Get_TransportOtherInstructions;
    property Route: IXMLRouteList read Get_Route;
    property DeliveryTransitTime: IXMLDeliveryTransitTime read Get_DeliveryTransitTime;
    property DeliveryDestination: IXMLDeliveryDestinationList read Get_DeliveryDestination;
    property DeliveryDateWindow: IXMLDeliveryDateWindowList read Get_DeliveryDateWindow;
    property DeliveryLegReference: IXMLDeliveryLegReferenceList read Get_DeliveryLegReference;
    property TermsOfChartering: IXMLTermsOfCharteringList read Get_TermsOfChartering;
    property BusinessChainInfo: IXMLBusinessChainInfo read Get_BusinessChainInfo;
  end;

{ IXMLDeliveryLegList }

  IXMLDeliveryLegList = interface(IXMLNodeCollection)
    ['{90E1E78C-D8F4-41CC-9C2D-F287238139AD}']
    { Methods & Properties }
    function Add: IXMLDeliveryLeg;
    function Insert(const Index: Integer): IXMLDeliveryLeg;

    function Get_Item(Index: Integer): IXMLDeliveryLeg;
    property Items[Index: Integer]: IXMLDeliveryLeg read Get_Item; default;
  end;

{ IXMLDeliveryOrigin }

  IXMLDeliveryOrigin = interface(IXMLNode)
    ['{1FE78404-3E91-46D3-8286-1DA45FF33626}']
    { Property Accessors }
    function Get_IsOptionalDeliveryOrigin: UnicodeString;
    function Get_PriorityOrder: LongWord;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_LocationCharacteristics: IXMLLocationCharacteristics;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_IsOptionalDeliveryOrigin(Value: UnicodeString);
    procedure Set_PriorityOrder(Value: LongWord);
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property IsOptionalDeliveryOrigin: UnicodeString read Get_IsOptionalDeliveryOrigin write Set_IsOptionalDeliveryOrigin;
    property PriorityOrder: LongWord read Get_PriorityOrder write Set_PriorityOrder;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
    property LocationParty: IXMLLocationParty read Get_LocationParty;
    property LocationCharacteristics: IXMLLocationCharacteristics read Get_LocationCharacteristics;
    property SupplyPoint: IXMLSupplyPointList read Get_SupplyPoint;
    property LocationCode: IXMLLocationCode read Get_LocationCode;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
  end;

{ IXMLDeliveryOriginList }

  IXMLDeliveryOriginList = interface(IXMLNodeCollection)
    ['{588F5E72-B58F-4C5B-93A2-6B2AB41CDEBB}']
    { Methods & Properties }
    function Add: IXMLDeliveryOrigin;
    function Insert(const Index: Integer): IXMLDeliveryOrigin;

    function Get_Item(Index: Integer): IXMLDeliveryOrigin;
    property Items[Index: Integer]: IXMLDeliveryOrigin read Get_Item; default;
  end;

{ IXMLLocationCharacteristics }

  IXMLLocationCharacteristics = interface(IXMLNode)
    ['{2EEC27B1-2847-4641-A39D-734EEE1E3400}']
    { Property Accessors }
    function Get_LocationProperty: IXMLCodeInfoList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_AreaInfo: IXMLAreaInfoList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property LocationProperty: IXMLCodeInfoList read Get_LocationProperty;
    property MapPoint: IXMLMapPointList read Get_MapPoint;
    property AreaInfo: IXMLAreaInfoList read Get_AreaInfo;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLResourceInformation }

  IXMLResourceInformation = interface(IXMLNode)
    ['{FBEDD946-ACAC-45DD-B2E6-E033FEA07877}']
    { Property Accessors }
    function Get_ResourceInformationNumber: UnicodeString;
    function Get_ResourceInformationIssueDate: IXMLResourceInformationIssueDate;
    function Get_ResourceCharacteristics: IXMLResourceCharacteristicsList;
    procedure Set_ResourceInformationNumber(Value: UnicodeString);
    { Methods & Properties }
    property ResourceInformationNumber: UnicodeString read Get_ResourceInformationNumber write Set_ResourceInformationNumber;
    property ResourceInformationIssueDate: IXMLResourceInformationIssueDate read Get_ResourceInformationIssueDate;
    property ResourceCharacteristics: IXMLResourceCharacteristicsList read Get_ResourceCharacteristics;
  end;

{ IXMLResourceInformationIssueDate }

  IXMLResourceInformationIssueDate = interface(IXMLNode)
    ['{9F905183-9C7B-410A-9B56-A4FAA7F58162}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLResourceCharacteristics }

  IXMLResourceCharacteristics = interface(IXMLNode)
    ['{76EEAB1C-45F5-4D98-9DFC-05903BAFE49C}']
    { Property Accessors }
    function Get_ResourceTypeCode: IXMLResourceTypeCode;
    function Get_ResourceTypeDescription: IXMLS255List;
    function Get_ResourceIDInfo: IXMLResourceIDInfoList;
    function Get_ResourceReferenceIDInfo: IXMLResourceReferenceIDInfoList;
    function Get_ResourceReference: IXMLResourceReferenceList;
    function Get_ResourceIntroductionDate: IXMLResourceIntroductionDate;
    function Get_ResourceAvailability: IXMLResourceAvailability;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_ResourcePropertyValue: IXMLResourcePropertyValueList;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property ResourceTypeCode: IXMLResourceTypeCode read Get_ResourceTypeCode;
    property ResourceTypeDescription: IXMLS255List read Get_ResourceTypeDescription;
    property ResourceIDInfo: IXMLResourceIDInfoList read Get_ResourceIDInfo;
    property ResourceReferenceIDInfo: IXMLResourceReferenceIDInfoList read Get_ResourceReferenceIDInfo;
    property ResourceReference: IXMLResourceReferenceList read Get_ResourceReference;
    property ResourceIntroductionDate: IXMLResourceIntroductionDate read Get_ResourceIntroductionDate;
    property ResourceAvailability: IXMLResourceAvailability read Get_ResourceAvailability;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property ResourcePropertyValue: IXMLResourcePropertyValueList read Get_ResourcePropertyValue;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLResourceCharacteristicsList }

  IXMLResourceCharacteristicsList = interface(IXMLNodeCollection)
    ['{8B8E601F-681F-4E1F-9D4E-FF0E24FA6192}']
    { Methods & Properties }
    function Add: IXMLResourceCharacteristics;
    function Insert(const Index: Integer): IXMLResourceCharacteristics;

    function Get_Item(Index: Integer): IXMLResourceCharacteristics;
    property Items[Index: Integer]: IXMLResourceCharacteristics read Get_Item; default;
  end;

{ IXMLResourceTypeCode }

  IXMLResourceTypeCode = interface(IXMLNode)
    ['{4A436B21-23F7-4FE5-B053-FF2A3EE44A92}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLResourceIDInfo }

  IXMLResourceIDInfo = interface(IXMLNode)
    ['{3A1B0CB8-F673-405F-82CB-4091730BB506}']
    { Property Accessors }
    function Get_ResourceIdentifier: IXMLResourceIdentifier;
    function Get_ResourceDescription: IXMLS255List;
    { Methods & Properties }
    property ResourceIdentifier: IXMLResourceIdentifier read Get_ResourceIdentifier;
    property ResourceDescription: IXMLS255List read Get_ResourceDescription;
  end;

{ IXMLResourceIDInfoList }

  IXMLResourceIDInfoList = interface(IXMLNodeCollection)
    ['{9D50CDD9-D35B-41D9-863F-A4682642327F}']
    { Methods & Properties }
    function Add: IXMLResourceIDInfo;
    function Insert(const Index: Integer): IXMLResourceIDInfo;

    function Get_Item(Index: Integer): IXMLResourceIDInfo;
    property Items[Index: Integer]: IXMLResourceIDInfo read Get_Item; default;
  end;

{ IXMLResourceIdentifier }

  IXMLResourceIdentifier = interface(IXMLNode)
    ['{FE91953F-88D7-4B0D-8624-0A7EA0DB0034}']
    { Property Accessors }
    function Get_ResourceIdentifierType: UnicodeString;
    function Get_Agency: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    procedure Set_ResourceIdentifierType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    { Methods & Properties }
    property ResourceIdentifierType: UnicodeString read Get_ResourceIdentifierType write Set_ResourceIdentifierType;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property StateOrProvince: UnicodeString read Get_StateOrProvince write Set_StateOrProvince;
    property ISOCountryCode: UnicodeString read Get_ISOCountryCode write Set_ISOCountryCode;
    property ISOCountryCodeAlpha3: UnicodeString read Get_ISOCountryCodeAlpha3 write Set_ISOCountryCodeAlpha3;
    property ISOCountryCodeNumeric: UnicodeString read Get_ISOCountryCodeNumeric write Set_ISOCountryCodeNumeric;
  end;

{ IXMLResourceReferenceIDInfo }

  IXMLResourceReferenceIDInfo = interface(IXMLNodeCollection)
    ['{B4F48AC3-C566-4A9B-9ED0-A4A1A85CDFFB}']
    { Property Accessors }
    function Get_ResourceReferenceIDType: UnicodeString;
    function Get_ResourceIDInfo(Index: Integer): IXMLResourceIDInfo;
    procedure Set_ResourceReferenceIDType(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLResourceIDInfo;
    function Insert(const Index: Integer): IXMLResourceIDInfo;
    property ResourceReferenceIDType: UnicodeString read Get_ResourceReferenceIDType write Set_ResourceReferenceIDType;
    property ResourceIDInfo[Index: Integer]: IXMLResourceIDInfo read Get_ResourceIDInfo; default;
  end;

{ IXMLResourceReferenceIDInfoList }

  IXMLResourceReferenceIDInfoList = interface(IXMLNodeCollection)
    ['{6D8F9D6E-683B-483E-A00E-0B55A7F1A766}']
    { Methods & Properties }
    function Add: IXMLResourceReferenceIDInfo;
    function Insert(const Index: Integer): IXMLResourceReferenceIDInfo;

    function Get_Item(Index: Integer): IXMLResourceReferenceIDInfo;
    property Items[Index: Integer]: IXMLResourceReferenceIDInfo read Get_Item; default;
  end;

{ IXMLResourceReference }

  IXMLResourceReference = interface(IXMLNode)
    ['{48E85EE4-AAE9-4ED0-8EE1-0AEB2FEFCD40}']
    { Property Accessors }
    function Get_ResourceReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ResourceReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property ResourceReferenceType: UnicodeString read Get_ResourceReferenceType write Set_ResourceReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLResourceReferenceList }

  IXMLResourceReferenceList = interface(IXMLNodeCollection)
    ['{110C5CB6-DB7D-4D5D-BD55-BFD00A88B2F1}']
    { Methods & Properties }
    function Add: IXMLResourceReference;
    function Insert(const Index: Integer): IXMLResourceReference;

    function Get_Item(Index: Integer): IXMLResourceReference;
    property Items[Index: Integer]: IXMLResourceReference read Get_Item; default;
  end;

{ IXMLResourceIntroductionDate }

  IXMLResourceIntroductionDate = interface(IXMLNode)
    ['{6910212B-25F5-4CB4-8318-43AE37C070B8}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
  end;

{ IXMLResourceAvailability }

  IXMLResourceAvailability = interface(IXMLNode)
    ['{5D7981F9-2CB3-47FA-954C-B68E689ED4E0}']
    { Property Accessors }
    function Get_DateTimeRange: IXMLDateTimeRangeList;
    function Get_ResourceShiftInformation: IXMLResourceShiftInformationList;
    { Methods & Properties }
    property DateTimeRange: IXMLDateTimeRangeList read Get_DateTimeRange;
    property ResourceShiftInformation: IXMLResourceShiftInformationList read Get_ResourceShiftInformation;
  end;

{ IXMLResourceShiftInformation }

  IXMLResourceShiftInformation = interface(IXMLNode)
    ['{7A2E23CA-610C-40DB-A14F-F276D23BAC95}']
    { Property Accessors }
    function Get_ResourceShiftCode: IXMLResourceShiftCode;
    function Get_ResourceShiftDescription: IXMLS255List;
    { Methods & Properties }
    property ResourceShiftCode: IXMLResourceShiftCode read Get_ResourceShiftCode;
    property ResourceShiftDescription: IXMLS255List read Get_ResourceShiftDescription;
  end;

{ IXMLResourceShiftInformationList }

  IXMLResourceShiftInformationList = interface(IXMLNodeCollection)
    ['{4D3804DB-B851-49B3-8307-EC581DE838B0}']
    { Methods & Properties }
    function Add: IXMLResourceShiftInformation;
    function Insert(const Index: Integer): IXMLResourceShiftInformation;

    function Get_Item(Index: Integer): IXMLResourceShiftInformation;
    property Items[Index: Integer]: IXMLResourceShiftInformation read Get_Item; default;
  end;

{ IXMLResourceShiftCode }

  IXMLResourceShiftCode = interface(IXMLNode)
    ['{159E32AA-0CD5-479D-BC58-D174CE1CC7D5}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLResourcePropertyValue }

  IXMLResourcePropertyValue = interface(IXMLNode)
    ['{E4BDF9EA-56D5-4505-8564-716A98A8B89B}']
    { Property Accessors }
    function Get_PropertyCode: IXMLPropertyCode;
    function Get_PropertyDescription: IXMLS255List;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    function Get_QuantityValue: IXMLQuantityValueList;
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property PropertyCode: IXMLPropertyCode read Get_PropertyCode;
    property PropertyDescription: IXMLS255List read Get_PropertyDescription;
    property BinaryValue: UnicodeString read Get_BinaryValue write Set_BinaryValue;
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property DateTimeValue: UnicodeString read Get_DateTimeValue write Set_DateTimeValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
    property QuantityValue: IXMLQuantityValueList read Get_QuantityValue;
  end;

{ IXMLResourcePropertyValueList }

  IXMLResourcePropertyValueList = interface(IXMLNodeCollection)
    ['{66105775-6319-443A-B331-BC60ED6D9A3D}']
    { Methods & Properties }
    function Add: IXMLResourcePropertyValue;
    function Insert(const Index: Integer): IXMLResourcePropertyValue;

    function Get_Item(Index: Integer): IXMLResourcePropertyValue;
    property Items[Index: Integer]: IXMLResourcePropertyValue read Get_Item; default;
  end;

{ IXMLPropertyCode }

  IXMLPropertyCode = interface(IXMLNode)
    ['{563A2263-F206-43B3-9D70-CF11566A800C}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLQuantityValue }

  IXMLQuantityValue = interface(IXMLMeasurement)
    ['{8340F75C-3400-44A0-B4E4-59656C077C32}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLQuantityValueList }

  IXMLQuantityValueList = interface(IXMLNodeCollection)
    ['{8B968B1E-B8D5-46A7-AD22-9E66AD6B32B8}']
    { Methods & Properties }
    function Add: IXMLQuantityValue;
    function Insert(const Index: Integer): IXMLQuantityValue;

    function Get_Item(Index: Integer): IXMLQuantityValue;
    property Items[Index: Integer]: IXMLQuantityValue read Get_Item; default;
  end;

{ IXMLTransportLoadingCharacteristics }

  IXMLTransportLoadingCharacteristics = interface(IXMLNode)
    ['{B9B0A223-FEBE-4060-B793-E7FAC235D1F4}']
    { Property Accessors }
    function Get_MixProductIndicator: UnicodeString;
    function Get_TransportLoadingType: UnicodeString;
    function Get_TransportDeckOption: UnicodeString;
    function Get_LoadingTolerance: UnicodeString;
    function Get_DirectLoading: UnicodeString;
    function Get_GoodsLoadingPrinciple: UnicodeString;
    function Get_LabelOrientation: UnicodeString;
    function Get_IsSlotManaged: UnicodeString;
    function Get_IsCarrierLoadingOperator: UnicodeString;
    function Get_TransportLoadingCode: IXMLTransportLoadingCode;
    function Get_TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription;
    function Get_TransportLoadingText: IXMLS255List;
    function Get_GoodsLoadingSequence: IXMLGoodsLoadingSequence;
    function Get_LoadingFrom: IXMLLoadingFrom;
    procedure Set_MixProductIndicator(Value: UnicodeString);
    procedure Set_TransportLoadingType(Value: UnicodeString);
    procedure Set_TransportDeckOption(Value: UnicodeString);
    procedure Set_LoadingTolerance(Value: UnicodeString);
    procedure Set_DirectLoading(Value: UnicodeString);
    procedure Set_GoodsLoadingPrinciple(Value: UnicodeString);
    procedure Set_LabelOrientation(Value: UnicodeString);
    procedure Set_IsSlotManaged(Value: UnicodeString);
    procedure Set_IsCarrierLoadingOperator(Value: UnicodeString);
    { Methods & Properties }
    property MixProductIndicator: UnicodeString read Get_MixProductIndicator write Set_MixProductIndicator;
    property TransportLoadingType: UnicodeString read Get_TransportLoadingType write Set_TransportLoadingType;
    property TransportDeckOption: UnicodeString read Get_TransportDeckOption write Set_TransportDeckOption;
    property LoadingTolerance: UnicodeString read Get_LoadingTolerance write Set_LoadingTolerance;
    property DirectLoading: UnicodeString read Get_DirectLoading write Set_DirectLoading;
    property GoodsLoadingPrinciple: UnicodeString read Get_GoodsLoadingPrinciple write Set_GoodsLoadingPrinciple;
    property LabelOrientation: UnicodeString read Get_LabelOrientation write Set_LabelOrientation;
    property IsSlotManaged: UnicodeString read Get_IsSlotManaged write Set_IsSlotManaged;
    property IsCarrierLoadingOperator: UnicodeString read Get_IsCarrierLoadingOperator write Set_IsCarrierLoadingOperator;
    property TransportLoadingCode: IXMLTransportLoadingCode read Get_TransportLoadingCode;
    property TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription read Get_TransportLoadingCodeDescription;
    property TransportLoadingText: IXMLS255List read Get_TransportLoadingText;
    property GoodsLoadingSequence: IXMLGoodsLoadingSequence read Get_GoodsLoadingSequence;
    property LoadingFrom: IXMLLoadingFrom read Get_LoadingFrom;
  end;

{ IXMLTransportLoadingCharacteristicsList }

  IXMLTransportLoadingCharacteristicsList = interface(IXMLNodeCollection)
    ['{28FD7380-CAB7-4FB7-A486-564590CAD6A8}']
    { Methods & Properties }
    function Add: IXMLTransportLoadingCharacteristics;
    function Insert(const Index: Integer): IXMLTransportLoadingCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportLoadingCharacteristics;
    property Items[Index: Integer]: IXMLTransportLoadingCharacteristics read Get_Item; default;
  end;

{ IXMLTransportLoadingCode }

  IXMLTransportLoadingCode = interface(IXMLNode)
    ['{224B7838-663A-4A23-B8AE-6ECDEBD74CDA}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportLoadingCodeDescription }

  IXMLTransportLoadingCodeDescription = interface(IXMLNode)
    ['{22326473-12FF-47A7-9246-08EF27A6564E}']
    { Property Accessors }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
    { Methods & Properties }
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
  end;

{ IXMLGoodsLoadingSequence }

  IXMLGoodsLoadingSequence = interface(IXMLNode)
    ['{C2D1D18D-510D-403B-A899-95F0CD1FE5CC}']
    { Property Accessors }
    function Get_LoadingSequenceType: UnicodeString;
    function Get_TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
    function Get_LoadingSequence: IXMLLoadingSequenceList;
    procedure Set_LoadingSequenceType(Value: UnicodeString);
    { Methods & Properties }
    property LoadingSequenceType: UnicodeString read Get_LoadingSequenceType write Set_LoadingSequenceType;
    property TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList read Get_TransportUnitReferenceIDInfo;
    property LoadingSequence: IXMLLoadingSequenceList read Get_LoadingSequence;
  end;

{ IXMLLoadingSequence }

  IXMLLoadingSequence = interface(IXMLNode)
    ['{2EFC0476-31E4-4237-A10A-3D211D6D22C1}']
    { Property Accessors }
    function Get_SequenceNumber: LongWord;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    procedure Set_SequenceNumber(Value: LongWord);
    { Methods & Properties }
    property SequenceNumber: LongWord read Get_SequenceNumber write Set_SequenceNumber;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
  end;

{ IXMLLoadingSequenceList }

  IXMLLoadingSequenceList = interface(IXMLNodeCollection)
    ['{947D212E-3520-4E38-8603-3451CDE98527}']
    { Methods & Properties }
    function Add: IXMLLoadingSequence;
    function Insert(const Index: Integer): IXMLLoadingSequence;

    function Get_Item(Index: Integer): IXMLLoadingSequence;
    property Items[Index: Integer]: IXMLLoadingSequence read Get_Item; default;
  end;

{ IXMLLoadingFrom }

  IXMLLoadingFrom = interface(IXMLNode)
    ['{84C22443-F57A-4B76-9605-BCA50B8C4FCE}']
    { Property Accessors }
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristics;
    { Methods & Properties }
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristics read Get_TransportUnitCharacteristics;
  end;

{ IXMLTransportUnloadingCharacteristics }

  IXMLTransportUnloadingCharacteristics = interface(IXMLNode)
    ['{05C201CA-EFED-4C4C-917B-25C9EF595618}']
    { Property Accessors }
    function Get_TransportUnloadingType: UnicodeString;
    function Get_DirectUnloading: UnicodeString;
    function Get_IsSlotManaged: UnicodeString;
    function Get_IsCarrierUnloadingOperator: UnicodeString;
    function Get_TransportUnloadingCode: IXMLTransportUnloadingCode;
    function Get_TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription;
    function Get_TransportUnloadingText: IXMLS255List;
    procedure Set_TransportUnloadingType(Value: UnicodeString);
    procedure Set_DirectUnloading(Value: UnicodeString);
    procedure Set_IsSlotManaged(Value: UnicodeString);
    procedure Set_IsCarrierUnloadingOperator(Value: UnicodeString);
    { Methods & Properties }
    property TransportUnloadingType: UnicodeString read Get_TransportUnloadingType write Set_TransportUnloadingType;
    property DirectUnloading: UnicodeString read Get_DirectUnloading write Set_DirectUnloading;
    property IsSlotManaged: UnicodeString read Get_IsSlotManaged write Set_IsSlotManaged;
    property IsCarrierUnloadingOperator: UnicodeString read Get_IsCarrierUnloadingOperator write Set_IsCarrierUnloadingOperator;
    property TransportUnloadingCode: IXMLTransportUnloadingCode read Get_TransportUnloadingCode;
    property TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription read Get_TransportUnloadingCodeDescription;
    property TransportUnloadingText: IXMLS255List read Get_TransportUnloadingText;
  end;

{ IXMLTransportUnloadingCharacteristicsList }

  IXMLTransportUnloadingCharacteristicsList = interface(IXMLNodeCollection)
    ['{557CD8C7-A3EF-4566-AA78-56DEC8117A4C}']
    { Methods & Properties }
    function Add: IXMLTransportUnloadingCharacteristics;
    function Insert(const Index: Integer): IXMLTransportUnloadingCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportUnloadingCharacteristics;
    property Items[Index: Integer]: IXMLTransportUnloadingCharacteristics read Get_Item; default;
  end;

{ IXMLTransportUnloadingCode }

  IXMLTransportUnloadingCode = interface(IXMLNode)
    ['{E4FE99CD-3896-4B4D-9DAE-1669765B8B59}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnloadingCodeDescription }

  IXMLTransportUnloadingCodeDescription = interface(IXMLNode)
    ['{5B5143EB-6E72-432B-AB51-12D2CF6FC6CB}']
    { Property Accessors }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
    { Methods & Properties }
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
  end;

{ IXMLTransportOtherInstructions }

  IXMLTransportOtherInstructions = interface(IXMLNode)
    ['{1BAD219D-0979-4FC4-BAF5-6E715A91D281}']
    { Property Accessors }
    function Get_TransportInstructionType: UnicodeString;
    function Get_TransportInstructionCode: IXMLTransportInstructionCode;
    function Get_TransportInstructionText: IXMLS255List;
    function Get_TransportPropertyValue: IXMLTransportPropertyValueList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_LocationParty: IXMLLocationPartyList;
    procedure Set_TransportInstructionType(Value: UnicodeString);
    { Methods & Properties }
    property TransportInstructionType: UnicodeString read Get_TransportInstructionType write Set_TransportInstructionType;
    property TransportInstructionCode: IXMLTransportInstructionCode read Get_TransportInstructionCode;
    property TransportInstructionText: IXMLS255List read Get_TransportInstructionText;
    property TransportPropertyValue: IXMLTransportPropertyValueList read Get_TransportPropertyValue;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property LocationParty: IXMLLocationPartyList read Get_LocationParty;
  end;

{ IXMLTransportOtherInstructionsList }

  IXMLTransportOtherInstructionsList = interface(IXMLNodeCollection)
    ['{276E47A1-0E29-45D3-B120-E84395382423}']
    { Methods & Properties }
    function Add: IXMLTransportOtherInstructions;
    function Insert(const Index: Integer): IXMLTransportOtherInstructions;

    function Get_Item(Index: Integer): IXMLTransportOtherInstructions;
    property Items[Index: Integer]: IXMLTransportOtherInstructions read Get_Item; default;
  end;

{ IXMLTransportInstructionCode }

  IXMLTransportInstructionCode = interface(IXMLNode)
    ['{3DBF29BE-7579-4F9D-A2E3-41B6D2D5B134}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportPropertyValue }

  IXMLTransportPropertyValue = interface(IXMLNode)
    ['{3B8781CD-E8C1-4053-9A94-405DF6455491}']
    { Property Accessors }
    function Get_TransportPropertyType: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_PriceDetails: IXMLPriceDetails;
    procedure Set_TransportPropertyType(Value: UnicodeString);
    { Methods & Properties }
    property TransportPropertyType: UnicodeString read Get_TransportPropertyType write Set_TransportPropertyType;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
    property PriceDetails: IXMLPriceDetails read Get_PriceDetails;
  end;

{ IXMLTransportPropertyValueList }

  IXMLTransportPropertyValueList = interface(IXMLNodeCollection)
    ['{69F994CD-BA0E-46B0-A1DC-15FCBDE4E472}']
    { Methods & Properties }
    function Add: IXMLTransportPropertyValue;
    function Insert(const Index: Integer): IXMLTransportPropertyValue;

    function Get_Item(Index: Integer): IXMLTransportPropertyValue;
    property Items[Index: Integer]: IXMLTransportPropertyValue read Get_Item; default;
  end;

{ IXMLRoute }

  IXMLRoute = interface(IXMLNode)
    ['{500687F2-8AF0-4E9C-9FC4-429E84103773}']
    { Property Accessors }
    function Get_RouteType: UnicodeString;
    function Get_IsWithLoad: UnicodeString;
    function Get_RouteSeasonType: UnicodeString;
    function Get_IsRouteAsInstructed: UnicodeString;
    function Get_RouteName: UnicodeString;
    function Get_RouteComment: IXMLS255List;
    function Get_RouteLocation: IXMLRouteLocationList;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_RouteReference: IXMLRouteReferenceList;
    function Get_RouteLength: IXMLRouteLengthList;
    function Get_RouteDefinition: IXMLRouteDefinition;
    function Get_EAttachment: IXMLEAttachment;
    function Get_RouteLeg: IXMLRouteLegList;
    procedure Set_RouteType(Value: UnicodeString);
    procedure Set_IsWithLoad(Value: UnicodeString);
    procedure Set_RouteSeasonType(Value: UnicodeString);
    procedure Set_IsRouteAsInstructed(Value: UnicodeString);
    procedure Set_RouteName(Value: UnicodeString);
    { Methods & Properties }
    property RouteType: UnicodeString read Get_RouteType write Set_RouteType;
    property IsWithLoad: UnicodeString read Get_IsWithLoad write Set_IsWithLoad;
    property RouteSeasonType: UnicodeString read Get_RouteSeasonType write Set_RouteSeasonType;
    property IsRouteAsInstructed: UnicodeString read Get_IsRouteAsInstructed write Set_IsRouteAsInstructed;
    property RouteName: UnicodeString read Get_RouteName write Set_RouteName;
    property RouteComment: IXMLS255List read Get_RouteComment;
    property RouteLocation: IXMLRouteLocationList read Get_RouteLocation;
    property SupplyPoint: IXMLSupplyPointList read Get_SupplyPoint;
    property MapPoint: IXMLMapPointList read Get_MapPoint;
    property RouteReference: IXMLRouteReferenceList read Get_RouteReference;
    property RouteLength: IXMLRouteLengthList read Get_RouteLength;
    property RouteDefinition: IXMLRouteDefinition read Get_RouteDefinition;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property RouteLeg: IXMLRouteLegList read Get_RouteLeg;
  end;

{ IXMLRouteList }

  IXMLRouteList = interface(IXMLNodeCollection)
    ['{3BAFD348-6881-4184-8EA1-51FFCB6AECFE}']
    { Methods & Properties }
    function Add: IXMLRoute;
    function Insert(const Index: Integer): IXMLRoute;

    function Get_Item(Index: Integer): IXMLRoute;
    property Items[Index: Integer]: IXMLRoute read Get_Item; default;
  end;

{ IXMLRouteLocation }

  IXMLRouteLocation = interface(IXMLNode)
    ['{00418B86-F9AB-414C-ACAB-67BA4FC266F5}']
    { Property Accessors }
    function Get_LocationParty: IXMLLocationParty;
    function Get_SupplyPoint: IXMLSupplyPoint;
    { Methods & Properties }
    property LocationParty: IXMLLocationParty read Get_LocationParty;
    property SupplyPoint: IXMLSupplyPoint read Get_SupplyPoint;
  end;

{ IXMLRouteLocationList }

  IXMLRouteLocationList = interface(IXMLNodeCollection)
    ['{2A80DDCB-E279-4902-B293-D5EE245D29C5}']
    { Methods & Properties }
    function Add: IXMLRouteLocation;
    function Insert(const Index: Integer): IXMLRouteLocation;

    function Get_Item(Index: Integer): IXMLRouteLocation;
    property Items[Index: Integer]: IXMLRouteLocation read Get_Item; default;
  end;

{ IXMLRouteReference }

  IXMLRouteReference = interface(IXMLNode)
    ['{B37346F4-282F-4C81-969A-DECE76D1D5CD}']
    { Property Accessors }
    function Get_RouteReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_RouteReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property RouteReferenceType: UnicodeString read Get_RouteReferenceType write Set_RouteReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLRouteReferenceList }

  IXMLRouteReferenceList = interface(IXMLNodeCollection)
    ['{C9E1F99C-B286-4C05-BD28-1DE096F0DE01}']
    { Methods & Properties }
    function Add: IXMLRouteReference;
    function Insert(const Index: Integer): IXMLRouteReference;

    function Get_Item(Index: Integer): IXMLRouteReference;
    property Items[Index: Integer]: IXMLRouteReference read Get_Item; default;
  end;

{ IXMLRouteLength }

  IXMLRouteLength = interface(IXMLMeasurement)
    ['{BAB4CC70-D693-4D41-868F-DAD34C49CDA1}']
    { Property Accessors }
    function Get_LengthType: UnicodeString;
    function Get_LengthTypeVersion: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_LengthType(Value: UnicodeString);
    procedure Set_LengthTypeVersion(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property LengthType: UnicodeString read Get_LengthType write Set_LengthType;
    property LengthTypeVersion: UnicodeString read Get_LengthTypeVersion write Set_LengthTypeVersion;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLRouteLengthList }

  IXMLRouteLengthList = interface(IXMLNodeCollection)
    ['{81747943-7335-418E-ADA8-C2B502F38D2C}']
    { Methods & Properties }
    function Add: IXMLRouteLength;
    function Insert(const Index: Integer): IXMLRouteLength;

    function Get_Item(Index: Integer): IXMLRouteLength;
    property Items[Index: Integer]: IXMLRouteLength read Get_Item; default;
  end;

{ IXMLRouteDefinition }

  IXMLRouteDefinition = interface(IXMLNode)
    ['{A52F267B-C118-4901-9016-6BA0EBD623ED}']
    { Property Accessors }
    function Get_RouteDefinitionFormat: UnicodeString;
    procedure Set_RouteDefinitionFormat(Value: UnicodeString);
    { Methods & Properties }
    property RouteDefinitionFormat: UnicodeString read Get_RouteDefinitionFormat write Set_RouteDefinitionFormat;
  end;

{ IXMLRouteLeg }

  IXMLRouteLeg = interface(IXMLNode)
    ['{2DE7FA0F-4291-4FD9-83BD-CFF5F6F1498E}']
    { Property Accessors }
    function Get_RouteLegNumber: LongWord;
    function Get_RouteLegName: UnicodeString;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_RouteReference: IXMLRouteReferenceList;
    function Get_RouteLegLength: IXMLRouteLegLengthList;
    function Get_RoadCharacteristics: IXMLRoadCharacteristics;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_RouteLegNumber(Value: LongWord);
    procedure Set_RouteLegName(Value: UnicodeString);
    { Methods & Properties }
    property RouteLegNumber: LongWord read Get_RouteLegNumber write Set_RouteLegNumber;
    property RouteLegName: UnicodeString read Get_RouteLegName write Set_RouteLegName;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property MapPoint: IXMLMapPointList read Get_MapPoint;
    property RouteReference: IXMLRouteReferenceList read Get_RouteReference;
    property RouteLegLength: IXMLRouteLegLengthList read Get_RouteLegLength;
    property RoadCharacteristics: IXMLRoadCharacteristics read Get_RoadCharacteristics;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLRouteLegList }

  IXMLRouteLegList = interface(IXMLNodeCollection)
    ['{92D24729-1BEE-461D-A5CB-11BAE3A1ADDB}']
    { Methods & Properties }
    function Add: IXMLRouteLeg;
    function Insert(const Index: Integer): IXMLRouteLeg;

    function Get_Item(Index: Integer): IXMLRouteLeg;
    property Items[Index: Integer]: IXMLRouteLeg read Get_Item; default;
  end;

{ IXMLRouteLegLength }

  IXMLRouteLegLength = interface(IXMLMeasurement)
    ['{F4EC71A4-31DB-47E7-9683-A80D2A400808}']
    { Property Accessors }
    function Get_LengthType: UnicodeString;
    function Get_LengthTypeVersion: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_LengthType(Value: UnicodeString);
    procedure Set_LengthTypeVersion(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property LengthType: UnicodeString read Get_LengthType write Set_LengthType;
    property LengthTypeVersion: UnicodeString read Get_LengthTypeVersion write Set_LengthTypeVersion;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLRouteLegLengthList }

  IXMLRouteLegLengthList = interface(IXMLNodeCollection)
    ['{9AD33D1B-0696-4D6A-A27D-D0ECFFA412F8}']
    { Methods & Properties }
    function Add: IXMLRouteLegLength;
    function Insert(const Index: Integer): IXMLRouteLegLength;

    function Get_Item(Index: Integer): IXMLRouteLegLength;
    property Items[Index: Integer]: IXMLRouteLegLength read Get_Item; default;
  end;

{ IXMLRoadCharacteristics }

  IXMLRoadCharacteristics = interface(IXMLNode)
    ['{1CD37E54-8C9E-47CA-9375-536C85D2E1E7}']
    { Property Accessors }
    function Get_RoadOwnerType: UnicodeString;
    function Get_RoadKeeperType: UnicodeString;
    function Get_RoadAccessibilityType: UnicodeString;
    function Get_RoadTurningPossibilityType: UnicodeString;
    function Get_RoadTurningPointType: UnicodeString;
    function Get_RoadPassingPossibility: UnicodeString;
    function Get_IsDeadEndRoad: UnicodeString;
    function Get_RoadName: UnicodeString;
    function Get_RoadNumber: UnicodeString;
    function Get_RoadClassification: IXMLRoadClassificationList;
    function Get_RoadAvailability: IXMLRoadAvailabilityTypeList;
    function Get_RoadBearingCapacity: IXMLRoadBearingCapacityList;
    function Get_RoadObstruction: IXMLRoadObstructionList;
    function Get_RoadMaintenanceInfo: IXMLRoadMaintenanceInfoList;
    procedure Set_RoadOwnerType(Value: UnicodeString);
    procedure Set_RoadKeeperType(Value: UnicodeString);
    procedure Set_RoadAccessibilityType(Value: UnicodeString);
    procedure Set_RoadTurningPossibilityType(Value: UnicodeString);
    procedure Set_RoadTurningPointType(Value: UnicodeString);
    procedure Set_RoadPassingPossibility(Value: UnicodeString);
    procedure Set_IsDeadEndRoad(Value: UnicodeString);
    procedure Set_RoadName(Value: UnicodeString);
    procedure Set_RoadNumber(Value: UnicodeString);
    { Methods & Properties }
    property RoadOwnerType: UnicodeString read Get_RoadOwnerType write Set_RoadOwnerType;
    property RoadKeeperType: UnicodeString read Get_RoadKeeperType write Set_RoadKeeperType;
    property RoadAccessibilityType: UnicodeString read Get_RoadAccessibilityType write Set_RoadAccessibilityType;
    property RoadTurningPossibilityType: UnicodeString read Get_RoadTurningPossibilityType write Set_RoadTurningPossibilityType;
    property RoadTurningPointType: UnicodeString read Get_RoadTurningPointType write Set_RoadTurningPointType;
    property RoadPassingPossibility: UnicodeString read Get_RoadPassingPossibility write Set_RoadPassingPossibility;
    property IsDeadEndRoad: UnicodeString read Get_IsDeadEndRoad write Set_IsDeadEndRoad;
    property RoadName: UnicodeString read Get_RoadName write Set_RoadName;
    property RoadNumber: UnicodeString read Get_RoadNumber write Set_RoadNumber;
    property RoadClassification: IXMLRoadClassificationList read Get_RoadClassification;
    property RoadAvailability: IXMLRoadAvailabilityTypeList read Get_RoadAvailability;
    property RoadBearingCapacity: IXMLRoadBearingCapacityList read Get_RoadBearingCapacity;
    property RoadObstruction: IXMLRoadObstructionList read Get_RoadObstruction;
    property RoadMaintenanceInfo: IXMLRoadMaintenanceInfoList read Get_RoadMaintenanceInfo;
  end;

{ IXMLRoadClassification }

  IXMLRoadClassification = interface(IXMLNode)
    ['{B40FDB52-3782-476B-8E7E-6B51054EE88A}']
    { Property Accessors }
    function Get_RoadClassificationCode: IXMLRoadClassificationCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_RoadClassificationDescription: IXMLS255List;
    { Methods & Properties }
    property RoadClassificationCode: IXMLRoadClassificationCode read Get_RoadClassificationCode;
    property CodeValue: IXMLCodeValue read Get_CodeValue;
    property RoadClassificationDescription: IXMLS255List read Get_RoadClassificationDescription;
  end;

{ IXMLRoadClassificationList }

  IXMLRoadClassificationList = interface(IXMLNodeCollection)
    ['{EAB30246-0B6B-41B8-B976-B696C9DC6B9C}']
    { Methods & Properties }
    function Add: IXMLRoadClassification;
    function Insert(const Index: Integer): IXMLRoadClassification;

    function Get_Item(Index: Integer): IXMLRoadClassification;
    property Items[Index: Integer]: IXMLRoadClassification read Get_Item; default;
  end;

{ IXMLRoadClassificationCode }

  IXMLRoadClassificationCode = interface(IXMLNode)
    ['{DC1FFE68-ADA9-410D-A1A2-D309C33E1689}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLRoadBearingCapacity }

  IXMLRoadBearingCapacity = interface(IXMLMeasurement)
    ['{3066D99B-B090-46F6-85C5-043840A86E55}']
    { Property Accessors }
    function Get_RoadBearingCapacityType: UnicodeString;
    procedure Set_RoadBearingCapacityType(Value: UnicodeString);
    { Methods & Properties }
    property RoadBearingCapacityType: UnicodeString read Get_RoadBearingCapacityType write Set_RoadBearingCapacityType;
  end;

{ IXMLRoadBearingCapacityList }

  IXMLRoadBearingCapacityList = interface(IXMLNodeCollection)
    ['{01D4A7B6-232C-4133-AA37-80CD928E3E9B}']
    { Methods & Properties }
    function Add: IXMLRoadBearingCapacity;
    function Insert(const Index: Integer): IXMLRoadBearingCapacity;

    function Get_Item(Index: Integer): IXMLRoadBearingCapacity;
    property Items[Index: Integer]: IXMLRoadBearingCapacity read Get_Item; default;
  end;

{ IXMLRoadObstruction }

  IXMLRoadObstruction = interface(IXMLNode)
    ['{66F3BE85-68F0-457A-8213-27E075FA7C3C}']
    { Property Accessors }
    function Get_RoadObstructionType: UnicodeString;
    function Get_MapPointName: UnicodeString;
    function Get_MapPointComment: IXMLS255List;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    function Get_RoadSlopePercent: Double;
    function Get_RoadBearingCapacity: IXMLRoadBearingCapacityList;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Height: IXMLMeasurement;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_RoadObstructionType(Value: UnicodeString);
    procedure Set_MapPointName(Value: UnicodeString);
    procedure Set_RoadSlopePercent(Value: Double);
    { Methods & Properties }
    property RoadObstructionType: UnicodeString read Get_RoadObstructionType write Set_RoadObstructionType;
    property MapPointName: UnicodeString read Get_MapPointName write Set_MapPointName;
    property MapPointComment: IXMLS255List read Get_MapPointComment;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
    property RoadSlopePercent: Double read Get_RoadSlopePercent write Set_RoadSlopePercent;
    property RoadBearingCapacity: IXMLRoadBearingCapacityList read Get_RoadBearingCapacity;
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property Height: IXMLMeasurement read Get_Height;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLRoadObstructionList }

  IXMLRoadObstructionList = interface(IXMLNodeCollection)
    ['{0126B0E2-623A-42F9-A5DA-FF6F807AA9B5}']
    { Methods & Properties }
    function Add: IXMLRoadObstruction;
    function Insert(const Index: Integer): IXMLRoadObstruction;

    function Get_Item(Index: Integer): IXMLRoadObstruction;
    property Items[Index: Integer]: IXMLRoadObstruction read Get_Item; default;
  end;

{ IXMLRoadMaintenanceInfo }

  IXMLRoadMaintenanceInfo = interface(IXMLNode)
    ['{A46728DF-416F-4AE8-9CA2-E13CFB4D442F}']
    { Property Accessors }
    function Get_RoadMaintenanceCodeInfo: IXMLCodeInfo;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property RoadMaintenanceCodeInfo: IXMLCodeInfo read Get_RoadMaintenanceCodeInfo;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLRoadMaintenanceInfoList }

  IXMLRoadMaintenanceInfoList = interface(IXMLNodeCollection)
    ['{75BE9CB7-63BA-4740-AFC9-3BB12234E3B7}']
    { Methods & Properties }
    function Add: IXMLRoadMaintenanceInfo;
    function Insert(const Index: Integer): IXMLRoadMaintenanceInfo;

    function Get_Item(Index: Integer): IXMLRoadMaintenanceInfo;
    property Items[Index: Integer]: IXMLRoadMaintenanceInfo read Get_Item; default;
  end;

{ IXMLDeliveryTransitTime }

  IXMLDeliveryTransitTime = interface(IXMLNode)
    ['{5E15E626-DCAA-4EEB-ADAB-F1061D9F2E51}']
    { Property Accessors }
    function Get_Days: LongWord;
    function Get_Hours: LongWord;
    function Get_Minutes: LongWord;
    procedure Set_Days(Value: LongWord);
    procedure Set_Hours(Value: LongWord);
    procedure Set_Minutes(Value: LongWord);
    { Methods & Properties }
    property Days: LongWord read Get_Days write Set_Days;
    property Hours: LongWord read Get_Hours write Set_Hours;
    property Minutes: LongWord read Get_Minutes write Set_Minutes;
  end;

{ IXMLDeliveryDestination }

  IXMLDeliveryDestination = interface(IXMLNode)
    ['{0C258052-3422-4DB4-A7F9-E1EC3F83A4B0}']
    { Property Accessors }
    function Get_IsOptionalDestination: UnicodeString;
    function Get_PriorityOrder: LongWord;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_IsOptionalDestination(Value: UnicodeString);
    procedure Set_PriorityOrder(Value: LongWord);
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property IsOptionalDestination: UnicodeString read Get_IsOptionalDestination write Set_IsOptionalDestination;
    property PriorityOrder: LongWord read Get_PriorityOrder write Set_PriorityOrder;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
    property LocationParty: IXMLLocationParty read Get_LocationParty;
    property SupplyPoint: IXMLSupplyPointList read Get_SupplyPoint;
    property LocationCode: IXMLLocationCode read Get_LocationCode;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
    property MapCoordinates: IXMLMapCoordinatesList read Get_MapCoordinates;
  end;

{ IXMLDeliveryDestinationList }

  IXMLDeliveryDestinationList = interface(IXMLNodeCollection)
    ['{9AE3B88D-2259-4B61-8D5F-52553979DCA7}']
    { Methods & Properties }
    function Add: IXMLDeliveryDestination;
    function Insert(const Index: Integer): IXMLDeliveryDestination;

    function Get_Item(Index: Integer): IXMLDeliveryDestination;
    property Items[Index: Integer]: IXMLDeliveryDestination read Get_Item; default;
  end;

{ IXMLDeliveryLegReference }

  IXMLDeliveryLegReference = interface(IXMLNode)
    ['{1FDCA965-147A-4A33-AE8B-9BD608A64071}']
    { Property Accessors }
    function Get_DeliveryLegReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DeliveryLegReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property DeliveryLegReferenceType: UnicodeString read Get_DeliveryLegReferenceType write Set_DeliveryLegReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDeliveryLegReferenceList }

  IXMLDeliveryLegReferenceList = interface(IXMLNodeCollection)
    ['{513DCB97-056F-484A-8337-1F683D5B1263}']
    { Methods & Properties }
    function Add: IXMLDeliveryLegReference;
    function Insert(const Index: Integer): IXMLDeliveryLegReference;

    function Get_Item(Index: Integer): IXMLDeliveryLegReference;
    property Items[Index: Integer]: IXMLDeliveryLegReference read Get_Item; default;
  end;

{ IXMLTermsOfChartering }

  IXMLTermsOfChartering = interface(IXMLNode)
    ['{5BCA4D3B-E52A-4F81-8CB9-CE30B9E55881}']
    { Property Accessors }
    function Get_TermsOfCharteringType: UnicodeString;
    procedure Set_TermsOfCharteringType(Value: UnicodeString);
    { Methods & Properties }
    property TermsOfCharteringType: UnicodeString read Get_TermsOfCharteringType write Set_TermsOfCharteringType;
  end;

{ IXMLTermsOfCharteringList }

  IXMLTermsOfCharteringList = interface(IXMLNodeCollection)
    ['{110D7E76-0EC1-454F-B9A3-C0663D761F81}']
    { Methods & Properties }
    function Add: IXMLTermsOfChartering;
    function Insert(const Index: Integer): IXMLTermsOfChartering;

    function Get_Item(Index: Integer): IXMLTermsOfChartering;
    property Items[Index: Integer]: IXMLTermsOfChartering read Get_Item; default;
  end;

{ IXMLBusinessChainInfo }

  IXMLBusinessChainInfo = interface(IXMLNode)
    ['{93D9367D-CC90-4AD6-9869-2B83829B8C4C}']
    { Property Accessors }
    function Get_BusinessChainContextType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    function Get_ValidityStatus: UnicodeString;
    function Get_BusinessChainNumber: UnicodeString;
    function Get_BusinessChainDescription: IXMLS255List;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_ValidityPeriod: IXMLValidityPeriod;
    function Get_BusinessChainSequence: IXMLBusinessChainSequenceList;
    procedure Set_BusinessChainContextType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    procedure Set_ValidityStatus(Value: UnicodeString);
    procedure Set_BusinessChainNumber(Value: UnicodeString);
    { Methods & Properties }
    property BusinessChainContextType: UnicodeString read Get_BusinessChainContextType write Set_BusinessChainContextType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
    property ValidityStatus: UnicodeString read Get_ValidityStatus write Set_ValidityStatus;
    property BusinessChainNumber: UnicodeString read Get_BusinessChainNumber write Set_BusinessChainNumber;
    property BusinessChainDescription: IXMLS255List read Get_BusinessChainDescription;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property ValidityPeriod: IXMLValidityPeriod read Get_ValidityPeriod;
    property BusinessChainSequence: IXMLBusinessChainSequenceList read Get_BusinessChainSequence;
  end;

{ IXMLValidityPeriod }

  IXMLValidityPeriod = interface(IXMLNode)
    ['{3FA689E8-8E97-4756-AABA-C5E750AB4D36}']
    { Property Accessors }
    function Get_DateTimeFrom: IXMLDateTimeFrom;
    function Get_DateTimeTo: IXMLDateTimeTo;
    { Methods & Properties }
    property DateTimeFrom: IXMLDateTimeFrom read Get_DateTimeFrom;
    property DateTimeTo: IXMLDateTimeTo read Get_DateTimeTo;
  end;

{ IXMLBusinessChainSequence }

  IXMLBusinessChainSequence = interface(IXMLNode)
    ['{72E28D21-AD22-4CFC-9730-1548E8A41314}']
    { Property Accessors }
    function Get_IsBusinessChainSequenceApplicable: UnicodeString;
    function Get_BusinessChainSequenceNumber: LongWord;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_DocumentRequiredInfo: IXMLDocumentRequiredInfoList;
    procedure Set_IsBusinessChainSequenceApplicable(Value: UnicodeString);
    procedure Set_BusinessChainSequenceNumber(Value: LongWord);
    { Methods & Properties }
    property IsBusinessChainSequenceApplicable: UnicodeString read Get_IsBusinessChainSequenceApplicable write Set_IsBusinessChainSequenceApplicable;
    property BusinessChainSequenceNumber: LongWord read Get_BusinessChainSequenceNumber write Set_BusinessChainSequenceNumber;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property DocumentRequiredInfo: IXMLDocumentRequiredInfoList read Get_DocumentRequiredInfo;
  end;

{ IXMLBusinessChainSequenceList }

  IXMLBusinessChainSequenceList = interface(IXMLNodeCollection)
    ['{806E4AB2-DE2F-4CB7-B1AF-2E7C1FA34A0B}']
    { Methods & Properties }
    function Add: IXMLBusinessChainSequence;
    function Insert(const Index: Integer): IXMLBusinessChainSequence;

    function Get_Item(Index: Integer): IXMLBusinessChainSequence;
    property Items[Index: Integer]: IXMLBusinessChainSequence read Get_Item; default;
  end;

{ IXMLDocumentRequiredInfo }

  IXMLDocumentRequiredInfo = interface(IXMLNode)
    ['{C2407D4F-8FF0-4FAE-860E-249D3FE1B013}']
    { Property Accessors }
    function Get_DocumentName: UnicodeString;
    function Get_DocumentType: UnicodeString;
    function Get_DocumentFormatType: UnicodeString;
    function Get_DocumentExchangeType: UnicodeString;
    function Get_RespondToParty: IXMLTypedPartyList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DocumentName(Value: UnicodeString);
    procedure Set_DocumentType(Value: UnicodeString);
    procedure Set_DocumentFormatType(Value: UnicodeString);
    procedure Set_DocumentExchangeType(Value: UnicodeString);
    { Methods & Properties }
    property DocumentName: UnicodeString read Get_DocumentName write Set_DocumentName;
    property DocumentType: UnicodeString read Get_DocumentType write Set_DocumentType;
    property DocumentFormatType: UnicodeString read Get_DocumentFormatType write Set_DocumentFormatType;
    property DocumentExchangeType: UnicodeString read Get_DocumentExchangeType write Set_DocumentExchangeType;
    property RespondToParty: IXMLTypedPartyList read Get_RespondToParty;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDocumentRequiredInfoList }

  IXMLDocumentRequiredInfoList = interface(IXMLNodeCollection)
    ['{11495287-65EE-4C60-AB2C-D6C94BA24FC1}']
    { Methods & Properties }
    function Add: IXMLDocumentRequiredInfo;
    function Insert(const Index: Integer): IXMLDocumentRequiredInfo;

    function Get_Item(Index: Integer): IXMLDocumentRequiredInfo;
    property Items[Index: Integer]: IXMLDocumentRequiredInfo read Get_Item; default;
  end;

{ IXMLDeliveryMessageLineItem }

  IXMLDeliveryMessageLineItem = interface(IXMLNode)
    ['{4299ABA4-18FB-4332-9E2B-DBDC161CAEDB}']
    { Property Accessors }
    function Get_ShipmentComplete: UnicodeString;
    function Get_InstructionByType: UnicodeString;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_Product: IXMLProductClass;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_NumberOfPackages: LongWord;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
    function Get_BillToParty: IXMLParty;
    function Get_MillCharacteristics: IXMLMillCharacteristics;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_StatisticalGoodsInformation: IXMLStatisticalGoodsInformation;
    function Get_PackageInformation: IXMLPackageInformationClassList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_MeasuringSpecification: IXMLMeasuringSpecificationList;
    function Get_AdditionalItemInfo: IXMLCodeInfoList;
    procedure Set_ShipmentComplete(Value: UnicodeString);
    procedure Set_InstructionByType(Value: UnicodeString);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    procedure Set_NumberOfPackages(Value: LongWord);
    { Methods & Properties }
    property ShipmentComplete: UnicodeString read Get_ShipmentComplete write Set_ShipmentComplete;
    property InstructionByType: UnicodeString read Get_InstructionByType write Set_InstructionByType;
    property DeliveryMessageLineItemNumber: LongWord read Get_DeliveryMessageLineItemNumber write Set_DeliveryMessageLineItemNumber;
    property PurchaseOrderInformation: IXMLPurchaseOrderInformation read Get_PurchaseOrderInformation;
    property PurchaseOrderLineItemNumber: LongWord read Get_PurchaseOrderLineItemNumber write Set_PurchaseOrderLineItemNumber;
    property DeliveryMessageReference: IXMLDeliveryMessageReferenceList read Get_DeliveryMessageReference;
    property Product: IXMLProductClass read Get_Product;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property NumberOfPackages: LongWord read Get_NumberOfPackages write Set_NumberOfPackages;
    property SupplyPoint: IXMLSupplyPointList read Get_SupplyPoint;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property TransportOtherInstructions: IXMLTransportOtherInstructionsList read Get_TransportOtherInstructions;
    property TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList read Get_TransportLoadingCharacteristics;
    property TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList read Get_TransportUnloadingCharacteristics;
    property BillToParty: IXMLParty read Get_BillToParty;
    property MillCharacteristics: IXMLMillCharacteristics read Get_MillCharacteristics;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property StatisticalGoodsInformation: IXMLStatisticalGoodsInformation read Get_StatisticalGoodsInformation;
    property PackageInformation: IXMLPackageInformationClassList read Get_PackageInformation;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
    property MeasuringSpecification: IXMLMeasuringSpecificationList read Get_MeasuringSpecification;
    property AdditionalItemInfo: IXMLCodeInfoList read Get_AdditionalItemInfo;
  end;

{ IXMLInventoryClass }

  IXMLInventoryClass = interface(IXMLNode)
    ['{669F557A-CE8E-4E73-B769-35B0D5A8835A}']
    { Property Accessors }
    function Get_InventoryStatusType: UnicodeString;
    function Get_InventoryOwnedBy: UnicodeString;
    function Get_InventoryClassCode: IXMLInventoryClassCodeList;
    function Get_InventoryClassDescription: IXMLS72List;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_InventoryStatusType(Value: UnicodeString);
    procedure Set_InventoryOwnedBy(Value: UnicodeString);
    { Methods & Properties }
    property InventoryStatusType: UnicodeString read Get_InventoryStatusType write Set_InventoryStatusType;
    property InventoryOwnedBy: UnicodeString read Get_InventoryOwnedBy write Set_InventoryOwnedBy;
    property InventoryClassCode: IXMLInventoryClassCodeList read Get_InventoryClassCode;
    property InventoryClassDescription: IXMLS72List read Get_InventoryClassDescription;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLInventoryClassCode }

  IXMLInventoryClassCode = interface(IXMLNode)
    ['{EB8C2723-1726-4485-8459-DF6B49997C72}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    function Get_InventoryClassLevel: LongWord;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_InventoryClassLevel(Value: LongWord);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property InventoryClassLevel: LongWord read Get_InventoryClassLevel write Set_InventoryClassLevel;
  end;

{ IXMLInventoryClassCodeList }

  IXMLInventoryClassCodeList = interface(IXMLNodeCollection)
    ['{65FBE037-6B1F-423C-81B3-88E179EFD559}']
    { Methods & Properties }
    function Add: IXMLInventoryClassCode;
    function Insert(const Index: Integer): IXMLInventoryClassCode;

    function Get_Item(Index: Integer): IXMLInventoryClassCode;
    property Items[Index: Integer]: IXMLInventoryClassCode read Get_Item; default;
  end;

{ IXMLPackageInformationClass }

  IXMLPackageInformationClass = interface(IXMLNode)
    ['{B891C0A4-9163-4FDC-AD70-E1F92B74ADB4}']
    { Property Accessors }
    function Get_PackageType: UnicodeString;
    function Get_MixedProductPalletIndicator: UnicodeString;
    function Get_PackageLevel: Double;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_SupplierMarks: IXMLS30List;
    function Get_RawMaterialSet: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_PackageCharacteristics: IXMLPackageCharacteristics;
    function Get_BaleItem: IXMLBaleItemList;
    function Get_BoxItem: IXMLBoxItemList;
    function Get_ReelItem: IXMLReelItemList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItemList;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_WoodItem: IXMLWoodItemList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    function Get_PackageReference: IXMLPackageReferenceList;
    procedure Set_PackageType(Value: UnicodeString);
    procedure Set_MixedProductPalletIndicator(Value: UnicodeString);
    procedure Set_PackageLevel(Value: Double);
    procedure Set_MachineID(Value: UnicodeString);
    { Methods & Properties }
    property PackageType: UnicodeString read Get_PackageType write Set_PackageType;
    property MixedProductPalletIndicator: UnicodeString read Get_MixedProductPalletIndicator write Set_MixedProductPalletIndicator;
    property PackageLevel: Double read Get_PackageLevel write Set_PackageLevel;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property SupplierMarks: IXMLS30List read Get_SupplierMarks;
    property RawMaterialSet: IXMLIdentifierS60List read Get_RawMaterialSet;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: UnicodeString read Get_MachineID write Set_MachineID;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property PackageCharacteristics: IXMLPackageCharacteristics read Get_PackageCharacteristics;
    property BaleItem: IXMLBaleItemList read Get_BaleItem;
    property BoxItem: IXMLBoxItemList read Get_BoxItem;
    property ReelItem: IXMLReelItemList read Get_ReelItem;
    property ReamItem: IXMLReamItemList read Get_ReamItem;
    property SheetItem: IXMLSheetItemList read Get_SheetItem;
    property UnitItem: IXMLUnitItemList read Get_UnitItem;
    property WoodItem: IXMLWoodItemList read Get_WoodItem;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property PackageReference: IXMLPackageReferenceList read Get_PackageReference;
  end;

{ IXMLPackageInformationClassList }

  IXMLPackageInformationClassList = interface(IXMLNodeCollection)
    ['{3EAC6DA6-4C65-4D77-AB33-6969F8246D96}']
    { Methods & Properties }
    function Add: IXMLPackageInformationClass;
    function Insert(const Index: Integer): IXMLPackageInformationClass;

    function Get_Item(Index: Integer): IXMLPackageInformationClass;
    property Items[Index: Integer]: IXMLPackageInformationClass read Get_Item; default;
  end;

{ IXMLPackageCharacteristics }

  IXMLPackageCharacteristics = interface(IXMLNode)
    ['{2D24AE9D-999D-44AD-9ABF-8772EE6343B2}']
    { Property Accessors }
    function Get_Height: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    function Get_PropertyValue: IXMLPropertyValueList;
    { Methods & Properties }
    property Height: IXMLMeasurement read Get_Height;
    property Width: IXMLMeasurement read Get_Width;
    property Length: IXMLMeasurement read Get_Length;
    property LengthCutDescription: IXMLLengthCutDescription read Get_LengthCutDescription;
    property PropertyValue: IXMLPropertyValueList read Get_PropertyValue;
  end;

{ IXMLBaleItem }

  IXMLBaleItem = interface(IXMLNode)
    ['{2D06FC0F-2FD5-48FC-9AB4-28D5397E67D6}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_BaleCharacteristics: IXMLBaleCharacteristics;
    function Get_BaleReference: IXMLBaleReferenceList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_MachineID(Value: UnicodeString);
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: UnicodeString read Get_MachineID write Set_MachineID;
    property Product: IXMLProductClass read Get_Product;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property BaleCharacteristics: IXMLBaleCharacteristics read Get_BaleCharacteristics;
    property BaleReference: IXMLBaleReferenceList read Get_BaleReference;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLBaleItemList }

  IXMLBaleItemList = interface(IXMLNodeCollection)
    ['{F79A784D-F965-4518-9902-C67B0B98FE06}']
    { Methods & Properties }
    function Add: IXMLBaleItem;
    function Insert(const Index: Integer): IXMLBaleItem;

    function Get_Item(Index: Integer): IXMLBaleItem;
    property Items[Index: Integer]: IXMLBaleItem read Get_Item; default;
  end;

{ IXMLBaleCharacteristics }

  IXMLBaleCharacteristics = interface(IXMLNode)
    ['{29D5AC00-39D2-4235-AAD1-A0F5FC3C9D30}']
    { Property Accessors }
    function Get_BaleHeight: IXMLMeasurement;
    function Get_BaleWidth: IXMLMeasurement;
    function Get_BaleDepth: IXMLMeasurement;
    function Get_DateMade: IXMLDateMade;
    function Get_DateFinished: IXMLDateFinished;
    { Methods & Properties }
    property BaleHeight: IXMLMeasurement read Get_BaleHeight;
    property BaleWidth: IXMLMeasurement read Get_BaleWidth;
    property BaleDepth: IXMLMeasurement read Get_BaleDepth;
    property DateMade: IXMLDateMade read Get_DateMade;
    property DateFinished: IXMLDateFinished read Get_DateFinished;
  end;

{ IXMLDateMade }

  IXMLDateMade = interface(IXMLNode)
    ['{0C7D1BF4-02B7-45C8-A7E7-8BF4BFE75A26}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDateFinished }

  IXMLDateFinished = interface(IXMLNode)
    ['{DD0A2F63-FA77-4FE8-9B3E-5D6E9683B19E}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLBaleReference }

  IXMLBaleReference = interface(IXMLNode)
    ['{148DF075-9D4D-48F4-95FE-37C0D6960780}']
    { Property Accessors }
    function Get_BaleReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_BaleReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property BaleReferenceType: UnicodeString read Get_BaleReferenceType write Set_BaleReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLBaleReferenceList }

  IXMLBaleReferenceList = interface(IXMLNodeCollection)
    ['{657BF846-3334-4DF1-9E09-27507729221E}']
    { Methods & Properties }
    function Add: IXMLBaleReference;
    function Insert(const Index: Integer): IXMLBaleReference;

    function Get_Item(Index: Integer): IXMLBaleReference;
    property Items[Index: Integer]: IXMLBaleReference read Get_Item; default;
  end;

{ IXMLBoxItem }

  IXMLBoxItem = interface(IXMLNode)
    ['{1D2F653F-75DB-4967-8D6D-4D19A363AE4D}']
    { Property Accessors }
    function Get_MixProductIndicator: UnicodeString;
    function Get_IsPartialIndicator: UnicodeString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItem;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_BoxReference: IXMLBoxReferenceList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_MixProductIndicator(Value: UnicodeString);
    procedure Set_IsPartialIndicator(Value: UnicodeString);
    procedure Set_MachineID(Value: UnicodeString);
    { Methods & Properties }
    property MixProductIndicator: UnicodeString read Get_MixProductIndicator write Set_MixProductIndicator;
    property IsPartialIndicator: UnicodeString read Get_IsPartialIndicator write Set_IsPartialIndicator;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: UnicodeString read Get_MachineID write Set_MachineID;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property ReamItem: IXMLReamItemList read Get_ReamItem;
    property SheetItem: IXMLSheetItem read Get_SheetItem;
    property UnitItem: IXMLUnitItemList read Get_UnitItem;
    property BoxCharacteristics: IXMLBoxCharacteristics read Get_BoxCharacteristics;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property BoxReference: IXMLBoxReferenceList read Get_BoxReference;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLBoxItemList }

  IXMLBoxItemList = interface(IXMLNodeCollection)
    ['{36EC8BEB-5C3A-4064-8469-F601569F9B13}']
    { Methods & Properties }
    function Add: IXMLBoxItem;
    function Insert(const Index: Integer): IXMLBoxItem;

    function Get_Item(Index: Integer): IXMLBoxItem;
    property Items[Index: Integer]: IXMLBoxItem read Get_Item; default;
  end;

{ IXMLReamItem }

  IXMLReamItem = interface(IXMLNode)
    ['{DE603865-A5E0-4EEA-AC49-8DEB66D238BC}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_SheetItem: IXMLSheetItem;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property SheetItem: IXMLSheetItem read Get_SheetItem;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLReamItemList }

  IXMLReamItemList = interface(IXMLNodeCollection)
    ['{AE8E2B71-0A86-414A-B0A9-3F984D216C6C}']
    { Methods & Properties }
    function Add: IXMLReamItem;
    function Insert(const Index: Integer): IXMLReamItem;

    function Get_Item(Index: Integer): IXMLReamItem;
    property Items[Index: Integer]: IXMLReamItem read Get_Item; default;
  end;

{ IXMLSheetItem }

  IXMLSheetItem = interface(IXMLNode)
    ['{229543BD-8EBD-4788-8C45-5B5E8E175EDC}']
    { Property Accessors }
    function Get_DateSheeted: IXMLDateSheeted;
    function Get_DateFinished: IXMLDateFinished;
    { Methods & Properties }
    property DateSheeted: IXMLDateSheeted read Get_DateSheeted;
    property DateFinished: IXMLDateFinished read Get_DateFinished;
  end;

{ IXMLSheetItemList }

  IXMLSheetItemList = interface(IXMLNodeCollection)
    ['{9DF80EE6-9E9C-4881-937D-7785E697EF95}']
    { Methods & Properties }
    function Add: IXMLSheetItem;
    function Insert(const Index: Integer): IXMLSheetItem;

    function Get_Item(Index: Integer): IXMLSheetItem;
    property Items[Index: Integer]: IXMLSheetItem read Get_Item; default;
  end;

{ IXMLDateSheeted }

  IXMLDateSheeted = interface(IXMLNode)
    ['{76083425-48D2-410E-A184-5AE0D1A95FC5}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLUnitItem }

  IXMLUnitItem = interface(IXMLNode)
    ['{C6D1354B-C4DB-4119-A5D3-9EE833986194}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_Product: IXMLProductClass;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_UnitReference: IXMLUnitReferenceList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property Product: IXMLProductClass read Get_Product;
    property UnitCharacteristics: IXMLUnitCharacteristics read Get_UnitCharacteristics;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property UnitReference: IXMLUnitReferenceList read Get_UnitReference;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLUnitItemList }

  IXMLUnitItemList = interface(IXMLNodeCollection)
    ['{95B849B0-F345-4FAB-B8DB-2C88F778FF12}']
    { Methods & Properties }
    function Add: IXMLUnitItem;
    function Insert(const Index: Integer): IXMLUnitItem;

    function Get_Item(Index: Integer): IXMLUnitItem;
    property Items[Index: Integer]: IXMLUnitItem read Get_Item; default;
  end;

{ IXMLUnitReference }

  IXMLUnitReference = interface(IXMLNode)
    ['{F4CD57CA-01FE-46D7-AD01-5515C3D52040}']
    { Property Accessors }
    function Get_UnitReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_UnitReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property UnitReferenceType: UnicodeString read Get_UnitReferenceType write Set_UnitReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLUnitReferenceList }

  IXMLUnitReferenceList = interface(IXMLNodeCollection)
    ['{7DCF400C-60A5-4065-8CF3-0934A86388D6}']
    { Methods & Properties }
    function Add: IXMLUnitReference;
    function Insert(const Index: Integer): IXMLUnitReference;

    function Get_Item(Index: Integer): IXMLUnitReference;
    property Items[Index: Integer]: IXMLUnitReference read Get_Item; default;
  end;

{ IXMLBoxReference }

  IXMLBoxReference = interface(IXMLNode)
    ['{1184F149-AA86-45FE-9AD7-49AC22A4F4EA}']
    { Property Accessors }
    function Get_BoxReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_BoxReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property BoxReferenceType: UnicodeString read Get_BoxReferenceType write Set_BoxReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLBoxReferenceList }

  IXMLBoxReferenceList = interface(IXMLNodeCollection)
    ['{75D72942-2806-4FE7-83D8-96CA15190F37}']
    { Methods & Properties }
    function Add: IXMLBoxReference;
    function Insert(const Index: Integer): IXMLBoxReference;

    function Get_Item(Index: Integer): IXMLBoxReference;
    property Items[Index: Integer]: IXMLBoxReference read Get_Item; default;
  end;

{ IXMLReelItem }

  IXMLReelItem = interface(IXMLNode)
    ['{7B320C6C-43C5-41E4-A969-884FE7302876}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_MillOrderNumber: UnicodeString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_MachineID(Value: UnicodeString);
    procedure Set_MillOrderNumber(Value: UnicodeString);
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: UnicodeString read Get_MachineID write Set_MachineID;
    property DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics read Get_DeliveryMessageReelCharacteristics;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property MillOrderNumber: UnicodeString read Get_MillOrderNumber write Set_MillOrderNumber;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLReelItemList }

  IXMLReelItemList = interface(IXMLNodeCollection)
    ['{EBA71F33-CB0A-4667-8241-D33C036D9493}']
    { Methods & Properties }
    function Add: IXMLReelItem;
    function Insert(const Index: Integer): IXMLReelItem;

    function Get_Item(Index: Integer): IXMLReelItem;
    property Items[Index: Integer]: IXMLReelItem read Get_Item; default;
  end;

{ IXMLDeliveryMessageReelCharacteristics }

  IXMLDeliveryMessageReelCharacteristics = interface(IXMLNode)
    ['{0BE246E5-DC8C-4856-9829-998AE9AFC61E}']
    { Property Accessors }
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MachineID: UnicodeString;
    function Get_TambourID: UnicodeString;
    function Get_SetNumber: LongWord;
    function Get_SetPosition: LongWord;
    function Get_TotalSetPositions: LongWord;
    function Get_TotalSetNumbers: LongWord;
    function Get_NumberOfMillJoins: LongWord;
    function Get_MillJoinLocation: IXMLMillJoinLocationList;
    function Get_DateFinished: IXMLDateFinished;
    function Get_DateWound: IXMLDateWound;
    function Get_Caliper: IXMLCaliper;
    procedure Set_MachineID(Value: UnicodeString);
    procedure Set_TambourID(Value: UnicodeString);
    procedure Set_SetNumber(Value: LongWord);
    procedure Set_SetPosition(Value: LongWord);
    procedure Set_TotalSetPositions(Value: LongWord);
    procedure Set_TotalSetNumbers(Value: LongWord);
    procedure Set_NumberOfMillJoins(Value: LongWord);
    { Methods & Properties }
    property ReelWidth: IXMLMeasurement read Get_ReelWidth;
    property ReelDiameter: IXMLMeasurement read Get_ReelDiameter;
    property ReelLength: IXMLMeasurement read Get_ReelLength;
    property MachineID: UnicodeString read Get_MachineID write Set_MachineID;
    property TambourID: UnicodeString read Get_TambourID write Set_TambourID;
    property SetNumber: LongWord read Get_SetNumber write Set_SetNumber;
    property SetPosition: LongWord read Get_SetPosition write Set_SetPosition;
    property TotalSetPositions: LongWord read Get_TotalSetPositions write Set_TotalSetPositions;
    property TotalSetNumbers: LongWord read Get_TotalSetNumbers write Set_TotalSetNumbers;
    property NumberOfMillJoins: LongWord read Get_NumberOfMillJoins write Set_NumberOfMillJoins;
    property MillJoinLocation: IXMLMillJoinLocationList read Get_MillJoinLocation;
    property DateFinished: IXMLDateFinished read Get_DateFinished;
    property DateWound: IXMLDateWound read Get_DateWound;
    property Caliper: IXMLCaliper read Get_Caliper;
  end;

{ IXMLMillJoinLocation }

  IXMLMillJoinLocation = interface(IXMLNode)
    ['{E43610DF-A6DD-41AB-89F1-4B3024E543DC}']
    { Property Accessors }
    function Get_MillJoinNumber: LongWord;
    function Get_LengthFromCore: IXMLMeasurement;
    function Get_DistanceFromCore: IXMLMeasurement;
    procedure Set_MillJoinNumber(Value: LongWord);
    { Methods & Properties }
    property MillJoinNumber: LongWord read Get_MillJoinNumber write Set_MillJoinNumber;
    property LengthFromCore: IXMLMeasurement read Get_LengthFromCore;
    property DistanceFromCore: IXMLMeasurement read Get_DistanceFromCore;
  end;

{ IXMLMillJoinLocationList }

  IXMLMillJoinLocationList = interface(IXMLNodeCollection)
    ['{AA76317D-8528-4123-80EF-D688DBA0E910}']
    { Methods & Properties }
    function Add: IXMLMillJoinLocation;
    function Insert(const Index: Integer): IXMLMillJoinLocation;

    function Get_Item(Index: Integer): IXMLMillJoinLocation;
    property Items[Index: Integer]: IXMLMillJoinLocation read Get_Item; default;
  end;

{ IXMLDateWound }

  IXMLDateWound = interface(IXMLNode)
    ['{6215CF38-E228-4662-BDD0-DB503DCB40FB}']
    { Property Accessors }
    function Get_RewoundIndicator: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_RewoundIndicator(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property RewoundIndicator: UnicodeString read Get_RewoundIndicator write Set_RewoundIndicator;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLWoodItem }

  IXMLWoodItem = interface(IXMLNode)
    ['{F2E65CCE-EA73-4F97-85D5-0048CE8469C5}']
    { Property Accessors }
    function Get_Product: IXMLProductClass;
    function Get_PackagingInformation: IXMLProductPackagingClass;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    { Methods & Properties }
    property Product: IXMLProductClass read Get_Product;
    property PackagingInformation: IXMLProductPackagingClass read Get_PackagingInformation;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
  end;

{ IXMLWoodItemList }

  IXMLWoodItemList = interface(IXMLNodeCollection)
    ['{83E5B523-8B53-47B8-9843-EEFD2A7CEF99}']
    { Methods & Properties }
    function Add: IXMLWoodItem;
    function Insert(const Index: Integer): IXMLWoodItem;

    function Get_Item(Index: Integer): IXMLWoodItem;
    property Items[Index: Integer]: IXMLWoodItem read Get_Item; default;
  end;

{ IXMLPackageReference }

  IXMLPackageReference = interface(IXMLNode)
    ['{81A8F844-367C-42BF-A308-5443D7A86B84}']
    { Property Accessors }
    function Get_PackageReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_PackageReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property PackageReferenceType: UnicodeString read Get_PackageReferenceType write Set_PackageReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLPackageReferenceList }

  IXMLPackageReferenceList = interface(IXMLNodeCollection)
    ['{ED1FF40F-F3ED-4139-8667-F9122826AE3F}']
    { Methods & Properties }
    function Add: IXMLPackageReference;
    function Insert(const Index: Integer): IXMLPackageReference;

    function Get_Item(Index: Integer): IXMLPackageReference;
    property Items[Index: Integer]: IXMLPackageReference read Get_Item; default;
  end;

{ IXMLMeasuringSpecification }

  IXMLMeasuringSpecification = interface(IXMLNode)
    ['{7E598093-AF3C-4F94-8F35-13406D9E16B0}']
    { Property Accessors }
    function Get_MeasuringType: UnicodeString;
    function Get_PrioritisedMeasuringType: UnicodeString;
    function Get_CompensationMeasuringType: UnicodeString;
    function Get_MeasuringParty: IXMLParty;
    function Get_MeasuringLocation: IXMLMeasuringLocation;
    function Get_MeasuringReference: IXMLMeasuringReferenceList;
    function Get_MeasuringCodeInfo: IXMLMeasuringCodeInfoList;
    function Get_MeasuringCode: IXMLMeasuringCode;
    function Get_MeasuringDescription: IXMLS255List;
    function Get_MeasuringProduct: IXMLMeasuringProduct;
    function Get_MeasurementSpecification: IXMLMeasurementSpecification;
    procedure Set_MeasuringType(Value: UnicodeString);
    procedure Set_PrioritisedMeasuringType(Value: UnicodeString);
    procedure Set_CompensationMeasuringType(Value: UnicodeString);
    { Methods & Properties }
    property MeasuringType: UnicodeString read Get_MeasuringType write Set_MeasuringType;
    property PrioritisedMeasuringType: UnicodeString read Get_PrioritisedMeasuringType write Set_PrioritisedMeasuringType;
    property CompensationMeasuringType: UnicodeString read Get_CompensationMeasuringType write Set_CompensationMeasuringType;
    property MeasuringParty: IXMLParty read Get_MeasuringParty;
    property MeasuringLocation: IXMLMeasuringLocation read Get_MeasuringLocation;
    property MeasuringReference: IXMLMeasuringReferenceList read Get_MeasuringReference;
    property MeasuringCodeInfo: IXMLMeasuringCodeInfoList read Get_MeasuringCodeInfo;
    property MeasuringCode: IXMLMeasuringCode read Get_MeasuringCode;
    property MeasuringDescription: IXMLS255List read Get_MeasuringDescription;
    property MeasuringProduct: IXMLMeasuringProduct read Get_MeasuringProduct;
    property MeasurementSpecification: IXMLMeasurementSpecification read Get_MeasurementSpecification;
  end;

{ IXMLMeasuringSpecificationList }

  IXMLMeasuringSpecificationList = interface(IXMLNodeCollection)
    ['{8415F093-E27F-4D15-B3A9-43E8E54E4311}']
    { Methods & Properties }
    function Add: IXMLMeasuringSpecification;
    function Insert(const Index: Integer): IXMLMeasuringSpecification;

    function Get_Item(Index: Integer): IXMLMeasuringSpecification;
    property Items[Index: Integer]: IXMLMeasuringSpecification read Get_Item; default;
  end;

{ IXMLMeasuringLocation }

  IXMLMeasuringLocation = interface(IXMLNode)
    ['{A615237A-4DB5-43F7-A9AC-BF89FB8D38A3}']
    { Property Accessors }
    function Get_LocationParty: IXMLLocationParty;
    function Get_MeasuringUnitIdentifier: IXMLMeasuringUnitIdentifierList;
    function Get_MeasuringUnitBrandAndModel: IXMLMeasuringUnitBrandAndModel;
    function Get_MeasuringEquipment: IXMLMeasuringEquipmentList;
    function Get_MeasuringLineID: UnicodeString;
    procedure Set_MeasuringLineID(Value: UnicodeString);
    { Methods & Properties }
    property LocationParty: IXMLLocationParty read Get_LocationParty;
    property MeasuringUnitIdentifier: IXMLMeasuringUnitIdentifierList read Get_MeasuringUnitIdentifier;
    property MeasuringUnitBrandAndModel: IXMLMeasuringUnitBrandAndModel read Get_MeasuringUnitBrandAndModel;
    property MeasuringEquipment: IXMLMeasuringEquipmentList read Get_MeasuringEquipment;
    property MeasuringLineID: UnicodeString read Get_MeasuringLineID write Set_MeasuringLineID;
  end;

{ IXMLMeasuringUnitIdentifier }

  IXMLMeasuringUnitIdentifier = interface(IXMLNode)
    ['{C29B9FF6-E32F-425D-B6A5-417FDBBD0945}']
    { Property Accessors }
    function Get_MeasuringUnitIdentifierType: UnicodeString;
    function Get_Agency: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    procedure Set_MeasuringUnitIdentifierType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    { Methods & Properties }
    property MeasuringUnitIdentifierType: UnicodeString read Get_MeasuringUnitIdentifierType write Set_MeasuringUnitIdentifierType;
    property Agency: UnicodeString read Get_Agency write Set_Agency;
    property StateOrProvince: UnicodeString read Get_StateOrProvince write Set_StateOrProvince;
    property ISOCountryCode: UnicodeString read Get_ISOCountryCode write Set_ISOCountryCode;
    property ISOCountryCodeAlpha3: UnicodeString read Get_ISOCountryCodeAlpha3 write Set_ISOCountryCodeAlpha3;
    property ISOCountryCodeNumeric: UnicodeString read Get_ISOCountryCodeNumeric write Set_ISOCountryCodeNumeric;
  end;

{ IXMLMeasuringUnitIdentifierList }

  IXMLMeasuringUnitIdentifierList = interface(IXMLNodeCollection)
    ['{F519888C-D74F-4335-B7E1-B7D82F872554}']
    { Methods & Properties }
    function Add: IXMLMeasuringUnitIdentifier;
    function Insert(const Index: Integer): IXMLMeasuringUnitIdentifier;

    function Get_Item(Index: Integer): IXMLMeasuringUnitIdentifier;
    property Items[Index: Integer]: IXMLMeasuringUnitIdentifier read Get_Item; default;
  end;

{ IXMLMeasuringUnitBrandAndModel }

  IXMLMeasuringUnitBrandAndModel = interface(IXMLNode)
    ['{6B621891-7355-4974-B138-F79BDC2A4BCE}']
    { Property Accessors }
    function Get_Brand: UnicodeString;
    function Get_Model: IXMLModel;
    procedure Set_Brand(Value: UnicodeString);
    { Methods & Properties }
    property Brand: UnicodeString read Get_Brand write Set_Brand;
    property Model: IXMLModel read Get_Model;
  end;

{ IXMLMeasuringEquipment }

  IXMLMeasuringEquipment = interface(IXMLNode)
    ['{7598A18E-C711-4E25-A3E7-62379281BDA2}']
    { Property Accessors }
    function Get_MeasuringEquipmentCode: IXMLMeasuringEquipmentCodeList;
    function Get_CodeValue: IXMLCodeValueList;
    function Get_MeasuringEquipmentDescription: IXMLS72List;
    function Get_MeasurementSystem: UnicodeString;
    function Get_MeasurementModule: IXMLMeasurementModule;
    function Get_Calibration: IXMLCalibration;
    procedure Set_MeasurementSystem(Value: UnicodeString);
    { Methods & Properties }
    property MeasuringEquipmentCode: IXMLMeasuringEquipmentCodeList read Get_MeasuringEquipmentCode;
    property CodeValue: IXMLCodeValueList read Get_CodeValue;
    property MeasuringEquipmentDescription: IXMLS72List read Get_MeasuringEquipmentDescription;
    property MeasurementSystem: UnicodeString read Get_MeasurementSystem write Set_MeasurementSystem;
    property MeasurementModule: IXMLMeasurementModule read Get_MeasurementModule;
    property Calibration: IXMLCalibration read Get_Calibration;
  end;

{ IXMLMeasuringEquipmentList }

  IXMLMeasuringEquipmentList = interface(IXMLNodeCollection)
    ['{604D7289-9330-4454-96C3-2EC4BC3BE4D7}']
    { Methods & Properties }
    function Add: IXMLMeasuringEquipment;
    function Insert(const Index: Integer): IXMLMeasuringEquipment;

    function Get_Item(Index: Integer): IXMLMeasuringEquipment;
    property Items[Index: Integer]: IXMLMeasuringEquipment read Get_Item; default;
  end;

{ IXMLMeasuringEquipmentCode }

  IXMLMeasuringEquipmentCode = interface(IXMLNode)
    ['{53800885-A01E-4CA7-B0BB-F295A3B7DC8D}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLMeasuringEquipmentCodeList }

  IXMLMeasuringEquipmentCodeList = interface(IXMLNodeCollection)
    ['{B7166A65-A4D9-4A0B-BA3E-E5BF91769035}']
    { Methods & Properties }
    function Add: IXMLMeasuringEquipmentCode;
    function Insert(const Index: Integer): IXMLMeasuringEquipmentCode;

    function Get_Item(Index: Integer): IXMLMeasuringEquipmentCode;
    property Items[Index: Integer]: IXMLMeasuringEquipmentCode read Get_Item; default;
  end;

{ IXMLMeasurementModule }

  IXMLMeasurementModule = interface(IXMLNode)
    ['{1A840603-1DDA-4E34-B23B-762CC0CB1FDB}']
    { Property Accessors }
    function Get_BrandName: UnicodeString;
    function Get_ModelYear: UnicodeString;
    procedure Set_BrandName(Value: UnicodeString);
    procedure Set_ModelYear(Value: UnicodeString);
    { Methods & Properties }
    property BrandName: UnicodeString read Get_BrandName write Set_BrandName;
    property ModelYear: UnicodeString read Get_ModelYear write Set_ModelYear;
  end;

{ IXMLCalibration }

  IXMLCalibration = interface(IXMLNode)
    ['{99F24964-E702-4214-A1BE-9357BE3FBB8F}']
    { Property Accessors }
    function Get_CalibrationNumber: UnicodeString;
    function Get_CalibrationDescription: IXMLS255List;
    function Get_CalibrationDate: IXMLCalibrationDate;
    procedure Set_CalibrationNumber(Value: UnicodeString);
    { Methods & Properties }
    property CalibrationNumber: UnicodeString read Get_CalibrationNumber write Set_CalibrationNumber;
    property CalibrationDescription: IXMLS255List read Get_CalibrationDescription;
    property CalibrationDate: IXMLCalibrationDate read Get_CalibrationDate;
  end;

{ IXMLCalibrationDate }

  IXMLCalibrationDate = interface(IXMLNode)
    ['{066A7547-5B5B-4F0D-BBF4-3C0D6E1D9281}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLMeasuringReference }

  IXMLMeasuringReference = interface(IXMLNode)
    ['{5D4BD40F-4350-4FA6-9B35-EED1BCC72393}']
    { Property Accessors }
    function Get_MeasuringReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_MeasuringReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property MeasuringReferenceType: UnicodeString read Get_MeasuringReferenceType write Set_MeasuringReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLMeasuringReferenceList }

  IXMLMeasuringReferenceList = interface(IXMLNodeCollection)
    ['{FA1A630C-9AF2-4500-BE51-F9177B424270}']
    { Methods & Properties }
    function Add: IXMLMeasuringReference;
    function Insert(const Index: Integer): IXMLMeasuringReference;

    function Get_Item(Index: Integer): IXMLMeasuringReference;
    property Items[Index: Integer]: IXMLMeasuringReference read Get_Item; default;
  end;

{ IXMLMeasuringCodeInfo }

  IXMLMeasuringCodeInfo = interface(IXMLCodeInfo)
    ['{36F8E7D5-6189-4553-A264-1AD42BA6968B}']
    { Property Accessors }
    function Get_MeasuringCodeType: UnicodeString;
    procedure Set_MeasuringCodeType(Value: UnicodeString);
    { Methods & Properties }
    property MeasuringCodeType: UnicodeString read Get_MeasuringCodeType write Set_MeasuringCodeType;
  end;

{ IXMLMeasuringCodeInfoList }

  IXMLMeasuringCodeInfoList = interface(IXMLNodeCollection)
    ['{1A19B36D-856F-40A9-A16E-DAB710FD47AA}']
    { Methods & Properties }
    function Add: IXMLMeasuringCodeInfo;
    function Insert(const Index: Integer): IXMLMeasuringCodeInfo;

    function Get_Item(Index: Integer): IXMLMeasuringCodeInfo;
    property Items[Index: Integer]: IXMLMeasuringCodeInfo read Get_Item; default;
  end;

{ IXMLMeasuringCode }

  IXMLMeasuringCode = interface(IXMLNode)
    ['{6F8D47CB-EF70-4C30-8039-24135C43CAE1}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLMeasuringProduct }

  IXMLMeasuringProduct = interface(IXMLNode)
    ['{FC0FDAF5-CD3E-46AD-8FFD-3BC332CC4024}']
    { Property Accessors }
    function Get_Product: IXMLProductClass;
    { Methods & Properties }
    property Product: IXMLProductClass read Get_Product;
  end;

{ IXMLMeasurementSpecification }

  IXMLMeasurementSpecification = interface(IXMLNode)
    ['{3067F8B4-23FB-4612-B4B8-2B2BFEFF9778}']
    { Property Accessors }
    function Get_PropertySpecification: IXMLPropertySpecificationList;
    function Get_QuantitySpecification: IXMLQuantitySpecificationList;
    { Methods & Properties }
    property PropertySpecification: IXMLPropertySpecificationList read Get_PropertySpecification;
    property QuantitySpecification: IXMLQuantitySpecificationList read Get_QuantitySpecification;
  end;

{ IXMLPropertySpecification }

  IXMLPropertySpecification = interface(IXMLNode)
    ['{D6F03607-9D99-4820-B237-0CFCE36BE5C7}']
    { Property Accessors }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_ValueType: UnicodeString;
    function Get_UOM: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_PropertySubSpecification: IXMLPropertySubSpecificationList;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_ValueType(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
    { Methods & Properties }
    property PropertyType: UnicodeString read Get_PropertyType write Set_PropertyType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
    property ValueType: UnicodeString read Get_ValueType write Set_ValueType;
    property UOM: UnicodeString read Get_UOM write Set_UOM;
    property ItemType: UnicodeString read Get_ItemType write Set_ItemType;
    property PositionOnItem: IXMLPositionOnItem read Get_PositionOnItem;
    property PropertySubSpecification: IXMLPropertySubSpecificationList read Get_PropertySubSpecification;
  end;

{ IXMLPropertySpecificationList }

  IXMLPropertySpecificationList = interface(IXMLNodeCollection)
    ['{3D077A1A-E303-40FC-840F-34FF1F8B174E}']
    { Methods & Properties }
    function Add: IXMLPropertySpecification;
    function Insert(const Index: Integer): IXMLPropertySpecification;

    function Get_Item(Index: Integer): IXMLPropertySpecification;
    property Items[Index: Integer]: IXMLPropertySpecification read Get_Item; default;
  end;

{ IXMLPropertySubSpecification }

  IXMLPropertySubSpecification = interface(IXMLNode)
    ['{FE7C0093-48DA-48CF-A4CC-BC8BF59316FD}']
    { Property Accessors }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_ValueType: UnicodeString;
    function Get_UOM: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_ValueType(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
    { Methods & Properties }
    property PropertyType: UnicodeString read Get_PropertyType write Set_PropertyType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
    property ValueType: UnicodeString read Get_ValueType write Set_ValueType;
    property UOM: UnicodeString read Get_UOM write Set_UOM;
    property ItemType: UnicodeString read Get_ItemType write Set_ItemType;
    property PositionOnItem: IXMLPositionOnItem read Get_PositionOnItem;
  end;

{ IXMLPropertySubSpecificationList }

  IXMLPropertySubSpecificationList = interface(IXMLNodeCollection)
    ['{FC4BF263-E932-44AE-94D4-16A7467D4E84}']
    { Methods & Properties }
    function Add: IXMLPropertySubSpecification;
    function Insert(const Index: Integer): IXMLPropertySubSpecification;

    function Get_Item(Index: Integer): IXMLPropertySubSpecification;
    property Items[Index: Integer]: IXMLPropertySubSpecification read Get_Item; default;
  end;

{ IXMLQuantitySpecification }

  IXMLQuantitySpecification = interface(IXMLNode)
    ['{C69AC6CF-9BE0-4C48-8D76-93A3C8149497}']
    { Property Accessors }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_UOM: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
    { Methods & Properties }
    property QuantityType: UnicodeString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: UnicodeString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: UnicodeString read Get_AdjustmentType write Set_AdjustmentType;
    property MeasuringMethodType: UnicodeString read Get_MeasuringMethodType write Set_MeasuringMethodType;
    property MeasuringAgency: UnicodeString read Get_MeasuringAgency write Set_MeasuringAgency;
    property MeasuringMethod: UnicodeString read Get_MeasuringMethod write Set_MeasuringMethod;
    property UOM: UnicodeString read Get_UOM write Set_UOM;
  end;

{ IXMLQuantitySpecificationList }

  IXMLQuantitySpecificationList = interface(IXMLNodeCollection)
    ['{53C2DE02-F044-422F-9420-160DD02A88D4}']
    { Methods & Properties }
    function Add: IXMLQuantitySpecification;
    function Insert(const Index: Integer): IXMLQuantitySpecification;

    function Get_Item(Index: Integer): IXMLQuantitySpecification;
    property Items[Index: Integer]: IXMLQuantitySpecification read Get_Item; default;
  end;

{ IXMLDeliveryMessageSummary }

  IXMLDeliveryMessageSummary = interface(IXMLNode)
    ['{0BDEC943-6A27-402B-A46E-31EE89C6818C}']
    { Property Accessors }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
    { Methods & Properties }
    property TotalNumberOfLineItems: LongWord read Get_TotalNumberOfLineItems write Set_TotalNumberOfLineItems;
    property TotalQuantity: IXMLTotalQuantityList read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property TermsAndDisclaimers: IXMLTermsAndDisclaimersList read Get_TermsAndDisclaimers;
  end;

{ IXMLDeliveryPlanningBucket }

  IXMLDeliveryPlanningBucket = interface(IXMLNode)
    ['{5F5F8A7A-5CDF-4336-BA86-401B3FA136EA}']
    { Property Accessors }
    function Get_BucketStatusType: UnicodeString;
    function Get_TimePeriod: IXMLTimePeriod;
    function Get_PlanningOutcome: IXMLPlanningOutcomeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BucketStatusType(Value: UnicodeString);
    { Methods & Properties }
    property BucketStatusType: UnicodeString read Get_BucketStatusType write Set_BucketStatusType;
    property TimePeriod: IXMLTimePeriod read Get_TimePeriod;
    property PlanningOutcome: IXMLPlanningOutcomeList read Get_PlanningOutcome;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLTimePeriod }

  IXMLTimePeriod = interface(IXMLNode)
    ['{5FEC9018-DD49-4B3A-8A8F-74D054327CD4}']
    { Property Accessors }
    function Get_PeriodType: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    function Get_Week: UnicodeString;
    procedure Set_PeriodType(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    procedure Set_Week(Value: UnicodeString);
    { Methods & Properties }
    property PeriodType: UnicodeString read Get_PeriodType write Set_PeriodType;
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
    property DateTimeRange: IXMLDateTimeRange read Get_DateTimeRange;
    property Week: UnicodeString read Get_Week write Set_Week;
  end;

{ IXMLPlanningOutcome }

  IXMLPlanningOutcome = interface(IXMLNode)
    ['{20A456F8-F9BB-4378-8292-79964C6D55B0}']
    { Property Accessors }
    function Get_PlanningOutcomeType: UnicodeString;
    function Get_PlanningOutcomePeriodType: UnicodeString;
    function Get_PlanningOutcomeContextType: UnicodeString;
    function Get_TransportModeType: UnicodeString;
    function Get_TransportContextType: UnicodeString;
    function Get_IsTotal: UnicodeString;
    function Get_QuantityInformation: IXMLQuantityInformation;
    function Get_PlanningPropertyValue: IXMLPlanningPropertyValueList;
    function Get_DeviationReason: IXMLDeviationReasonList;
    function Get_PlanningReferenceInformation: IXMLPlanningReferenceInformationList;
    function Get_ResourceInformation: IXMLResourceInformation;
    procedure Set_PlanningOutcomeType(Value: UnicodeString);
    procedure Set_PlanningOutcomePeriodType(Value: UnicodeString);
    procedure Set_PlanningOutcomeContextType(Value: UnicodeString);
    procedure Set_TransportModeType(Value: UnicodeString);
    procedure Set_TransportContextType(Value: UnicodeString);
    procedure Set_IsTotal(Value: UnicodeString);
    { Methods & Properties }
    property PlanningOutcomeType: UnicodeString read Get_PlanningOutcomeType write Set_PlanningOutcomeType;
    property PlanningOutcomePeriodType: UnicodeString read Get_PlanningOutcomePeriodType write Set_PlanningOutcomePeriodType;
    property PlanningOutcomeContextType: UnicodeString read Get_PlanningOutcomeContextType write Set_PlanningOutcomeContextType;
    property TransportModeType: UnicodeString read Get_TransportModeType write Set_TransportModeType;
    property TransportContextType: UnicodeString read Get_TransportContextType write Set_TransportContextType;
    property IsTotal: UnicodeString read Get_IsTotal write Set_IsTotal;
    property QuantityInformation: IXMLQuantityInformation read Get_QuantityInformation;
    property PlanningPropertyValue: IXMLPlanningPropertyValueList read Get_PlanningPropertyValue;
    property DeviationReason: IXMLDeviationReasonList read Get_DeviationReason;
    property PlanningReferenceInformation: IXMLPlanningReferenceInformationList read Get_PlanningReferenceInformation;
    property ResourceInformation: IXMLResourceInformation read Get_ResourceInformation;
  end;

{ IXMLPlanningOutcomeList }

  IXMLPlanningOutcomeList = interface(IXMLNodeCollection)
    ['{A19317C0-EF3B-4A1A-86BD-2856DD002712}']
    { Methods & Properties }
    function Add: IXMLPlanningOutcome;
    function Insert(const Index: Integer): IXMLPlanningOutcome;

    function Get_Item(Index: Integer): IXMLPlanningOutcome;
    property Items[Index: Integer]: IXMLPlanningOutcome read Get_Item; default;
  end;

{ IXMLPlanningPropertyValue }

  IXMLPlanningPropertyValue = interface(IXMLNode)
    ['{4E5F8FB6-0567-4862-B045-0BA9A68BC775}']
    { Property Accessors }
    function Get_PlanningPropertyType: UnicodeString;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_PlanningPropertyType(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
    { Methods & Properties }
    property PlanningPropertyType: UnicodeString read Get_PlanningPropertyType write Set_PlanningPropertyType;
    property BinaryValue: UnicodeString read Get_BinaryValue write Set_BinaryValue;
    property BooleanValue: Boolean read Get_BooleanValue write Set_BooleanValue;
    property DateTimeValue: UnicodeString read Get_DateTimeValue write Set_DateTimeValue;
    property NumericValue: IXMLDetailMeasurement read Get_NumericValue;
    property TextValue: UnicodeString read Get_TextValue write Set_TextValue;
  end;

{ IXMLPlanningPropertyValueList }

  IXMLPlanningPropertyValueList = interface(IXMLNodeCollection)
    ['{177AE04F-C8F7-4804-8AF0-A791199509DA}']
    { Methods & Properties }
    function Add: IXMLPlanningPropertyValue;
    function Insert(const Index: Integer): IXMLPlanningPropertyValue;

    function Get_Item(Index: Integer): IXMLPlanningPropertyValue;
    property Items[Index: Integer]: IXMLPlanningPropertyValue read Get_Item; default;
  end;

{ IXMLDeviationReason }

  IXMLDeviationReason = interface(IXMLNode)
    ['{F847A1AC-2865-4E3E-ABE3-35ED0CD9B0F1}']
    { Property Accessors }
    function Get_DeviationReasonCode: IXMLDeviationReasonCode;
    function Get_DeviationReasonDescription: IXMLS255List;
    { Methods & Properties }
    property DeviationReasonCode: IXMLDeviationReasonCode read Get_DeviationReasonCode;
    property DeviationReasonDescription: IXMLS255List read Get_DeviationReasonDescription;
  end;

{ IXMLDeviationReasonList }

  IXMLDeviationReasonList = interface(IXMLNodeCollection)
    ['{2F4AFDBB-2A5A-4347-B54A-4197D89B0A41}']
    { Methods & Properties }
    function Add: IXMLDeviationReason;
    function Insert(const Index: Integer): IXMLDeviationReason;

    function Get_Item(Index: Integer): IXMLDeviationReason;
    property Items[Index: Integer]: IXMLDeviationReason read Get_Item; default;
  end;

{ IXMLDeviationReasonCode }

  IXMLDeviationReasonCode = interface(IXMLNode)
    ['{8E032950-3474-4073-8577-812E7FA83FFD}']
    { Property Accessors }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    { Methods & Properties }
    property Agency: UnicodeString read Get_Agency write Set_Agency;
  end;

{ IXMLPlanningReferenceInformation }

  IXMLPlanningReferenceInformation = interface(IXMLNode)
    ['{7773CAA0-7B99-44A4-A276-19BA4D382100}']
    { Property Accessors }
    function Get_Document: IXMLInvoiceDocument;
    { Methods & Properties }
    property Document: IXMLInvoiceDocument read Get_Document;
  end;

{ IXMLPlanningReferenceInformationList }

  IXMLPlanningReferenceInformationList = interface(IXMLNodeCollection)
    ['{17B9C7C9-6D80-4EF2-BD4B-B70BED9E00AB}']
    { Methods & Properties }
    function Add: IXMLPlanningReferenceInformation;
    function Insert(const Index: Integer): IXMLPlanningReferenceInformation;

    function Get_Item(Index: Integer): IXMLPlanningReferenceInformation;
    property Items[Index: Integer]: IXMLPlanningReferenceInformation read Get_Item; default;
  end;

{ IXMLDocument }

  IXMLInvoiceDocument = interface(IXMLNode)
    ['{45C18F63-21C7-4785-9182-B72AA887507E}']
    { Property Accessors }
    function Get_DocumentName: UnicodeString;
    function Get_DocumentType: UnicodeString;
    function Get_OtherDocumentName: UnicodeString;
    function Get_OtherDocumentType: UnicodeString;
    function Get_DocumentNumber: UnicodeString;
    function Get_DocumentVersionNumber: UnicodeString;
    function Get_DocumentDate: IXMLDocumentDate;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DocumentReference: IXMLDocumentReferenceList;
    procedure Set_DocumentName(Value: UnicodeString);
    procedure Set_DocumentType(Value: UnicodeString);
    procedure Set_OtherDocumentName(Value: UnicodeString);
    procedure Set_OtherDocumentType(Value: UnicodeString);
    procedure Set_DocumentNumber(Value: UnicodeString);
    procedure Set_DocumentVersionNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    { Methods & Properties }
    property DocumentName: UnicodeString read Get_DocumentName write Set_DocumentName;
    property DocumentType: UnicodeString read Get_DocumentType write Set_DocumentType;
    property OtherDocumentName: UnicodeString read Get_OtherDocumentName write Set_OtherDocumentName;
    property OtherDocumentType: UnicodeString read Get_OtherDocumentType write Set_OtherDocumentType;
    property DocumentNumber: UnicodeString read Get_DocumentNumber write Set_DocumentNumber;
    property DocumentVersionNumber: UnicodeString read Get_DocumentVersionNumber write Set_DocumentVersionNumber;
    property DocumentDate: IXMLDocumentDate read Get_DocumentDate;
    property TransactionHistoryNumber: LongWord read Get_TransactionHistoryNumber write Set_TransactionHistoryNumber;
    property DocumentReference: IXMLDocumentReferenceList read Get_DocumentReference;
  end;

{ IXMLDocumentDate }

  IXMLDocumentDate = interface(IXMLNode)
    ['{5FD1D8AD-DFA9-4F7C-93B7-575A36824D33}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDeliverySchedule }

  IXMLDeliverySchedule = interface(IXMLNode)
    ['{361BBAC3-A976-4AC3-99C5-7EB687CDA6F4}']
    { Property Accessors }
    function Get_DeliveryLineNumber: LongWord;
    function Get_ProductionStatus: IXMLProductionStatus;
    function Get_DeliveryStatus: IXMLDeliveryStatus;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_DeliveryLeg: IXMLDeliveryLegList;
    function Get_DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DeliveryLineNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryLineNumber: LongWord read Get_DeliveryLineNumber write Set_DeliveryLineNumber;
    property ProductionStatus: IXMLProductionStatus read Get_ProductionStatus;
    property DeliveryStatus: IXMLDeliveryStatus read Get_DeliveryStatus;
    property DeliveryDateWindow: IXMLDeliveryDateWindowList read Get_DeliveryDateWindow;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property PriceDetails: IXMLPriceDetails read Get_PriceDetails;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property DeliveryLeg: IXMLDeliveryLegList read Get_DeliveryLeg;
    property DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList read Get_DeliveryScheduleReference;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDeliveryScheduleList }

  IXMLDeliveryScheduleList = interface(IXMLNodeCollection)
    ['{C8D2AE83-FFD1-4CE8-AB43-FA93F456188E}']
    { Methods & Properties }
    function Add: IXMLDeliverySchedule;
    function Insert(const Index: Integer): IXMLDeliverySchedule;

    function Get_Item(Index: Integer): IXMLDeliverySchedule;
    property Items[Index: Integer]: IXMLDeliverySchedule read Get_Item; default;
  end;

{ IXMLProductionStatus }

  IXMLProductionStatus = interface(IXMLNode)
    ['{B441A051-200A-45DF-8373-F8C69A361DC0}']
    { Property Accessors }
    function Get_ProductionStatusType: UnicodeString;
    function Get_ProductionLastDateOfChange: IXMLProductionLastDateOfChange;
    procedure Set_ProductionStatusType(Value: UnicodeString);
    { Methods & Properties }
    property ProductionStatusType: UnicodeString read Get_ProductionStatusType write Set_ProductionStatusType;
    property ProductionLastDateOfChange: IXMLProductionLastDateOfChange read Get_ProductionLastDateOfChange;
  end;

{ IXMLProductionLastDateOfChange }

  IXMLProductionLastDateOfChange = interface(IXMLNode)
    ['{5F4FC6D2-075F-4FE5-9939-DD391FC2B131}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryStatus }

  IXMLDeliveryStatus = interface(IXMLNode)
    ['{6D8EA635-3704-48CB-845D-18BE0D68FDA5}']
    { Property Accessors }
    function Get_DeliveryStatusType: UnicodeString;
    function Get_DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange;
    procedure Set_DeliveryStatusType(Value: UnicodeString);
    { Methods & Properties }
    property DeliveryStatusType: UnicodeString read Get_DeliveryStatusType write Set_DeliveryStatusType;
    property DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange read Get_DeliveryLastDateOfChange;
  end;

{ IXMLDeliveryLastDateOfChange }

  IXMLDeliveryLastDateOfChange = interface(IXMLNode)
    ['{B4F63E7C-B84C-4B6C-95E3-D764D3024FB7}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryScheduleReference }

  IXMLDeliveryScheduleReference = interface(IXMLNode)
    ['{460A6F83-E35A-4A94-BEF9-A48DDC632BE8}']
    { Property Accessors }
    function Get_DeliveryScheduleReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DeliveryScheduleReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property DeliveryScheduleReferenceType: UnicodeString read Get_DeliveryScheduleReferenceType write Set_DeliveryScheduleReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDeliveryScheduleReferenceList }

  IXMLDeliveryScheduleReferenceList = interface(IXMLNodeCollection)
    ['{95571167-3ACE-4FF0-AED8-EDFCCC68AE91}']
    { Methods & Properties }
    function Add: IXMLDeliveryScheduleReference;
    function Insert(const Index: Integer): IXMLDeliveryScheduleReference;

    function Get_Item(Index: Integer): IXMLDeliveryScheduleReference;
    property Items[Index: Integer]: IXMLDeliveryScheduleReference read Get_Item; default;
  end;

{ IXMLGoodsReceiptHeader }

  IXMLGoodsReceiptHeader = interface(IXMLNode)
    ['{3B6D8726-8969-4E17-B840-1381A9ABE516}']
    { Property Accessors }
    function Get_GoodsReceiptHeaderAcceptance: UnicodeString;
    function Get_GoodsReceiptNumber: UnicodeString;
    function Get_GoodsReceiptIssueDate: IXMLGoodsReceiptIssueDate;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_GoodsReceiptArrivalDate: IXMLGoodsReceiptArrivalDate;
    function Get_TimePeriod: IXMLTimePeriod;
    function Get_GoodsReceiptUnloadDate: IXMLGoodsReceiptUnloadDate;
    function Get_GoodsReceiptReference: IXMLGoodsReceiptReferenceList;
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_OtherDate: IXMLOtherDate;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_CarrierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportationComment: IXMLTransportationCommentList;
    procedure Set_GoodsReceiptHeaderAcceptance(Value: UnicodeString);
    procedure Set_GoodsReceiptNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    { Methods & Properties }
    property GoodsReceiptHeaderAcceptance: UnicodeString read Get_GoodsReceiptHeaderAcceptance write Set_GoodsReceiptHeaderAcceptance;
    property GoodsReceiptNumber: UnicodeString read Get_GoodsReceiptNumber write Set_GoodsReceiptNumber;
    property GoodsReceiptIssueDate: IXMLGoodsReceiptIssueDate read Get_GoodsReceiptIssueDate;
    property TransactionHistoryNumber: LongWord read Get_TransactionHistoryNumber write Set_TransactionHistoryNumber;
    property GoodsReceiptArrivalDate: IXMLGoodsReceiptArrivalDate read Get_GoodsReceiptArrivalDate;
    property TimePeriod: IXMLTimePeriod read Get_TimePeriod;
    property GoodsReceiptUnloadDate: IXMLGoodsReceiptUnloadDate read Get_GoodsReceiptUnloadDate;
    property GoodsReceiptReference: IXMLGoodsReceiptReferenceList read Get_GoodsReceiptReference;
    property DeliveryMessageNumber: UnicodeString read Get_DeliveryMessageNumber write Set_DeliveryMessageNumber;
    property DeliveryMessageDate: IXMLDeliveryMessageDate read Get_DeliveryMessageDate;
    property OtherDate: IXMLOtherDate read Get_OtherDate;
    property BuyerParty: IXMLParty read Get_BuyerParty;
    property BillToParty: IXMLParty read Get_BillToParty;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property CarrierParty: IXMLParty read Get_CarrierParty;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property SenderParty: IXMLTypedParty read Get_SenderParty;
    property ReceiverParty: IXMLTypedPartyList read Get_ReceiverParty;
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics read Get_TransportVehicleCharacteristics;
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList read Get_TransportUnitCharacteristics;
    property TransportationComment: IXMLTransportationCommentList read Get_TransportationComment;
  end;

{ IXMLGoodsReceiptIssueDate }

  IXMLGoodsReceiptIssueDate = interface(IXMLNode)
    ['{98F4E113-42FA-4E21-AE0F-3C30E3949A70}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLGoodsReceiptArrivalDate }

  IXMLGoodsReceiptArrivalDate = interface(IXMLNode)
    ['{A021C0BE-26D6-46EE-947E-E17F51D87D93}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLGoodsReceiptUnloadDate }

  IXMLGoodsReceiptUnloadDate = interface(IXMLNode)
    ['{9BC47954-FCF1-426B-8AF5-7EF9AEE424B3}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
    property DateTimeRange: IXMLDateTimeRange read Get_DateTimeRange;
  end;

{ IXMLGoodsReceiptReference }

  IXMLGoodsReceiptReference = interface(IXMLNode)
    ['{1F2FAB85-EB3A-4151-AFA6-F12229025FB4}']
    { Property Accessors }
    function Get_GoodsReceiptReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_GoodsReceiptReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property GoodsReceiptReferenceType: UnicodeString read Get_GoodsReceiptReferenceType write Set_GoodsReceiptReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLGoodsReceiptReferenceList }

  IXMLGoodsReceiptReferenceList = interface(IXMLNodeCollection)
    ['{A3458F7D-8A9F-4415-8343-3E1B2B66AD1B}']
    { Methods & Properties }
    function Add: IXMLGoodsReceiptReference;
    function Insert(const Index: Integer): IXMLGoodsReceiptReference;

    function Get_Item(Index: Integer): IXMLGoodsReceiptReference;
    property Items[Index: Integer]: IXMLGoodsReceiptReference read Get_Item; default;
  end;

{ IXMLTransportationComment }

  IXMLTransportationComment = interface(IXMLNode)
    ['{A1FDDD2D-07C0-4380-A962-2A50B54113BE}']
    { Property Accessors }
    function Get_AdditionalText: UnicodeString;
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLTransportationCommentList }

  IXMLTransportationCommentList = interface(IXMLNodeCollection)
    ['{66007024-8CDF-41A4-A084-4884C8C3C658}']
    { Methods & Properties }
    function Add: IXMLTransportationComment;
    function Insert(const Index: Integer): IXMLTransportationComment;

    function Get_Item(Index: Integer): IXMLTransportationComment;
    property Items[Index: Integer]: IXMLTransportationComment read Get_Item; default;
  end;

{ IXMLGoodsReceiptLineItem }

  IXMLGoodsReceiptLineItem = interface(IXMLNode)
    ['{51B222AC-38BF-4BF9-9C68-F97BB9C340AB}']
    { Property Accessors }
    function Get_GoodsReceiptAcceptance: UnicodeString;
    function Get_GoodsReceivedRejectedType: UnicodeString;
    function Get_GoodsReceiptLineItemNumber: LongWord;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_MillParty: IXMLParty;
    function Get_GoodsReceiptReference: IXMLGoodsReceiptReferenceList;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_NumberOfGoodsReceiptPackages: LongWord;
    function Get_GoodsReceiptPackage: IXMLGoodsReceiptPackageList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_GoodsReceiptAcceptance(Value: UnicodeString);
    procedure Set_GoodsReceivedRejectedType(Value: UnicodeString);
    procedure Set_GoodsReceiptLineItemNumber(Value: LongWord);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    procedure Set_NumberOfGoodsReceiptPackages(Value: LongWord);
    { Methods & Properties }
    property GoodsReceiptAcceptance: UnicodeString read Get_GoodsReceiptAcceptance write Set_GoodsReceiptAcceptance;
    property GoodsReceivedRejectedType: UnicodeString read Get_GoodsReceivedRejectedType write Set_GoodsReceivedRejectedType;
    property GoodsReceiptLineItemNumber: LongWord read Get_GoodsReceiptLineItemNumber write Set_GoodsReceiptLineItemNumber;
    property DeliveryMessageLineItemNumber: LongWord read Get_DeliveryMessageLineItemNumber write Set_DeliveryMessageLineItemNumber;
    property PurchaseOrderInformation: IXMLPurchaseOrderInformation read Get_PurchaseOrderInformation;
    property PurchaseOrderLineItemNumber: LongWord read Get_PurchaseOrderLineItemNumber write Set_PurchaseOrderLineItemNumber;
    property MillParty: IXMLParty read Get_MillParty;
    property GoodsReceiptReference: IXMLGoodsReceiptReferenceList read Get_GoodsReceiptReference;
    property Product: IXMLProductClass read Get_Product;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property NumberOfGoodsReceiptPackages: LongWord read Get_NumberOfGoodsReceiptPackages write Set_NumberOfGoodsReceiptPackages;
    property GoodsReceiptPackage: IXMLGoodsReceiptPackageList read Get_GoodsReceiptPackage;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLGoodsReceiptPackage }

  IXMLGoodsReceiptPackage = interface(IXMLNode)
    ['{8A3DED8F-1623-4A5B-88A2-BA068E0235C8}']
    { Property Accessors }
    function Get_GoodsReceiptAcceptance: UnicodeString;
    function Get_VarianceType: UnicodeString;
    function Get_GoodsReceivedRejectedType: UnicodeString;
    function Get_PackageInformation: IXMLPackageInformationClass;
    procedure Set_GoodsReceiptAcceptance(Value: UnicodeString);
    procedure Set_VarianceType(Value: UnicodeString);
    procedure Set_GoodsReceivedRejectedType(Value: UnicodeString);
    { Methods & Properties }
    property GoodsReceiptAcceptance: UnicodeString read Get_GoodsReceiptAcceptance write Set_GoodsReceiptAcceptance;
    property VarianceType: UnicodeString read Get_VarianceType write Set_VarianceType;
    property GoodsReceivedRejectedType: UnicodeString read Get_GoodsReceivedRejectedType write Set_GoodsReceivedRejectedType;
    property PackageInformation: IXMLPackageInformationClass read Get_PackageInformation;
  end;

{ IXMLGoodsReceiptPackageList }

  IXMLGoodsReceiptPackageList = interface(IXMLNodeCollection)
    ['{0D51E808-6C5C-4BCF-A46E-C2C9ED386A69}']
    { Methods & Properties }
    function Add: IXMLGoodsReceiptPackage;
    function Insert(const Index: Integer): IXMLGoodsReceiptPackage;

    function Get_Item(Index: Integer): IXMLGoodsReceiptPackage;
    property Items[Index: Integer]: IXMLGoodsReceiptPackage read Get_Item; default;
  end;

{ IXMLGoodsReceiptSummary }

  IXMLGoodsReceiptSummary = interface(IXMLNode)
    ['{2E3BC17C-D8EC-416B-8064-DE262651FB6D}']
    { Property Accessors }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
    { Methods & Properties }
    property TotalNumberOfLineItems: LongWord read Get_TotalNumberOfLineItems write Set_TotalNumberOfLineItems;
    property TotalQuantity: IXMLTotalQuantityList read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property TermsAndDisclaimers: IXMLTermsAndDisclaimersList read Get_TermsAndDisclaimers;
  end;

{ IXMLMeasurementWithText }

  IXMLMeasurementWithText = interface(IXMLNode)
    ['{FF165D12-BEE8-4B97-9703-32D68BB5986E}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: UnicodeString;
    procedure Set_AdditionalText(Value: UnicodeString);
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
    property AdditionalText: UnicodeString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLPlanningOutcomeBucket }

  IXMLPlanningOutcomeBucket = interface(IXMLNode)
    ['{C07C85A6-60B5-499F-92EC-9B5A0FCFD3F0}']
    { Property Accessors }
    function Get_BucketStatusType: UnicodeString;
    function Get_TimePeriod: IXMLTimePeriod;
    function Get_PlanningOutcome: IXMLPlanningOutcomeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BucketStatusType(Value: UnicodeString);
    { Methods & Properties }
    property BucketStatusType: UnicodeString read Get_BucketStatusType write Set_BucketStatusType;
    property TimePeriod: IXMLTimePeriod read Get_TimePeriod;
    property PlanningOutcome: IXMLPlanningOutcomeList read Get_PlanningOutcome;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLScaleHouse }

  IXMLScaleHouse = interface(IXMLNode)
    ['{901FE00C-7AB7-47E0-9506-6E8F4633EF83}']
    { Property Accessors }
    function Get_ScaleHouseID: UnicodeString;
    function Get_ScaleHouseName: UnicodeString;
    function Get_ScalerID: UnicodeString;
    function Get_ScalerName: UnicodeString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantity;
    procedure Set_ScaleHouseID(Value: UnicodeString);
    procedure Set_ScaleHouseName(Value: UnicodeString);
    procedure Set_ScalerID(Value: UnicodeString);
    procedure Set_ScalerName(Value: UnicodeString);
    { Methods & Properties }
    property ScaleHouseID: UnicodeString read Get_ScaleHouseID write Set_ScaleHouseID;
    property ScaleHouseName: UnicodeString read Get_ScaleHouseName write Set_ScaleHouseName;
    property ScalerID: UnicodeString read Get_ScalerID write Set_ScalerID;
    property ScalerName: UnicodeString read Get_ScalerName write Set_ScalerName;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantity read Get_InformationalQuantity;
  end;

{ IXMLShippingInstructionsHeader }

  IXMLShippingInstructionsHeader = interface(IXMLNode)
    ['{62990A08-259D-4A32-83F7-A619C602CE5A}']
    { Property Accessors }
    function Get_ShippingInstructionsHeaderStatusType: UnicodeString;
    function Get_ShippingInstructionsInformation: IXMLShippingInstructionsInformation;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ShippingInstructionsHeaderStatusType(Value: UnicodeString);
    { Methods & Properties }
    property ShippingInstructionsHeaderStatusType: UnicodeString read Get_ShippingInstructionsHeaderStatusType write Set_ShippingInstructionsHeaderStatusType;
    property ShippingInstructionsInformation: IXMLShippingInstructionsInformation read Get_ShippingInstructionsInformation;
    property BuyerParty: IXMLParty read Get_BuyerParty;
    property BillToParty: IXMLParty read Get_BillToParty;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property SenderParty: IXMLTypedParty read Get_SenderParty;
    property ReceiverParty: IXMLTypedPartyList read Get_ReceiverParty;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLShippingInstructionsInformation }

  IXMLShippingInstructionsInformation = interface(IXMLNode)
    ['{23697C11-01FF-444B-AB3A-6465EE7FBFE5}']
    { Property Accessors }
    function Get_ShippingInstructionsNumber: UnicodeString;
    function Get_ShippingInstructionsIssuedDate: IXMLShippingInstructionsIssuedDate;
    function Get_ShippingInstructionsConfirmationIssuedDate: IXMLShippingInstructionsConfirmationIssuedDate;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_TransactionHistoryConfirmationNumber: LongWord;
    function Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    procedure Set_ShippingInstructionsNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    procedure Set_TransactionHistoryConfirmationNumber(Value: LongWord);
    { Methods & Properties }
    property ShippingInstructionsNumber: UnicodeString read Get_ShippingInstructionsNumber write Set_ShippingInstructionsNumber;
    property ShippingInstructionsIssuedDate: IXMLShippingInstructionsIssuedDate read Get_ShippingInstructionsIssuedDate;
    property ShippingInstructionsConfirmationIssuedDate: IXMLShippingInstructionsConfirmationIssuedDate read Get_ShippingInstructionsConfirmationIssuedDate;
    property TransactionHistoryNumber: LongWord read Get_TransactionHistoryNumber write Set_TransactionHistoryNumber;
    property TransactionHistoryConfirmationNumber: LongWord read Get_TransactionHistoryConfirmationNumber write Set_TransactionHistoryConfirmationNumber;
    property ShippingInstructionsReference: IXMLShippingInstructionsReferenceList read Get_ShippingInstructionsReference;
  end;

{ IXMLShippingInstructionsIssuedDate }

  IXMLShippingInstructionsIssuedDate = interface(IXMLNode)
    ['{CA340C6C-2CE0-4B4C-B5C5-46E49321DF50}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLShippingInstructionsConfirmationIssuedDate }

  IXMLShippingInstructionsConfirmationIssuedDate = interface(IXMLNode)
    ['{73380091-E8AC-45DA-9552-B3CE6CC07C76}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: UnicodeString read Get_Time write Set_Time;
  end;

{ IXMLShippingInstructionsReference }

  IXMLShippingInstructionsReference = interface(IXMLNode)
    ['{F6B94F3E-80DB-4A12-804C-022F59DDFF9D}']
    { Property Accessors }
    function Get_ShippingInstructionsReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ShippingInstructionsReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    { Methods & Properties }
    property ShippingInstructionsReferenceType: UnicodeString read Get_ShippingInstructionsReferenceType write Set_ShippingInstructionsReferenceType;
    property AssignedBy: UnicodeString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLShippingInstructionsReferenceList }

  IXMLShippingInstructionsReferenceList = interface(IXMLNodeCollection)
    ['{C91BFB76-C15A-4E0B-BCC8-D77721B1853E}']
    { Methods & Properties }
    function Add: IXMLShippingInstructionsReference;
    function Insert(const Index: Integer): IXMLShippingInstructionsReference;

    function Get_Item(Index: Integer): IXMLShippingInstructionsReference;
    property Items[Index: Integer]: IXMLShippingInstructionsReference read Get_Item; default;
  end;

{ IXMLShippingInstructionsLineItemByProduct }

  IXMLShippingInstructionsLineItemByProduct = interface(IXMLNode)
    ['{6F13D108-5563-4000-9A50-325E7C6E4FC6}']
    { Property Accessors }
    function Get_ShippingInstructionsLineItemStatusType: UnicodeString;
    function Get_IsThirdPartyShipment: UnicodeString;
    function Get_ShippingInstructionsLineItemNumber: LongWord;
    function Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    function Get_ShipToInformation: IXMLShipToInformationList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    procedure Set_ShippingInstructionsLineItemStatusType(Value: UnicodeString);
    procedure Set_IsThirdPartyShipment(Value: UnicodeString);
    procedure Set_ShippingInstructionsLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property ShippingInstructionsLineItemStatusType: UnicodeString read Get_ShippingInstructionsLineItemStatusType write Set_ShippingInstructionsLineItemStatusType;
    property IsThirdPartyShipment: UnicodeString read Get_IsThirdPartyShipment write Set_IsThirdPartyShipment;
    property ShippingInstructionsLineItemNumber: LongWord read Get_ShippingInstructionsLineItemNumber write Set_ShippingInstructionsLineItemNumber;
    property ShippingInstructionsReference: IXMLShippingInstructionsReferenceList read Get_ShippingInstructionsReference;
    property ShipToInformation: IXMLShipToInformationList read Get_ShipToInformation;
    property PackagingCharacteristics: IXMLPackagingCharacteristicsList read Get_PackagingCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
  end;

{ IXMLShipToInformation }

  IXMLShipToInformation = interface(IXMLNode)
    ['{FEA986A0-11DB-412E-85B3-1CCD8EDB601A}']
    { Property Accessors }
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DeliverySchedule: IXMLDeliveryScheduleList;
    { Methods & Properties }
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property DeliverySchedule: IXMLDeliveryScheduleList read Get_DeliverySchedule;
  end;

{ IXMLShipToInformationList }

  IXMLShipToInformationList = interface(IXMLNodeCollection)
    ['{29AD1033-7FBF-4197-B40C-E02413781C5B}']
    { Methods & Properties }
    function Add: IXMLShipToInformation;
    function Insert(const Index: Integer): IXMLShipToInformation;

    function Get_Item(Index: Integer): IXMLShipToInformation;
    property Items[Index: Integer]: IXMLShipToInformation read Get_Item; default;
  end;

{ IXMLShippingInstructionsLineItemByShipTo }

  IXMLShippingInstructionsLineItemByShipTo = interface(IXMLNode)
    ['{D3C7ADC1-8FEE-4DAF-8830-33173E605462}']
    { Property Accessors }
    function Get_ShippingInstructionsLineItemStatusType: UnicodeString;
    function Get_ShippingInstructionsLineItemNumber: LongWord;
    function Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    function Get_Product: IXMLProductClass;
    function Get_ShippingInstructionsPurchaseOrderLineItem: IXMLShippingInstructionsPurchaseOrderLineItem;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_DeliverySchedule: IXMLDeliveryScheduleList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    procedure Set_ShippingInstructionsLineItemStatusType(Value: UnicodeString);
    procedure Set_ShippingInstructionsLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property ShippingInstructionsLineItemStatusType: UnicodeString read Get_ShippingInstructionsLineItemStatusType write Set_ShippingInstructionsLineItemStatusType;
    property ShippingInstructionsLineItemNumber: LongWord read Get_ShippingInstructionsLineItemNumber write Set_ShippingInstructionsLineItemNumber;
    property ShippingInstructionsReference: IXMLShippingInstructionsReferenceList read Get_ShippingInstructionsReference;
    property Product: IXMLProductClass read Get_Product;
    property ShippingInstructionsPurchaseOrderLineItem: IXMLShippingInstructionsPurchaseOrderLineItem read Get_ShippingInstructionsPurchaseOrderLineItem;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property DeliverySchedule: IXMLDeliveryScheduleList read Get_DeliverySchedule;
    property PackagingCharacteristics: IXMLPackagingCharacteristicsList read Get_PackagingCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
  end;

{ IXMLShippingInstructionsPurchaseOrderLineItem }

  IXMLShippingInstructionsPurchaseOrderLineItem = interface(IXMLNode)
    ['{5342C961-F3E8-40DE-A703-1D5E2055B902}']
    { Property Accessors }
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PackageIdentifier: IXMLPackageIdentifier;
    function Get_ProductIdentification: IXMLProductIdentificationList;
    function Get_Classification: IXMLClassificationList;
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property PurchaseOrderLineItemNumber: LongWord read Get_PurchaseOrderLineItemNumber write Set_PurchaseOrderLineItemNumber;
    property PurchaseOrderInformation: IXMLPurchaseOrderInformation read Get_PurchaseOrderInformation;
    property PackageIdentifier: IXMLPackageIdentifier read Get_PackageIdentifier;
    property ProductIdentification: IXMLProductIdentificationList read Get_ProductIdentification;
    property Classification: IXMLClassificationList read Get_Classification;
  end;

{ IXMLPackageIdentifier }

  IXMLPackageIdentifier = interface(IXMLNode)
    ['{EB60A748-5B6A-48FC-89BD-E9C88AB6DC4C}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60;
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60 read Get_Identifier;
  end;

{ IXMLShippingInstructionsSummary }

  IXMLShippingInstructionsSummary = interface(IXMLNode)
    ['{F364960B-0550-4317-A3FB-78BEBC5AA145}']
    { Property Accessors }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
    { Methods & Properties }
    property TotalNumberOfLineItems: LongWord read Get_TotalNumberOfLineItems write Set_TotalNumberOfLineItems;
    property TotalQuantity: IXMLTotalQuantityList read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property TermsAndDisclaimers: IXMLTermsAndDisclaimersList read Get_TermsAndDisclaimers;
  end;

{ IXMLTrimSize }

  IXMLTrimSize = interface(IXMLNode)
    ['{82451ADC-274E-4AF8-B590-C57080787993}']
    { Property Accessors }
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_BookBlockBulk: IXMLBookBlockBulk;
    function Get_SpineSize: IXMLSpineSize;
    { Methods & Properties }
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property BookBlockBulk: IXMLBookBlockBulk read Get_BookBlockBulk;
    property SpineSize: IXMLSpineSize read Get_SpineSize;
  end;

{ IXMLBookBlockBulk }

  IXMLBookBlockBulk = interface(IXMLNode)
    ['{341632E2-6E01-4257-B1AA-A6F578A1CEFA}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
  end;

{ IXMLSpineSize }

  IXMLSpineSize = interface(IXMLNode)
    ['{3BE97A01-8781-4B9A-94FC-7CC1D71A2A86}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
  end;

{ IXMLPlywoodOSBSpeciesTypeList }

  IXMLPlywoodOSBSpeciesTypeList = interface(IXMLNodeCollection)
    ['{E5988DF5-89F6-462F-8A76-45F50A27A4BF}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLS60List }

  IXMLS60List = interface(IXMLNodeCollection)
    ['{BBB68E60-DE04-4E07-BBB2-2EB3BB69BF0F}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLS72List }

  IXMLS72List = interface(IXMLNodeCollection)
    ['{5BA671D7-3CD5-4ECF-8211-3CC1D19207F0}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLS20List }

  IXMLS20List = interface(IXMLNodeCollection)
    ['{7CC0F701-5C87-4B21-8470-199BEDB54B61}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLNni1List }

  IXMLNni1List = interface(IXMLNodeCollection)
    ['{9A01B111-CDEF-4020-8621-7BDA96358915}']
    { Methods & Properties }
    function Add(const Value: LongWord): IXMLNode;
    function Insert(const Index: Integer; const Value: LongWord): IXMLNode;

    function Get_Item(Index: Integer): LongWord;
    property Items[Index: Integer]: LongWord read Get_Item; default;
  end;

{ IXMLReamTypeList }

  IXMLReamTypeList = interface(IXMLNodeCollection)
    ['{11DBFDF4-7844-4D37-B7D5-04F62A58897E}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLRoadAvailabilityTypeList }

  IXMLRoadAvailabilityTypeList = interface(IXMLNodeCollection)
    ['{66F4E9BA-12A3-423C-A638-F5BF56479F83}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLGlueExposureIDTypeList }

  IXMLGlueExposureIDTypeList = interface(IXMLNodeCollection)
    ['{2CD97148-542E-4852-B808-5FA9A7231022}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLBooleanList }

  IXMLBooleanList = interface(IXMLNodeCollection)
    ['{D0470B17-9822-419B-80D1-C51F4DC98D01}']
    { Methods & Properties }
    function Add(const Value: Boolean): IXMLNode;
    function Insert(const Index: Integer; const Value: Boolean): IXMLNode;

    function Get_Item(Index: Integer): Boolean;
    property Items[Index: Integer]: Boolean read Get_Item; default;
  end;

{ IXMLS30List }

  IXMLS30List = interface(IXMLNodeCollection)
    ['{6A2750A1-EB43-4009-8E13-3D610C12261F}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLS255List }

  IXMLS255List = interface(IXMLNodeCollection)
    ['{F299D231-611E-43B0-806B-62AF13A0B259}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ Forward Decls }

  TXMLInvoiceWood = class;
  TXMLInvoiceWoodHeader = class;
  TXMLInvoiceDate = class;
  TXMLDateBasis = class;
  TXMLOtherDate = class;
  TXMLOtherDateList = class;
  TXMLDateTimeRange = class;
  TXMLDateTimeRangeList = class;
  TXMLDateTimeFrom = class;
  TXMLDateTimeTo = class;
  TXMLInvoiceReference = class;
  TXMLInvoiceReferenceList = class;
  TXMLParty = class;
  TXMLPartyList = class;
  TXMLPartyIdentifier = class;
  TXMLPartyIdentifierList = class;
  TXMLNameAddress = class;
  TXMLOrganisationUnit = class;
  TXMLPostalCode = class;
  TXMLCountry = class;
  TXMLGPSCoordinates = class;
  TXMLMeasurement = class;
  TXMLMeasurementList = class;
  TXMLValue = class;
  TXMLRangeMin = class;
  TXMLRangeMax = class;
  TXMLMapCoordinates = class;
  TXMLMapCoordinatesList = class;
  TXMLCoordinates = class;
  TXMLCoordinatesList = class;
  TXMLURL = class;
  TXMLURLList = class;
  TXMLCommonContact = class;
  TXMLCommonContactList = class;
  TXMLContactIdentifier = class;
  TXMLContactAvailability = class;
  TXMLContactAvailabilityList = class;
  TXMLTimeSlot = class;
  TXMLTimeSlotList = class;
  TXMLShipToCharacteristics = class;
  TXMLTypedParty = class;
  TXMLTypedPartyList = class;
  TXMLSupplyPoint = class;
  TXMLSupplyPointList = class;
  TXMLSupplyPointCode = class;
  TXMLSupplyPointCodeList = class;
  TXMLSupplyPointCharacteristics = class;
  TXMLSupplyPointProperty = class;
  TXMLSupplyPointPropertyList = class;
  TXMLSupplyPointPropertyCode = class;
  TXMLSupplyPointPropertyCodeValue = class;
  TXMLDetailMeasurement = class;
  TXMLDetailValue = class;
  TXMLDetailRangeMin = class;
  TXMLDetailRangeMax = class;
  TXMLStandardDeviation = class;
  TXMLTwoSigmaLower = class;
  TXMLTwoSigmaUpper = class;
  TXMLQuantityInformation = class;
  TXMLQuantity = class;
  TXMLInformationalQuantity = class;
  TXMLInformationalQuantityList = class;
  TXMLMapPoint = class;
  TXMLMapPointList = class;
  TXMLMapPointID = class;
  TXMLMapPointIDList = class;
  TXMLAreaInfo = class;
  TXMLAreaInfoList = class;
  TXMLCodeInfo = class;
  TXMLCodeInfoList = class;
  TXMLCodeValue = class;
  TXMLCodeValueList = class;
  TXMLPropertyValue = class;
  TXMLPropertyValueList = class;
  TXMLPositionOnItem = class;
  TXMLPropertySubValue = class;
  TXMLPropertySubValueList = class;
  TXMLEAttachment = class;
  TXMLAttachmentFileName = class;
  TXMLAttachmentFileNameList = class;
  TXMLDocumentReferenceInformation = class;
  TXMLDocumentReferenceInformationList = class;
  TXMLDocumentReferenceID = class;
  TXMLDocumentReference = class;
  TXMLDocumentReferenceList = class;
  TXMLLocationCode = class;
  TXMLTermsOfDelivery = class;
  TXMLIncotermsLocation = class;
  TXMLShipmentMethodOfPayment = class;
  TXMLServiceLevel = class;
  TXMLServiceLevelList = class;
  TXMLServiceLevelReference = class;
  TXMLServiceLevelReferenceList = class;
  TXMLDeliveryRouteCode = class;
  TXMLLocationParty = class;
  TXMLLocationPartyList = class;
  TXMLCountryOfOrigin = class;
  TXMLCountryOfDestination = class;
  TXMLCountryOfConsumption = class;
  TXMLTransportVehicleIdentifier = class;
  TXMLTransportVehicleIdentifierList = class;
  TXMLTransportUnitIdentifier = class;
  TXMLTransportUnitIdentifierList = class;
  TXMLInsurance = class;
  TXMLInsuredValue = class;
  TXMLCurrencyValue = class;
  TXMLCreditDebitNoteReason = class;
  TXMLCreditDebitNoteReasonCode = class;
  TXMLInvoiceShipment = class;
  TXMLInvoiceShipmentList = class;
  TXMLShipmentID = class;
  TXMLInvoiceProductGroup = class;
  TXMLInvoiceProductGroupList = class;
  TXMLProductGroupID = class;
  TXMLInvoiceWoodLineItem = class;
  TXMLInvoiceWoodLineItemList = class;
  TXMLPurchaseOrderInformation = class;
  TXMLDateTimeBasis = class;
  TXMLPurchaseOrderReference = class;
  TXMLPurchaseOrderReferenceList = class;
  TXMLEndsDiscountInformation = class;
  TXMLChargeOrAllowance = class;
  TXMLProductClass = class;
  TXMLProductIdentifier = class;
  TXMLProductIdentifierList = class;
  TXMLProductDescription = class;
  TXMLProductDescriptionList = class;
  TXMLClassification = class;
  TXMLClassificationList = class;
  TXMLClassificationCode = class;
  TXMLProductReference = class;
  TXMLProductReferenceList = class;
  TXMLBookManufacturing = class;
  TXMLBookClassification = class;
  TXMLBookClassificationList = class;
  TXMLBookSubClassification = class;
  TXMLBookSubClassificationList = class;
  TXMLProofInformationalQuantity = class;
  TXMLProofInformationalQuantityList = class;
  TXMLProofApprovalDate = class;
  TXMLProofDueDate = class;
  TXMLPrepInformation = class;
  TXMLPrepInformationList = class;
  TXMLPrepReference = class;
  TXMLPrepReferenceList = class;
  TXMLSuppliedComponentInformation = class;
  TXMLSuppliedComponentInformationList = class;
  TXMLPaper = class;
  TXMLPaperCharacteristics = class;
  TXMLAbrasion = class;
  TXMLAbrasionList = class;
  TXMLAbsorptionInk = class;
  TXMLAbsorptionInkList = class;
  TXMLAbsorptionLight = class;
  TXMLAbsorptionLightList = class;
  TXMLAbsorptionWater = class;
  TXMLAbsorptionWaterList = class;
  TXMLAppearance = class;
  TXMLAppearanceList = class;
  TXMLAsh = class;
  TXMLAshList = class;
  TXMLBasisWeight = class;
  TXMLIncrementalValue = class;
  TXMLIncrementalValueList = class;
  TXMLBendingResistance = class;
  TXMLBendingResistanceList = class;
  TXMLBendingStiffness = class;
  TXMLBendingStiffnessList = class;
  TXMLBrightness = class;
  TXMLBrightnessList = class;
  TXMLBulk = class;
  TXMLBulkList = class;
  TXMLBurst = class;
  TXMLBurstList = class;
  TXMLBurstIndex = class;
  TXMLBurstIndexList = class;
  TXMLCaliper = class;
  TXMLCaliperList = class;
  TXMLCoatWeight = class;
  TXMLCoatWeightList = class;
  TXMLColourDetail = class;
  TXMLColourDetailList = class;
  TXMLCMYK = class;
  TXMLColourShade = class;
  TXMLHSB = class;
  TXMLLab = class;
  TXMLRGB = class;
  TXMLColourCode = class;
  TXMLDensity = class;
  TXMLDensityList = class;
  TXMLDirt = class;
  TXMLDirtList = class;
  TXMLDominantWavelength = class;
  TXMLDominantWavelengthList = class;
  TXMLExcitationPurity = class;
  TXMLExcitationPurityList = class;
  TXMLFibreLength = class;
  TXMLFibreLengthList = class;
  TXMLFibreClassification = class;
  TXMLFibreClassificationList = class;
  TXMLFolding = class;
  TXMLFoldingList = class;
  TXMLFormation = class;
  TXMLFormationList = class;
  TXMLFreeness = class;
  TXMLFreenessList = class;
  TXMLFriction = class;
  TXMLFrictionList = class;
  TXMLGloss = class;
  TXMLGlossList = class;
  TXMLLightScattering = class;
  TXMLLightScatteringList = class;
  TXMLLuminance = class;
  TXMLLuminanceList = class;
  TXMLMoisture = class;
  TXMLMoistureList = class;
  TXMLMullen = class;
  TXMLMullenList = class;
  TXMLOpacity = class;
  TXMLOpacityList = class;
  TXMLPermeability = class;
  TXMLPermeabilityList = class;
  TXMLPH = class;
  TXMLPHList = class;
  TXMLPlyBond = class;
  TXMLPlyBondList = class;
  TXMLPorosity = class;
  TXMLPorosityList = class;
  TXMLPostConsumerWaste = class;
  TXMLPostConsumerWasteList = class;
  TXMLPreConsumerWaste = class;
  TXMLPreConsumerWasteList = class;
  TXMLRecycled = class;
  TXMLRecycledList = class;
  TXMLResistance = class;
  TXMLResistanceList = class;
  TXMLRingCrush = class;
  TXMLRingCrushList = class;
  TXMLRoughness = class;
  TXMLRoughnessList = class;
  TXMLRunnabilityIndex = class;
  TXMLRunnabilityIndexList = class;
  TXMLShowThrough = class;
  TXMLShowThroughList = class;
  TXMLSizing = class;
  TXMLSizingList = class;
  TXMLSmoothness = class;
  TXMLSmoothnessList = class;
  TXMLStiffness = class;
  TXMLStiffnessList = class;
  TXMLStretch = class;
  TXMLStretchList = class;
  TXMLSurfaceStrength = class;
  TXMLSurfaceStrengthList = class;
  TXMLTEA = class;
  TXMLTEAList = class;
  TXMLTear = class;
  TXMLTearList = class;
  TXMLTearIndex = class;
  TXMLTearIndexList = class;
  TXMLTensile = class;
  TXMLTensileList = class;
  TXMLTensileIndex = class;
  TXMLTensileIndexList = class;
  TXMLWhiteness = class;
  TXMLWhitenessList = class;
  TXMLAdditionalTest = class;
  TXMLPlyAttributes = class;
  TXMLPlyAttributesList = class;
  TXMLPlySet = class;
  TXMLPlySetList = class;
  TXMLReel = class;
  TXMLReelConversionCharacteristicsClass = class;
  TXMLConversionCode = class;
  TXMLCoreCharacteristics = class;
  TXMLCoreCharacteristicsList = class;
  TXMLCoreCode = class;
  TXMLCoreStrengthCode = class;
  TXMLEmbossing = class;
  TXMLEmbossingList = class;
  TXMLEmbossingCode = class;
  TXMLWatermark = class;
  TXMLWatermarkList = class;
  TXMLWatermarkCode = class;
  TXMLReelPackagingCharacteristicsClass = class;
  TXMLPackagingCode = class;
  TXMLPackagingCodeList = class;
  TXMLPackagingDescription = class;
  TXMLPackagingDescriptionList = class;
  TXMLWrap = class;
  TXMLWrapList = class;
  TXMLBandCharacteristics = class;
  TXMLBandCharacteristicsList = class;
  TXMLPalletCharacteristics = class;
  TXMLPalletCharacteristicsList = class;
  TXMLProductIdentification = class;
  TXMLProductIdentificationList = class;
  TXMLLabelCharacteristics = class;
  TXMLLabelCharacteristicsList = class;
  TXMLCustomerMarks = class;
  TXMLCustomerMarksList = class;
  TXMLStencilCharacteristics = class;
  TXMLStencilCharacteristicsList = class;
  TXMLMaximumClampingForce = class;
  TXMLSheet = class;
  TXMLSheetConversionCharacteristicsClass = class;
  TXMLSheetSize = class;
  TXMLSheetSizeList = class;
  TXMLPunchedHoleDetails = class;
  TXMLPunchedHoleDetailsList = class;
  TXMLNumberOfHoles = class;
  TXMLSizeOfHolePunch = class;
  TXMLHoleSpacing = class;
  TXMLEvenSpacing = class;
  TXMLDistanceFromEdge = class;
  TXMLDistanceFromEdgeList = class;
  TXMLCuttingDetails = class;
  TXMLCuttingDetailsList = class;
  TXMLCuttingTemplateCode = class;
  TXMLSheetPackagingCharacteristicsClass = class;
  TXMLSheetCount = class;
  TXMLSheetCountList = class;
  TXMLSuppliedComponentReference = class;
  TXMLSuppliedComponentReferenceList = class;
  TXMLComponentShipDate = class;
  TXMLComponentDueDate = class;
  TXMLComponentNeededDate = class;
  TXMLOrderStatusInformation = class;
  TXMLOrderPrimaryStatus = class;
  TXMLOrderSecondaryStatus = class;
  TXMLOrderStatusInformationDate = class;
  TXMLPackagingCharacteristics = class;
  TXMLPackagingCharacteristicsList = class;
  TXMLBoxCharacteristics = class;
  TXMLWrapCharacteristics = class;
  TXMLPalletPackagingCharacteristics = class;
  TXMLBookUnitPacking = class;
  TXMLUnitCharacteristics = class;
  TXMLDocumentInformation = class;
  TXMLDocumentInformationList = class;
  TXMLNumberOfDocuments = class;
  TXMLNumberOfDocumentsList = class;
  TXMLDocumentInstruction = class;
  TXMLDocumentContent = class;
  TXMLDocumentContentList = class;
  TXMLForestWood = class;
  TXMLTreeSpeciesGroup = class;
  TXMLTreeSpeciesGroupList = class;
  TXMLTreeSpeciesGroupCode = class;
  TXMLForestWoodClass = class;
  TXMLForestWoodClassList = class;
  TXMLForestWoodClassCode = class;
  TXMLForestWoodCharacteristics = class;
  TXMLProductAdaptedFor = class;
  TXMLForestWoodPackagingCharacteristics = class;
  TXMLPackagingCodeSpecification = class;
  TXMLForestWoodProcessingCharacteristics = class;
  TXMLProcessingCodeSpecification = class;
  TXMLProcessingCode = class;
  TXMLSafetyAndEnvironmentalInformationClass = class;
  TXMLSafetyAndEnvironmentalInformationClassList = class;
  TXMLChainOfCustody = class;
  TXMLLabelStock = class;
  TXMLLabelStockCharacteristics = class;
  TXMLLabelStockLayer = class;
  TXMLLabelStockLayerList = class;
  TXMLLayerMaterial = class;
  TXMLExtraFeature = class;
  TXMLExtraFeatureList = class;
  TXMLSingleWidthReel = class;
  TXMLSingleWidthReelConversionCharacteristics = class;
  TXMLTrimmedReel = class;
  TXMLTrimmedReelConversionCharacteristics = class;
  TXMLSlitReel = class;
  TXMLSlitReelList = class;
  TXMLSlitReelOrderQuantity = class;
  TXMLSlitReelReference = class;
  TXMLSlitReelReferenceList = class;
  TXMLPulpClass = class;
  TXMLPulpCharacteristics = class;
  TXMLDrainageResistance = class;
  TXMLDrainageResistanceList = class;
  TXMLViscosity = class;
  TXMLViscosityList = class;
  TXMLBale = class;
  TXMLBaleConversionCharacteristics = class;
  TXMLBalePackagingCharacteristics = class;
  TXMLPulpUnitCharacteristics = class;
  TXMLSlurry = class;
  TXMLNonStandardPulp = class;
  TXMLRecoveredPaper = class;
  TXMLVirginFibre = class;
  TXMLTimberCharacteristics = class;
  TXMLLumberSpeciesClass = class;
  TXMLLumberSpeciesClassList = class;
  TXMLLog = class;
  TXMLLogCharacteristics = class;
  TXMLLogPackagingCharacteristics = class;
  TXMLIdentifierS60 = class;
  TXMLIdentifierS60List = class;
  TXMLChip = class;
  TXMLChipCharacteristics = class;
  TXMLBark = class;
  TXMLSawdust = class;
  TXMLChipPackagingCharacteristics = class;
  TXMLWoodProducts = class;
  TXMLWoodTimbersDimensionalLumberBoards = class;
  TXMLSoftwoodLumber = class;
  TXMLSoftwoodLumberCharacteristicsClass = class;
  TXMLLumberGradeClass = class;
  TXMLDimensionConstructionClass = class;
  TXMLDimensionConstructionClassList = class;
  TXMLDimensionThicknessClass = class;
  TXMLDimensionThicknessClassList = class;
  TXMLLumberSeasoningClass = class;
  TXMLLumberMoistureContentClass = class;
  TXMLHeatTreatmentClass = class;
  TXMLLumberManufacturingProcessClass = class;
  TXMLLumberManufacturingProcessClassList = class;
  TXMLLumberPatternProfileClass = class;
  TXMLLumberTrimClass = class;
  TXMLLumberJoiningClass = class;
  TXMLPressureTreatmentClass = class;
  TXMLPressureTreatmentCompoundClass = class;
  TXMLPressureTreatmentConcentration = class;
  TXMLFireTreatmentClass = class;
  TXMLOtherTreatmentClass = class;
  TXMLConstructionGradeStampClass = class;
  TXMLExLogClass = class;
  TXMLLengthCutDescription = class;
  TXMLPackaging = class;
  TXMLProductPackagingClass = class;
  TXMLUnitDimensionType = class;
  TXMLDimensionMeasurementClass = class;
  TXMLLumberPackageCodeClass = class;
  TXMLHardwoodLumber = class;
  TXMLRoofingSidingDeckingFencing = class;
  TXMLNaturalWoodSiding = class;
  TXMLNaturalWoodSidingOther = class;
  TXMLDeckAndPorchFlooringMaterialsNaturalWood = class;
  TXMLCompositeAndVeneerWoodPanels = class;
  TXMLNAPlywoodOSBCharacteristicsClass = class;
  TXMLPlywoodOSBGradeClass = class;
  TXMLPlywoodOSBSurfaceClass = class;
  TXMLPlywoodOSBOverlayClass = class;
  TXMLPlywoodOSBOverlayClassList = class;
  TXMLPlywoodOSBEdgeClass = class;
  TXMLPlywoodOSBSupplementalClass = class;
  TXMLPlywoodOSBSupplementalClassList = class;
  TXMLWoodPanelProductsClass = class;
  TXMLPlywoodLayupStructureClass = class;
  TXMLPlywoodPlySetClass = class;
  TXMLPlywoodPlyCharacteristicsClass = class;
  TXMLPlywoodPlyCharacteristicsClassList = class;
  TXMLWoodPanelCharacteristicsClass = class;
  TXMLPlywoodPlyGrade = class;
  TXMLWoodPanelGlueExposureClass = class;
  TXMLWoodPanelGlueExposureClassList = class;
  TXMLEdgeClass = class;
  TXMLEdgeClassList = class;
  TXMLPlywoodSideClass = class;
  TXMLPlywoodSideClassList = class;
  TXMLPlywoodMachining = class;
  TXMLConstructionPackagesAndPreFabPanels = class;
  TXMLFloor = class;
  TXMLWall = class;
  TXMLRoof = class;
  TXMLOtherProducts = class;
  TXMLOtherProductsClass = class;
  TXMLOtherProductsClassList = class;
  TXMLOtherProductsCharacteristics = class;
  TXMLOtherProductsPackagingCharacteristics = class;
  TXMLOtherProductsProcessingCharacteristics = class;
  TXMLInvoiceLineBaseAmountInformation = class;
  TXMLPriceDetails = class;
  TXMLPricePerUnit = class;
  TXMLInformationalPricePerUnit = class;
  TXMLInformationalPricePerUnitList = class;
  TXMLExchangeRate = class;
  TXMLMinCurrencyValue = class;
  TXMLMaxCurrencyValue = class;
  TXMLMonetaryAdjustment = class;
  TXMLMonetaryAdjustmentList = class;
  TXMLMonetaryAdjustmentStartAmount = class;
  TXMLMonetaryAdjustmentStartQuantity = class;
  TXMLPriceAdjustment = class;
  TXMLFlatAmountAdjustment = class;
  TXMLAdjustmentFixedAmount = class;
  TXMLTaxAdjustment = class;
  TXMLTaxAmount = class;
  TXMLInformationalAmount = class;
  TXMLInformationalAmountList = class;
  TXMLGeneralLedgerAccount = class;
  TXMLMonetaryAdjustmentAmount = class;
  TXMLMonetaryAdjustmentReference = class;
  TXMLMonetaryAdjustmentReferenceList = class;
  TXMLPriceSpecification = class;
  TXMLPriceSpecificationList = class;
  TXMLBookSpecIdentification = class;
  TXMLSpecIssueDate = class;
  TXMLInvoiceLineBaseAmount = class;
  TXMLChargeInformation = class;
  TXMLChargeInformationList = class;
  TXMLCostComponent = class;
  TXMLCostComponentList = class;
  TXMLCostComponentCode = class;
  TXMLCostComponentCodeValue = class;
  TXMLCostComponentDescription = class;
  TXMLCostComponentDescriptionList = class;
  TXMLTransportUnitCharacteristics = class;
  TXMLTransportUnitCharacteristicsList = class;
  TXMLTransportUnitCode = class;
  TXMLTransportUnitMeasurements = class;
  TXMLTransportUnitMeasurementsList = class;
  TXMLTransportUnitEquipment = class;
  TXMLTransportUnitEquipmentList = class;
  TXMLTransportUnitEquipmentCode = class;
  TXMLTransportUnitEquipmentDescription = class;
  TXMLTransportUnitEquipmentDescriptionList = class;
  TXMLEquipmentPropertyValue = class;
  TXMLEquipmentPropertyValueList = class;
  TXMLTransportUnitDetail = class;
  TXMLTransportUnitDetailCode = class;
  TXMLTransportUnitReferenceIDInfo = class;
  TXMLTransportUnitReferenceIDInfoList = class;
  TXMLTransportVehicleCharacteristics = class;
  TXMLTransportVehicleCode = class;
  TXMLTransportVehicleMeasurements = class;
  TXMLTransportVehicleEquipment = class;
  TXMLTransportVehicleEquipmentList = class;
  TXMLTransportVehicleEquipmentCode = class;
  TXMLTransportVehicleEquipmentDescription = class;
  TXMLTransportVehicleEquipmentDescriptionList = class;
  TXMLBrandAndModel = class;
  TXMLModel = class;
  TXMLTransportVehicleDetail = class;
  TXMLChargeReference = class;
  TXMLChargeReferenceList = class;
  TXMLChargeAmount = class;
  TXMLChargeNetAmount = class;
  TXMLInvoiceLineAmount = class;
  TXMLInvoiceDeliveryInformation = class;
  TXMLInvoiceDeliveryInformationList = class;
  TXMLDeliveryMessageDate = class;
  TXMLDeliveryDate = class;
  TXMLDeliveryMessageReference = class;
  TXMLDeliveryMessageReferenceList = class;
  TXMLMillCharacteristics = class;
  TXMLTransportModeCharacteristics = class;
  TXMLTransportModeCharacteristicsList = class;
  TXMLTransportModeCode = class;
  TXMLDeliveryDateWindow = class;
  TXMLDeliveryDateWindowList = class;
  TXMLTaxStatement = class;
  TXMLTaxStatementCode = class;
  TXMLStatisticalGoodsInformation = class;
  TXMLCommodityGoodsCode = class;
  TXMLProductGroupSummary = class;
  TXMLTotalQuantity = class;
  TXMLTotalQuantityList = class;
  TXMLTotalInformationalQuantity = class;
  TXMLTotalInformationalQuantityList = class;
  TXMLProductSummary = class;
  TXMLLengthSpecification = class;
  TXMLLengthSpecificationList = class;
  TXMLLengthCategory = class;
  TXMLShipmentSummary = class;
  TXMLInvoiceWoodSummary = class;
  TXMLLineItemSubTotal = class;
  TXMLTotalAdjustments = class;
  TXMLTotalTaxAmount = class;
  TXMLTotalFASAmount = class;
  TXMLTotalNetAmount = class;
  TXMLTotalAmount = class;
  TXMLTermsOfPayment = class;
  TXMLTermsOfPaymentList = class;
  TXMLTermsOfPaymentCode = class;
  TXMLTermsBasisDate = class;
  TXMLTermsDiscountDueDate = class;
  TXMLTermsNetDueDate = class;
  TXMLTotalNetOfTermsDiscount = class;
  TXMLTotalNetOfTermsDiscountList = class;
  TXMLAmountSubjectToTermsDiscount = class;
  TXMLTotalTermsDiscountNetAmount = class;
  TXMLTotalTermsDiscountNetAmountTax = class;
  TXMLTotalTermsDiscountAmount = class;
  TXMLTotalTermsDiscountNetAmountDue = class;
  TXMLTotalTermsDiscountTaxAmount = class;
  TXMLTotalTermsDiscountAmountDue = class;
  TXMLCustomsTotals = class;
  TXMLCustomsTotalsList = class;
  TXMLCustomsStampInformation = class;
  TXMLCustomsStampInformationList = class;
  TXMLCustomsStampDate = class;
  TXMLCustomsReferenceNumber = class;
  TXMLSupplierCustomsReference = class;
  TXMLTermsAndDisclaimers = class;
  TXMLTermsAndDisclaimersList = class;
  TXMLBusinessParty = class;
  TXMLCurrencyPerUnit = class;
  TXMLDeliveryInformationType = class;
  TXMLDeliveryMessageHeader = class;
  TXMLDeliveryMessageReason = class;
  TXMLDeliveryMessageReasonList = class;
  TXMLDeliveryMessageReasonCode = class;
  TXMLCoLoading = class;
  TXMLCoLoadingList = class;
  TXMLCoLoadingNumber = class;
  TXMLCoLoadingReference = class;
  TXMLCoLoadingReferenceList = class;
  TXMLDeliveryLeg = class;
  TXMLDeliveryLegList = class;
  TXMLDeliveryOrigin = class;
  TXMLDeliveryOriginList = class;
  TXMLLocationCharacteristics = class;
  TXMLResourceInformation = class;
  TXMLResourceInformationIssueDate = class;
  TXMLResourceCharacteristics = class;
  TXMLResourceCharacteristicsList = class;
  TXMLResourceTypeCode = class;
  TXMLResourceIDInfo = class;
  TXMLResourceIDInfoList = class;
  TXMLResourceIdentifier = class;
  TXMLResourceReferenceIDInfo = class;
  TXMLResourceReferenceIDInfoList = class;
  TXMLResourceReference = class;
  TXMLResourceReferenceList = class;
  TXMLResourceIntroductionDate = class;
  TXMLResourceAvailability = class;
  TXMLResourceShiftInformation = class;
  TXMLResourceShiftInformationList = class;
  TXMLResourceShiftCode = class;
  TXMLResourcePropertyValue = class;
  TXMLResourcePropertyValueList = class;
  TXMLPropertyCode = class;
  TXMLQuantityValue = class;
  TXMLQuantityValueList = class;
  TXMLTransportLoadingCharacteristics = class;
  TXMLTransportLoadingCharacteristicsList = class;
  TXMLTransportLoadingCode = class;
  TXMLTransportLoadingCodeDescription = class;
  TXMLGoodsLoadingSequence = class;
  TXMLLoadingSequence = class;
  TXMLLoadingSequenceList = class;
  TXMLLoadingFrom = class;
  TXMLTransportUnloadingCharacteristics = class;
  TXMLTransportUnloadingCharacteristicsList = class;
  TXMLTransportUnloadingCode = class;
  TXMLTransportUnloadingCodeDescription = class;
  TXMLTransportOtherInstructions = class;
  TXMLTransportOtherInstructionsList = class;
  TXMLTransportInstructionCode = class;
  TXMLTransportPropertyValue = class;
  TXMLTransportPropertyValueList = class;
  TXMLRoute = class;
  TXMLRouteList = class;
  TXMLRouteLocation = class;
  TXMLRouteLocationList = class;
  TXMLRouteReference = class;
  TXMLRouteReferenceList = class;
  TXMLRouteLength = class;
  TXMLRouteLengthList = class;
  TXMLRouteDefinition = class;
  TXMLRouteLeg = class;
  TXMLRouteLegList = class;
  TXMLRouteLegLength = class;
  TXMLRouteLegLengthList = class;
  TXMLRoadCharacteristics = class;
  TXMLRoadClassification = class;
  TXMLRoadClassificationList = class;
  TXMLRoadClassificationCode = class;
  TXMLRoadBearingCapacity = class;
  TXMLRoadBearingCapacityList = class;
  TXMLRoadObstruction = class;
  TXMLRoadObstructionList = class;
  TXMLRoadMaintenanceInfo = class;
  TXMLRoadMaintenanceInfoList = class;
  TXMLDeliveryTransitTime = class;
  TXMLDeliveryDestination = class;
  TXMLDeliveryDestinationList = class;
  TXMLDeliveryLegReference = class;
  TXMLDeliveryLegReferenceList = class;
  TXMLTermsOfChartering = class;
  TXMLTermsOfCharteringList = class;
  TXMLBusinessChainInfo = class;
  TXMLValidityPeriod = class;
  TXMLBusinessChainSequence = class;
  TXMLBusinessChainSequenceList = class;
  TXMLDocumentRequiredInfo = class;
  TXMLDocumentRequiredInfoList = class;
  TXMLDeliveryMessageLineItem = class;
  TXMLInventoryClass = class;
  TXMLInventoryClassCode = class;
  TXMLInventoryClassCodeList = class;
  TXMLPackageInformationClass = class;
  TXMLPackageInformationClassList = class;
  TXMLPackageCharacteristics = class;
  TXMLBaleItem = class;
  TXMLBaleItemList = class;
  TXMLBaleCharacteristics = class;
  TXMLDateMade = class;
  TXMLDateFinished = class;
  TXMLBaleReference = class;
  TXMLBaleReferenceList = class;
  TXMLBoxItem = class;
  TXMLBoxItemList = class;
  TXMLReamItem = class;
  TXMLReamItemList = class;
  TXMLSheetItem = class;
  TXMLSheetItemList = class;
  TXMLDateSheeted = class;
  TXMLUnitItem = class;
  TXMLUnitItemList = class;
  TXMLUnitReference = class;
  TXMLUnitReferenceList = class;
  TXMLBoxReference = class;
  TXMLBoxReferenceList = class;
  TXMLReelItem = class;
  TXMLReelItemList = class;
  TXMLDeliveryMessageReelCharacteristics = class;
  TXMLMillJoinLocation = class;
  TXMLMillJoinLocationList = class;
  TXMLDateWound = class;
  TXMLWoodItem = class;
  TXMLWoodItemList = class;
  TXMLPackageReference = class;
  TXMLPackageReferenceList = class;
  TXMLMeasuringSpecification = class;
  TXMLMeasuringSpecificationList = class;
  TXMLMeasuringLocation = class;
  TXMLMeasuringUnitIdentifier = class;
  TXMLMeasuringUnitIdentifierList = class;
  TXMLMeasuringUnitBrandAndModel = class;
  TXMLMeasuringEquipment = class;
  TXMLMeasuringEquipmentList = class;
  TXMLMeasuringEquipmentCode = class;
  TXMLMeasuringEquipmentCodeList = class;
  TXMLMeasurementModule = class;
  TXMLCalibration = class;
  TXMLCalibrationDate = class;
  TXMLMeasuringReference = class;
  TXMLMeasuringReferenceList = class;
  TXMLMeasuringCodeInfo = class;
  TXMLMeasuringCodeInfoList = class;
  TXMLMeasuringCode = class;
  TXMLMeasuringProduct = class;
  TXMLMeasurementSpecification = class;
  TXMLPropertySpecification = class;
  TXMLPropertySpecificationList = class;
  TXMLPropertySubSpecification = class;
  TXMLPropertySubSpecificationList = class;
  TXMLQuantitySpecification = class;
  TXMLQuantitySpecificationList = class;
  TXMLDeliveryMessageSummary = class;
  TXMLDeliveryPlanningBucket = class;
  TXMLTimePeriod = class;
  TXMLPlanningOutcome = class;
  TXMLPlanningOutcomeList = class;
  TXMLPlanningPropertyValue = class;
  TXMLPlanningPropertyValueList = class;
  TXMLDeviationReason = class;
  TXMLDeviationReasonList = class;
  TXMLDeviationReasonCode = class;
  TXMLPlanningReferenceInformation = class;
  TXMLPlanningReferenceInformationList = class;
  TXMLDocument = class;
  TXMLDocumentDate = class;
  TXMLDeliverySchedule = class;
  TXMLDeliveryScheduleList = class;
  TXMLProductionStatus = class;
  TXMLProductionLastDateOfChange = class;
  TXMLDeliveryStatus = class;
  TXMLDeliveryLastDateOfChange = class;
  TXMLDeliveryScheduleReference = class;
  TXMLDeliveryScheduleReferenceList = class;
  TXMLGoodsReceiptHeader = class;
  TXMLGoodsReceiptIssueDate = class;
  TXMLGoodsReceiptArrivalDate = class;
  TXMLGoodsReceiptUnloadDate = class;
  TXMLGoodsReceiptReference = class;
  TXMLGoodsReceiptReferenceList = class;
  TXMLTransportationComment = class;
  TXMLTransportationCommentList = class;
  TXMLGoodsReceiptLineItem = class;
  TXMLGoodsReceiptPackage = class;
  TXMLGoodsReceiptPackageList = class;
  TXMLGoodsReceiptSummary = class;
  TXMLMeasurementWithText = class;
  TXMLPlanningOutcomeBucket = class;
  TXMLScaleHouse = class;
  TXMLShippingInstructionsHeader = class;
  TXMLShippingInstructionsInformation = class;
  TXMLShippingInstructionsIssuedDate = class;
  TXMLShippingInstructionsConfirmationIssuedDate = class;
  TXMLShippingInstructionsReference = class;
  TXMLShippingInstructionsReferenceList = class;
  TXMLShippingInstructionsLineItemByProduct = class;
  TXMLShipToInformation = class;
  TXMLShipToInformationList = class;
  TXMLShippingInstructionsLineItemByShipTo = class;
  TXMLShippingInstructionsPurchaseOrderLineItem = class;
  TXMLPackageIdentifier = class;
  TXMLShippingInstructionsSummary = class;
  TXMLTrimSize = class;
  TXMLBookBlockBulk = class;
  TXMLSpineSize = class;
  TXMLPlywoodOSBSpeciesTypeList = class;
  TXMLS60List = class;
  TXMLS72List = class;
  TXMLS20List = class;
  TXMLNni1List = class;
  TXMLReamTypeList = class;
  TXMLRoadAvailabilityTypeList = class;
  TXMLGlueExposureIDTypeList = class;
  TXMLBooleanList = class;
  TXMLS30List = class;
  TXMLS255List = class;

{ TXMLInvoiceWood }

  TXMLInvoiceWood = class(TXMLNode, IXMLInvoiceWood)
  private
    FInvoiceShipment: IXMLInvoiceShipmentList;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
  protected
    { IXMLInvoiceWood }
    function Get_InvoiceType: UnicodeString;
    function Get_InvoiceContextType: UnicodeString;
    function Get_Reissued: UnicodeString;
    function Get_Language: UnicodeString;
    function Get_InvoiceWoodHeader: IXMLInvoiceWoodHeader;
    function Get_InvoiceShipment: IXMLInvoiceShipmentList;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_InvoiceWoodSummary: IXMLInvoiceWoodSummary;
    procedure Set_InvoiceType(Value: UnicodeString);
    procedure Set_InvoiceContextType(Value: UnicodeString);
    procedure Set_Reissued(Value: UnicodeString);
    procedure Set_Language(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceWoodHeader }

  TXMLInvoiceWoodHeader = class(TXMLNode, IXMLInvoiceWoodHeader)
  private
    FOtherDate: IXMLOtherDateList;
    FInvoiceReference: IXMLInvoiceReferenceList;
    FRemitToParty: IXMLPartyList;
    FOtherParty: IXMLTypedPartyList;
    FReceiverParty: IXMLTypedPartyList;
    FLocationParty: IXMLLocationPartyList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLInvoiceWoodHeader }
    function Get_InvoiceNumber: UnicodeString;
    function Get_InvoiceDate: IXMLInvoiceDate;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_InvoiceReference: IXMLInvoiceReferenceList;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_BuyerParty: IXMLParty;
    function Get_RemitToParty: IXMLPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_LocationParty: IXMLLocationPartyList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_CarrierParty: IXMLParty;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifier;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifier;
    function Get_Insurance: IXMLInsurance;
    function Get_CreditDebitNoteReason: IXMLCreditDebitNoteReason;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_InvoiceNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceDate }

  TXMLInvoiceDate = class(TXMLNode, IXMLInvoiceDate)
  protected
    { IXMLInvoiceDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateBasis }

  TXMLDateBasis = class(TXMLNode, IXMLDateBasis)
  protected
    { IXMLDateBasis }
    function Get_Year: UnicodeString;
    function Get_Month: LongWord;
    function Get_Day: LongWord;
    procedure Set_Year(Value: UnicodeString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Day(Value: LongWord);
  end;

{ TXMLOtherDate }

  TXMLOtherDate = class(TXMLNode, IXMLOtherDate)
  protected
    { IXMLOtherDate }
    function Get_DateType: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_Year: UnicodeString;
    function Get_YearMonth: UnicodeString;
    function Get_Week: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    procedure Set_DateType(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    procedure Set_Year(Value: UnicodeString);
    procedure Set_YearMonth(Value: UnicodeString);
    procedure Set_Week(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherDateList }

  TXMLOtherDateList = class(TXMLNodeCollection, IXMLOtherDateList)
  protected
    { IXMLOtherDateList }
    function Add: IXMLOtherDate;
    function Insert(const Index: Integer): IXMLOtherDate;

    function Get_Item(Index: Integer): IXMLOtherDate;
  end;

{ TXMLDateTimeRange }

  TXMLDateTimeRange = class(TXMLNode, IXMLDateTimeRange)
  protected
    { IXMLDateTimeRange }
    function Get_DateTimeFrom: IXMLDateTimeFrom;
    function Get_DateTimeTo: IXMLDateTimeTo;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateTimeRangeList }

  TXMLDateTimeRangeList = class(TXMLNodeCollection, IXMLDateTimeRangeList)
  protected
    { IXMLDateTimeRangeList }
    function Add: IXMLDateTimeRange;
    function Insert(const Index: Integer): IXMLDateTimeRange;

    function Get_Item(Index: Integer): IXMLDateTimeRange;
  end;

{ TXMLDateTimeFrom }

  TXMLDateTimeFrom = class(TXMLNode, IXMLDateTimeFrom)
  protected
    { IXMLDateTimeFrom }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateTimeTo }

  TXMLDateTimeTo = class(TXMLNode, IXMLDateTimeTo)
  protected
    { IXMLDateTimeTo }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceReference }

  TXMLInvoiceReference = class(TXMLNode, IXMLInvoiceReference)
  protected
    { IXMLInvoiceReference }
    function Get_InvoiceReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_InvoiceReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLInvoiceReferenceList }

  TXMLInvoiceReferenceList = class(TXMLNodeCollection, IXMLInvoiceReferenceList)
  protected
    { IXMLInvoiceReferenceList }
    function Add: IXMLInvoiceReference;
    function Insert(const Index: Integer): IXMLInvoiceReference;

    function Get_Item(Index: Integer): IXMLInvoiceReference;
  end;

{ TXMLParty }

  TXMLParty = class(TXMLNode, IXMLParty)
  private
    FPartyIdentifier: IXMLPartyIdentifierList;
    FCommonContact: IXMLCommonContactList;
  protected
    { IXMLParty }
    function Get_LogisticsRole: UnicodeString;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_NameAddress: IXMLNameAddress;
    function Get_URL: IXMLURL;
    function Get_CommonContact: IXMLCommonContactList;
    procedure Set_LogisticsRole(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyList }

  TXMLPartyList = class(TXMLNodeCollection, IXMLPartyList)
  protected
    { IXMLPartyList }
    function Add: IXMLParty;
    function Insert(const Index: Integer): IXMLParty;

    function Get_Item(Index: Integer): IXMLParty;
  end;

{ TXMLPartyIdentifier }

  TXMLPartyIdentifier = class(TXMLNode, IXMLPartyIdentifier)
  protected
    { IXMLPartyIdentifier }
    function Get_PartyIdentifierType: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_PartyIdentifierType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLPartyIdentifierList }

  TXMLPartyIdentifierList = class(TXMLNodeCollection, IXMLPartyIdentifierList)
  protected
    { IXMLPartyIdentifierList }
    function Add: IXMLPartyIdentifier;
    function Insert(const Index: Integer): IXMLPartyIdentifier;

    function Get_Item(Index: Integer): IXMLPartyIdentifier;
  end;

{ TXMLNameAddress }

  TXMLNameAddress = class(TXMLNode, IXMLNameAddress)
  private
    FMapCoordinates: IXMLMapCoordinatesList;
  protected
    { IXMLNameAddress }
    function Get_CommunicationRole: UnicodeString;
    function Get_AddressRoleType: UnicodeString;
    function Get_Name1: UnicodeString;
    function Get_Name2: UnicodeString;
    function Get_Name3: UnicodeString;
    function Get_OrganisationUnit: IXMLOrganisationUnit;
    function Get_Address1: UnicodeString;
    function Get_Address2: UnicodeString;
    function Get_Address3: UnicodeString;
    function Get_Address4: UnicodeString;
    function Get_City: UnicodeString;
    function Get_County: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_PostalCode: IXMLPostalCode;
    function Get_Country: IXMLCountry;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_CommunicationRole(Value: UnicodeString);
    procedure Set_AddressRoleType(Value: UnicodeString);
    procedure Set_Name1(Value: UnicodeString);
    procedure Set_Name2(Value: UnicodeString);
    procedure Set_Name3(Value: UnicodeString);
    procedure Set_Address1(Value: UnicodeString);
    procedure Set_Address2(Value: UnicodeString);
    procedure Set_Address3(Value: UnicodeString);
    procedure Set_Address4(Value: UnicodeString);
    procedure Set_City(Value: UnicodeString);
    procedure Set_County(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_PostalCode(Value: IXMLPostalCode);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrganisationUnit }

  TXMLOrganisationUnit = class(TXMLNode, IXMLOrganisationUnit)
  protected
    { IXMLOrganisationUnit }
    function Get_OrganisationUnitType: UnicodeString;
    function Get_OrganisationUnitName: UnicodeString;
    function Get_OrganisationUnitCode: UnicodeString;
    procedure Set_OrganisationUnitType(Value: UnicodeString);
    procedure Set_OrganisationUnitName(Value: UnicodeString);
    procedure Set_OrganisationUnitCode(Value: UnicodeString);
  end;

{ TXMLPostalCode }

  TXMLPostalCode = class(TXMLNode, IXMLPostalCode)
  protected
    { IXMLPostalCode }
  end;

{ TXMLCountry }

  TXMLCountry = class(TXMLNode, IXMLCountry)
  protected
    { IXMLCountry }
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
  end;

{ TXMLGPSCoordinates }

  TXMLGPSCoordinates = class(TXMLNode, IXMLGPSCoordinates)
  protected
    { IXMLGPSCoordinates }
    function Get_GPSSystem: UnicodeString;
    function Get_Latitude: Double;
    function Get_Longitude: Double;
    function Get_Height: IXMLMeasurement;
    procedure Set_GPSSystem(Value: UnicodeString);
    procedure Set_Latitude(Value: Double);
    procedure Set_Longitude(Value: Double);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasurement }

  TXMLMeasurement = class(TXMLNode, IXMLMeasurement)
  protected
    { IXMLMeasurement }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasurementList }

  TXMLMeasurementList = class(TXMLNodeCollection, IXMLMeasurementList)
  protected
    { IXMLMeasurementList }
    function Add: IXMLMeasurement;
    function Insert(const Index: Integer): IXMLMeasurement;

    function Get_Item(Index: Integer): IXMLMeasurement;
  end;

{ TXMLValue }

  TXMLValue = class(TXMLNode, IXMLValue)
  protected
    { IXMLValue }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLRangeMin }

  TXMLRangeMin = class(TXMLNode, IXMLRangeMin)
  protected
    { IXMLRangeMin }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLRangeMax }

  TXMLRangeMax = class(TXMLNode, IXMLRangeMax)
  protected
    { IXMLRangeMax }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLMapCoordinates }

  TXMLMapCoordinates = class(TXMLNode, IXMLMapCoordinates)
  private
    FCoordinates: IXMLCoordinatesList;
    FAltitude: IXMLMeasurementList;
  protected
    { IXMLMapCoordinates }
    function Get_MapReferenceSystem: UnicodeString;
    function Get_MapCoordinateType: UnicodeString;
    function Get_MapAreaBorderType: UnicodeString;
    function Get_Coordinates: IXMLCoordinatesList;
    function Get_Altitude: IXMLMeasurementList;
    procedure Set_MapReferenceSystem(Value: UnicodeString);
    procedure Set_MapCoordinateType(Value: UnicodeString);
    procedure Set_MapAreaBorderType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMapCoordinatesList }

  TXMLMapCoordinatesList = class(TXMLNodeCollection, IXMLMapCoordinatesList)
  protected
    { IXMLMapCoordinatesList }
    function Add: IXMLMapCoordinates;
    function Insert(const Index: Integer): IXMLMapCoordinates;

    function Get_Item(Index: Integer): IXMLMapCoordinates;
  end;

{ TXMLCoordinates }

  TXMLCoordinates = class(TXMLNode, IXMLCoordinates)
  protected
    { IXMLCoordinates }
    function Get_CoordinateFormatType: UnicodeString;
    function Get_CoordinateDisplayOrder: LongWord;
    procedure Set_CoordinateFormatType(Value: UnicodeString);
    procedure Set_CoordinateDisplayOrder(Value: LongWord);
  end;

{ TXMLCoordinatesList }

  TXMLCoordinatesList = class(TXMLNodeCollection, IXMLCoordinatesList)
  protected
    { IXMLCoordinatesList }
    function Add: IXMLCoordinates;
    function Insert(const Index: Integer): IXMLCoordinates;

    function Get_Item(Index: Integer): IXMLCoordinates;
  end;

{ TXMLURL }

  TXMLURL = class(TXMLNode, IXMLURL)
  protected
    { IXMLURL }
    function Get_URLContext: UnicodeString;
    procedure Set_URLContext(Value: UnicodeString);
  end;

{ TXMLURLList }

  TXMLURLList = class(TXMLNodeCollection, IXMLURLList)
  protected
    { IXMLURLList }
    function Add: IXMLURL;
    function Insert(const Index: Integer): IXMLURL;

    function Get_Item(Index: Integer): IXMLURL;
  end;

{ TXMLCommonContact }

  TXMLCommonContact = class(TXMLNode, IXMLCommonContact)
  private
    FContactAvailability: IXMLContactAvailabilityList;
    FMapCoordinates: IXMLMapCoordinatesList;
  protected
    { IXMLCommonContact }
    function Get_ContactType: UnicodeString;
    function Get_ContactName: UnicodeString;
    function Get_ContactIdentifier: IXMLContactIdentifier;
    function Get_Telephone: UnicodeString;
    function Get_MobilePhone: UnicodeString;
    function Get_Email: UnicodeString;
    function Get_Fax: UnicodeString;
    function Get_ContactAvailability: IXMLContactAvailabilityList;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_ContactType(Value: UnicodeString);
    procedure Set_ContactName(Value: UnicodeString);
    procedure Set_Telephone(Value: UnicodeString);
    procedure Set_MobilePhone(Value: UnicodeString);
    procedure Set_Email(Value: UnicodeString);
    procedure Set_Fax(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCommonContactList }

  TXMLCommonContactList = class(TXMLNodeCollection, IXMLCommonContactList)
  protected
    { IXMLCommonContactList }
    function Add: IXMLCommonContact;
    function Insert(const Index: Integer): IXMLCommonContact;

    function Get_Item(Index: Integer): IXMLCommonContact;
  end;

{ TXMLContactIdentifier }

  TXMLContactIdentifier = class(TXMLNode, IXMLContactIdentifier)
  protected
    { IXMLContactIdentifier }
    function Get_ContactIdentifierType: UnicodeString;
    procedure Set_ContactIdentifierType(Value: UnicodeString);
  end;

{ TXMLContactAvailability }

  TXMLContactAvailability = class(TXMLNode, IXMLContactAvailability)
  private
    FTimeSlot: IXMLTimeSlotList;
    FDateTimeRange: IXMLDateTimeRangeList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLContactAvailability }
    function Get_CalendarPeriod: UnicodeString;
    function Get_IsTimeSlotAvailable: UnicodeString;
    function Get_TimeSlot: IXMLTimeSlotList;
    function Get_DateTimeRange: IXMLDateTimeRangeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CalendarPeriod(Value: UnicodeString);
    procedure Set_IsTimeSlotAvailable(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLContactAvailabilityList }

  TXMLContactAvailabilityList = class(TXMLNodeCollection, IXMLContactAvailabilityList)
  protected
    { IXMLContactAvailabilityList }
    function Add: IXMLContactAvailability;
    function Insert(const Index: Integer): IXMLContactAvailability;

    function Get_Item(Index: Integer): IXMLContactAvailability;
  end;

{ TXMLTimeSlot }

  TXMLTimeSlot = class(TXMLNode, IXMLTimeSlot)
  protected
    { IXMLTimeSlot }
    function Get_From: UnicodeString;
    function Get_To_: UnicodeString;
    procedure Set_From(Value: UnicodeString);
    procedure Set_To_(Value: UnicodeString);
  end;

{ TXMLTimeSlotList }

  TXMLTimeSlotList = class(TXMLNodeCollection, IXMLTimeSlotList)
  protected
    { IXMLTimeSlotList }
    function Add: IXMLTimeSlot;
    function Insert(const Index: Integer): IXMLTimeSlot;

    function Get_Item(Index: Integer): IXMLTimeSlot;
  end;

{ TXMLShipToCharacteristics }

  TXMLShipToCharacteristics = class(TXMLNode, IXMLShipToCharacteristics)
  private
    FSupplyPoint: IXMLSupplyPointList;
  protected
    { IXMLShipToCharacteristics }
    function Get_ShipToParty: IXMLTypedParty;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_LocationCode: IXMLLocationCode;
    function Get_TermsOfDelivery: IXMLTermsOfDelivery;
    function Get_DeliveryRouteCode: IXMLDeliveryRouteCode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTypedParty }

  TXMLTypedParty = class(TXMLParty, IXMLTypedParty)
  protected
    { IXMLTypedParty }
    function Get_PartyType: UnicodeString;
    procedure Set_PartyType(Value: UnicodeString);
  end;

{ TXMLTypedPartyList }

  TXMLTypedPartyList = class(TXMLNodeCollection, IXMLTypedPartyList)
  protected
    { IXMLTypedPartyList }
    function Add: IXMLTypedParty;
    function Insert(const Index: Integer): IXMLTypedParty;

    function Get_Item(Index: Integer): IXMLTypedParty;
  end;

{ TXMLSupplyPoint }

  TXMLSupplyPoint = class(TXMLNode, IXMLSupplyPoint)
  private
    FSupplyPointCode: IXMLSupplyPointCodeList;
    FSupplyPointDescription: IXMLS255List;
    FMapCoordinates: IXMLMapCoordinatesList;
  protected
    { IXMLSupplyPoint }
    function Get_LocationType: UnicodeString;
    function Get_SupplyPointCode: IXMLSupplyPointCodeList;
    function Get_SupplyPointDescription: IXMLS255List;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    function Get_SupplyPointCharacteristics: IXMLSupplyPointCharacteristics;
    procedure Set_LocationType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSupplyPointList }

  TXMLSupplyPointList = class(TXMLNodeCollection, IXMLSupplyPointList)
  protected
    { IXMLSupplyPointList }
    function Add: IXMLSupplyPoint;
    function Insert(const Index: Integer): IXMLSupplyPoint;

    function Get_Item(Index: Integer): IXMLSupplyPoint;
  end;

{ TXMLSupplyPointCode }

  TXMLSupplyPointCode = class(TXMLNode, IXMLSupplyPointCode)
  protected
    { IXMLSupplyPointCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLSupplyPointCodeList }

  TXMLSupplyPointCodeList = class(TXMLNodeCollection, IXMLSupplyPointCodeList)
  protected
    { IXMLSupplyPointCodeList }
    function Add: IXMLSupplyPointCode;
    function Insert(const Index: Integer): IXMLSupplyPointCode;

    function Get_Item(Index: Integer): IXMLSupplyPointCode;
  end;

{ TXMLSupplyPointCharacteristics }

  TXMLSupplyPointCharacteristics = class(TXMLNode, IXMLSupplyPointCharacteristics)
  private
    FSupplyPointProperty: IXMLSupplyPointPropertyList;
    FMapPoint: IXMLMapPointList;
    FAreaInfo: IXMLAreaInfoList;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
  protected
    { IXMLSupplyPointCharacteristics }
    function Get_SupplyPointProperty: IXMLSupplyPointPropertyList;
    function Get_QuantityInformation: IXMLQuantityInformation;
    function Get_MapPoint: IXMLMapPointList;
    function Get_AreaInfo: IXMLAreaInfoList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSupplyPointProperty }

  TXMLSupplyPointProperty = class(TXMLNode, IXMLSupplyPointProperty)
  private
    FSupplyPointPropertyDescription: IXMLS255List;
  protected
    { IXMLSupplyPointProperty }
    function Get_SupplyPointPropertyCode: IXMLSupplyPointPropertyCode;
    function Get_SupplyPointPropertyCodeValue: IXMLSupplyPointPropertyCodeValue;
    function Get_SupplyPointPropertyDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSupplyPointPropertyList }

  TXMLSupplyPointPropertyList = class(TXMLNodeCollection, IXMLSupplyPointPropertyList)
  protected
    { IXMLSupplyPointPropertyList }
    function Add: IXMLSupplyPointProperty;
    function Insert(const Index: Integer): IXMLSupplyPointProperty;

    function Get_Item(Index: Integer): IXMLSupplyPointProperty;
  end;

{ TXMLSupplyPointPropertyCode }

  TXMLSupplyPointPropertyCode = class(TXMLNode, IXMLSupplyPointPropertyCode)
  protected
    { IXMLSupplyPointPropertyCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLSupplyPointPropertyCodeValue }

  TXMLSupplyPointPropertyCodeValue = class(TXMLNode, IXMLSupplyPointPropertyCodeValue)
  protected
    { IXMLSupplyPointPropertyCodeValue }
    function Get_BooleanValue: Boolean;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDetailMeasurement }

  TXMLDetailMeasurement = class(TXMLNode, IXMLDetailMeasurement)
  protected
    { IXMLDetailMeasurement }
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_SampleSize(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDetailValue }

  TXMLDetailValue = class(TXMLNode, IXMLDetailValue)
  protected
    { IXMLDetailValue }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLDetailRangeMin }

  TXMLDetailRangeMin = class(TXMLNode, IXMLDetailRangeMin)
  protected
    { IXMLDetailRangeMin }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLDetailRangeMax }

  TXMLDetailRangeMax = class(TXMLNode, IXMLDetailRangeMax)
  protected
    { IXMLDetailRangeMax }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLStandardDeviation }

  TXMLStandardDeviation = class(TXMLNode, IXMLStandardDeviation)
  protected
    { IXMLStandardDeviation }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLTwoSigmaLower }

  TXMLTwoSigmaLower = class(TXMLNode, IXMLTwoSigmaLower)
  protected
    { IXMLTwoSigmaLower }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLTwoSigmaUpper }

  TXMLTwoSigmaUpper = class(TXMLNode, IXMLTwoSigmaUpper)
  protected
    { IXMLTwoSigmaUpper }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLQuantityInformation }

  TXMLQuantityInformation = class(TXMLNode, IXMLQuantityInformation)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLQuantityInformation }
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLQuantity }

  TXMLQuantity = class(TXMLMeasurement, IXMLQuantity)
  protected
    { IXMLQuantity }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
  end;

{ TXMLInformationalQuantity }

  TXMLInformationalQuantity = class(TXMLMeasurement, IXMLInformationalQuantity)
  protected
    { IXMLInformationalQuantity }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
  end;

{ TXMLInformationalQuantityList }

  TXMLInformationalQuantityList = class(TXMLNodeCollection, IXMLInformationalQuantityList)
  protected
    { IXMLInformationalQuantityList }
    function Add: IXMLInformationalQuantity;
    function Insert(const Index: Integer): IXMLInformationalQuantity;

    function Get_Item(Index: Integer): IXMLInformationalQuantity;
  end;

{ TXMLMapPoint }

  TXMLMapPoint = class(TXMLNode, IXMLMapPoint)
  private
    FMapPointID: IXMLMapPointIDList;
    FMapPointComment: IXMLS255List;
    FMapCoordinates: IXMLMapCoordinatesList;
  protected
    { IXMLMapPoint }
    function Get_MapPointType: UnicodeString;
    function Get_MapPointDisplayType: UnicodeString;
    function Get_MapPointName: UnicodeString;
    function Get_MapPointID: IXMLMapPointIDList;
    function Get_MapPointComment: IXMLS255List;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_MapPointType(Value: UnicodeString);
    procedure Set_MapPointDisplayType(Value: UnicodeString);
    procedure Set_MapPointName(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMapPointList }

  TXMLMapPointList = class(TXMLNodeCollection, IXMLMapPointList)
  protected
    { IXMLMapPointList }
    function Add: IXMLMapPoint;
    function Insert(const Index: Integer): IXMLMapPoint;

    function Get_Item(Index: Integer): IXMLMapPoint;
  end;

{ TXMLMapPointID }

  TXMLMapPointID = class(TXMLNode, IXMLMapPointID)
  protected
    { IXMLMapPointID }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLMapPointIDList }

  TXMLMapPointIDList = class(TXMLNodeCollection, IXMLMapPointIDList)
  protected
    { IXMLMapPointIDList }
    function Add: IXMLMapPointID;
    function Insert(const Index: Integer): IXMLMapPointID;

    function Get_Item(Index: Integer): IXMLMapPointID;
  end;

{ TXMLAreaInfo }

  TXMLAreaInfo = class(TXMLNode, IXMLAreaInfo)
  private
    FAreaProperty: IXMLCodeInfoList;
    FMapPoint: IXMLMapPointList;
    FPropertyValue: IXMLPropertyValueList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLAreaInfo }
    function Get_AreaProperty: IXMLCodeInfoList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_PropertyValue: IXMLPropertyValueList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAreaInfoList }

  TXMLAreaInfoList = class(TXMLNodeCollection, IXMLAreaInfoList)
  protected
    { IXMLAreaInfoList }
    function Add: IXMLAreaInfo;
    function Insert(const Index: Integer): IXMLAreaInfo;

    function Get_Item(Index: Integer): IXMLAreaInfo;
  end;

{ TXMLCodeInfo }

  TXMLCodeInfo = class(TXMLNode, IXMLCodeInfo)
  private
    FCodeDescription: IXMLS255List;
  protected
    { IXMLCodeInfo }
    function Get_Agency: UnicodeString;
    function Get_Code: UnicodeString;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_Code(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCodeInfoList }

  TXMLCodeInfoList = class(TXMLNodeCollection, IXMLCodeInfoList)
  protected
    { IXMLCodeInfoList }
    function Add: IXMLCodeInfo;
    function Insert(const Index: Integer): IXMLCodeInfo;

    function Get_Item(Index: Integer): IXMLCodeInfo;
  end;

{ TXMLCodeValue }

  TXMLCodeValue = class(TXMLNode, IXMLCodeValue)
  protected
    { IXMLCodeValue }
    function Get_BooleanValue: Boolean;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCodeValueList }

  TXMLCodeValueList = class(TXMLNodeCollection, IXMLCodeValueList)
  protected
    { IXMLCodeValueList }
    function Add: IXMLCodeValue;
    function Insert(const Index: Integer): IXMLCodeValue;

    function Get_Item(Index: Integer): IXMLCodeValue;
  end;

{ TXMLPropertyValue }

  TXMLPropertyValue = class(TXMLNode, IXMLPropertyValue)
  private
    FPropertySubValue: IXMLPropertySubValueList;
  protected
    { IXMLPropertyValue }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_IsAverageValue: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    function Get_PropertySubValue: IXMLPropertySubValueList;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_IsAverageValue(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPropertyValueList }

  TXMLPropertyValueList = class(TXMLNodeCollection, IXMLPropertyValueList)
    { Methods & Properties }
    function Add: IXMLPropertyValue;
    function Insert(const Index: Integer): IXMLPropertyValue;

    function Get_Item(Index: Integer): IXMLPropertyValue;
    property Items[Index: Integer]: IXMLPropertyValue read Get_Item; default;
  end;


{ TXMLPositionOnItem }

  TXMLPositionOnItem = class(TXMLNode, IXMLPositionOnItem)
  protected
    { IXMLPositionOnItem }
    function Get_PositionMeasuredFrom: UnicodeString;
    function Get_UOM: UnicodeString;
    procedure Set_PositionMeasuredFrom(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLPropertySubValue }

  TXMLPropertySubValue = class(TXMLNode, IXMLPropertySubValue)
  protected
    { IXMLPropertySubValue }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_IsAverageValue: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_IsAverageValue(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPropertySubValueList }

  TXMLPropertySubValueList = class(TXMLNodeCollection, IXMLPropertySubValueList)
  protected
    { IXMLPropertySubValueList }
    function Add: IXMLPropertySubValue;
    function Insert(const Index: Integer): IXMLPropertySubValue;

    function Get_Item(Index: Integer): IXMLPropertySubValue;
  end;

{ TXMLEAttachment }

  TXMLEAttachment = class(TXMLNode, IXMLEAttachment)
  private
    FAttachmentFileName: IXMLAttachmentFileNameList;
    FURL: IXMLURLList;
  protected
    { IXMLEAttachment }
    function Get_AttachmentFileName: IXMLAttachmentFileNameList;
    function Get_NumberOfAttachments: LongWord;
    function Get_URL: IXMLURLList;
    procedure Set_NumberOfAttachments(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAttachmentFileName }

  TXMLAttachmentFileName = class(TXMLNode, IXMLAttachmentFileName)
  protected
    { IXMLAttachmentFileName }
    function Get_AttachmentContext: UnicodeString;
    procedure Set_AttachmentContext(Value: UnicodeString);
  end;

{ TXMLAttachmentFileNameList }

  TXMLAttachmentFileNameList = class(TXMLNodeCollection, IXMLAttachmentFileNameList)
  protected
    { IXMLAttachmentFileNameList }
    function Add: IXMLAttachmentFileName;
    function Insert(const Index: Integer): IXMLAttachmentFileName;

    function Get_Item(Index: Integer): IXMLAttachmentFileName;
  end;

{ TXMLDocumentReferenceInformation }

  TXMLDocumentReferenceInformation = class(TXMLNode, IXMLDocumentReferenceInformation)
  private
    FDocumentReference: IXMLDocumentReferenceList;
  protected
    { IXMLDocumentReferenceInformation }
    function Get_DocumentReferenceID: IXMLDocumentReferenceID;
    function Get_DocumentReferenceIDLineItemNumber: LongWord;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DocumentVersionNumber: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_NumberOfDocumentsRequired: LongWord;
    function Get_DocumentReference: IXMLDocumentReferenceList;
    procedure Set_DocumentReferenceIDLineItemNumber(Value: LongWord);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    procedure Set_DocumentVersionNumber(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    procedure Set_NumberOfDocumentsRequired(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentReferenceInformationList }

  TXMLDocumentReferenceInformationList = class(TXMLNodeCollection, IXMLDocumentReferenceInformationList)
  protected
    { IXMLDocumentReferenceInformationList }
    function Add: IXMLDocumentReferenceInformation;
    function Insert(const Index: Integer): IXMLDocumentReferenceInformation;

    function Get_Item(Index: Integer): IXMLDocumentReferenceInformation;
  end;

{ TXMLDocumentReferenceID }

  TXMLDocumentReferenceID = class(TXMLNode, IXMLDocumentReferenceID)
  protected
    { IXMLDocumentReferenceID }
    function Get_DocumentReferenceIDType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DocumentReferenceIDType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLDocumentReference }

  TXMLDocumentReference = class(TXMLNode, IXMLDocumentReference)
  protected
    { IXMLDocumentReference }
    function Get_DocumentReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DocumentReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLDocumentReferenceList }

  TXMLDocumentReferenceList = class(TXMLNodeCollection, IXMLDocumentReferenceList)
  protected
    { IXMLDocumentReferenceList }
    function Add: IXMLDocumentReference;
    function Insert(const Index: Integer): IXMLDocumentReference;

    function Get_Item(Index: Integer): IXMLDocumentReference;
  end;

{ TXMLLocationCode }

  TXMLLocationCode = class(TXMLNode, IXMLLocationCode)
  protected
    { IXMLLocationCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTermsOfDelivery }

  TXMLTermsOfDelivery = class(TXMLNode, IXMLTermsOfDelivery)
  private
    FAdditionalText: IXMLS255List;
    FServiceLevel: IXMLServiceLevelList;
  protected
    { IXMLTermsOfDelivery }
    function Get_IncotermsLocation: IXMLIncotermsLocation;
    function Get_ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment;
    function Get_FreightPayableAt: UnicodeString;
    function Get_AdditionalText: IXMLS255List;
    function Get_ServiceLevel: IXMLServiceLevelList;
    procedure Set_FreightPayableAt(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLIncotermsLocation }

  TXMLIncotermsLocation = class(TXMLNode, IXMLIncotermsLocation)
  protected
    { IXMLIncotermsLocation }
    function Get_Incoterms: UnicodeString;
    function Get_IncotermsVersion: UnicodeString;
    procedure Set_Incoterms(Value: UnicodeString);
    procedure Set_IncotermsVersion(Value: UnicodeString);
  end;

{ TXMLShipmentMethodOfPayment }

  TXMLShipmentMethodOfPayment = class(TXMLNode, IXMLShipmentMethodOfPayment)
  protected
    { IXMLShipmentMethodOfPayment }
    function Get_LocationQualifier: UnicodeString;
    function Get_Method: UnicodeString;
    procedure Set_LocationQualifier(Value: UnicodeString);
    procedure Set_Method(Value: UnicodeString);
  end;

{ TXMLServiceLevel }

  TXMLServiceLevel = class(TXMLNode, IXMLServiceLevel)
  private
    FServiceLevelText: IXMLS255List;
    FServiceLevelReference: IXMLServiceLevelReferenceList;
  protected
    { IXMLServiceLevel }
    function Get_ServiceLevelContextType: UnicodeString;
    function Get_ServiceLevelText: IXMLS255List;
    function Get_ServiceLevelReference: IXMLServiceLevelReferenceList;
    procedure Set_ServiceLevelContextType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLServiceLevelList }

  TXMLServiceLevelList = class(TXMLNodeCollection, IXMLServiceLevelList)
  protected
    { IXMLServiceLevelList }
    function Add: IXMLServiceLevel;
    function Insert(const Index: Integer): IXMLServiceLevel;

    function Get_Item(Index: Integer): IXMLServiceLevel;
  end;

{ TXMLServiceLevelReference }

  TXMLServiceLevelReference = class(TXMLNode, IXMLServiceLevelReference)
  protected
    { IXMLServiceLevelReference }
    function Get_ServiceLevelReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ServiceLevelReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLServiceLevelReferenceList }

  TXMLServiceLevelReferenceList = class(TXMLNodeCollection, IXMLServiceLevelReferenceList)
  protected
    { IXMLServiceLevelReferenceList }
    function Add: IXMLServiceLevelReference;
    function Insert(const Index: Integer): IXMLServiceLevelReference;

    function Get_Item(Index: Integer): IXMLServiceLevelReference;
  end;

{ TXMLDeliveryRouteCode }

  TXMLDeliveryRouteCode = class(TXMLNode, IXMLDeliveryRouteCode)
  protected
    { IXMLDeliveryRouteCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLLocationParty }

  TXMLLocationParty = class(TXMLTypedParty, IXMLLocationParty)
  protected
    { IXMLLocationParty }
    function Get_LocationType: UnicodeString;
    procedure Set_LocationType(Value: UnicodeString);
  end;

{ TXMLLocationPartyList }

  TXMLLocationPartyList = class(TXMLNodeCollection, IXMLLocationPartyList)
  protected
    { IXMLLocationPartyList }
    function Add: IXMLLocationParty;
    function Insert(const Index: Integer): IXMLLocationParty;

    function Get_Item(Index: Integer): IXMLLocationParty;
  end;

{ TXMLCountryOfOrigin }

  TXMLCountryOfOrigin = class(TXMLNode, IXMLCountryOfOrigin)
  protected
    { IXMLCountryOfOrigin }
    function Get_Country: IXMLCountry;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCountryOfDestination }

  TXMLCountryOfDestination = class(TXMLNode, IXMLCountryOfDestination)
  protected
    { IXMLCountryOfDestination }
    function Get_Country: IXMLCountry;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCountryOfConsumption }

  TXMLCountryOfConsumption = class(TXMLNode, IXMLCountryOfConsumption)
  protected
    { IXMLCountryOfConsumption }
    function Get_Country: IXMLCountry;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportVehicleIdentifier }

  TXMLTransportVehicleIdentifier = class(TXMLNode, IXMLTransportVehicleIdentifier)
  protected
    { IXMLTransportVehicleIdentifier }
    function Get_TransportVehicleIdentifierType: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_TransportVehicleIdentifierType(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportVehicleIdentifierList }

  TXMLTransportVehicleIdentifierList = class(TXMLNodeCollection, IXMLTransportVehicleIdentifierList)
  protected
    { IXMLTransportVehicleIdentifierList }
    function Add: IXMLTransportVehicleIdentifier;
    function Insert(const Index: Integer): IXMLTransportVehicleIdentifier;

    function Get_Item(Index: Integer): IXMLTransportVehicleIdentifier;
  end;

{ TXMLTransportUnitIdentifier }

  TXMLTransportUnitIdentifier = class(TXMLNode, IXMLTransportUnitIdentifier)
  protected
    { IXMLTransportUnitIdentifier }
    function Get_TransportUnitIdentifierType: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_TransportUnitIdentifierType(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportUnitIdentifierList }

  TXMLTransportUnitIdentifierList = class(TXMLNodeCollection, IXMLTransportUnitIdentifierList)
  protected
    { IXMLTransportUnitIdentifierList }
    function Add: IXMLTransportUnitIdentifier;
    function Insert(const Index: Integer): IXMLTransportUnitIdentifier;

    function Get_Item(Index: Integer): IXMLTransportUnitIdentifier;
  end;

{ TXMLInsurance }

  TXMLInsurance = class(TXMLNode, IXMLInsurance)
  protected
    { IXMLInsurance }
    function Get_Insurer: UnicodeString;
    function Get_InsuranceContractNo: UnicodeString;
    function Get_InsuredValue: IXMLInsuredValue;
    function Get_InsuranceInfo: UnicodeString;
    procedure Set_Insurer(Value: UnicodeString);
    procedure Set_InsuranceContractNo(Value: UnicodeString);
    procedure Set_InsuranceInfo(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInsuredValue }

  TXMLInsuredValue = class(TXMLNode, IXMLInsuredValue)
  protected
    { IXMLInsuredValue }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCurrencyValue }

  TXMLCurrencyValue = class(TXMLNode, IXMLCurrencyValue)
  protected
    { IXMLCurrencyValue }
    function Get_CurrencyType: UnicodeString;
    procedure Set_CurrencyType(Value: UnicodeString);
  end;

{ TXMLCreditDebitNoteReason }

  TXMLCreditDebitNoteReason = class(TXMLNode, IXMLCreditDebitNoteReason)
  protected
    { IXMLCreditDebitNoteReason }
    function Get_CreditDebitNoteReasonCode: IXMLCreditDebitNoteReasonCode;
    function Get_ReasonDescription: UnicodeString;
    procedure Set_ReasonDescription(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCreditDebitNoteReasonCode }

  TXMLCreditDebitNoteReasonCode = class(TXMLNode, IXMLCreditDebitNoteReasonCode)
  protected
    { IXMLCreditDebitNoteReasonCode }
    function Get_CreditDebitNoteReasonType: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_CreditDebitNoteReasonType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLInvoiceShipment }

  TXMLInvoiceShipment = class(TXMLNode, IXMLInvoiceShipment)
  private
    FInvoiceProductGroup: IXMLInvoiceProductGroupList;
  protected
    { IXMLInvoiceShipment }
    function Get_ShipmentID: IXMLShipmentID;
    function Get_InvoiceProductGroup: IXMLInvoiceProductGroupList;
    function Get_ShipmentSummary: IXMLShipmentSummary;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceShipmentList }

  TXMLInvoiceShipmentList = class(TXMLNodeCollection, IXMLInvoiceShipmentList)
  protected
    { IXMLInvoiceShipmentList }
    function Add: IXMLInvoiceShipment;
    function Insert(const Index: Integer): IXMLInvoiceShipment;

    function Get_Item(Index: Integer): IXMLInvoiceShipment;
  end;

{ TXMLShipmentID }

  TXMLShipmentID = class(TXMLNode, IXMLShipmentID)
  protected
    { IXMLShipmentID }
    function Get_ShipmentIDType: UnicodeString;
    procedure Set_ShipmentIDType(Value: UnicodeString);
  end;

{ TXMLInvoiceProductGroup }

  TXMLInvoiceProductGroup = class(TXMLNode, IXMLInvoiceProductGroup)
  private
    FInvoiceWoodLineItem: IXMLInvoiceWoodLineItemList;
  protected
    { IXMLInvoiceProductGroup }
    function Get_ProductGroupID: IXMLProductGroupID;
    function Get_InvoiceWoodLineItem: IXMLInvoiceWoodLineItemList;
    function Get_ProductGroupSummary: IXMLProductGroupSummary;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceProductGroupList }

  TXMLInvoiceProductGroupList = class(TXMLNodeCollection, IXMLInvoiceProductGroupList)
  protected
    { IXMLInvoiceProductGroupList }
    function Add: IXMLInvoiceProductGroup;
    function Insert(const Index: Integer): IXMLInvoiceProductGroup;

    function Get_Item(Index: Integer): IXMLInvoiceProductGroup;
  end;

{ TXMLProductGroupID }

  TXMLProductGroupID = class(TXMLNode, IXMLProductGroupID)
  protected
    { IXMLProductGroupID }
    function Get_ProductGroupIDType: UnicodeString;
    procedure Set_ProductGroupIDType(Value: UnicodeString);
  end;

{ TXMLInvoiceWoodLineItem }

  TXMLInvoiceWoodLineItem = class(TXMLNode, IXMLInvoiceWoodLineItem)
  private
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
    FChargeInformation: IXMLChargeInformationList;
    FInvoiceDeliveryInformation: IXMLInvoiceDeliveryInformationList;
    FInvoiceReference: IXMLInvoiceReferenceList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    FAdditionalText: IXMLS255List;
    FTransportModeCharacteristics: IXMLTransportModeCharacteristicsList;
    FTransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    FLocationParty: IXMLLocationPartyList;
  protected
    { IXMLInvoiceWoodLineItem }
    function Get_InvoiceLineNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_EndsDiscountInformation: IXMLEndsDiscountInformation;
    function Get_ChargeOrAllowance: IXMLChargeOrAllowance;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InvoiceLineBaseAmountInformation: IXMLInvoiceLineBaseAmountInformation;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_ChargeInformation: IXMLChargeInformationList;
    function Get_InvoiceLineAmount: IXMLInvoiceLineAmount;
    function Get_InvoiceDeliveryInformation: IXMLInvoiceDeliveryInformationList;
    function Get_InvoiceReference: IXMLInvoiceReferenceList;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_AdditionalText: IXMLS255List;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_MillCharacteristics: IXMLMillCharacteristics;
    function Get_TransportModeCharacteristics: IXMLTransportModeCharacteristicsList;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindow;
    function Get_TaxStatement: IXMLTaxStatement;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_LocationParty: IXMLLocationPartyList;
    function Get_StatisticalGoodsInformation: IXMLStatisticalGoodsInformation;
    procedure Set_InvoiceLineNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceWoodLineItemList }

  TXMLInvoiceWoodLineItemList = class(TXMLNodeCollection, IXMLInvoiceWoodLineItemList)
  protected
    { IXMLInvoiceWoodLineItemList }
    function Add: IXMLInvoiceWoodLineItem;
    function Insert(const Index: Integer): IXMLInvoiceWoodLineItem;

    function Get_Item(Index: Integer): IXMLInvoiceWoodLineItem;
  end;

{ TXMLPurchaseOrderInformation }

  TXMLPurchaseOrderInformation = class(TXMLNode, IXMLPurchaseOrderInformation)
  private
    FOrderTitle: IXMLS255List;
    FPurchaseOrderReference: IXMLPurchaseOrderReferenceList;
    FServiceLevel: IXMLServiceLevelList;
  protected
    { IXMLPurchaseOrderInformation }
    function Get_PurchaseOrderNumber: UnicodeString;
    function Get_PurchaseOrderReleaseNumber: UnicodeString;
    function Get_PurchaseOrderIssuedDate: IXMLDateTimeBasis;
    function Get_OrderTitle: IXMLS255List;
    function Get_PurchaseOrderReference: IXMLPurchaseOrderReferenceList;
    function Get_ServiceLevel: IXMLServiceLevelList;
    procedure Set_PurchaseOrderNumber(Value: UnicodeString);
    procedure Set_PurchaseOrderReleaseNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateTimeBasis }

  TXMLDateTimeBasis = class(TXMLNode, IXMLDateTimeBasis)
  protected
    { IXMLDateTimeBasis }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPurchaseOrderReference }

  TXMLPurchaseOrderReference = class(TXMLNode, IXMLPurchaseOrderReference)
  protected
    { IXMLPurchaseOrderReference }
    function Get_PurchaseOrderReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_PurchaseOrderReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLPurchaseOrderReferenceList }

  TXMLPurchaseOrderReferenceList = class(TXMLNodeCollection, IXMLPurchaseOrderReferenceList)
  protected
    { IXMLPurchaseOrderReferenceList }
    function Add: IXMLPurchaseOrderReference;
    function Insert(const Index: Integer): IXMLPurchaseOrderReference;

    function Get_Item(Index: Integer): IXMLPurchaseOrderReference;
  end;

{ TXMLEndsDiscountInformation }

  TXMLEndsDiscountInformation = class(TXMLNode, IXMLEndsDiscountInformation)
  protected
    { IXMLEndsDiscountInformation }
    function Get_EndsDiscountRule: UnicodeString;
    function Get_EndsLengthMax: IXMLMeasurement;
    function Get_EndsPermittedPercent: IXMLMeasurement;
    function Get_EndsDiscountPercent: IXMLMeasurement;
    procedure Set_EndsDiscountRule(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLChargeOrAllowance }

  TXMLChargeOrAllowance = class(TXMLNode, IXMLChargeOrAllowance)
  protected
    { IXMLChargeOrAllowance }
    function Get_ChargeOrAllowanceType: UnicodeString;
    procedure Set_ChargeOrAllowanceType(Value: UnicodeString);
  end;

{ TXMLProductClass }

  TXMLProductClass = class(TXMLNode, IXMLProductClass)
  private
    FProductIdentifier: IXMLProductIdentifierList;
    FProductDescription: IXMLProductDescriptionList;
    FClassification: IXMLClassificationList;
    FProductReference: IXMLProductReferenceList;
  protected
    { IXMLProductClass }
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_ProductReference: IXMLProductReferenceList;
    function Get_BookManufacturing: IXMLBookManufacturing;
    function Get_ForestWood: IXMLForestWood;
    function Get_LabelStock: IXMLLabelStock;
    function Get_Paper: IXMLPaper;
    function Get_Pulp: IXMLPulpClass;
    function Get_RecoveredPaper: IXMLRecoveredPaper;
    function Get_VirginFibre: IXMLVirginFibre;
    function Get_WoodProducts: IXMLWoodProducts;
    function Get_OtherProducts: IXMLOtherProducts;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductIdentifier }

  TXMLProductIdentifier = class(TXMLNode, IXMLProductIdentifier)
  protected
    { IXMLProductIdentifier }
    function Get_Agency: UnicodeString;
    function Get_ProductIdentifierType: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_ProductIdentifierType(Value: UnicodeString);
  end;

{ TXMLProductIdentifierList }

  TXMLProductIdentifierList = class(TXMLNodeCollection, IXMLProductIdentifierList)
  protected
    { IXMLProductIdentifierList }
    function Add: IXMLProductIdentifier;
    function Insert(const Index: Integer): IXMLProductIdentifier;

    function Get_Item(Index: Integer): IXMLProductIdentifier;
  end;

{ TXMLProductDescription }

  TXMLProductDescription = class(TXMLNode, IXMLProductDescription)
  protected
    { IXMLProductDescription }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
  end;

{ TXMLProductDescriptionList }

  TXMLProductDescriptionList = class(TXMLNodeCollection, IXMLProductDescriptionList)
  protected
    { IXMLProductDescriptionList }
    function Add: IXMLProductDescription;
    function Insert(const Index: Integer): IXMLProductDescription;

    function Get_Item(Index: Integer): IXMLProductDescription;
  end;

{ TXMLClassification }

  TXMLClassification = class(TXMLNode, IXMLClassification)
  private
    FClassificationDescription: IXMLS255List;
  protected
    { IXMLClassification }
    function Get_ClassificationCode: IXMLClassificationCode;
    function Get_ClassificationDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLClassificationList }

  TXMLClassificationList = class(TXMLNodeCollection, IXMLClassificationList)
  protected
    { IXMLClassificationList }
    function Add: IXMLClassification;
    function Insert(const Index: Integer): IXMLClassification;

    function Get_Item(Index: Integer): IXMLClassification;
  end;

{ TXMLClassificationCode }

  TXMLClassificationCode = class(TXMLNode, IXMLClassificationCode)
  protected
    { IXMLClassificationCode }
    function Get_Agency: UnicodeString;
    function Get_ClassificationCodeType: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_ClassificationCodeType(Value: UnicodeString);
  end;

{ TXMLProductReference }

  TXMLProductReference = class(TXMLNode, IXMLProductReference)
  protected
    { IXMLProductReference }
    function Get_ProductReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ProductReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLProductReferenceList }

  TXMLProductReferenceList = class(TXMLNodeCollection, IXMLProductReferenceList)
  protected
    { IXMLProductReferenceList }
    function Add: IXMLProductReference;
    function Insert(const Index: Integer): IXMLProductReference;

    function Get_Item(Index: Integer): IXMLProductReference;
  end;

{ TXMLBookManufacturing }

  TXMLBookManufacturing = class(TXMLNode, IXMLBookManufacturing)
  private
    FBookClassification: IXMLBookClassificationList;
    FProofInformationalQuantity: IXMLProofInformationalQuantityList;
    FPrepInformation: IXMLPrepInformationList;
    FSuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    FPackagingCharacteristics: IXMLPackagingCharacteristicsList;
  protected
    { IXMLBookManufacturing }
    function Get_BookClassification: IXMLBookClassificationList;
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_PrepInformation: IXMLPrepInformationList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBookClassification }

  TXMLBookClassification = class(TXMLNode, IXMLBookClassification)
  private
    FClassificationDescription: IXMLS255List;
    FBookSubClassification: IXMLBookSubClassificationList;
  protected
    { IXMLBookClassification }
    function Get_BookClassificationType: UnicodeString;
    function Get_ClassificationDescription: IXMLS255List;
    function Get_BookSubClassification: IXMLBookSubClassificationList;
    procedure Set_BookClassificationType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBookClassificationList }

  TXMLBookClassificationList = class(TXMLNodeCollection, IXMLBookClassificationList)
  protected
    { IXMLBookClassificationList }
    function Add: IXMLBookClassification;
    function Insert(const Index: Integer): IXMLBookClassification;

    function Get_Item(Index: Integer): IXMLBookClassification;
  end;

{ TXMLBookSubClassification }

  TXMLBookSubClassification = class(TXMLNodeCollection, IXMLBookSubClassification)
  protected
    { IXMLBookSubClassification }
    function Get_BookSubClassificationType: UnicodeString;
    function Get_ClassificationDescription(Index: Integer): UnicodeString;
    procedure Set_BookSubClassificationType(Value: UnicodeString);
    function Add(const ClassificationDescription: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const ClassificationDescription: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBookSubClassificationList }

  TXMLBookSubClassificationList = class(TXMLNodeCollection, IXMLBookSubClassificationList)
  protected
    { IXMLBookSubClassificationList }
    function Add: IXMLBookSubClassification;
    function Insert(const Index: Integer): IXMLBookSubClassification;

    function Get_Item(Index: Integer): IXMLBookSubClassification;
  end;

{ TXMLProofInformationalQuantity }

  TXMLProofInformationalQuantity = class(TXMLNode, IXMLProofInformationalQuantity)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLProofInformationalQuantity }
    function Get_ProofType: UnicodeString;
    function Get_ProofColourType: UnicodeString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_OtherParty: IXMLTypedParty;
    function Get_ProofApprovalDate: IXMLProofApprovalDate;
    function Get_ProofDueDate: IXMLProofDueDate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ProofType(Value: UnicodeString);
    procedure Set_ProofColourType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProofInformationalQuantityList }

  TXMLProofInformationalQuantityList = class(TXMLNodeCollection, IXMLProofInformationalQuantityList)
  protected
    { IXMLProofInformationalQuantityList }
    function Add: IXMLProofInformationalQuantity;
    function Insert(const Index: Integer): IXMLProofInformationalQuantity;

    function Get_Item(Index: Integer): IXMLProofInformationalQuantity;
  end;

{ TXMLProofApprovalDate }

  TXMLProofApprovalDate = class(TXMLNode, IXMLProofApprovalDate)
  protected
    { IXMLProofApprovalDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProofDueDate }

  TXMLProofDueDate = class(TXMLNode, IXMLProofDueDate)
  protected
    { IXMLProofDueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPrepInformation }

  TXMLPrepInformation = class(TXMLNode, IXMLPrepInformation)
  private
    FAdditionalText: IXMLS255List;
    FPrepReference: IXMLPrepReferenceList;
  protected
    { IXMLPrepInformation }
    function Get_PrepType: UnicodeString;
    function Get_SupplierParty: IXMLParty;
    function Get_PrepShipDate: IXMLDateTimeBasis;
    function Get_PrepDueDate: IXMLDateTimeBasis;
    function Get_PrepNeededDate: IXMLDateTimeBasis;
    function Get_AdditionalText: IXMLS255List;
    function Get_PrepReference: IXMLPrepReferenceList;
    procedure Set_PrepType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPrepInformationList }

  TXMLPrepInformationList = class(TXMLNodeCollection, IXMLPrepInformationList)
  protected
    { IXMLPrepInformationList }
    function Add: IXMLPrepInformation;
    function Insert(const Index: Integer): IXMLPrepInformation;

    function Get_Item(Index: Integer): IXMLPrepInformation;
  end;

{ TXMLPrepReference }

  TXMLPrepReference = class(TXMLNode, IXMLPrepReference)
  protected
    { IXMLPrepReference }
    function Get_PrepReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_PrepReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLPrepReferenceList }

  TXMLPrepReferenceList = class(TXMLNodeCollection, IXMLPrepReferenceList)
  protected
    { IXMLPrepReferenceList }
    function Add: IXMLPrepReference;
    function Insert(const Index: Integer): IXMLPrepReference;

    function Get_Item(Index: Integer): IXMLPrepReference;
  end;

{ TXMLSuppliedComponentInformation }

  TXMLSuppliedComponentInformation = class(TXMLNode, IXMLSuppliedComponentInformation)
  private
    FProductIdentifier: IXMLProductIdentifierList;
    FProductDescription: IXMLProductDescriptionList;
    FClassification: IXMLClassificationList;
    FBookClassification: IXMLBookClassificationList;
    FSuppliedComponentReference: IXMLSuppliedComponentReferenceList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSuppliedComponentInformation }
    function Get_SuppliedComponentType: UnicodeString;
    function Get_SupplierParty: IXMLParty;
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_BookClassification: IXMLBookClassificationList;
    function Get_Paper: IXMLPaper;
    function Get_SuppliedComponentReference: IXMLSuppliedComponentReferenceList;
    function Get_Quantity: IXMLQuantity;
    function Get_ComponentShipDate: IXMLComponentShipDate;
    function Get_ComponentDueDate: IXMLComponentDueDate;
    function Get_ComponentNeededDate: IXMLComponentNeededDate;
    function Get_OrderStatusInformation: IXMLOrderStatusInformation;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SuppliedComponentType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSuppliedComponentInformationList }

  TXMLSuppliedComponentInformationList = class(TXMLNodeCollection, IXMLSuppliedComponentInformationList)
  protected
    { IXMLSuppliedComponentInformationList }
    function Add: IXMLSuppliedComponentInformation;
    function Insert(const Index: Integer): IXMLSuppliedComponentInformation;

    function Get_Item(Index: Integer): IXMLSuppliedComponentInformation;
  end;

{ TXMLPaper }

  TXMLPaper = class(TXMLNode, IXMLPaper)
  protected
    { IXMLPaper }
    function Get_PaperCharacteristics: IXMLPaperCharacteristics;
    function Get_Reel: IXMLReel;
    function Get_Sheet: IXMLSheet;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPaperCharacteristics }

  TXMLPaperCharacteristics = class(TXMLNode, IXMLPaperCharacteristics)
  private
    FAbrasion: IXMLAbrasionList;
    FAbsorptionInk: IXMLAbsorptionInkList;
    FAbsorptionLight: IXMLAbsorptionLightList;
    FAbsorptionWater: IXMLAbsorptionWaterList;
    FAppearance: IXMLAppearanceList;
    FAsh: IXMLAshList;
    FBasisWeight: IXMLBasisWeightList;
    FBendingResistance: IXMLBendingResistanceList;
    FBendingStiffness: IXMLBendingStiffnessList;
    FBrightness: IXMLBrightnessList;
    FBulk: IXMLBulkList;
    FBurst: IXMLBurstList;
    FBurstIndex: IXMLBurstIndexList;
    FCaliper: IXMLCaliperList;
    FCoatWeight: IXMLCoatWeightList;
    FColourDetail: IXMLColourDetailList;
    FDensity: IXMLDensityList;
    FDirt: IXMLDirtList;
    FDominantWavelength: IXMLDominantWavelengthList;
    FExcitationPurity: IXMLExcitationPurityList;
    FFibreLength: IXMLFibreLengthList;
    FFibreClassification: IXMLFibreClassificationList;
    FFolding: IXMLFoldingList;
    FFormation: IXMLFormationList;
    FFreeness: IXMLFreenessList;
    FFriction: IXMLFrictionList;
    FGloss: IXMLGlossList;
    FLightScattering: IXMLLightScatteringList;
    FLuminance: IXMLLuminanceList;
    FMoisture: IXMLMoistureList;
    FMullen: IXMLMullenList;
    FOpacity: IXMLOpacityList;
    FPermeability: IXMLPermeabilityList;
    FPH: IXMLPHList;
    FPlyBond: IXMLPlyBondList;
    FPorosity: IXMLPorosityList;
    FPostConsumerWaste: IXMLPostConsumerWasteList;
    FPPI: IXMLMeasurementList;
    FPreConsumerWaste: IXMLPreConsumerWasteList;
    FRecycled: IXMLRecycledList;
    FResistance: IXMLResistanceList;
    FRingCrush: IXMLRingCrushList;
    FRoughness: IXMLRoughnessList;
    FRunnabilityIndex: IXMLRunnabilityIndexList;
    FShowThrough: IXMLShowThroughList;
    FSizing: IXMLSizingList;
    FSmoothness: IXMLSmoothnessList;
    FStiffness: IXMLStiffnessList;
    FStretch: IXMLStretchList;
    FSurfaceStrength: IXMLSurfaceStrengthList;
    FTEA: IXMLTEAList;
    FTear: IXMLTearList;
    FTearIndex: IXMLTearIndexList;
    FTensile: IXMLTensileList;
    FTensileIndex: IXMLTensileIndexList;
    FWhiteness: IXMLWhitenessList;
    FNumberOfPlies: IXMLNni1List;
    FPlyAttributes: IXMLPlyAttributesList;
    FPlySet: IXMLPlySetList;
  protected
    { IXMLPaperCharacteristics }
    function Get_CoatingTop: UnicodeString;
    function Get_CoatingBottom: UnicodeString;
    function Get_FinishType: UnicodeString;
    function Get_PrintType: UnicodeString;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_ExcitationPurity: IXMLExcitationPurityList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Luminance: IXMLLuminanceList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Mullen: IXMLMullenList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    function Get_PlySet: IXMLPlySetList;
    procedure Set_CoatingTop(Value: UnicodeString);
    procedure Set_CoatingBottom(Value: UnicodeString);
    procedure Set_FinishType(Value: UnicodeString);
    procedure Set_PrintType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAbrasion }

  TXMLAbrasion = class(TXMLDetailMeasurement, IXMLAbrasion)
  protected
    { IXMLAbrasion }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLAbrasionList }

  TXMLAbrasionList = class(TXMLNodeCollection, IXMLAbrasionList)
  protected
    { IXMLAbrasionList }
    function Add: IXMLAbrasion;
    function Insert(const Index: Integer): IXMLAbrasion;

    function Get_Item(Index: Integer): IXMLAbrasion;
  end;

{ TXMLAbsorptionInk }

  TXMLAbsorptionInk = class(TXMLDetailMeasurement, IXMLAbsorptionInk)
  protected
    { IXMLAbsorptionInk }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLAbsorptionInkList }

  TXMLAbsorptionInkList = class(TXMLNodeCollection, IXMLAbsorptionInkList)
  protected
    { IXMLAbsorptionInkList }
    function Add: IXMLAbsorptionInk;
    function Insert(const Index: Integer): IXMLAbsorptionInk;

    function Get_Item(Index: Integer): IXMLAbsorptionInk;
  end;

{ TXMLAbsorptionLight }

  TXMLAbsorptionLight = class(TXMLDetailMeasurement, IXMLAbsorptionLight)
  protected
    { IXMLAbsorptionLight }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLAbsorptionLightList }

  TXMLAbsorptionLightList = class(TXMLNodeCollection, IXMLAbsorptionLightList)
  protected
    { IXMLAbsorptionLightList }
    function Add: IXMLAbsorptionLight;
    function Insert(const Index: Integer): IXMLAbsorptionLight;

    function Get_Item(Index: Integer): IXMLAbsorptionLight;
  end;

{ TXMLAbsorptionWater }

  TXMLAbsorptionWater = class(TXMLDetailMeasurement, IXMLAbsorptionWater)
  protected
    { IXMLAbsorptionWater }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLAbsorptionWaterList }

  TXMLAbsorptionWaterList = class(TXMLNodeCollection, IXMLAbsorptionWaterList)
  protected
    { IXMLAbsorptionWaterList }
    function Add: IXMLAbsorptionWater;
    function Insert(const Index: Integer): IXMLAbsorptionWater;

    function Get_Item(Index: Integer): IXMLAbsorptionWater;
  end;

{ TXMLAppearance }

  TXMLAppearance = class(TXMLDetailMeasurement, IXMLAppearance)
  protected
    { IXMLAppearance }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLAppearanceList }

  TXMLAppearanceList = class(TXMLNodeCollection, IXMLAppearanceList)
  protected
    { IXMLAppearanceList }
    function Add: IXMLAppearance;
    function Insert(const Index: Integer): IXMLAppearance;

    function Get_Item(Index: Integer): IXMLAppearance;
  end;

{ TXMLAsh }

  TXMLAsh = class(TXMLDetailMeasurement, IXMLAsh)
  protected
    { IXMLAsh }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLAshList }

  TXMLAshList = class(TXMLNodeCollection, IXMLAshList)
  protected
    { IXMLAshList }
    function Add: IXMLAsh;
    function Insert(const Index: Integer): IXMLAsh;

    function Get_Item(Index: Integer): IXMLAsh;
  end;

{ TXMLBasisWeight }

  TXMLBasisWeight = class(TXMLNode, IXMLBasisWeight)
  private
    FIncrementalValue: IXMLIncrementalValueList;
  protected
    { IXMLBasisWeight }
    function Get_ProductBasisSizeType: UnicodeString;
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    function Get_IncrementalValue: IXMLIncrementalValueList;
    procedure Set_ProductBasisSizeType(Value: UnicodeString);
    procedure Set_SampleSize(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBasisWeightList }

  TXMLBasisWeightList = class(TXMLNodeCollection, IXMLBasisWeightList)
  protected
    { IXMLBasisWeightList }
    function Add: IXMLBasisWeight;
    function Insert(const Index: Integer): IXMLBasisWeight;

    function Get_Item(Index: Integer): IXMLBasisWeight;
  end;

{ TXMLIncrementalValue }

  TXMLIncrementalValue = class(TXMLNode, IXMLIncrementalValue)
  protected
    { IXMLIncrementalValue }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLIncrementalValueList }

  TXMLIncrementalValueList = class(TXMLNodeCollection, IXMLIncrementalValueList)
  protected
    { IXMLIncrementalValueList }
    function Add: IXMLIncrementalValue;
    function Insert(const Index: Integer): IXMLIncrementalValue;

    function Get_Item(Index: Integer): IXMLIncrementalValue;
  end;

{ TXMLBendingResistance }

  TXMLBendingResistance = class(TXMLDetailMeasurement, IXMLBendingResistance)
  protected
    { IXMLBendingResistance }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLBendingResistanceList }

  TXMLBendingResistanceList = class(TXMLNodeCollection, IXMLBendingResistanceList)
  protected
    { IXMLBendingResistanceList }
    function Add: IXMLBendingResistance;
    function Insert(const Index: Integer): IXMLBendingResistance;

    function Get_Item(Index: Integer): IXMLBendingResistance;
  end;

{ TXMLBendingStiffness }

  TXMLBendingStiffness = class(TXMLDetailMeasurement, IXMLBendingStiffness)
  protected
    { IXMLBendingStiffness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLBendingStiffnessList }

  TXMLBendingStiffnessList = class(TXMLNodeCollection, IXMLBendingStiffnessList)
  protected
    { IXMLBendingStiffnessList }
    function Add: IXMLBendingStiffness;
    function Insert(const Index: Integer): IXMLBendingStiffness;

    function Get_Item(Index: Integer): IXMLBendingStiffness;
  end;

{ TXMLBrightness }

  TXMLBrightness = class(TXMLDetailMeasurement, IXMLBrightness)
  protected
    { IXMLBrightness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLBrightnessList }

  TXMLBrightnessList = class(TXMLNodeCollection, IXMLBrightnessList)
  protected
    { IXMLBrightnessList }
    function Add: IXMLBrightness;
    function Insert(const Index: Integer): IXMLBrightness;

    function Get_Item(Index: Integer): IXMLBrightness;
  end;

{ TXMLBulk }

  TXMLBulk = class(TXMLDetailMeasurement, IXMLBulk)
  protected
    { IXMLBulk }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLBulkList }

  TXMLBulkList = class(TXMLNodeCollection, IXMLBulkList)
  protected
    { IXMLBulkList }
    function Add: IXMLBulk;
    function Insert(const Index: Integer): IXMLBulk;

    function Get_Item(Index: Integer): IXMLBulk;
  end;

{ TXMLBurst }

  TXMLBurst = class(TXMLDetailMeasurement, IXMLBurst)
  protected
    { IXMLBurst }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLBurstList }

  TXMLBurstList = class(TXMLNodeCollection, IXMLBurstList)
  protected
    { IXMLBurstList }
    function Add: IXMLBurst;
    function Insert(const Index: Integer): IXMLBurst;

    function Get_Item(Index: Integer): IXMLBurst;
  end;

{ TXMLBurstIndex }

  TXMLBurstIndex = class(TXMLDetailMeasurement, IXMLBurstIndex)
  protected
    { IXMLBurstIndex }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLBurstIndexList }

  TXMLBurstIndexList = class(TXMLNodeCollection, IXMLBurstIndexList)
  protected
    { IXMLBurstIndexList }
    function Add: IXMLBurstIndex;
    function Insert(const Index: Integer): IXMLBurstIndex;

    function Get_Item(Index: Integer): IXMLBurstIndex;
  end;

{ TXMLCaliper }

  TXMLCaliper = class(TXMLDetailMeasurement, IXMLCaliper)
  protected
    { IXMLCaliper }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLCaliperList }

  TXMLCaliperList = class(TXMLNodeCollection, IXMLCaliperList)
  protected
    { IXMLCaliperList }
    function Add: IXMLCaliper;
    function Insert(const Index: Integer): IXMLCaliper;

    function Get_Item(Index: Integer): IXMLCaliper;
  end;

{ TXMLCoatWeight }

  TXMLCoatWeight = class(TXMLDetailMeasurement, IXMLCoatWeight)
  protected
    { IXMLCoatWeight }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLCoatWeightList }

  TXMLCoatWeightList = class(TXMLNodeCollection, IXMLCoatWeightList)
  protected
    { IXMLCoatWeightList }
    function Add: IXMLCoatWeight;
    function Insert(const Index: Integer): IXMLCoatWeight;

    function Get_Item(Index: Integer): IXMLCoatWeight;
  end;

{ TXMLColourDetail }

  TXMLColourDetail = class(TXMLNode, IXMLColourDetail)
  private
    FColourDescription: IXMLS72List;
  protected
    { IXMLColourDetail }
    function Get_CMYK: IXMLCMYK;
    function Get_ColourShade: IXMLColourShade;
    function Get_HSB: IXMLHSB;
    function Get_Lab: IXMLLab;
    function Get_RGB: IXMLRGB;
    function Get_ColourDescription: IXMLS72List;
    function Get_ColourCode: IXMLColourCode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLColourDetailList }

  TXMLColourDetailList = class(TXMLNodeCollection, IXMLColourDetailList)
  protected
    { IXMLColourDetailList }
    function Add: IXMLColourDetail;
    function Insert(const Index: Integer): IXMLColourDetail;

    function Get_Item(Index: Integer): IXMLColourDetail;
  end;

{ TXMLCMYK }

  TXMLCMYK = class(TXMLNode, IXMLCMYK)
  protected
    { IXMLCMYK }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_Cyan: IXMLDetailMeasurement;
    function Get_Magenta: IXMLDetailMeasurement;
    function Get_Yellow: IXMLDetailMeasurement;
    function Get_Black: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLColourShade }

  TXMLColourShade = class(TXMLNode, IXMLColourShade)
  protected
    { IXMLColourShade }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLHSB }

  TXMLHSB = class(TXMLNode, IXMLHSB)
  protected
    { IXMLHSB }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_Hue: IXMLDetailMeasurement;
    function Get_Saturation: IXMLDetailMeasurement;
    function Get_Brilliance: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLab }

  TXMLLab = class(TXMLNode, IXMLLab)
  protected
    { IXMLLab }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_L: IXMLDetailMeasurement;
    function Get_A: IXMLDetailMeasurement;
    function Get_B: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRGB }

  TXMLRGB = class(TXMLNode, IXMLRGB)
  protected
    { IXMLRGB }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_Red: IXMLDetailMeasurement;
    function Get_Green: IXMLDetailMeasurement;
    function Get_Blue: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLColourCode }

  TXMLColourCode = class(TXMLNode, IXMLColourCode)
  protected
    { IXMLColourCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLDensity }

  TXMLDensity = class(TXMLDetailMeasurement, IXMLDensity)
  protected
    { IXMLDensity }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLDensityList }

  TXMLDensityList = class(TXMLNodeCollection, IXMLDensityList)
  protected
    { IXMLDensityList }
    function Add: IXMLDensity;
    function Insert(const Index: Integer): IXMLDensity;

    function Get_Item(Index: Integer): IXMLDensity;
  end;

{ TXMLDirt }

  TXMLDirt = class(TXMLDetailMeasurement, IXMLDirt)
  protected
    { IXMLDirt }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLDirtList }

  TXMLDirtList = class(TXMLNodeCollection, IXMLDirtList)
  protected
    { IXMLDirtList }
    function Add: IXMLDirt;
    function Insert(const Index: Integer): IXMLDirt;

    function Get_Item(Index: Integer): IXMLDirt;
  end;

{ TXMLDominantWavelength }

  TXMLDominantWavelength = class(TXMLDetailMeasurement, IXMLDominantWavelength)
  protected
    { IXMLDominantWavelength }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLDominantWavelengthList }

  TXMLDominantWavelengthList = class(TXMLNodeCollection, IXMLDominantWavelengthList)
  protected
    { IXMLDominantWavelengthList }
    function Add: IXMLDominantWavelength;
    function Insert(const Index: Integer): IXMLDominantWavelength;

    function Get_Item(Index: Integer): IXMLDominantWavelength;
  end;

{ TXMLExcitationPurity }

  TXMLExcitationPurity = class(TXMLDetailMeasurement, IXMLExcitationPurity)
  protected
    { IXMLExcitationPurity }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLExcitationPurityList }

  TXMLExcitationPurityList = class(TXMLNodeCollection, IXMLExcitationPurityList)
  protected
    { IXMLExcitationPurityList }
    function Add: IXMLExcitationPurity;
    function Insert(const Index: Integer): IXMLExcitationPurity;

    function Get_Item(Index: Integer): IXMLExcitationPurity;
  end;

{ TXMLFibreLength }

  TXMLFibreLength = class(TXMLDetailMeasurement, IXMLFibreLength)
  protected
    { IXMLFibreLength }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLFibreLengthList }

  TXMLFibreLengthList = class(TXMLNodeCollection, IXMLFibreLengthList)
  protected
    { IXMLFibreLengthList }
    function Add: IXMLFibreLength;
    function Insert(const Index: Integer): IXMLFibreLength;

    function Get_Item(Index: Integer): IXMLFibreLength;
  end;

{ TXMLFibreClassification }

  TXMLFibreClassification = class(TXMLDetailMeasurement, IXMLFibreClassification)
  protected
    { IXMLFibreClassification }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLFibreClassificationList }

  TXMLFibreClassificationList = class(TXMLNodeCollection, IXMLFibreClassificationList)
  protected
    { IXMLFibreClassificationList }
    function Add: IXMLFibreClassification;
    function Insert(const Index: Integer): IXMLFibreClassification;

    function Get_Item(Index: Integer): IXMLFibreClassification;
  end;

{ TXMLFolding }

  TXMLFolding = class(TXMLDetailMeasurement, IXMLFolding)
  protected
    { IXMLFolding }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLFoldingList }

  TXMLFoldingList = class(TXMLNodeCollection, IXMLFoldingList)
  protected
    { IXMLFoldingList }
    function Add: IXMLFolding;
    function Insert(const Index: Integer): IXMLFolding;

    function Get_Item(Index: Integer): IXMLFolding;
  end;

{ TXMLFormation }

  TXMLFormation = class(TXMLDetailMeasurement, IXMLFormation)
  protected
    { IXMLFormation }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLFormationList }

  TXMLFormationList = class(TXMLNodeCollection, IXMLFormationList)
  protected
    { IXMLFormationList }
    function Add: IXMLFormation;
    function Insert(const Index: Integer): IXMLFormation;

    function Get_Item(Index: Integer): IXMLFormation;
  end;

{ TXMLFreeness }

  TXMLFreeness = class(TXMLDetailMeasurement, IXMLFreeness)
  protected
    { IXMLFreeness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLFreenessList }

  TXMLFreenessList = class(TXMLNodeCollection, IXMLFreenessList)
  protected
    { IXMLFreenessList }
    function Add: IXMLFreeness;
    function Insert(const Index: Integer): IXMLFreeness;

    function Get_Item(Index: Integer): IXMLFreeness;
  end;

{ TXMLFriction }

  TXMLFriction = class(TXMLDetailMeasurement, IXMLFriction)
  protected
    { IXMLFriction }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLFrictionList }

  TXMLFrictionList = class(TXMLNodeCollection, IXMLFrictionList)
  protected
    { IXMLFrictionList }
    function Add: IXMLFriction;
    function Insert(const Index: Integer): IXMLFriction;

    function Get_Item(Index: Integer): IXMLFriction;
  end;

{ TXMLGloss }

  TXMLGloss = class(TXMLDetailMeasurement, IXMLGloss)
  protected
    { IXMLGloss }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLGlossList }

  TXMLGlossList = class(TXMLNodeCollection, IXMLGlossList)
  protected
    { IXMLGlossList }
    function Add: IXMLGloss;
    function Insert(const Index: Integer): IXMLGloss;

    function Get_Item(Index: Integer): IXMLGloss;
  end;

{ TXMLLightScattering }

  TXMLLightScattering = class(TXMLDetailMeasurement, IXMLLightScattering)
  protected
    { IXMLLightScattering }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLLightScatteringList }

  TXMLLightScatteringList = class(TXMLNodeCollection, IXMLLightScatteringList)
  protected
    { IXMLLightScatteringList }
    function Add: IXMLLightScattering;
    function Insert(const Index: Integer): IXMLLightScattering;

    function Get_Item(Index: Integer): IXMLLightScattering;
  end;

{ TXMLLuminance }

  TXMLLuminance = class(TXMLDetailMeasurement, IXMLLuminance)
  protected
    { IXMLLuminance }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLLuminanceList }

  TXMLLuminanceList = class(TXMLNodeCollection, IXMLLuminanceList)
  protected
    { IXMLLuminanceList }
    function Add: IXMLLuminance;
    function Insert(const Index: Integer): IXMLLuminance;

    function Get_Item(Index: Integer): IXMLLuminance;
  end;

{ TXMLMoisture }

  TXMLMoisture = class(TXMLDetailMeasurement, IXMLMoisture)
  protected
    { IXMLMoisture }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLMoistureList }

  TXMLMoistureList = class(TXMLNodeCollection, IXMLMoistureList)
  protected
    { IXMLMoistureList }
    function Add: IXMLMoisture;
    function Insert(const Index: Integer): IXMLMoisture;

    function Get_Item(Index: Integer): IXMLMoisture;
  end;

{ TXMLMullen }

  TXMLMullen = class(TXMLDetailMeasurement, IXMLMullen)
  protected
    { IXMLMullen }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLMullenList }

  TXMLMullenList = class(TXMLNodeCollection, IXMLMullenList)
  protected
    { IXMLMullenList }
    function Add: IXMLMullen;
    function Insert(const Index: Integer): IXMLMullen;

    function Get_Item(Index: Integer): IXMLMullen;
  end;

{ TXMLOpacity }

  TXMLOpacity = class(TXMLDetailMeasurement, IXMLOpacity)
  protected
    { IXMLOpacity }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLOpacityList }

  TXMLOpacityList = class(TXMLNodeCollection, IXMLOpacityList)
  protected
    { IXMLOpacityList }
    function Add: IXMLOpacity;
    function Insert(const Index: Integer): IXMLOpacity;

    function Get_Item(Index: Integer): IXMLOpacity;
  end;

{ TXMLPermeability }

  TXMLPermeability = class(TXMLDetailMeasurement, IXMLPermeability)
  protected
    { IXMLPermeability }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLPermeabilityList }

  TXMLPermeabilityList = class(TXMLNodeCollection, IXMLPermeabilityList)
  protected
    { IXMLPermeabilityList }
    function Add: IXMLPermeability;
    function Insert(const Index: Integer): IXMLPermeability;

    function Get_Item(Index: Integer): IXMLPermeability;
  end;

{ TXMLPH }

  TXMLPH = class(TXMLDetailMeasurement, IXMLPH)
  protected
    { IXMLPH }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLPHList }

  TXMLPHList = class(TXMLNodeCollection, IXMLPHList)
  protected
    { IXMLPHList }
    function Add: IXMLPH;
    function Insert(const Index: Integer): IXMLPH;

    function Get_Item(Index: Integer): IXMLPH;
  end;

{ TXMLPlyBond }

  TXMLPlyBond = class(TXMLDetailMeasurement, IXMLPlyBond)
  protected
    { IXMLPlyBond }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLPlyBondList }

  TXMLPlyBondList = class(TXMLNodeCollection, IXMLPlyBondList)
  protected
    { IXMLPlyBondList }
    function Add: IXMLPlyBond;
    function Insert(const Index: Integer): IXMLPlyBond;

    function Get_Item(Index: Integer): IXMLPlyBond;
  end;

{ TXMLPorosity }

  TXMLPorosity = class(TXMLDetailMeasurement, IXMLPorosity)
  protected
    { IXMLPorosity }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLPorosityList }

  TXMLPorosityList = class(TXMLNodeCollection, IXMLPorosityList)
  protected
    { IXMLPorosityList }
    function Add: IXMLPorosity;
    function Insert(const Index: Integer): IXMLPorosity;

    function Get_Item(Index: Integer): IXMLPorosity;
  end;

{ TXMLPostConsumerWaste }

  TXMLPostConsumerWaste = class(TXMLDetailMeasurement, IXMLPostConsumerWaste)
  protected
    { IXMLPostConsumerWaste }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLPostConsumerWasteList }

  TXMLPostConsumerWasteList = class(TXMLNodeCollection, IXMLPostConsumerWasteList)
  protected
    { IXMLPostConsumerWasteList }
    function Add: IXMLPostConsumerWaste;
    function Insert(const Index: Integer): IXMLPostConsumerWaste;

    function Get_Item(Index: Integer): IXMLPostConsumerWaste;
  end;

{ TXMLPreConsumerWaste }

  TXMLPreConsumerWaste = class(TXMLDetailMeasurement, IXMLPreConsumerWaste)
  protected
    { IXMLPreConsumerWaste }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLPreConsumerWasteList }

  TXMLPreConsumerWasteList = class(TXMLNodeCollection, IXMLPreConsumerWasteList)
  protected
    { IXMLPreConsumerWasteList }
    function Add: IXMLPreConsumerWaste;
    function Insert(const Index: Integer): IXMLPreConsumerWaste;

    function Get_Item(Index: Integer): IXMLPreConsumerWaste;
  end;

{ TXMLRecycled }

  TXMLRecycled = class(TXMLDetailMeasurement, IXMLRecycled)
  protected
    { IXMLRecycled }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLRecycledList }

  TXMLRecycledList = class(TXMLNodeCollection, IXMLRecycledList)
  protected
    { IXMLRecycledList }
    function Add: IXMLRecycled;
    function Insert(const Index: Integer): IXMLRecycled;

    function Get_Item(Index: Integer): IXMLRecycled;
  end;

{ TXMLResistance }

  TXMLResistance = class(TXMLDetailMeasurement, IXMLResistance)
  protected
    { IXMLResistance }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLResistanceList }

  TXMLResistanceList = class(TXMLNodeCollection, IXMLResistanceList)
  protected
    { IXMLResistanceList }
    function Add: IXMLResistance;
    function Insert(const Index: Integer): IXMLResistance;

    function Get_Item(Index: Integer): IXMLResistance;
  end;

{ TXMLRingCrush }

  TXMLRingCrush = class(TXMLDetailMeasurement, IXMLRingCrush)
  protected
    { IXMLRingCrush }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLRingCrushList }

  TXMLRingCrushList = class(TXMLNodeCollection, IXMLRingCrushList)
  protected
    { IXMLRingCrushList }
    function Add: IXMLRingCrush;
    function Insert(const Index: Integer): IXMLRingCrush;

    function Get_Item(Index: Integer): IXMLRingCrush;
  end;

{ TXMLRoughness }

  TXMLRoughness = class(TXMLDetailMeasurement, IXMLRoughness)
  protected
    { IXMLRoughness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLRoughnessList }

  TXMLRoughnessList = class(TXMLNodeCollection, IXMLRoughnessList)
  protected
    { IXMLRoughnessList }
    function Add: IXMLRoughness;
    function Insert(const Index: Integer): IXMLRoughness;

    function Get_Item(Index: Integer): IXMLRoughness;
  end;

{ TXMLRunnabilityIndex }

  TXMLRunnabilityIndex = class(TXMLDetailMeasurement, IXMLRunnabilityIndex)
  protected
    { IXMLRunnabilityIndex }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLRunnabilityIndexList }

  TXMLRunnabilityIndexList = class(TXMLNodeCollection, IXMLRunnabilityIndexList)
  protected
    { IXMLRunnabilityIndexList }
    function Add: IXMLRunnabilityIndex;
    function Insert(const Index: Integer): IXMLRunnabilityIndex;

    function Get_Item(Index: Integer): IXMLRunnabilityIndex;
  end;

{ TXMLShowThrough }

  TXMLShowThrough = class(TXMLDetailMeasurement, IXMLShowThrough)
  protected
    { IXMLShowThrough }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLShowThroughList }

  TXMLShowThroughList = class(TXMLNodeCollection, IXMLShowThroughList)
  protected
    { IXMLShowThroughList }
    function Add: IXMLShowThrough;
    function Insert(const Index: Integer): IXMLShowThrough;

    function Get_Item(Index: Integer): IXMLShowThrough;
  end;

{ TXMLSizing }

  TXMLSizing = class(TXMLDetailMeasurement, IXMLSizing)
  protected
    { IXMLSizing }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLSizingList }

  TXMLSizingList = class(TXMLNodeCollection, IXMLSizingList)
  protected
    { IXMLSizingList }
    function Add: IXMLSizing;
    function Insert(const Index: Integer): IXMLSizing;

    function Get_Item(Index: Integer): IXMLSizing;
  end;

{ TXMLSmoothness }

  TXMLSmoothness = class(TXMLDetailMeasurement, IXMLSmoothness)
  protected
    { IXMLSmoothness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLSmoothnessList }

  TXMLSmoothnessList = class(TXMLNodeCollection, IXMLSmoothnessList)
  protected
    { IXMLSmoothnessList }
    function Add: IXMLSmoothness;
    function Insert(const Index: Integer): IXMLSmoothness;

    function Get_Item(Index: Integer): IXMLSmoothness;
  end;

{ TXMLStiffness }

  TXMLStiffness = class(TXMLDetailMeasurement, IXMLStiffness)
  protected
    { IXMLStiffness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLStiffnessList }

  TXMLStiffnessList = class(TXMLNodeCollection, IXMLStiffnessList)
  protected
    { IXMLStiffnessList }
    function Add: IXMLStiffness;
    function Insert(const Index: Integer): IXMLStiffness;

    function Get_Item(Index: Integer): IXMLStiffness;
  end;

{ TXMLStretch }

  TXMLStretch = class(TXMLDetailMeasurement, IXMLStretch)
  protected
    { IXMLStretch }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLStretchList }

  TXMLStretchList = class(TXMLNodeCollection, IXMLStretchList)
  protected
    { IXMLStretchList }
    function Add: IXMLStretch;
    function Insert(const Index: Integer): IXMLStretch;

    function Get_Item(Index: Integer): IXMLStretch;
  end;

{ TXMLSurfaceStrength }

  TXMLSurfaceStrength = class(TXMLDetailMeasurement, IXMLSurfaceStrength)
  protected
    { IXMLSurfaceStrength }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLSurfaceStrengthList }

  TXMLSurfaceStrengthList = class(TXMLNodeCollection, IXMLSurfaceStrengthList)
  protected
    { IXMLSurfaceStrengthList }
    function Add: IXMLSurfaceStrength;
    function Insert(const Index: Integer): IXMLSurfaceStrength;

    function Get_Item(Index: Integer): IXMLSurfaceStrength;
  end;

{ TXMLTEA }

  TXMLTEA = class(TXMLDetailMeasurement, IXMLTEA)
  protected
    { IXMLTEA }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLTEAList }

  TXMLTEAList = class(TXMLNodeCollection, IXMLTEAList)
  protected
    { IXMLTEAList }
    function Add: IXMLTEA;
    function Insert(const Index: Integer): IXMLTEA;

    function Get_Item(Index: Integer): IXMLTEA;
  end;

{ TXMLTear }

  TXMLTear = class(TXMLDetailMeasurement, IXMLTear)
  protected
    { IXMLTear }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLTearList }

  TXMLTearList = class(TXMLNodeCollection, IXMLTearList)
  protected
    { IXMLTearList }
    function Add: IXMLTear;
    function Insert(const Index: Integer): IXMLTear;

    function Get_Item(Index: Integer): IXMLTear;
  end;

{ TXMLTearIndex }

  TXMLTearIndex = class(TXMLDetailMeasurement, IXMLTearIndex)
  protected
    { IXMLTearIndex }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLTearIndexList }

  TXMLTearIndexList = class(TXMLNodeCollection, IXMLTearIndexList)
  protected
    { IXMLTearIndexList }
    function Add: IXMLTearIndex;
    function Insert(const Index: Integer): IXMLTearIndex;

    function Get_Item(Index: Integer): IXMLTearIndex;
  end;

{ TXMLTensile }

  TXMLTensile = class(TXMLDetailMeasurement, IXMLTensile)
  protected
    { IXMLTensile }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLTensileList }

  TXMLTensileList = class(TXMLNodeCollection, IXMLTensileList)
  protected
    { IXMLTensileList }
    function Add: IXMLTensile;
    function Insert(const Index: Integer): IXMLTensile;

    function Get_Item(Index: Integer): IXMLTensile;
  end;

{ TXMLTensileIndex }

  TXMLTensileIndex = class(TXMLDetailMeasurement, IXMLTensileIndex)
  protected
    { IXMLTensileIndex }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLTensileIndexList }

  TXMLTensileIndexList = class(TXMLNodeCollection, IXMLTensileIndexList)
  protected
    { IXMLTensileIndexList }
    function Add: IXMLTensileIndex;
    function Insert(const Index: Integer): IXMLTensileIndex;

    function Get_Item(Index: Integer): IXMLTensileIndex;
  end;

{ TXMLWhiteness }

  TXMLWhiteness = class(TXMLDetailMeasurement, IXMLWhiteness)
  protected
    { IXMLWhiteness }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLWhitenessList }

  TXMLWhitenessList = class(TXMLNodeCollection, IXMLWhitenessList)
  protected
    { IXMLWhitenessList }
    function Add: IXMLWhiteness;
    function Insert(const Index: Integer): IXMLWhiteness;

    function Get_Item(Index: Integer): IXMLWhiteness;
  end;

{ TXMLAdditionalTest }

  TXMLAdditionalTest = class(TXMLNode, IXMLAdditionalTest)
  protected
    { IXMLAdditionalTest }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    function Get_AdditionalTestName: UnicodeString;
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
    procedure Set_AdditionalTestName(Value: UnicodeString);
    procedure Set_SampleSize(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlyAttributes }

  TXMLPlyAttributes = class(TXMLNode, IXMLPlyAttributes)
  private
    FAbrasion: IXMLAbrasionList;
    FAbsorptionInk: IXMLAbsorptionInkList;
    FAbsorptionLight: IXMLAbsorptionLightList;
    FAbsorptionWater: IXMLAbsorptionWaterList;
    FAppearance: IXMLAppearanceList;
    FAsh: IXMLAshList;
    FBasisWeight: IXMLBasisWeightList;
    FBendingResistance: IXMLBendingResistanceList;
    FBendingStiffness: IXMLBendingStiffnessList;
    FBrightness: IXMLBrightnessList;
    FBulk: IXMLBulkList;
    FBurst: IXMLBurstList;
    FBurstIndex: IXMLBurstIndexList;
    FCaliper: IXMLCaliperList;
    FCoatWeight: IXMLCoatWeightList;
    FColourDetail: IXMLColourDetailList;
    FDensity: IXMLDensityList;
    FDirt: IXMLDirtList;
    FDominantWavelength: IXMLDominantWavelengthList;
    FFibreLength: IXMLFibreLengthList;
    FFibreClassification: IXMLFibreClassificationList;
    FFolding: IXMLFoldingList;
    FFormation: IXMLFormationList;
    FFreeness: IXMLFreenessList;
    FFriction: IXMLFrictionList;
    FGloss: IXMLGlossList;
    FLightScattering: IXMLLightScatteringList;
    FMoisture: IXMLMoistureList;
    FOpacity: IXMLOpacityList;
    FPermeability: IXMLPermeabilityList;
    FPH: IXMLPHList;
    FPlyBond: IXMLPlyBondList;
    FPorosity: IXMLPorosityList;
    FPostConsumerWaste: IXMLPostConsumerWasteList;
    FPPI: IXMLMeasurementList;
    FPreConsumerWaste: IXMLPreConsumerWasteList;
    FRecycled: IXMLRecycledList;
    FResistance: IXMLResistanceList;
    FRingCrush: IXMLRingCrushList;
    FRoughness: IXMLRoughnessList;
    FRunnabilityIndex: IXMLRunnabilityIndexList;
    FShowThrough: IXMLShowThroughList;
    FSizing: IXMLSizingList;
    FSmoothness: IXMLSmoothnessList;
    FStiffness: IXMLStiffnessList;
    FStretch: IXMLStretchList;
    FSurfaceStrength: IXMLSurfaceStrengthList;
    FTEA: IXMLTEAList;
    FTear: IXMLTearList;
    FTearIndex: IXMLTearIndexList;
    FTensile: IXMLTensileList;
    FTensileIndex: IXMLTensileIndexList;
    FWhiteness: IXMLWhitenessList;
  protected
    { IXMLPlyAttributes }
    function Get_CoatingLocation: UnicodeString;
    function Get_PlyNumber: LongWord;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_CoatingLocation(Value: UnicodeString);
    procedure Set_PlyNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlyAttributesList }

  TXMLPlyAttributesList = class(TXMLNodeCollection, IXMLPlyAttributesList)
  protected
    { IXMLPlyAttributesList }
    function Add: IXMLPlyAttributes;
    function Insert(const Index: Integer): IXMLPlyAttributes;

    function Get_Item(Index: Integer): IXMLPlyAttributes;
  end;

{ TXMLPlySet }

  TXMLPlySet = class(TXMLNode, IXMLPlySet)
  private
    FNumberOfPlies: IXMLNni1List;
    FPlyAttributes: IXMLPlyAttributesList;
  protected
    { IXMLPlySet }
    function Get_EdgePaddable: UnicodeString;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    procedure Set_EdgePaddable(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlySetList }

  TXMLPlySetList = class(TXMLNodeCollection, IXMLPlySetList)
  protected
    { IXMLPlySetList }
    function Add: IXMLPlySet;
    function Insert(const Index: Integer): IXMLPlySet;

    function Get_Item(Index: Integer): IXMLPlySet;
  end;

{ TXMLReel }

  TXMLReel = class(TXMLNode, IXMLReel)
  protected
    { IXMLReel }
    function Get_ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReelConversionCharacteristicsClass }

  TXMLReelConversionCharacteristicsClass = class(TXMLNode, IXMLReelConversionCharacteristicsClass)
  private
    FReelWidth: IXMLMeasurementList;
    FReelDiameter: IXMLMeasurementList;
    FReelLength: IXMLMeasurementList;
    FCoreCharacteristics: IXMLCoreCharacteristicsList;
    FEmbossing: IXMLEmbossingList;
    FWatermark: IXMLWatermarkList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLReelConversionCharacteristicsClass }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_WindingDirection: UnicodeString;
    function Get_MakeTo: UnicodeString;
    function Get_ReelWidth: IXMLMeasurementList;
    function Get_ReelDiameter: IXMLMeasurementList;
    function Get_ReelLength: IXMLMeasurementList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristicsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: UnicodeString);
    procedure Set_MakeTo(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLConversionCode }

  TXMLConversionCode = class(TXMLNode, IXMLConversionCode)
  protected
    { IXMLConversionCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLCoreCharacteristics }

  TXMLCoreCharacteristics = class(TXMLNode, IXMLCoreCharacteristics)
  protected
    { IXMLCoreCharacteristics }
    function Get_CoreEndType: UnicodeString;
    function Get_CoreMaterialType: UnicodeString;
    function Get_CoreCode: IXMLCoreCode;
    function Get_CoreDiameterInside: IXMLMeasurement;
    function Get_CoreDiameterOutside: IXMLMeasurement;
    function Get_CoreStrengthCode: IXMLCoreStrengthCode;
    procedure Set_CoreEndType(Value: UnicodeString);
    procedure Set_CoreMaterialType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCoreCharacteristicsList }

  TXMLCoreCharacteristicsList = class(TXMLNodeCollection, IXMLCoreCharacteristicsList)
  protected
    { IXMLCoreCharacteristicsList }
    function Add: IXMLCoreCharacteristics;
    function Insert(const Index: Integer): IXMLCoreCharacteristics;

    function Get_Item(Index: Integer): IXMLCoreCharacteristics;
  end;

{ TXMLCoreCode }

  TXMLCoreCode = class(TXMLNode, IXMLCoreCode)
  protected
    { IXMLCoreCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLCoreStrengthCode }

  TXMLCoreStrengthCode = class(TXMLNode, IXMLCoreStrengthCode)
  protected
    { IXMLCoreStrengthCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLEmbossing }

  TXMLEmbossing = class(TXMLNode, IXMLEmbossing)
  private
    FEmbossingDescription: IXMLS60List;
  protected
    { IXMLEmbossing }
    function Get_EmbossingCode: IXMLEmbossingCode;
    function Get_EmbossingDescription: IXMLS60List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEmbossingList }

  TXMLEmbossingList = class(TXMLNodeCollection, IXMLEmbossingList)
  protected
    { IXMLEmbossingList }
    function Add: IXMLEmbossing;
    function Insert(const Index: Integer): IXMLEmbossing;

    function Get_Item(Index: Integer): IXMLEmbossing;
  end;

{ TXMLEmbossingCode }

  TXMLEmbossingCode = class(TXMLNode, IXMLEmbossingCode)
  protected
    { IXMLEmbossingCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLWatermark }

  TXMLWatermark = class(TXMLNode, IXMLWatermark)
  private
    FWatermarkDescription: IXMLS60List;
  protected
    { IXMLWatermark }
    function Get_WatermarkCode: IXMLWatermarkCode;
    function Get_WatermarkDescription: IXMLS60List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWatermarkList }

  TXMLWatermarkList = class(TXMLNodeCollection, IXMLWatermarkList)
  protected
    { IXMLWatermarkList }
    function Add: IXMLWatermark;
    function Insert(const Index: Integer): IXMLWatermark;

    function Get_Item(Index: Integer): IXMLWatermark;
  end;

{ TXMLWatermarkCode }

  TXMLWatermarkCode = class(TXMLNode, IXMLWatermarkCode)
  protected
    { IXMLWatermarkCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLReelPackagingCharacteristicsClass }

  TXMLReelPackagingCharacteristicsClass = class(TXMLNode, IXMLReelPackagingCharacteristicsClass)
  private
    FWrap: IXMLWrapList;
    FEndCaps: IXMLS20List;
    FCorePlugs: IXMLBooleanList;
    FBandCharacteristics: IXMLBandCharacteristicsList;
    FPalletCharacteristics: IXMLPalletCharacteristicsList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLReelPackagingCharacteristicsClass }
    function Get_ActionType: UnicodeString;
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_ReelsPerPack: LongWord;
    function Get_Wrap: IXMLWrapList;
    function Get_EndCaps: IXMLS20List;
    function Get_CorePlugs: IXMLBooleanList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_MaximumClampingForce: IXMLMaximumClampingForce;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: UnicodeString);
    procedure Set_ReelsPerPack(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackagingCode }

  TXMLPackagingCode = class(TXMLNode, IXMLPackagingCode)
  protected
    { IXMLPackagingCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLPackagingCodeList }

  TXMLPackagingCodeList = class(TXMLNodeCollection, IXMLPackagingCodeList)
  protected
    { IXMLPackagingCodeList }
    function Add: IXMLPackagingCode;
    function Insert(const Index: Integer): IXMLPackagingCode;

    function Get_Item(Index: Integer): IXMLPackagingCode;
  end;

{ TXMLPackagingDescription }

  TXMLPackagingDescription = class(TXMLNode, IXMLPackagingDescription)
  protected
    { IXMLPackagingDescription }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
  end;

{ TXMLPackagingDescriptionList }

  TXMLPackagingDescriptionList = class(TXMLNodeCollection, IXMLPackagingDescriptionList)
  protected
    { IXMLPackagingDescriptionList }
    function Add: IXMLPackagingDescription;
    function Insert(const Index: Integer): IXMLPackagingDescription;

    function Get_Item(Index: Integer): IXMLPackagingDescription;
  end;

{ TXMLWrap }

  TXMLWrap = class(TXMLNode, IXMLWrap)
  protected
    { IXMLWrap }
    function Get_WrapType: UnicodeString;
    function Get_WrapProperties: UnicodeString;
    function Get_WrapLocation: UnicodeString;
    function Get_NumberOfWraps: Double;
    function Get_Brand: UnicodeString;
    procedure Set_WrapType(Value: UnicodeString);
    procedure Set_WrapProperties(Value: UnicodeString);
    procedure Set_WrapLocation(Value: UnicodeString);
    procedure Set_NumberOfWraps(Value: Double);
    procedure Set_Brand(Value: UnicodeString);
  end;

{ TXMLWrapList }

  TXMLWrapList = class(TXMLNodeCollection, IXMLWrapList)
  protected
    { IXMLWrapList }
    function Add: IXMLWrap;
    function Insert(const Index: Integer): IXMLWrap;

    function Get_Item(Index: Integer): IXMLWrap;
  end;

{ TXMLBandCharacteristics }

  TXMLBandCharacteristics = class(TXMLNode, IXMLBandCharacteristics)
  private
    FBandColour: IXMLS20List;
  protected
    { IXMLBandCharacteristics }
    function Get_BandType: UnicodeString;
    function Get_BandsRequired: UnicodeString;
    function Get_BandDirection: UnicodeString;
    function Get_NumberOfBands: LongWord;
    function Get_BandColour: IXMLS20List;
    procedure Set_BandType(Value: UnicodeString);
    procedure Set_BandsRequired(Value: UnicodeString);
    procedure Set_BandDirection(Value: UnicodeString);
    procedure Set_NumberOfBands(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBandCharacteristicsList }

  TXMLBandCharacteristicsList = class(TXMLNodeCollection, IXMLBandCharacteristicsList)
  protected
    { IXMLBandCharacteristicsList }
    function Add: IXMLBandCharacteristics;
    function Insert(const Index: Integer): IXMLBandCharacteristics;

    function Get_Item(Index: Integer): IXMLBandCharacteristics;
  end;

{ TXMLPalletCharacteristics }

  TXMLPalletCharacteristics = class(TXMLNode, IXMLPalletCharacteristics)
  protected
    { IXMLPalletCharacteristics }
    function Get_MixedProductPalletIndicator: UnicodeString;
    function Get_PalletType: UnicodeString;
    function Get_PalletLedgeType: UnicodeString;
    function Get_PalletCoverType: UnicodeString;
    function Get_PalletAdditionsType: UnicodeString;
    function Get_PalletTopType: UnicodeString;
    function Get_IsPartialPalletsAllowed: UnicodeString;
    function Get_PalletMaterialType: UnicodeString;
    function Get_ProductIdentification: IXMLProductIdentification;
    function Get_PalletLength: IXMLMeasurement;
    function Get_PalletWidth: IXMLMeasurement;
    function Get_PalletHeight: IXMLMeasurement;
    function Get_ItemsPerPallet: LongWord;
    function Get_StacksPerPallet: LongWord;
    function Get_TiersPerPallet: LongWord;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_StackingMethod: UnicodeString;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_ItemsPerTier: LongWord;
    procedure Set_MixedProductPalletIndicator(Value: UnicodeString);
    procedure Set_PalletType(Value: UnicodeString);
    procedure Set_PalletLedgeType(Value: UnicodeString);
    procedure Set_PalletCoverType(Value: UnicodeString);
    procedure Set_PalletAdditionsType(Value: UnicodeString);
    procedure Set_PalletTopType(Value: UnicodeString);
    procedure Set_IsPartialPalletsAllowed(Value: UnicodeString);
    procedure Set_PalletMaterialType(Value: UnicodeString);
    procedure Set_ItemsPerPallet(Value: LongWord);
    procedure Set_StacksPerPallet(Value: LongWord);
    procedure Set_TiersPerPallet(Value: LongWord);
    procedure Set_StackingMethod(Value: UnicodeString);
    procedure Set_ItemsPerTier(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPalletCharacteristicsList }

  TXMLPalletCharacteristicsList = class(TXMLNodeCollection, IXMLPalletCharacteristicsList)
  protected
    { IXMLPalletCharacteristicsList }
    function Add: IXMLPalletCharacteristics;
    function Insert(const Index: Integer): IXMLPalletCharacteristics;

    function Get_Item(Index: Integer): IXMLPalletCharacteristics;
  end;

{ TXMLProductIdentification }

  TXMLProductIdentification = class(TXMLNode, IXMLProductIdentification)
  private
    FProductDescription: IXMLProductDescriptionList;
  protected
    { IXMLProductIdentification }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_ProductDescription: IXMLProductDescriptionList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductIdentificationList }

  TXMLProductIdentificationList = class(TXMLNodeCollection, IXMLProductIdentificationList)
  protected
    { IXMLProductIdentificationList }
    function Add: IXMLProductIdentification;
    function Insert(const Index: Integer): IXMLProductIdentification;

    function Get_Item(Index: Integer): IXMLProductIdentification;
  end;

{ TXMLLabelCharacteristics }

  TXMLLabelCharacteristics = class(TXMLNode, IXMLLabelCharacteristics)
  private
    FCustomerMarks: IXMLCustomerMarksList;
  protected
    { IXMLLabelCharacteristics }
    function Get_CustomerMarks: IXMLCustomerMarksList;
    function Get_LabelStyle: UnicodeString;
    function Get_LabelBrandName: UnicodeString;
    function Get_LabelPosition: UnicodeString;
    function Get_NumberOfLabels: LongWord;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_ColourCode: IXMLColourCode;
    function Get_ColourDescription: UnicodeString;
    procedure Set_LabelStyle(Value: UnicodeString);
    procedure Set_LabelBrandName(Value: UnicodeString);
    procedure Set_LabelPosition(Value: UnicodeString);
    procedure Set_NumberOfLabels(Value: LongWord);
    procedure Set_ColourDescription(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelCharacteristicsList }

  TXMLLabelCharacteristicsList = class(TXMLNodeCollection, IXMLLabelCharacteristicsList)
  protected
    { IXMLLabelCharacteristicsList }
    function Add: IXMLLabelCharacteristics;
    function Insert(const Index: Integer): IXMLLabelCharacteristics;

    function Get_Item(Index: Integer): IXMLLabelCharacteristics;
  end;

{ TXMLCustomerMarks }

  TXMLCustomerMarks = class(TXMLNode, IXMLCustomerMarks)
  protected
    { IXMLCustomerMarks }
    function Get_CustomerMarksType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_CustomerMarksType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLCustomerMarksList }

  TXMLCustomerMarksList = class(TXMLNodeCollection, IXMLCustomerMarksList)
  protected
    { IXMLCustomerMarksList }
    function Add: IXMLCustomerMarks;
    function Insert(const Index: Integer): IXMLCustomerMarks;

    function Get_Item(Index: Integer): IXMLCustomerMarks;
  end;

{ TXMLStencilCharacteristics }

  TXMLStencilCharacteristics = class(TXMLNodeCollection, IXMLStencilCharacteristics)
  protected
    { IXMLStencilCharacteristics }
    function Get_StencilType: UnicodeString;
    function Get_StencilInkType: UnicodeString;
    function Get_StencilLocation: UnicodeString;
    function Get_StencilFormat: UnicodeString;
    function Get_StencilContent: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    function Get_StencilText(Index: Integer): UnicodeString;
    procedure Set_StencilType(Value: UnicodeString);
    procedure Set_StencilInkType(Value: UnicodeString);
    procedure Set_StencilLocation(Value: UnicodeString);
    procedure Set_StencilFormat(Value: UnicodeString);
    procedure Set_StencilContent(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    function Add(const StencilText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const StencilText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLStencilCharacteristicsList }

  TXMLStencilCharacteristicsList = class(TXMLNodeCollection, IXMLStencilCharacteristicsList)
  protected
    { IXMLStencilCharacteristicsList }
    function Add: IXMLStencilCharacteristics;
    function Insert(const Index: Integer): IXMLStencilCharacteristics;

    function Get_Item(Index: Integer): IXMLStencilCharacteristics;
  end;

{ TXMLMaximumClampingForce }

  TXMLMaximumClampingForce = class(TXMLNode, IXMLMaximumClampingForce)
  protected
    { IXMLMaximumClampingForce }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheet }

  TXMLSheet = class(TXMLNode, IXMLSheet)
  protected
    { IXMLSheet }
    function Get_SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass;
    function Get_SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetConversionCharacteristicsClass }

  TXMLSheetConversionCharacteristicsClass = class(TXMLNode, IXMLSheetConversionCharacteristicsClass)
  private
    FSheetSize: IXMLSheetSizeList;
    FPunchedHoleDetails: IXMLPunchedHoleDetailsList;
    FCuttingDetails: IXMLCuttingDetailsList;
    FEmbossing: IXMLEmbossingList;
    FWatermark: IXMLWatermarkList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSheetConversionCharacteristicsClass }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_GrainDirection: UnicodeString;
    function Get_WindingDirection: UnicodeString;
    function Get_SheetSize: IXMLSheetSizeList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_PunchedHoleDetails: IXMLPunchedHoleDetailsList;
    function Get_CuttingDetails: IXMLCuttingDetailsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_GrainDirection(Value: UnicodeString);
    procedure Set_WindingDirection(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetSize }

  TXMLSheetSize = class(TXMLNode, IXMLSheetSize)
  protected
    { IXMLSheetSize }
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_PaperSizeType: UnicodeString;
    procedure Set_PaperSizeType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetSizeList }

  TXMLSheetSizeList = class(TXMLNodeCollection, IXMLSheetSizeList)
  protected
    { IXMLSheetSizeList }
    function Add: IXMLSheetSize;
    function Insert(const Index: Integer): IXMLSheetSize;

    function Get_Item(Index: Integer): IXMLSheetSize;
  end;

{ TXMLPunchedHoleDetails }

  TXMLPunchedHoleDetails = class(TXMLNode, IXMLPunchedHoleDetails)
  private
    FDistanceFromEdge: IXMLDistanceFromEdgeList;
    FHolePunchTemplateReference: IXMLS72List;
  protected
    { IXMLPunchedHoleDetails }
    function Get_NumberOfHoles: IXMLNumberOfHoles;
    function Get_HoleReinforcement: UnicodeString;
    function Get_HolePunchType: UnicodeString;
    function Get_StandardSpacing: UnicodeString;
    function Get_SizeOfHolePunch: IXMLSizeOfHolePunch;
    function Get_HoleSpacing: IXMLHoleSpacing;
    function Get_DistanceFromEdge: IXMLDistanceFromEdgeList;
    function Get_HolePunchTemplateReference: IXMLS72List;
    procedure Set_HoleReinforcement(Value: UnicodeString);
    procedure Set_HolePunchType(Value: UnicodeString);
    procedure Set_StandardSpacing(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPunchedHoleDetailsList }

  TXMLPunchedHoleDetailsList = class(TXMLNodeCollection, IXMLPunchedHoleDetailsList)
  protected
    { IXMLPunchedHoleDetailsList }
    function Add: IXMLPunchedHoleDetails;
    function Insert(const Index: Integer): IXMLPunchedHoleDetails;

    function Get_Item(Index: Integer): IXMLPunchedHoleDetails;
  end;

{ TXMLNumberOfHoles }

  TXMLNumberOfHoles = class(TXMLNode, IXMLNumberOfHoles)
  protected
    { IXMLNumberOfHoles }
  end;

{ TXMLSizeOfHolePunch }

  TXMLSizeOfHolePunch = class(TXMLMeasurement, IXMLSizeOfHolePunch)
  protected
    { IXMLSizeOfHolePunch }
    function Get_ShapeOfHole: UnicodeString;
    procedure Set_ShapeOfHole(Value: UnicodeString);
  end;

{ TXMLHoleSpacing }

  TXMLHoleSpacing = class(TXMLNode, IXMLHoleSpacing)
  protected
    { IXMLHoleSpacing }
    function Get_EvenSpacing: IXMLEvenSpacing;
    function Get_UnevenSpacing: UnicodeString;
    procedure Set_UnevenSpacing(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEvenSpacing }

  TXMLEvenSpacing = class(TXMLNode, IXMLEvenSpacing)
  protected
    { IXMLEvenSpacing }
    function Get_Value: IXMLValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDistanceFromEdge }

  TXMLDistanceFromEdge = class(TXMLMeasurement, IXMLDistanceFromEdge)
  protected
    { IXMLDistanceFromEdge }
    function Get_EdgeType: UnicodeString;
    function Get_DistanceMeasuredTo: UnicodeString;
    procedure Set_EdgeType(Value: UnicodeString);
    procedure Set_DistanceMeasuredTo(Value: UnicodeString);
  end;

{ TXMLDistanceFromEdgeList }

  TXMLDistanceFromEdgeList = class(TXMLNodeCollection, IXMLDistanceFromEdgeList)
  protected
    { IXMLDistanceFromEdgeList }
    function Add: IXMLDistanceFromEdge;
    function Insert(const Index: Integer): IXMLDistanceFromEdge;

    function Get_Item(Index: Integer): IXMLDistanceFromEdge;
  end;

{ TXMLCuttingDetails }

  TXMLCuttingDetails = class(TXMLNode, IXMLCuttingDetails)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLCuttingDetails }
    function Get_CuttingTemplateCode: IXMLCuttingTemplateCode;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCuttingDetailsList }

  TXMLCuttingDetailsList = class(TXMLNodeCollection, IXMLCuttingDetailsList)
  protected
    { IXMLCuttingDetailsList }
    function Add: IXMLCuttingDetails;
    function Insert(const Index: Integer): IXMLCuttingDetails;

    function Get_Item(Index: Integer): IXMLCuttingDetails;
  end;

{ TXMLCuttingTemplateCode }

  TXMLCuttingTemplateCode = class(TXMLNode, IXMLCuttingTemplateCode)
  protected
    { IXMLCuttingTemplateCode }
    function Get_AssignedBy: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_AssignedBy(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLSheetPackagingCharacteristicsClass }

  TXMLSheetPackagingCharacteristicsClass = class(TXMLNode, IXMLSheetPackagingCharacteristicsClass)
  private
    FPackagingCode: IXMLPackagingCodeList;
    FPackagingDescription: IXMLPackagingDescriptionList;
    FReamType: IXMLReamTypeList;
    FReamWeight: IXMLMeasurementList;
    FMWeight: IXMLMeasurementList;
    FSheetCount: IXMLSheetCountList;
    FUnitsPerCarton: IXMLMeasurementList;
    FWrap: IXMLWrapList;
    FBandCharacteristics: IXMLBandCharacteristicsList;
    FPalletCharacteristics: IXMLPalletCharacteristicsList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSheetPackagingCharacteristicsClass }
    function Get_ActionType: UnicodeString;
    function Get_PackagingCode: IXMLPackagingCodeList;
    function Get_PackagingDescription: IXMLPackagingDescriptionList;
    function Get_ReamType: IXMLReamTypeList;
    function Get_ReamWeight: IXMLMeasurementList;
    function Get_MWeight: IXMLMeasurementList;
    function Get_SheetCount: IXMLSheetCountList;
    function Get_UnitsPerCarton: IXMLMeasurementList;
    function Get_Wrap: IXMLWrapList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetCount }

  TXMLSheetCount = class(TXMLNode, IXMLSheetCount)
  protected
    { IXMLSheetCount }
    function Get_SheetCountMethodType: UnicodeString;
    function Get_PerCarton: LongWord;
    function Get_PerReam: LongWord;
    function Get_PerPallet: LongWord;
    function Get_PerTab: LongWord;
    procedure Set_SheetCountMethodType(Value: UnicodeString);
    procedure Set_PerCarton(Value: LongWord);
    procedure Set_PerReam(Value: LongWord);
    procedure Set_PerPallet(Value: LongWord);
    procedure Set_PerTab(Value: LongWord);
  end;

{ TXMLSheetCountList }

  TXMLSheetCountList = class(TXMLNodeCollection, IXMLSheetCountList)
  protected
    { IXMLSheetCountList }
    function Add: IXMLSheetCount;
    function Insert(const Index: Integer): IXMLSheetCount;

    function Get_Item(Index: Integer): IXMLSheetCount;
  end;

{ TXMLSuppliedComponentReference }

  TXMLSuppliedComponentReference = class(TXMLNode, IXMLSuppliedComponentReference)
  protected
    { IXMLSuppliedComponentReference }
    function Get_SuppliedComponentReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_SuppliedComponentReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLSuppliedComponentReferenceList }

  TXMLSuppliedComponentReferenceList = class(TXMLNodeCollection, IXMLSuppliedComponentReferenceList)
  protected
    { IXMLSuppliedComponentReferenceList }
    function Add: IXMLSuppliedComponentReference;
    function Insert(const Index: Integer): IXMLSuppliedComponentReference;

    function Get_Item(Index: Integer): IXMLSuppliedComponentReference;
  end;

{ TXMLComponentShipDate }

  TXMLComponentShipDate = class(TXMLNode, IXMLComponentShipDate)
  protected
    { IXMLComponentShipDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLComponentDueDate }

  TXMLComponentDueDate = class(TXMLNode, IXMLComponentDueDate)
  protected
    { IXMLComponentDueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLComponentNeededDate }

  TXMLComponentNeededDate = class(TXMLNode, IXMLComponentNeededDate)
  protected
    { IXMLComponentNeededDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrderStatusInformation }

  TXMLOrderStatusInformation = class(TXMLNode, IXMLOrderStatusInformation)
  protected
    { IXMLOrderStatusInformation }
    function Get_OrderPrimaryStatus: IXMLOrderPrimaryStatus;
    function Get_OrderSecondaryStatus: IXMLOrderSecondaryStatus;
    function Get_OrderStatusInformationDate: IXMLOrderStatusInformationDate;
    function Get_QuantityInformation: IXMLQuantityInformation;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrderPrimaryStatus }

  TXMLOrderPrimaryStatus = class(TXMLNode, IXMLOrderPrimaryStatus)
  protected
    { IXMLOrderPrimaryStatus }
    function Get_OrderStatusCode: UnicodeString;
    procedure Set_OrderStatusCode(Value: UnicodeString);
  end;

{ TXMLOrderSecondaryStatus }

  TXMLOrderSecondaryStatus = class(TXMLNode, IXMLOrderSecondaryStatus)
  protected
    { IXMLOrderSecondaryStatus }
    function Get_OrderStatusCode: UnicodeString;
    procedure Set_OrderStatusCode(Value: UnicodeString);
  end;

{ TXMLOrderStatusInformationDate }

  TXMLOrderStatusInformationDate = class(TXMLNode, IXMLOrderStatusInformationDate)
  protected
    { IXMLOrderStatusInformationDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackagingCharacteristics }

  TXMLPackagingCharacteristics = class(TXMLNode, IXMLPackagingCharacteristics)
  private
    FDocumentInformation: IXMLDocumentInformationList;
  protected
    { IXMLPackagingCharacteristics }
    function Get_IsBoxed: UnicodeString;
    function Get_IsPalletized: UnicodeString;
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics;
    function Get_BookUnitPacking: IXMLBookUnitPacking;
    function Get_DocumentInformation: IXMLDocumentInformationList;
    procedure Set_IsBoxed(Value: UnicodeString);
    procedure Set_IsPalletized(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackagingCharacteristicsList }

  TXMLPackagingCharacteristicsList = class(TXMLNodeCollection, IXMLPackagingCharacteristicsList)
  protected
    { IXMLPackagingCharacteristicsList }
    function Add: IXMLPackagingCharacteristics;
    function Insert(const Index: Integer): IXMLPackagingCharacteristics;

    function Get_Item(Index: Integer): IXMLPackagingCharacteristics;
  end;

{ TXMLBoxCharacteristics }

  TXMLBoxCharacteristics = class(TXMLNode, IXMLBoxCharacteristics)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLBoxCharacteristics }
    function Get_BoxType: UnicodeString;
    function Get_BoxMeasurementsAppliesTo: UnicodeString;
    function Get_IsRFTagRequired: UnicodeString;
    function Get_ProductIdentification: IXMLProductIdentification;
    function Get_Height: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
    function Get_Burst: IXMLBurst;
    function Get_BurstIndex: IXMLBurstIndex;
    function Get_UnitsPerCarton: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BoxType(Value: UnicodeString);
    procedure Set_BoxMeasurementsAppliesTo(Value: UnicodeString);
    procedure Set_IsRFTagRequired(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWrapCharacteristics }

  TXMLWrapCharacteristics = class(TXMLNode, IXMLWrapCharacteristics)
  private
    FWrap: IXMLWrapList;
  protected
    { IXMLWrapCharacteristics }
    function Get_PackagesPerWrap: LongWord;
    function Get_Wrap: IXMLWrapList;
    procedure Set_PackagesPerWrap(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPalletPackagingCharacteristics }

  TXMLPalletPackagingCharacteristics = class(TXMLNode, IXMLPalletPackagingCharacteristics)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPalletPackagingCharacteristics }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBookUnitPacking }

  TXMLBookUnitPacking = class(TXMLNode, IXMLBookUnitPacking)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLBookUnitPacking }
    function Get_BookUnitType: UnicodeString;
    function Get_PackageType: UnicodeString;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BookUnitType(Value: UnicodeString);
    procedure Set_PackageType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitCharacteristics }

  TXMLUnitCharacteristics = class(TXMLNode, IXMLUnitCharacteristics)
  protected
    { IXMLUnitCharacteristics }
    function Get_Height: IXMLMeasurement;
    function Get_Thickness: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentInformation }

  TXMLDocumentInformation = class(TXMLNode, IXMLDocumentInformation)
  private
    FNumberOfDocuments: IXMLNumberOfDocumentsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDocumentInformation }
    function Get_DocumentType: UnicodeString;
    function Get_NumberOfDocuments: IXMLNumberOfDocumentsList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentInstruction: IXMLDocumentInstruction;
    procedure Set_DocumentType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentInformationList }

  TXMLDocumentInformationList = class(TXMLNodeCollection, IXMLDocumentInformationList)
  protected
    { IXMLDocumentInformationList }
    function Add: IXMLDocumentInformation;
    function Insert(const Index: Integer): IXMLDocumentInformation;

    function Get_Item(Index: Integer): IXMLDocumentInformation;
  end;

{ TXMLNumberOfDocuments }

  TXMLNumberOfDocuments = class(TXMLNode, IXMLNumberOfDocuments)
  protected
    { IXMLNumberOfDocuments }
    function Get_Original: UnicodeString;
    procedure Set_Original(Value: UnicodeString);
  end;

{ TXMLNumberOfDocumentsList }

  TXMLNumberOfDocumentsList = class(TXMLNodeCollection, IXMLNumberOfDocumentsList)
  protected
    { IXMLNumberOfDocumentsList }
    function Add: IXMLNumberOfDocuments;
    function Insert(const Index: Integer): IXMLNumberOfDocuments;

    function Get_Item(Index: Integer): IXMLNumberOfDocuments;
  end;

{ TXMLDocumentInstruction }

  TXMLDocumentInstruction = class(TXMLNode, IXMLDocumentInstruction)
  private
    FDocumentInstructionText: IXMLS255List;
    FDocumentContent: IXMLDocumentContentList;
  protected
    { IXMLDocumentInstruction }
    function Get_DocumentInstructionText: IXMLS255List;
    function Get_DocumentContent: IXMLDocumentContentList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentContent }

  TXMLDocumentContent = class(TXMLNodeCollection, IXMLDocumentContent)
  protected
    { IXMLDocumentContent }
    function Get_DocumentContentType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    function Get_DocumentContentText(Index: Integer): UnicodeString;
    procedure Set_DocumentContentType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    function Add(const DocumentContentText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const DocumentContentText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentContentList }

  TXMLDocumentContentList = class(TXMLNodeCollection, IXMLDocumentContentList)
  protected
    { IXMLDocumentContentList }
    function Add: IXMLDocumentContent;
    function Insert(const Index: Integer): IXMLDocumentContent;

    function Get_Item(Index: Integer): IXMLDocumentContent;
  end;

{ TXMLForestWood }

  TXMLForestWood = class(TXMLNode, IXMLForestWood)
  private
    FTreeSpeciesGroup: IXMLTreeSpeciesGroupList;
    FForestWoodClass: IXMLForestWoodClassList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLForestWood }
    function Get_ForestWoodType: UnicodeString;
    function Get_ForestWoodItemType: UnicodeString;
    function Get_IsForestWoodReject: UnicodeString;
    function Get_TreeSpeciesGroup: IXMLTreeSpeciesGroupList;
    function Get_ForestWoodClass: IXMLForestWoodClassList;
    function Get_ForestWoodCharacteristics: IXMLForestWoodCharacteristics;
    function Get_ForestWoodPackagingCharacteristics: IXMLForestWoodPackagingCharacteristics;
    function Get_ForestWoodProcessingCharacteristics: IXMLForestWoodProcessingCharacteristics;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_ForestWoodType(Value: UnicodeString);
    procedure Set_ForestWoodItemType(Value: UnicodeString);
    procedure Set_IsForestWoodReject(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTreeSpeciesGroup }

  TXMLTreeSpeciesGroup = class(TXMLNode, IXMLTreeSpeciesGroup)
  private
    FTreeSpeciesGroupDescription: IXMLS255List;
  protected
    { IXMLTreeSpeciesGroup }
    function Get_TreeSpeciesGroupCode: IXMLTreeSpeciesGroupCode;
    function Get_TreeSpeciesGroupDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTreeSpeciesGroupList }

  TXMLTreeSpeciesGroupList = class(TXMLNodeCollection, IXMLTreeSpeciesGroupList)
  protected
    { IXMLTreeSpeciesGroupList }
    function Add: IXMLTreeSpeciesGroup;
    function Insert(const Index: Integer): IXMLTreeSpeciesGroup;

    function Get_Item(Index: Integer): IXMLTreeSpeciesGroup;
  end;

{ TXMLTreeSpeciesGroupCode }

  TXMLTreeSpeciesGroupCode = class(TXMLNode, IXMLTreeSpeciesGroupCode)
  protected
    { IXMLTreeSpeciesGroupCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLForestWoodClass }

  TXMLForestWoodClass = class(TXMLNode, IXMLForestWoodClass)
  private
    FForestWoodClassDescription: IXMLS255List;
  protected
    { IXMLForestWoodClass }
    function Get_ForestWoodClassType: UnicodeString;
    function Get_ForestWoodClassCode: IXMLForestWoodClassCode;
    function Get_ForestWoodClassDescription: IXMLS255List;
    procedure Set_ForestWoodClassType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLForestWoodClassList }

  TXMLForestWoodClassList = class(TXMLNodeCollection, IXMLForestWoodClassList)
  protected
    { IXMLForestWoodClassList }
    function Add: IXMLForestWoodClass;
    function Insert(const Index: Integer): IXMLForestWoodClass;

    function Get_Item(Index: Integer): IXMLForestWoodClass;
  end;

{ TXMLForestWoodClassCode }

  TXMLForestWoodClassCode = class(TXMLNode, IXMLForestWoodClassCode)
  protected
    { IXMLForestWoodClassCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLForestWoodCharacteristics }

  TXMLForestWoodCharacteristics = class(TXMLNode, IXMLForestWoodCharacteristics)
  private
    FPropertyValue: IXMLPropertyValueList;
  protected
    { IXMLForestWoodCharacteristics }
    function Get_PropertyValue: IXMLPropertyValueList;
    function Get_ProductAdaptedFor: IXMLProductAdaptedFor;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductAdaptedFor }

  TXMLProductAdaptedFor = class(TXMLNode, IXMLProductAdaptedFor)
  protected
    { IXMLProductAdaptedFor }
    function Get_OtherParty: IXMLTypedParty;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLForestWoodPackagingCharacteristics }

  TXMLForestWoodPackagingCharacteristics = class(TXMLNodeCollection, IXMLForestWoodPackagingCharacteristics)
  protected
    { IXMLForestWoodPackagingCharacteristics }
    function Get_PackagingCodeSpecification(Index: Integer): IXMLPackagingCodeSpecification;
    function Add: IXMLPackagingCodeSpecification;
    function Insert(const Index: Integer): IXMLPackagingCodeSpecification;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackagingCodeSpecification }

  TXMLPackagingCodeSpecification = class(TXMLNode, IXMLPackagingCodeSpecification)
  private
    FPackagingDescription: IXMLPackagingDescriptionList;
  protected
    { IXMLPackagingCodeSpecification }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescriptionList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLForestWoodProcessingCharacteristics }

  TXMLForestWoodProcessingCharacteristics = class(TXMLNodeCollection, IXMLForestWoodProcessingCharacteristics)
  protected
    { IXMLForestWoodProcessingCharacteristics }
    function Get_ProcessingCodeSpecification(Index: Integer): IXMLProcessingCodeSpecification;
    function Add: IXMLProcessingCodeSpecification;
    function Insert(const Index: Integer): IXMLProcessingCodeSpecification;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProcessingCodeSpecification }

  TXMLProcessingCodeSpecification = class(TXMLNode, IXMLProcessingCodeSpecification)
  private
    FProcessingDescription: IXMLS255List;
  protected
    { IXMLProcessingCodeSpecification }
    function Get_ProcessingCode: IXMLProcessingCode;
    function Get_ProcessingDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProcessingCode }

  TXMLProcessingCode = class(TXMLNode, IXMLProcessingCode)
  protected
    { IXMLProcessingCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLSafetyAndEnvironmentalInformationClass }

  TXMLSafetyAndEnvironmentalInformationClass = class(TXMLNode, IXMLSafetyAndEnvironmentalInformationClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSafetyAndEnvironmentalInformationClass }
    function Get_SafetyAndEnvironmentalType: UnicodeString;
    function Get_Agency: UnicodeString;
    function Get_LicenceNumber: UnicodeString;
    function Get_ChainOfCustody: IXMLChainOfCustody;
    function Get_SafetyAndEnvironmentalCertification: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SafetyAndEnvironmentalType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_LicenceNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSafetyAndEnvironmentalInformationClassList }

  TXMLSafetyAndEnvironmentalInformationClassList = class(TXMLNodeCollection, IXMLSafetyAndEnvironmentalInformationClassList)
  protected
    { IXMLSafetyAndEnvironmentalInformationClassList }
    function Add: IXMLSafetyAndEnvironmentalInformationClass;
    function Insert(const Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;

    function Get_Item(Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
  end;

{ TXMLChainOfCustody }

  TXMLChainOfCustody = class(TXMLNode, IXMLChainOfCustody)
  protected
    { IXMLChainOfCustody }
    function Get_CertificationBody: UnicodeString;
    procedure Set_CertificationBody(Value: UnicodeString);
  end;

{ TXMLLabelStock }

  TXMLLabelStock = class(TXMLNode, IXMLLabelStock)
  protected
    { IXMLLabelStock }
    function Get_LabelStockCharacteristics: IXMLLabelStockCharacteristics;
    function Get_SingleWidthReel: IXMLSingleWidthReel;
    function Get_TrimmedReel: IXMLTrimmedReel;
    function Get_Sheet: IXMLSheet;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStockCharacteristics }

  TXMLLabelStockCharacteristics = class(TXMLNode, IXMLLabelStockCharacteristics)
  private
    FLabelStockLayer: IXMLLabelStockLayerList;
    FExtraFeature: IXMLExtraFeatureList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLLabelStockCharacteristics }
    function Get_LabelStockLayer: IXMLLabelStockLayerList;
    function Get_ExtraFeature: IXMLExtraFeatureList;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStockLayer }

  TXMLLabelStockLayer = class(TXMLNode, IXMLLabelStockLayer)
  protected
    { IXMLLabelStockLayer }
    function Get_LabelStockLayerType: UnicodeString;
    function Get_LabelStockLayerNumber: LongWord;
    function Get_LayerMaterial: IXMLLayerMaterial;
    procedure Set_LabelStockLayerType(Value: UnicodeString);
    procedure Set_LabelStockLayerNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStockLayerList }

  TXMLLabelStockLayerList = class(TXMLNodeCollection, IXMLLabelStockLayerList)
  protected
    { IXMLLabelStockLayerList }
    function Add: IXMLLabelStockLayer;
    function Insert(const Index: Integer): IXMLLabelStockLayer;

    function Get_Item(Index: Integer): IXMLLabelStockLayer;
  end;

{ TXMLLayerMaterial }

  TXMLLayerMaterial = class(TXMLNode, IXMLLayerMaterial)
  protected
    { IXMLLayerMaterial }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_LayerMaterialName: UnicodeString;
    procedure Set_LayerMaterialName(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLExtraFeature }

  TXMLExtraFeature = class(TXMLNode, IXMLExtraFeature)
  protected
    { IXMLExtraFeature }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_ExtraFeatureDescription: UnicodeString;
    procedure Set_ExtraFeatureDescription(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLExtraFeatureList }

  TXMLExtraFeatureList = class(TXMLNodeCollection, IXMLExtraFeatureList)
  protected
    { IXMLExtraFeatureList }
    function Add: IXMLExtraFeature;
    function Insert(const Index: Integer): IXMLExtraFeature;

    function Get_Item(Index: Integer): IXMLExtraFeature;
  end;

{ TXMLSingleWidthReel }

  TXMLSingleWidthReel = class(TXMLNode, IXMLSingleWidthReel)
  protected
    { IXMLSingleWidthReel }
    function Get_SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSingleWidthReelConversionCharacteristics }

  TXMLSingleWidthReelConversionCharacteristics = class(TXMLNode, IXMLSingleWidthReelConversionCharacteristics)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSingleWidthReelConversionCharacteristics }
    function Get_WindingDirection: UnicodeString;
    function Get_TrimmedOrderType: UnicodeString;
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_MaximumNumberOfJoins: LongWord;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: UnicodeString);
    procedure Set_TrimmedOrderType(Value: UnicodeString);
    procedure Set_MaximumNumberOfJoins(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTrimmedReel }

  TXMLTrimmedReel = class(TXMLNode, IXMLTrimmedReel)
  protected
    { IXMLTrimmedReel }
    function Get_TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTrimmedReelConversionCharacteristics }

  TXMLTrimmedReelConversionCharacteristics = class(TXMLNode, IXMLTrimmedReelConversionCharacteristics)
  private
    FSlitReel: IXMLSlitReelList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTrimmedReelConversionCharacteristics }
    function Get_WindingDirection: UnicodeString;
    function Get_TrimmedOrderType: UnicodeString;
    function Get_MasterReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MaximumOffcut: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_MaximumNumberOfJoins: LongWord;
    function Get_SlitReel: IXMLSlitReelList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: UnicodeString);
    procedure Set_TrimmedOrderType(Value: UnicodeString);
    procedure Set_MaximumNumberOfJoins(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSlitReel }

  TXMLSlitReel = class(TXMLNode, IXMLSlitReel)
  private
    FSlitReelReference: IXMLSlitReelReferenceList;
  protected
    { IXMLSlitReel }
    function Get_DeliveryIndicator: UnicodeString;
    function Get_SlitReelLineNumber: LongWord;
    function Get_SlitReelWidth: IXMLMeasurement;
    function Get_SlitReelOrderQuantity: IXMLSlitReelOrderQuantity;
    function Get_SlitReelsInSet: LongWord;
    function Get_SlitReelReference: IXMLSlitReelReferenceList;
    procedure Set_DeliveryIndicator(Value: UnicodeString);
    procedure Set_SlitReelLineNumber(Value: LongWord);
    procedure Set_SlitReelsInSet(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSlitReelList }

  TXMLSlitReelList = class(TXMLNodeCollection, IXMLSlitReelList)
  protected
    { IXMLSlitReelList }
    function Add: IXMLSlitReel;
    function Insert(const Index: Integer): IXMLSlitReel;

    function Get_Item(Index: Integer): IXMLSlitReel;
  end;

{ TXMLSlitReelOrderQuantity }

  TXMLSlitReelOrderQuantity = class(TXMLMeasurement, IXMLSlitReelOrderQuantity)
  protected
    { IXMLSlitReelOrderQuantity }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
  end;

{ TXMLSlitReelReference }

  TXMLSlitReelReference = class(TXMLNode, IXMLSlitReelReference)
  protected
    { IXMLSlitReelReference }
    function Get_SlitReelReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_SlitReelReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLSlitReelReferenceList }

  TXMLSlitReelReferenceList = class(TXMLNodeCollection, IXMLSlitReelReferenceList)
  protected
    { IXMLSlitReelReferenceList }
    function Add: IXMLSlitReelReference;
    function Insert(const Index: Integer): IXMLSlitReelReference;

    function Get_Item(Index: Integer): IXMLSlitReelReference;
  end;

{ TXMLPulpClass }

  TXMLPulpClass = class(TXMLNode, IXMLPulpClass)
  protected
    { IXMLPulpClass }
    function Get_PulpCharacteristics: IXMLPulpCharacteristics;
    function Get_Bale: IXMLBale;
    function Get_Reel: IXMLReel;
    function Get_Slurry: IXMLSlurry;
    function Get_NonStandardPulp: IXMLNonStandardPulp;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPulpCharacteristics }

  TXMLPulpCharacteristics = class(TXMLNode, IXMLPulpCharacteristics)
  private
    FAsh: IXMLAshList;
    FBasisWeight: IXMLBasisWeightList;
    FBrightness: IXMLBrightnessList;
    FBurst: IXMLBurstList;
    FBurstIndex: IXMLBurstIndexList;
    FColourDetail: IXMLColourDetailList;
    FDensity: IXMLDensityList;
    FDirt: IXMLDirtList;
    FDrainageResistance: IXMLDrainageResistanceList;
    FFibreLength: IXMLFibreLengthList;
    FFibreClassification: IXMLFibreClassificationList;
    FFreeness: IXMLFreenessList;
    FLightScattering: IXMLLightScatteringList;
    FMoisture: IXMLMoistureList;
    FOpacity: IXMLOpacityList;
    FPH: IXMLPHList;
    FPostConsumerWaste: IXMLPostConsumerWasteList;
    FPreConsumerWaste: IXMLPreConsumerWasteList;
    FRecycled: IXMLRecycledList;
    FTear: IXMLTearList;
    FTearIndex: IXMLTearIndexList;
    FTensile: IXMLTensileList;
    FTensileIndex: IXMLTensileIndexList;
    FViscosity: IXMLViscosityList;
    FWhiteness: IXMLWhitenessList;
  protected
    { IXMLPulpCharacteristics }
    function Get_PulpingProcess: UnicodeString;
    function Get_BleachingProcess: UnicodeString;
    function Get_FibreSource: UnicodeString;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DrainageResistance: IXMLDrainageResistanceList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_PH: IXMLPHList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Viscosity: IXMLViscosityList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_PulpingProcess(Value: UnicodeString);
    procedure Set_BleachingProcess(Value: UnicodeString);
    procedure Set_FibreSource(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDrainageResistance }

  TXMLDrainageResistance = class(TXMLDetailMeasurement, IXMLDrainageResistance)
  protected
    { IXMLDrainageResistance }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLDrainageResistanceList }

  TXMLDrainageResistanceList = class(TXMLNodeCollection, IXMLDrainageResistanceList)
  protected
    { IXMLDrainageResistanceList }
    function Add: IXMLDrainageResistance;
    function Insert(const Index: Integer): IXMLDrainageResistance;

    function Get_Item(Index: Integer): IXMLDrainageResistance;
  end;

{ TXMLViscosity }

  TXMLViscosity = class(TXMLDetailMeasurement, IXMLViscosity)
  protected
    { IXMLViscosity }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLViscosityList }

  TXMLViscosityList = class(TXMLNodeCollection, IXMLViscosityList)
  protected
    { IXMLViscosityList }
    function Add: IXMLViscosity;
    function Insert(const Index: Integer): IXMLViscosity;

    function Get_Item(Index: Integer): IXMLViscosity;
  end;

{ TXMLBale }

  TXMLBale = class(TXMLNode, IXMLBale)
  protected
    { IXMLBale }
    function Get_BaleType: UnicodeString;
    function Get_BaleConversionCharacteristics: IXMLBaleConversionCharacteristics;
    function Get_BalePackagingCharacteristics: IXMLBalePackagingCharacteristics;
    procedure Set_BaleType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleConversionCharacteristics }

  TXMLBaleConversionCharacteristics = class(TXMLNode, IXMLBaleConversionCharacteristics)
  protected
    { IXMLBaleConversionCharacteristics }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_BaleHeight: IXMLMeasurement;
    function Get_BaleWidth: IXMLMeasurement;
    function Get_BaleDepth: IXMLMeasurement;
    function Get_BaleStandardWeight: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBalePackagingCharacteristics }

  TXMLBalePackagingCharacteristics = class(TXMLNode, IXMLBalePackagingCharacteristics)
  private
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
  protected
    { IXMLBalePackagingCharacteristics }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_CustomerMarks: IXMLCustomerMarks;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_PulpUnitCharacteristics: IXMLPulpUnitCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPulpUnitCharacteristics }

  TXMLPulpUnitCharacteristics = class(TXMLNode, IXMLPulpUnitCharacteristics)
  private
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPulpUnitCharacteristics }
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_Wrap: IXMLWrap;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BalesPerUnit: LongWord;
    function Get_LayersPerUnit: LongWord;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BalesPerUnit(Value: LongWord);
    procedure Set_LayersPerUnit(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSlurry }

  TXMLSlurry = class(TXMLNode, IXMLSlurry)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSlurry }
    function Get_TargetSolidsContent: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNonStandardPulp }

  TXMLNonStandardPulp = class(TXMLNode, IXMLNonStandardPulp)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLNonStandardPulp }
    function Get_TargetMoisture: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRecoveredPaper }

  TXMLRecoveredPaper = class(TXMLNode, IXMLRecoveredPaper)
  protected
    { IXMLRecoveredPaper }
    function Get_RecoveredPaperAttributes: UnicodeString;
    procedure Set_RecoveredPaperAttributes(Value: UnicodeString);
  end;

{ TXMLVirginFibre }

  TXMLVirginFibre = class(TXMLNode, IXMLVirginFibre)
  protected
    { IXMLVirginFibre }
    function Get_TimberCharacteristics: IXMLTimberCharacteristics;
    function Get_Log: IXMLLog;
    function Get_Chip: IXMLChip;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTimberCharacteristics }

  TXMLTimberCharacteristics = class(TXMLNode, IXMLTimberCharacteristics)
  private
    FLumberSpecies: IXMLLumberSpeciesClassList;
  protected
    { IXMLTimberCharacteristics }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_Age: IXMLMeasurement;
    function Get_Grade: UnicodeString;
    procedure Set_Grade(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberSpeciesClass }

  TXMLLumberSpeciesClass = class(TXMLNode, IXMLLumberSpeciesClass)
  protected
    { IXMLLumberSpeciesClass }
    function Get_SpeciesType: UnicodeString;
    function Get_SpeciesOrigin: UnicodeString;
    function Get_SpeciesAgency: UnicodeString;
    function Get_SpeciesCode: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_SpeciesType(Value: UnicodeString);
    procedure Set_SpeciesOrigin(Value: UnicodeString);
    procedure Set_SpeciesAgency(Value: UnicodeString);
    procedure Set_SpeciesCode(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLLumberSpeciesClassList }

  TXMLLumberSpeciesClassList = class(TXMLNodeCollection, IXMLLumberSpeciesClassList)
  protected
    { IXMLLumberSpeciesClassList }
    function Add: IXMLLumberSpeciesClass;
    function Insert(const Index: Integer): IXMLLumberSpeciesClass;

    function Get_Item(Index: Integer): IXMLLumberSpeciesClass;
  end;

{ TXMLLog }

  TXMLLog = class(TXMLNode, IXMLLog)
  protected
    { IXMLLog }
    function Get_LogCharacteristics: IXMLLogCharacteristics;
    function Get_LogPackagingCharacteristics: IXMLLogPackagingCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLogCharacteristics }

  TXMLLogCharacteristics = class(TXMLNode, IXMLLogCharacteristics)
  protected
    { IXMLLogCharacteristics }
    function Get_LogLengthType: UnicodeString;
    function Get_Debarked: UnicodeString;
    function Get_LogConversionRule: UnicodeString;
    function Get_Length: IXMLMeasurement;
    function Get_SmallEndDiameter: IXMLMeasurement;
    function Get_LargeEndDiameter: IXMLMeasurement;
    function Get_DiameterBreastHeight: IXMLMeasurement;
    procedure Set_LogLengthType(Value: UnicodeString);
    procedure Set_Debarked(Value: UnicodeString);
    procedure Set_LogConversionRule(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLogPackagingCharacteristics }

  TXMLLogPackagingCharacteristics = class(TXMLNode, IXMLLogPackagingCharacteristics)
  private
    FIdentifier: IXMLIdentifierS60List;
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLLogPackagingCharacteristics }
    function Get_DoubleBunked: UnicodeString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_DoubleBunked(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLIdentifierS60 }

  TXMLIdentifierS60 = class(TXMLNode, IXMLIdentifierS60)
  protected
    { IXMLIdentifierS60 }
    function Get_IdentifierCodeType: UnicodeString;
    function Get_IdentifierType: UnicodeString;
    function Get_IdentifierFormatType: UnicodeString;
    procedure Set_IdentifierCodeType(Value: UnicodeString);
    procedure Set_IdentifierType(Value: UnicodeString);
    procedure Set_IdentifierFormatType(Value: UnicodeString);
  end;

{ TXMLIdentifierS60List }

  TXMLIdentifierS60List = class(TXMLNodeCollection, IXMLIdentifierS60List)
  protected
    { IXMLIdentifierS60List }
    function Add: IXMLIdentifierS60;
    function Insert(const Index: Integer): IXMLIdentifierS60;

    function Get_Item(Index: Integer): IXMLIdentifierS60;
  end;

{ TXMLChip }

  TXMLChip = class(TXMLNode, IXMLChip)
  protected
    { IXMLChip }
    function Get_ChipCharacteristics: IXMLChipCharacteristics;
    function Get_ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLChipCharacteristics }

  TXMLChipCharacteristics = class(TXMLNode, IXMLChipCharacteristics)
  protected
    { IXMLChipCharacteristics }
    function Get_Screened: UnicodeString;
    function Get_Debarked: UnicodeString;
    function Get_Thickness: IXMLMeasurement;
    function Get_Moisture: IXMLMoisture;
    function Get_Dirt: IXMLDirt;
    function Get_Bark: IXMLBark;
    function Get_Sawdust: IXMLSawdust;
    procedure Set_Screened(Value: UnicodeString);
    procedure Set_Debarked(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBark }

  TXMLBark = class(TXMLDetailMeasurement, IXMLBark)
  protected
    { IXMLBark }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLSawdust }

  TXMLSawdust = class(TXMLDetailMeasurement, IXMLSawdust)
  protected
    { IXMLSawdust }
    function Get_TestMethod: UnicodeString;
    function Get_TestAgency: UnicodeString;
    function Get_SampleType: UnicodeString;
    function Get_ResultSource: UnicodeString;
    procedure Set_TestMethod(Value: UnicodeString);
    procedure Set_TestAgency(Value: UnicodeString);
    procedure Set_SampleType(Value: UnicodeString);
    procedure Set_ResultSource(Value: UnicodeString);
  end;

{ TXMLChipPackagingCharacteristics }

  TXMLChipPackagingCharacteristics = class(TXMLNode, IXMLChipPackagingCharacteristics)
  protected
    { IXMLChipPackagingCharacteristics }
    function Get_Identifier: IXMLIdentifierS60;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantity;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodProducts }

  TXMLWoodProducts = class(TXMLNode, IXMLWoodProducts)
  private
    FProofInformationalQuantity: IXMLProofInformationalQuantityList;
    FSuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLWoodProducts }
    function Get_WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards;
    function Get_RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing;
    function Get_CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels;
    function Get_ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels;
    function Get_Millwork: UnicodeString;
    function Get_Gypsum: UnicodeString;
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_Millwork(Value: UnicodeString);
    procedure Set_Gypsum(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodTimbersDimensionalLumberBoards }

  TXMLWoodTimbersDimensionalLumberBoards = class(TXMLNode, IXMLWoodTimbersDimensionalLumberBoards)
  protected
    { IXMLWoodTimbersDimensionalLumberBoards }
    function Get_SoftwoodLumber: IXMLSoftwoodLumber;
    function Get_HardwoodLumber: IXMLHardwoodLumber;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSoftwoodLumber }

  TXMLSoftwoodLumber = class(TXMLNode, IXMLSoftwoodLumber)
  protected
    { IXMLSoftwoodLumber }
    function Get_SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSoftwoodLumberCharacteristicsClass }

  TXMLSoftwoodLumberCharacteristicsClass = class(TXMLNode, IXMLSoftwoodLumberCharacteristicsClass)
  private
    FLumberSpecies: IXMLLumberSpeciesClassList;
    FLength: IXMLDimensionConstructionClassList;
    FWidth: IXMLDimensionConstructionClassList;
    FThickness: IXMLDimensionThicknessClassList;
    FManufacturingProcess: IXMLLumberManufacturingProcessClassList;
    FClassIdentifier: IXMLIdentifierS60List;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSoftwoodLumberCharacteristicsClass }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_LumberGrade: IXMLLumberGradeClass;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Thickness: IXMLDimensionThicknessClassList;
    function Get_Seasoning: IXMLLumberSeasoningClass;
    function Get_MoistureContent: IXMLLumberMoistureContentClass;
    function Get_HeatTreatment: IXMLHeatTreatmentClass;
    function Get_ManufacturingProcess: IXMLLumberManufacturingProcessClassList;
    function Get_PatternProfile: IXMLLumberPatternProfileClass;
    function Get_Trim: IXMLLumberTrimClass;
    function Get_Joining: IXMLLumberJoiningClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_OtherTreatment: IXMLOtherTreatmentClass;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ExLog: IXMLExLogClass;
    function Get_ClassIdentifier: IXMLIdentifierS60List;
    function Get_Weight: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristics;
    function Get_Wrap: IXMLWrap;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_AdditionalText: IXMLS255List;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    function Get_ShippingMark: UnicodeString;
    procedure Set_ShippingMark(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberGradeClass }

  TXMLLumberGradeClass = class(TXMLNode, IXMLLumberGradeClass)
  protected
    { IXMLLumberGradeClass }
    function Get_GradeType: UnicodeString;
    function Get_GradingRule: UnicodeString;
    function Get_GradeAgency: UnicodeString;
    function Get_ModulusElasticity: UnicodeString;
    function Get_Face: UnicodeString;
    function Get_GradeName: UnicodeString;
    function Get_GradeCode: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_GradeType(Value: UnicodeString);
    procedure Set_GradingRule(Value: UnicodeString);
    procedure Set_GradeAgency(Value: UnicodeString);
    procedure Set_ModulusElasticity(Value: UnicodeString);
    procedure Set_Face(Value: UnicodeString);
    procedure Set_GradeName(Value: UnicodeString);
    procedure Set_GradeCode(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLDimensionConstructionClass }

  TXMLDimensionConstructionClass = class(TXMLNode, IXMLDimensionConstructionClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDimensionConstructionClass }
    function Get_ActualNominal: UnicodeString;
    function Get_WithGrain: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActualNominal(Value: UnicodeString);
    procedure Set_WithGrain(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDimensionConstructionClassList }

  TXMLDimensionConstructionClassList = class(TXMLNodeCollection, IXMLDimensionConstructionClassList)
  protected
    { IXMLDimensionConstructionClassList }
    function Add: IXMLDimensionConstructionClass;
    function Insert(const Index: Integer): IXMLDimensionConstructionClass;

    function Get_Item(Index: Integer): IXMLDimensionConstructionClass;
  end;

{ TXMLDimensionThicknessClass }

  TXMLDimensionThicknessClass = class(TXMLNode, IXMLDimensionThicknessClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDimensionThicknessClass }
    function Get_ActualNominal: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActualNominal(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDimensionThicknessClassList }

  TXMLDimensionThicknessClassList = class(TXMLNodeCollection, IXMLDimensionThicknessClassList)
  protected
    { IXMLDimensionThicknessClassList }
    function Add: IXMLDimensionThicknessClass;
    function Insert(const Index: Integer): IXMLDimensionThicknessClass;

    function Get_Item(Index: Integer): IXMLDimensionThicknessClass;
  end;

{ TXMLLumberSeasoningClass }

  TXMLLumberSeasoningClass = class(TXMLNode, IXMLLumberSeasoningClass)
  protected
    { IXMLLumberSeasoningClass }
    function Get_SeasoningType: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_SeasoningType(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLLumberMoistureContentClass }

  TXMLLumberMoistureContentClass = class(TXMLNode, IXMLLumberMoistureContentClass)
  protected
    { IXMLLumberMoistureContentClass }
    function Get_MoistureContentPercentage: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_MoistureContentPercentage(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLHeatTreatmentClass }

  TXMLHeatTreatmentClass = class(TXMLNodeCollection, IXMLHeatTreatmentClass)
  protected
    { IXMLHeatTreatmentClass }
    function Get_HeatTreatmentType: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_HeatTreatmentType(Value: UnicodeString);
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberManufacturingProcessClass }

  TXMLLumberManufacturingProcessClass = class(TXMLNode, IXMLLumberManufacturingProcessClass)
  protected
    { IXMLLumberManufacturingProcessClass }
    function Get_ManufacturingProcessType: UnicodeString;
    function Get_ManufacturingProcessAgency: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_AdditionalText: UnicodeString;
    procedure Set_ManufacturingProcessType(Value: UnicodeString);
    procedure Set_ManufacturingProcessAgency(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberManufacturingProcessClassList }

  TXMLLumberManufacturingProcessClassList = class(TXMLNodeCollection, IXMLLumberManufacturingProcessClassList)
  protected
    { IXMLLumberManufacturingProcessClassList }
    function Add: IXMLLumberManufacturingProcessClass;
    function Insert(const Index: Integer): IXMLLumberManufacturingProcessClass;

    function Get_Item(Index: Integer): IXMLLumberManufacturingProcessClass;
  end;

{ TXMLLumberPatternProfileClass }

  TXMLLumberPatternProfileClass = class(TXMLNode, IXMLLumberPatternProfileClass)
  protected
    { IXMLLumberPatternProfileClass }
    function Get_PatternProfileType: UnicodeString;
    function Get_PatternProfileAgency: UnicodeString;
    function Get_PatternProfileCode: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_PatternProfileType(Value: UnicodeString);
    procedure Set_PatternProfileAgency(Value: UnicodeString);
    procedure Set_PatternProfileCode(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLLumberTrimClass }

  TXMLLumberTrimClass = class(TXMLNode, IXMLLumberTrimClass)
  protected
    { IXMLLumberTrimClass }
    function Get_TrimType: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_TrimType(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLLumberJoiningClass }

  TXMLLumberJoiningClass = class(TXMLNode, IXMLLumberJoiningClass)
  protected
    { IXMLLumberJoiningClass }
    function Get_JoiningType: UnicodeString;
    function Get_AdditionalText: UnicodeString;
    procedure Set_JoiningType(Value: UnicodeString);
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLPressureTreatmentClass }

  TXMLPressureTreatmentClass = class(TXMLNode, IXMLPressureTreatmentClass)
  protected
    { IXMLPressureTreatmentClass }
    function Get_PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass;
    function Get_PressureTreatmentConcentration: IXMLPressureTreatmentConcentration;
    function Get_PressureTreatmentComStdorUseCategory: UnicodeString;
    procedure Set_PressureTreatmentComStdorUseCategory(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPressureTreatmentCompoundClass }

  TXMLPressureTreatmentCompoundClass = class(TXMLNode, IXMLPressureTreatmentCompoundClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPressureTreatmentCompoundClass }
    function Get_CompoundType: UnicodeString;
    function Get_CompoundAgency: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CompoundType(Value: UnicodeString);
    procedure Set_CompoundAgency(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPressureTreatmentConcentration }

  TXMLPressureTreatmentConcentration = class(TXMLNode, IXMLPressureTreatmentConcentration)
  protected
    { IXMLPressureTreatmentConcentration }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLFireTreatmentClass }

  TXMLFireTreatmentClass = class(TXMLNodeCollection, IXMLFireTreatmentClass)
  protected
    { IXMLFireTreatmentClass }
    function Get_FireTreatmentType: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_FireTreatmentType(Value: UnicodeString);
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherTreatmentClass }

  TXMLOtherTreatmentClass = class(TXMLNodeCollection, IXMLOtherTreatmentClass)
  protected
    { IXMLOtherTreatmentClass }
    function Get_AdditionalText(Index: Integer): UnicodeString;
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLConstructionGradeStampClass }

  TXMLConstructionGradeStampClass = class(TXMLNode, IXMLConstructionGradeStampClass)
  private
    FGradeStampMillNumber: IXMLS255List;
  protected
    { IXMLConstructionGradeStampClass }
    function Get_GradeStamped: UnicodeString;
    function Get_GradeStampMillNumber: IXMLS255List;
    function Get_GradeStampLocation: UnicodeString;
    procedure Set_GradeStamped(Value: UnicodeString);
    procedure Set_GradeStampLocation(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLExLogClass }

  TXMLExLogClass = class(TXMLNode, IXMLExLogClass)
  protected
    { IXMLExLogClass }
    function Get_Value: IXMLValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLengthCutDescription }

  TXMLLengthCutDescription = class(TXMLNode, IXMLLengthCutDescription)
  protected
    { IXMLLengthCutDescription }
    function Get_LengthCutType: UnicodeString;
    procedure Set_LengthCutType(Value: UnicodeString);
  end;

{ TXMLPackaging }

  TXMLPackaging = class(TXMLNode, IXMLPackaging)
  protected
    { IXMLPackaging }
    function Get_ProductPackaging: IXMLProductPackagingClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductPackagingClass }

  TXMLProductPackagingClass = class(TXMLNode, IXMLProductPackagingClass)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FBandCharacteristics: IXMLBandCharacteristicsList;
    FPalletCharacteristics: IXMLPalletCharacteristicsList;
    FWrap: IXMLWrapList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLProductPackagingClass }
    function Get_QuantityInUnit: IXMLMeasurement;
    function Get_UnitDimension: IXMLUnitDimensionType;
    function Get_Weight: IXMLMeasurement;
    function Get_PackageIDInformation: IXMLLumberPackageCodeClass;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_Wrap: IXMLWrapList;
    function Get_AdditionalText: IXMLS255List;
    function Get_PackageType: UnicodeString;
    procedure Set_PackageType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitDimensionType }

  TXMLUnitDimensionType = class(TXMLNode, IXMLUnitDimensionType)
  protected
    { IXMLUnitDimensionType }
    function Get_Length: IXMLDimensionMeasurementClass;
    function Get_Width: IXMLDimensionMeasurementClass;
    function Get_Height: IXMLDimensionMeasurementClass;
    function Get_PiecesPerRow: LongWord;
    function Get_RowsPerUnit: LongWord;
    procedure Set_PiecesPerRow(Value: LongWord);
    procedure Set_RowsPerUnit(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDimensionMeasurementClass }

  TXMLDimensionMeasurementClass = class(TXMLNode, IXMLDimensionMeasurementClass)
  protected
    { IXMLDimensionMeasurementClass }
    function Get_ActualNominal: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    procedure Set_ActualNominal(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberPackageCodeClass }

  TXMLLumberPackageCodeClass = class(TXMLNode, IXMLLumberPackageCodeClass)
  protected
    { IXMLLumberPackageCodeClass }
    function Get_PackageAgency: UnicodeString;
    function Get_PackageCode: UnicodeString;
    function Get_PackageName: UnicodeString;
    procedure Set_PackageAgency(Value: UnicodeString);
    procedure Set_PackageCode(Value: UnicodeString);
    procedure Set_PackageName(Value: UnicodeString);
  end;

{ TXMLHardwoodLumber }

  TXMLHardwoodLumber = class(TXMLNode, IXMLHardwoodLumber)
  protected
    { IXMLHardwoodLumber }
    function Get_HardwoodLumberCharacteristics: UnicodeString;
    function Get_Packaging: IXMLPackaging;
    procedure Set_HardwoodLumberCharacteristics(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRoofingSidingDeckingFencing }

  TXMLRoofingSidingDeckingFencing = class(TXMLNode, IXMLRoofingSidingDeckingFencing)
  protected
    { IXMLRoofingSidingDeckingFencing }
    function Get_NaturalWoodSiding: IXMLNaturalWoodSiding;
    function Get_NaturalWoodSidingOther: IXMLNaturalWoodSidingOther;
    function Get_DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNaturalWoodSiding }

  TXMLNaturalWoodSiding = class(TXMLNode, IXMLNaturalWoodSiding)
  protected
    { IXMLNaturalWoodSiding }
    function Get_NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNaturalWoodSidingOther }

  TXMLNaturalWoodSidingOther = class(TXMLNode, IXMLNaturalWoodSidingOther)
  protected
    { IXMLNaturalWoodSidingOther }
    function Get_NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeckAndPorchFlooringMaterialsNaturalWood }

  TXMLDeckAndPorchFlooringMaterialsNaturalWood = class(TXMLNode, IXMLDeckAndPorchFlooringMaterialsNaturalWood)
  protected
    { IXMLDeckAndPorchFlooringMaterialsNaturalWood }
    function Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCompositeAndVeneerWoodPanels }

  TXMLCompositeAndVeneerWoodPanels = class(TXMLNode, IXMLCompositeAndVeneerWoodPanels)
  protected
    { IXMLCompositeAndVeneerWoodPanels }
    function Get_SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass;
    function Get_WoodPanelProducts: IXMLWoodPanelProductsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNAPlywoodOSBCharacteristicsClass }

  TXMLNAPlywoodOSBCharacteristicsClass = class(TXMLNode, IXMLNAPlywoodOSBCharacteristicsClass)
  private
    FWidth: IXMLDimensionConstructionClassList;
    FLength: IXMLDimensionConstructionClassList;
    FPlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
    FOverlay: IXMLPlywoodOSBOverlayClassList;
    FSupplemental: IXMLPlywoodOSBSupplementalClassList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLNAPlywoodOSBCharacteristicsClass }
    function Get_PlywoodOSBGrade: IXMLPlywoodOSBGradeClass;
    function Get_Thickness: IXMLDimensionThicknessClass;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
    function Get_PlyNumber: LongWord;
    function Get_Surface: IXMLPlywoodOSBSurfaceClass;
    function Get_Overlay: IXMLPlywoodOSBOverlayClassList;
    function Get_GlueExposure: UnicodeString;
    function Get_Edge: IXMLPlywoodOSBEdgeClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
    function Get_Brand: UnicodeString;
    function Get_GradeAgency: UnicodeString;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ClassIdentifier: IXMLIdentifierS60;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_PlyNumber(Value: LongWord);
    procedure Set_GlueExposure(Value: UnicodeString);
    procedure Set_Brand(Value: UnicodeString);
    procedure Set_GradeAgency(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBGradeClass }

  TXMLPlywoodOSBGradeClass = class(TXMLNode, IXMLPlywoodOSBGradeClass)
  protected
    { IXMLPlywoodOSBGradeClass }
    function Get_Face: UnicodeString;
    function Get_SpanRating: UnicodeString;
    function Get_StrengthGroup: UnicodeString;
    procedure Set_Face(Value: UnicodeString);
    procedure Set_SpanRating(Value: UnicodeString);
    procedure Set_StrengthGroup(Value: UnicodeString);
  end;

{ TXMLPlywoodOSBSurfaceClass }

  TXMLPlywoodOSBSurfaceClass = class(TXMLNodeCollection, IXMLPlywoodOSBSurfaceClass)
  protected
    { IXMLPlywoodOSBSurfaceClass }
    function Get_SurfaceType: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_SurfaceType(Value: UnicodeString);
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBOverlayClass }

  TXMLPlywoodOSBOverlayClass = class(TXMLNodeCollection, IXMLPlywoodOSBOverlayClass)
  protected
    { IXMLPlywoodOSBOverlayClass }
    function Get_OverlaySide: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_OverlaySide(Value: UnicodeString);
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBOverlayClassList }

  TXMLPlywoodOSBOverlayClassList = class(TXMLNodeCollection, IXMLPlywoodOSBOverlayClassList)
  protected
    { IXMLPlywoodOSBOverlayClassList }
    function Add: IXMLPlywoodOSBOverlayClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBOverlayClass;

    function Get_Item(Index: Integer): IXMLPlywoodOSBOverlayClass;
  end;

{ TXMLPlywoodOSBEdgeClass }

  TXMLPlywoodOSBEdgeClass = class(TXMLNode, IXMLPlywoodOSBEdgeClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPlywoodOSBEdgeClass }
    function Get_EdgeType: UnicodeString;
    function Get_EdgeLocation: UnicodeString;
    function Get_EdgeMachiningProfile: UnicodeString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_EdgeType(Value: UnicodeString);
    procedure Set_EdgeLocation(Value: UnicodeString);
    procedure Set_EdgeMachiningProfile(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBSupplementalClass }

  TXMLPlywoodOSBSupplementalClass = class(TXMLNodeCollection, IXMLPlywoodOSBSupplementalClass)
  protected
    { IXMLPlywoodOSBSupplementalClass }
    function Get_SupplementalSpecification: UnicodeString;
    function Get_AdditionalText(Index: Integer): UnicodeString;
    procedure Set_SupplementalSpecification(Value: UnicodeString);
    function Add(const AdditionalText: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBSupplementalClassList }

  TXMLPlywoodOSBSupplementalClassList = class(TXMLNodeCollection, IXMLPlywoodOSBSupplementalClassList)
  protected
    { IXMLPlywoodOSBSupplementalClassList }
    function Add: IXMLPlywoodOSBSupplementalClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBSupplementalClass;

    function Get_Item(Index: Integer): IXMLPlywoodOSBSupplementalClass;
  end;

{ TXMLWoodPanelProductsClass }

  TXMLWoodPanelProductsClass = class(TXMLNode, IXMLWoodPanelProductsClass)
  private
    FWoodPanelSpecies: IXMLLumberSpeciesClassList;
    FThickness: IXMLDimensionThicknessClassList;
    FWidth: IXMLDimensionConstructionClassList;
    FLength: IXMLDimensionConstructionClassList;
    FEdge: IXMLEdgeClassList;
    FSide: IXMLPlywoodSideClassList;
    FSupplemental: IXMLPlywoodOSBSupplementalClassList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
  protected
    { IXMLWoodPanelProductsClass }
    function Get_WoodBasedPanelGrade: IXMLPlywoodOSBGradeClass;
    function Get_WoodPanelSpecies: IXMLLumberSpeciesClassList;
    function Get_Thickness: IXMLDimensionThicknessClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_PlywoodLayupStructure: IXMLPlywoodLayupStructureClass;
    function Get_Edge: IXMLEdgeClassList;
    function Get_Side: IXMLPlywoodSideClassList;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
    function Get_Brand: UnicodeString;
    function Get_GradeAgency: UnicodeString;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ClassIdentifier: IXMLIdentifierS60;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    procedure Set_Brand(Value: UnicodeString);
    procedure Set_GradeAgency(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodLayupStructureClass }

  TXMLPlywoodLayupStructureClass = class(TXMLNode, IXMLPlywoodLayupStructureClass)
  private
    FGlueExposure: IXMLWoodPanelGlueExposureClassList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPlywoodLayupStructureClass }
    function Get_PlywoodPlySet: IXMLPlywoodPlySetClass;
    function Get_GlueExposure: IXMLWoodPanelGlueExposureClassList;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodPlySetClass }

  TXMLPlywoodPlySetClass = class(TXMLNode, IXMLPlywoodPlySetClass)
  private
    FPlywoodPlyCharacteristics: IXMLPlywoodPlyCharacteristicsClassList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPlywoodPlySetClass }
    function Get_NumberOfPlies: LongWord;
    function Get_PlywoodPlyCharacteristics: IXMLPlywoodPlyCharacteristicsClassList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_NumberOfPlies(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodPlyCharacteristicsClass }

  TXMLPlywoodPlyCharacteristicsClass = class(TXMLNode, IXMLPlywoodPlyCharacteristicsClass)
  protected
    { IXMLPlywoodPlyCharacteristicsClass }
    function Get_PlyNumber: LongWord;
    function Get_WoodPanelChracteristics: IXMLWoodPanelCharacteristicsClass;
    procedure Set_PlyNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodPlyCharacteristicsClassList }

  TXMLPlywoodPlyCharacteristicsClassList = class(TXMLNodeCollection, IXMLPlywoodPlyCharacteristicsClassList)
  protected
    { IXMLPlywoodPlyCharacteristicsClassList }
    function Add: IXMLPlywoodPlyCharacteristicsClass;
    function Insert(const Index: Integer): IXMLPlywoodPlyCharacteristicsClass;

    function Get_Item(Index: Integer): IXMLPlywoodPlyCharacteristicsClass;
  end;

{ TXMLWoodPanelCharacteristicsClass }

  TXMLWoodPanelCharacteristicsClass = class(TXMLNode, IXMLWoodPanelCharacteristicsClass)
  private
    FWoodPanelSpecies: IXMLLumberSpeciesClassList;
    FThickness: IXMLDimensionThicknessClassList;
    FWidth: IXMLDimensionConstructionClassList;
    FLength: IXMLDimensionConstructionClassList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLWoodPanelCharacteristicsClass }
    function Get_OrientationWithFaceWoodPanelGrain: UnicodeString;
    function Get_WoodPanelSpecies: IXMLLumberSpeciesClassList;
    function Get_PlywoodPlyGrade: IXMLPlywoodPlyGrade;
    function Get_WoodPanelManufacturingMethod: UnicodeString;
    function Get_Thickness: IXMLDimensionThicknessClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_OrientationWithFaceWoodPanelGrain(Value: UnicodeString);
    procedure Set_WoodPanelManufacturingMethod(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodPlyGrade }

  TXMLPlywoodPlyGrade = class(TXMLNode, IXMLPlywoodPlyGrade)
  protected
    { IXMLPlywoodPlyGrade }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLWoodPanelGlueExposureClass }

  TXMLWoodPanelGlueExposureClass = class(TXMLNode, IXMLWoodPanelGlueExposureClass)
  private
    FGlueExposureID: IXMLGlueExposureIDTypeList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLWoodPanelGlueExposureClass }
    function Get_Agency: UnicodeString;
    function Get_GlueExposureID: IXMLGlueExposureIDTypeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_Agency(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodPanelGlueExposureClassList }

  TXMLWoodPanelGlueExposureClassList = class(TXMLNodeCollection, IXMLWoodPanelGlueExposureClassList)
  protected
    { IXMLWoodPanelGlueExposureClassList }
    function Add: IXMLWoodPanelGlueExposureClass;
    function Insert(const Index: Integer): IXMLWoodPanelGlueExposureClass;

    function Get_Item(Index: Integer): IXMLWoodPanelGlueExposureClass;
  end;

{ TXMLEdgeClass }

  TXMLEdgeClass = class(TXMLNode, IXMLEdgeClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLEdgeClass }
    function Get_EdgeType: UnicodeString;
    function Get_EdgeLocation: UnicodeString;
    function Get_EdgeMachiningProfile: UnicodeString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_EdgeType(Value: UnicodeString);
    procedure Set_EdgeLocation(Value: UnicodeString);
    procedure Set_EdgeMachiningProfile(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEdgeClassList }

  TXMLEdgeClassList = class(TXMLNodeCollection, IXMLEdgeClassList)
  protected
    { IXMLEdgeClassList }
    function Add: IXMLEdgeClass;
    function Insert(const Index: Integer): IXMLEdgeClass;

    function Get_Item(Index: Integer): IXMLEdgeClass;
  end;

{ TXMLPlywoodSideClass }

  TXMLPlywoodSideClass = class(TXMLNode, IXMLPlywoodSideClass)
  protected
    { IXMLPlywoodSideClass }
    function Get_TopSide: UnicodeString;
    function Get_Surface: IXMLPlywoodOSBSurfaceClass;
    function Get_PlywoodPlyGrade: IXMLPlywoodPlyGrade;
    function Get_Embossing: IXMLEmbossing;
    function Get_PlywoodMachining: IXMLPlywoodMachining;
    procedure Set_TopSide(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodSideClassList }

  TXMLPlywoodSideClassList = class(TXMLNodeCollection, IXMLPlywoodSideClassList)
  protected
    { IXMLPlywoodSideClassList }
    function Add: IXMLPlywoodSideClass;
    function Insert(const Index: Integer): IXMLPlywoodSideClass;

    function Get_Item(Index: Integer): IXMLPlywoodSideClass;
  end;

{ TXMLPlywoodMachining }

  TXMLPlywoodMachining = class(TXMLNode, IXMLPlywoodMachining)
  protected
    { IXMLPlywoodMachining }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLConstructionPackagesAndPreFabPanels }

  TXMLConstructionPackagesAndPreFabPanels = class(TXMLNode, IXMLConstructionPackagesAndPreFabPanels)
  protected
    { IXMLConstructionPackagesAndPreFabPanels }
    function Get_Floor: IXMLFloor;
    function Get_Wall: IXMLWall;
    function Get_Roof: IXMLRoof;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLFloor }

  TXMLFloor = class(TXMLNode, IXMLFloor)
  protected
    { IXMLFloor }
    function Get_FloorPanel: UnicodeString;
    function Get_FloorPackage: UnicodeString;
    function Get_FloorTruss: UnicodeString;
    procedure Set_FloorPanel(Value: UnicodeString);
    procedure Set_FloorPackage(Value: UnicodeString);
    procedure Set_FloorTruss(Value: UnicodeString);
  end;

{ TXMLWall }

  TXMLWall = class(TXMLNode, IXMLWall)
  protected
    { IXMLWall }
    function Get_WallPanel: UnicodeString;
    function Get_WallPackage: UnicodeString;
    procedure Set_WallPanel(Value: UnicodeString);
    procedure Set_WallPackage(Value: UnicodeString);
  end;

{ TXMLRoof }

  TXMLRoof = class(TXMLNode, IXMLRoof)
  protected
    { IXMLRoof }
    function Get_RoofPanel: UnicodeString;
    function Get_RoofPackage: UnicodeString;
    function Get_RoofTruss: UnicodeString;
    procedure Set_RoofPanel(Value: UnicodeString);
    procedure Set_RoofPackage(Value: UnicodeString);
    procedure Set_RoofTruss(Value: UnicodeString);
  end;

{ TXMLOtherProducts }

  TXMLOtherProducts = class(TXMLNode, IXMLOtherProducts)
  private
    FOtherProductsClass: IXMLOtherProductsClassList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLOtherProducts }
    function Get_OtherProductsType: UnicodeString;
    function Get_OtherProductsItemType: UnicodeString;
    function Get_OtherProductsItemCodeInfo: IXMLCodeInfo;
    function Get_OtherProductsClass: IXMLOtherProductsClassList;
    function Get_OtherProductsCharacteristics: IXMLOtherProductsCharacteristics;
    function Get_OtherProductsPackagingCharacteristics: IXMLOtherProductsPackagingCharacteristics;
    function Get_OtherProductsProcessingCharacteristics: IXMLOtherProductsProcessingCharacteristics;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_OtherProductsType(Value: UnicodeString);
    procedure Set_OtherProductsItemType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherProductsClass }

  TXMLOtherProductsClass = class(TXMLNode, IXMLOtherProductsClass)
  protected
    { IXMLOtherProductsClass }
    function Get_OtherProductsClassType: UnicodeString;
    function Get_ClassCodeInfo: IXMLCodeInfo;
    procedure Set_OtherProductsClassType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherProductsClassList }

  TXMLOtherProductsClassList = class(TXMLNodeCollection, IXMLOtherProductsClassList)
  protected
    { IXMLOtherProductsClassList }
    function Add: IXMLOtherProductsClass;
    function Insert(const Index: Integer): IXMLOtherProductsClass;

    function Get_Item(Index: Integer): IXMLOtherProductsClass;
  end;

{ TXMLOtherProductsCharacteristics }

  TXMLOtherProductsCharacteristics = class(TXMLNodeCollection, IXMLOtherProductsCharacteristics)
  protected
    { IXMLOtherProductsCharacteristics }
    function Get_PropertyValue(Index: Integer): IXMLPropertyValue;
    function Add: IXMLPropertyValue;
    function Insert(const Index: Integer): IXMLPropertyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherProductsPackagingCharacteristics }

  TXMLOtherProductsPackagingCharacteristics = class(TXMLNodeCollection, IXMLOtherProductsPackagingCharacteristics)
  protected
    { IXMLOtherProductsPackagingCharacteristics }
    function Get_PackagingCodeInfo(Index: Integer): IXMLCodeInfo;
    function Add: IXMLCodeInfo;
    function Insert(const Index: Integer): IXMLCodeInfo;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherProductsProcessingCharacteristics }

  TXMLOtherProductsProcessingCharacteristics = class(TXMLNodeCollection, IXMLOtherProductsProcessingCharacteristics)
  protected
    { IXMLOtherProductsProcessingCharacteristics }
    function Get_ProcessingCodeInfo(Index: Integer): IXMLCodeInfo;
    function Add: IXMLCodeInfo;
    function Insert(const Index: Integer): IXMLCodeInfo;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceLineBaseAmountInformation }

  TXMLInvoiceLineBaseAmountInformation = class(TXMLNode, IXMLInvoiceLineBaseAmountInformation)
  protected
    { IXMLInvoiceLineBaseAmountInformation }
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_InvoiceLineBaseAmount: IXMLInvoiceLineBaseAmount;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPriceDetails }

  TXMLPriceDetails = class(TXMLNode, IXMLPriceDetails)
  private
    FInformationalPricePerUnit: IXMLInformationalPricePerUnitList;
    FAdditionalText: IXMLS255List;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
    FPriceSpecification: IXMLPriceSpecificationList;
  protected
    { IXMLPriceDetails }
    function Get_PriceQuantityBasis: UnicodeString;
    function Get_PriceTaxBasis: UnicodeString;
    function Get_PricePerUnit: IXMLPricePerUnit;
    function Get_InformationalPricePerUnit: IXMLInformationalPricePerUnitList;
    function Get_AdditionalText: IXMLS255List;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_PriceSpecification: IXMLPriceSpecificationList;
    procedure Set_PriceQuantityBasis(Value: UnicodeString);
    procedure Set_PriceTaxBasis(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPricePerUnit }

  TXMLPricePerUnit = class(TXMLNode, IXMLPricePerUnit)
  protected
    { IXMLPricePerUnit }
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInformationalPricePerUnit }

  TXMLInformationalPricePerUnit = class(TXMLPricePerUnit, IXMLInformationalPricePerUnit)
  protected
    { IXMLInformationalPricePerUnit }
    function Get_InformationalPricePerUnitType: UnicodeString;
    function Get_Country: IXMLCountry;
    procedure Set_InformationalPricePerUnitType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInformationalPricePerUnitList }

  TXMLInformationalPricePerUnitList = class(TXMLNodeCollection, IXMLInformationalPricePerUnitList)
  protected
    { IXMLInformationalPricePerUnitList }
    function Add: IXMLInformationalPricePerUnit;
    function Insert(const Index: Integer): IXMLInformationalPricePerUnit;

    function Get_Item(Index: Integer): IXMLInformationalPricePerUnit;
  end;

{ TXMLExchangeRate }

  TXMLExchangeRate = class(TXMLNode, IXMLExchangeRate)
  protected
    { IXMLExchangeRate }
    function Get_ExchangeRateType: UnicodeString;
    function Get_CurrencyFromType: UnicodeString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_MinCurrencyValue: IXMLMinCurrencyValue;
    function Get_MaxCurrencyValue: IXMLMaxCurrencyValue;
    function Get_Date: IXMLDateBasis;
    procedure Set_ExchangeRateType(Value: UnicodeString);
    procedure Set_CurrencyFromType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMinCurrencyValue }

  TXMLMinCurrencyValue = class(TXMLNode, IXMLMinCurrencyValue)
  protected
    { IXMLMinCurrencyValue }
    function Get_CurrencyType: UnicodeString;
    procedure Set_CurrencyType(Value: UnicodeString);
  end;

{ TXMLMaxCurrencyValue }

  TXMLMaxCurrencyValue = class(TXMLNode, IXMLMaxCurrencyValue)
  protected
    { IXMLMaxCurrencyValue }
    function Get_CurrencyType: UnicodeString;
    procedure Set_CurrencyType(Value: UnicodeString);
  end;

{ TXMLMonetaryAdjustment }

  TXMLMonetaryAdjustment = class(TXMLNode, IXMLMonetaryAdjustment)
  private
    FMonetaryAdjustmentComponent: IXMLCodeInfoList;
    FAdditionalText: IXMLS255List;
    FMonetaryAdjustmentReference: IXMLMonetaryAdjustmentReferenceList;
  protected
    { IXMLMonetaryAdjustment }
    function Get_AdjustmentType: UnicodeString;
    function Get_MonetaryAdjustmentLine: LongWord;
    function Get_MonetaryAdjustmentComponent: IXMLCodeInfoList;
    function Get_MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount;
    function Get_MonetaryAdjustmentStartQuantity: IXMLMonetaryAdjustmentStartQuantity;
    function Get_PriceAdjustment: IXMLPriceAdjustment;
    function Get_FlatAmountAdjustment: IXMLFlatAmountAdjustment;
    function Get_TaxAdjustment: IXMLTaxAdjustment;
    function Get_InformationalAmount: IXMLInformationalAmount;
    function Get_MonetaryAdjustmentReferenceLine: LongWord;
    function Get_AdditionalText: IXMLS255List;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount;
    function Get_AdjustmentTypeReason: UnicodeString;
    function Get_MonetaryAdjustmentReference: IXMLMonetaryAdjustmentReferenceList;
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MonetaryAdjustmentLine(Value: LongWord);
    procedure Set_MonetaryAdjustmentReferenceLine(Value: LongWord);
    procedure Set_AdjustmentTypeReason(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMonetaryAdjustmentList }

  TXMLMonetaryAdjustmentList = class(TXMLNodeCollection, IXMLMonetaryAdjustmentList)
  protected
    { IXMLMonetaryAdjustmentList }
    function Add: IXMLMonetaryAdjustment;
    function Insert(const Index: Integer): IXMLMonetaryAdjustment;

    function Get_Item(Index: Integer): IXMLMonetaryAdjustment;
  end;

{ TXMLMonetaryAdjustmentStartAmount }

  TXMLMonetaryAdjustmentStartAmount = class(TXMLNode, IXMLMonetaryAdjustmentStartAmount)
  protected
    { IXMLMonetaryAdjustmentStartAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMonetaryAdjustmentStartQuantity }

  TXMLMonetaryAdjustmentStartQuantity = class(TXMLMeasurement, IXMLMonetaryAdjustmentStartQuantity)
  protected
    { IXMLMonetaryAdjustmentStartQuantity }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
  end;

{ TXMLPriceAdjustment }

  TXMLPriceAdjustment = class(TXMLNode, IXMLPriceAdjustment)
  protected
    { IXMLPriceAdjustment }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentValue: IXMLPricePerUnit;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLFlatAmountAdjustment }

  TXMLFlatAmountAdjustment = class(TXMLNode, IXMLFlatAmountAdjustment)
  protected
    { IXMLFlatAmountAdjustment }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentFixedAmount: IXMLAdjustmentFixedAmount;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAdjustmentFixedAmount }

  TXMLAdjustmentFixedAmount = class(TXMLNode, IXMLAdjustmentFixedAmount)
  protected
    { IXMLAdjustmentFixedAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxAdjustment }

  TXMLTaxAdjustment = class(TXMLNode, IXMLTaxAdjustment)
  private
    FInformationalAmount: IXMLInformationalAmountList;
  protected
    { IXMLTaxAdjustment }
    function Get_TaxCategoryType: UnicodeString;
    function Get_TaxType: UnicodeString;
    function Get_TaxPercent: Double;
    function Get_TaxAmount: IXMLTaxAmount;
    function Get_TaxLocation: UnicodeString;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    procedure Set_TaxCategoryType(Value: UnicodeString);
    procedure Set_TaxType(Value: UnicodeString);
    procedure Set_TaxPercent(Value: Double);
    procedure Set_TaxLocation(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxAmount }

  TXMLTaxAmount = class(TXMLNode, IXMLTaxAmount)
  protected
    { IXMLTaxAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInformationalAmount }

  TXMLInformationalAmount = class(TXMLNode, IXMLInformationalAmount)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLInformationalAmount }
    function Get_AmountType: UnicodeString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_AmountType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInformationalAmountList }

  TXMLInformationalAmountList = class(TXMLNodeCollection, IXMLInformationalAmountList)
  protected
    { IXMLInformationalAmountList }
    function Add: IXMLInformationalAmount;
    function Insert(const Index: Integer): IXMLInformationalAmount;

    function Get_Item(Index: Integer): IXMLInformationalAmount;
  end;

{ TXMLGeneralLedgerAccount }

  TXMLGeneralLedgerAccount = class(TXMLNode, IXMLGeneralLedgerAccount)
  protected
    { IXMLGeneralLedgerAccount }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLMonetaryAdjustmentAmount }

  TXMLMonetaryAdjustmentAmount = class(TXMLNode, IXMLMonetaryAdjustmentAmount)
  protected
    { IXMLMonetaryAdjustmentAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMonetaryAdjustmentReference }

  TXMLMonetaryAdjustmentReference = class(TXMLNode, IXMLMonetaryAdjustmentReference)
  protected
    { IXMLMonetaryAdjustmentReference }
    function Get_MonetaryAdjustmentReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_MonetaryAdjustmentReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLMonetaryAdjustmentReferenceList }

  TXMLMonetaryAdjustmentReferenceList = class(TXMLNodeCollection, IXMLMonetaryAdjustmentReferenceList)
  protected
    { IXMLMonetaryAdjustmentReferenceList }
    function Add: IXMLMonetaryAdjustmentReference;
    function Insert(const Index: Integer): IXMLMonetaryAdjustmentReference;

    function Get_Item(Index: Integer): IXMLMonetaryAdjustmentReference;
  end;

{ TXMLPriceSpecification }

  TXMLPriceSpecification = class(TXMLNode, IXMLPriceSpecification)
  protected
    { IXMLPriceSpecification }
    function Get_ProductIdentification: IXMLProductIdentification;
    function Get_BookSpecIdentification: IXMLBookSpecIdentification;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPriceSpecificationList }

  TXMLPriceSpecificationList = class(TXMLNodeCollection, IXMLPriceSpecificationList)
  protected
    { IXMLPriceSpecificationList }
    function Add: IXMLPriceSpecification;
    function Insert(const Index: Integer): IXMLPriceSpecification;

    function Get_Item(Index: Integer): IXMLPriceSpecification;
  end;

{ TXMLBookSpecIdentification }

  TXMLBookSpecIdentification = class(TXMLNode, IXMLBookSpecIdentification)
  protected
    { IXMLBookSpecIdentification }
    function Get_SpecificationNumber: UnicodeString;
    function Get_SpecVersion: UnicodeString;
    function Get_SpecIssueDate: IXMLSpecIssueDate;
    procedure Set_SpecificationNumber(Value: UnicodeString);
    procedure Set_SpecVersion(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSpecIssueDate }

  TXMLSpecIssueDate = class(TXMLNode, IXMLSpecIssueDate)
  protected
    { IXMLSpecIssueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceLineBaseAmount }

  TXMLInvoiceLineBaseAmount = class(TXMLNode, IXMLInvoiceLineBaseAmount)
  protected
    { IXMLInvoiceLineBaseAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLChargeInformation }

  TXMLChargeInformation = class(TXMLNode, IXMLChargeInformation)
  private
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FCostComponent: IXMLCostComponentList;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
    FTransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    FChargeReference: IXMLChargeReferenceList;
    FInformationalAmount: IXMLInformationalAmountList;
  protected
    { IXMLChargeInformation }
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_CostComponent: IXMLCostComponentList;
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_QuantityInformation: IXMLQuantityInformation;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_ChargeReference: IXMLChargeReferenceList;
    function Get_ChargeAmount: IXMLChargeAmount;
    function Get_ChargeNetAmount: IXMLChargeNetAmount;
    function Get_InformationalAmount: IXMLInformationalAmountList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLChargeInformationList }

  TXMLChargeInformationList = class(TXMLNodeCollection, IXMLChargeInformationList)
  protected
    { IXMLChargeInformationList }
    function Add: IXMLChargeInformation;
    function Insert(const Index: Integer): IXMLChargeInformation;

    function Get_Item(Index: Integer): IXMLChargeInformation;
  end;

{ TXMLCostComponent }

  TXMLCostComponent = class(TXMLNode, IXMLCostComponent)
  private
    FCostComponentDescription: IXMLCostComponentDescriptionList;
  protected
    { IXMLCostComponent }
    function Get_CostComponentCode: IXMLCostComponentCode;
    function Get_CostComponentCodeValue: IXMLCostComponentCodeValue;
    function Get_CostComponentDescription: IXMLCostComponentDescriptionList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCostComponentList }

  TXMLCostComponentList = class(TXMLNodeCollection, IXMLCostComponentList)
  protected
    { IXMLCostComponentList }
    function Add: IXMLCostComponent;
    function Insert(const Index: Integer): IXMLCostComponent;

    function Get_Item(Index: Integer): IXMLCostComponent;
  end;

{ TXMLCostComponentCode }

  TXMLCostComponentCode = class(TXMLNode, IXMLCostComponentCode)
  protected
    { IXMLCostComponentCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLCostComponentCodeValue }

  TXMLCostComponentCodeValue = class(TXMLNode, IXMLCostComponentCodeValue)
  protected
    { IXMLCostComponentCodeValue }
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCostComponentDescription }

  TXMLCostComponentDescription = class(TXMLNode, IXMLCostComponentDescription)
  protected
    { IXMLCostComponentDescription }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
  end;

{ TXMLCostComponentDescriptionList }

  TXMLCostComponentDescriptionList = class(TXMLNodeCollection, IXMLCostComponentDescriptionList)
  protected
    { IXMLCostComponentDescriptionList }
    function Add: IXMLCostComponentDescription;
    function Insert(const Index: Integer): IXMLCostComponentDescription;

    function Get_Item(Index: Integer): IXMLCostComponentDescription;
  end;

{ TXMLTransportUnitCharacteristics }

  TXMLTransportUnitCharacteristics = class(TXMLNode, IXMLTransportUnitCharacteristics)
  private
    FCodeDescription: IXMLS255List;
    FTransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
    FTransportUnitEquipment: IXMLTransportUnitEquipmentList;
    FTransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    FTransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
  protected
    { IXMLTransportUnitCharacteristics }
    function Get_TransportUnitType: UnicodeString;
    function Get_TransportUnitVariable: UnicodeString;
    function Get_TransportUnitLevel: LongWord;
    function Get_TransportUnitHorizontalOrder: LongWord;
    function Get_ChangesAllowed: UnicodeString;
    function Get_TransportUnitCode: IXMLTransportUnitCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    function Get_TransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
    function Get_TransportUnitEquipment: IXMLTransportUnitEquipmentList;
    function Get_TransportUnitCount: LongWord;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_TransportUnitText: UnicodeString;
    function Get_TransportUnitDetail: IXMLTransportUnitDetail;
    function Get_TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
    procedure Set_TransportUnitType(Value: UnicodeString);
    procedure Set_TransportUnitVariable(Value: UnicodeString);
    procedure Set_TransportUnitLevel(Value: LongWord);
    procedure Set_TransportUnitHorizontalOrder(Value: LongWord);
    procedure Set_ChangesAllowed(Value: UnicodeString);
    procedure Set_TransportUnitCount(Value: LongWord);
    procedure Set_TransportUnitText(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitCharacteristicsList }

  TXMLTransportUnitCharacteristicsList = class(TXMLNodeCollection, IXMLTransportUnitCharacteristicsList)
  protected
    { IXMLTransportUnitCharacteristicsList }
    function Add: IXMLTransportUnitCharacteristics;
    function Insert(const Index: Integer): IXMLTransportUnitCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportUnitCharacteristics;
  end;

{ TXMLTransportUnitCode }

  TXMLTransportUnitCode = class(TXMLNode, IXMLTransportUnitCode)
  protected
    { IXMLTransportUnitCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportUnitMeasurements }

  TXMLTransportUnitMeasurements = class(TXMLNode, IXMLTransportUnitMeasurements)
  private
    FTransportUnitCapacity: IXMLMeasurementList;
  protected
    { IXMLTransportUnitMeasurements }
    function Get_AppliesTo: UnicodeString;
    function Get_IsLoaded: UnicodeString;
    function Get_TransportUnitLength: IXMLMeasurement;
    function Get_TransportUnitWidth: IXMLMeasurement;
    function Get_TransportUnitHeight: IXMLMeasurement;
    function Get_TransportUnitWeight: IXMLMeasurement;
    function Get_TransportUnitCapacity: IXMLMeasurementList;
    procedure Set_AppliesTo(Value: UnicodeString);
    procedure Set_IsLoaded(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitMeasurementsList }

  TXMLTransportUnitMeasurementsList = class(TXMLNodeCollection, IXMLTransportUnitMeasurementsList)
  protected
    { IXMLTransportUnitMeasurementsList }
    function Add: IXMLTransportUnitMeasurements;
    function Insert(const Index: Integer): IXMLTransportUnitMeasurements;

    function Get_Item(Index: Integer): IXMLTransportUnitMeasurements;
  end;

{ TXMLTransportUnitEquipment }

  TXMLTransportUnitEquipment = class(TXMLNode, IXMLTransportUnitEquipment)
  private
    FTransportUnitEquipmentDescription: IXMLTransportUnitEquipmentDescriptionList;
    FEquipmentPropertyValue: IXMLEquipmentPropertyValueList;
  protected
    { IXMLTransportUnitEquipment }
    function Get_TransportUnitEquipmentType: UnicodeString;
    function Get_TransportUnitEquipmentCode: IXMLTransportUnitEquipmentCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_TransportUnitEquipmentDescription: IXMLTransportUnitEquipmentDescriptionList;
    function Get_EquipmentPropertyValue: IXMLEquipmentPropertyValueList;
    procedure Set_TransportUnitEquipmentType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitEquipmentList }

  TXMLTransportUnitEquipmentList = class(TXMLNodeCollection, IXMLTransportUnitEquipmentList)
  protected
    { IXMLTransportUnitEquipmentList }
    function Add: IXMLTransportUnitEquipment;
    function Insert(const Index: Integer): IXMLTransportUnitEquipment;

    function Get_Item(Index: Integer): IXMLTransportUnitEquipment;
  end;

{ TXMLTransportUnitEquipmentCode }

  TXMLTransportUnitEquipmentCode = class(TXMLNode, IXMLTransportUnitEquipmentCode)
  protected
    { IXMLTransportUnitEquipmentCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportUnitEquipmentDescription }

  TXMLTransportUnitEquipmentDescription = class(TXMLNode, IXMLTransportUnitEquipmentDescription)
  protected
    { IXMLTransportUnitEquipmentDescription }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
  end;

{ TXMLTransportUnitEquipmentDescriptionList }

  TXMLTransportUnitEquipmentDescriptionList = class(TXMLNodeCollection, IXMLTransportUnitEquipmentDescriptionList)
  protected
    { IXMLTransportUnitEquipmentDescriptionList }
    function Add: IXMLTransportUnitEquipmentDescription;
    function Insert(const Index: Integer): IXMLTransportUnitEquipmentDescription;

    function Get_Item(Index: Integer): IXMLTransportUnitEquipmentDescription;
  end;

{ TXMLEquipmentPropertyValue }

  TXMLEquipmentPropertyValue = class(TXMLNode, IXMLEquipmentPropertyValue)
  protected
    { IXMLEquipmentPropertyValue }
    function Get_EquipmentPropertyType: UnicodeString;
    function Get_AppliesTo: UnicodeString;
    function Get_IsAverageValue: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_EquipmentPropertyType(Value: UnicodeString);
    procedure Set_AppliesTo(Value: UnicodeString);
    procedure Set_IsAverageValue(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEquipmentPropertyValueList }

  TXMLEquipmentPropertyValueList = class(TXMLNodeCollection, IXMLEquipmentPropertyValueList)
  protected
    { IXMLEquipmentPropertyValueList }
    function Add: IXMLEquipmentPropertyValue;
    function Insert(const Index: Integer): IXMLEquipmentPropertyValue;

    function Get_Item(Index: Integer): IXMLEquipmentPropertyValue;
  end;

{ TXMLTransportUnitDetail }

  TXMLTransportUnitDetail = class(TXMLNode, IXMLTransportUnitDetail)
  private
    FCodeDescription: IXMLS255List;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTransportUnitDetail }
    function Get_TransportUnitDetailType: UnicodeString;
    function Get_LoadOpeningSide: UnicodeString;
    function Get_FrontCouplingType: UnicodeString;
    function Get_RearCouplingType: UnicodeString;
    function Get_TransportUnitDetailCode: IXMLTransportUnitDetailCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_TransportUnitDetailType(Value: UnicodeString);
    procedure Set_LoadOpeningSide(Value: UnicodeString);
    procedure Set_FrontCouplingType(Value: UnicodeString);
    procedure Set_RearCouplingType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitDetailCode }

  TXMLTransportUnitDetailCode = class(TXMLNode, IXMLTransportUnitDetailCode)
  protected
    { IXMLTransportUnitDetailCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportUnitReferenceIDInfo }

  TXMLTransportUnitReferenceIDInfo = class(TXMLNodeCollection, IXMLTransportUnitReferenceIDInfo)
  protected
    { IXMLTransportUnitReferenceIDInfo }
    function Get_TransportUnitType: UnicodeString;
    function Get_TransportUnitLevel: LongWord;
    function Get_TransportUnitIdentifier(Index: Integer): IXMLTransportUnitIdentifier;
    procedure Set_TransportUnitType(Value: UnicodeString);
    procedure Set_TransportUnitLevel(Value: LongWord);
    function Add: IXMLTransportUnitIdentifier;
    function Insert(const Index: Integer): IXMLTransportUnitIdentifier;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitReferenceIDInfoList }

  TXMLTransportUnitReferenceIDInfoList = class(TXMLNodeCollection, IXMLTransportUnitReferenceIDInfoList)
  protected
    { IXMLTransportUnitReferenceIDInfoList }
    function Add: IXMLTransportUnitReferenceIDInfo;
    function Insert(const Index: Integer): IXMLTransportUnitReferenceIDInfo;

    function Get_Item(Index: Integer): IXMLTransportUnitReferenceIDInfo;
  end;

{ TXMLTransportVehicleCharacteristics }

  TXMLTransportVehicleCharacteristics = class(TXMLNode, IXMLTransportVehicleCharacteristics)
  private
    FCodeDescription: IXMLS255List;
    FTransportVehicleEquipment: IXMLTransportVehicleEquipmentList;
    FTransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    FTransportVehicleEmissionClass: IXMLCodeInfoList;
  protected
    { IXMLTransportVehicleCharacteristics }
    function Get_TransportVehicleType: UnicodeString;
    function Get_ChangesAllowed: UnicodeString;
    function Get_TransportVehicleCode: IXMLTransportVehicleCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_CodeDescription: IXMLS255List;
    function Get_TransportVehicleMeasurements: IXMLTransportVehicleMeasurements;
    function Get_TransportVehicleEquipment: IXMLTransportVehicleEquipmentList;
    function Get_TransportVehicleCount: LongWord;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_BrandAndModel: IXMLBrandAndModel;
    function Get_TransportVehicleText: UnicodeString;
    function Get_TransportVehicleEmissionClass: IXMLCodeInfoList;
    function Get_TransportVehicleDetail: IXMLTransportVehicleDetail;
    procedure Set_TransportVehicleType(Value: UnicodeString);
    procedure Set_ChangesAllowed(Value: UnicodeString);
    procedure Set_TransportVehicleCount(Value: LongWord);
    procedure Set_TransportVehicleText(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportVehicleCode }

  TXMLTransportVehicleCode = class(TXMLNode, IXMLTransportVehicleCode)
  protected
    { IXMLTransportVehicleCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportVehicleMeasurements }

  TXMLTransportVehicleMeasurements = class(TXMLNode, IXMLTransportVehicleMeasurements)
  protected
    { IXMLTransportVehicleMeasurements }
    function Get_TransportVehicleLength: IXMLMeasurement;
    function Get_TransportVehicleWidth: IXMLMeasurement;
    function Get_TransportVehicleHeight: IXMLMeasurement;
    function Get_TransportVehicleWeight: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportVehicleEquipment }

  TXMLTransportVehicleEquipment = class(TXMLNode, IXMLTransportVehicleEquipment)
  private
    FTransportVehicleEquipmentDescription: IXMLTransportVehicleEquipmentDescriptionList;
  protected
    { IXMLTransportVehicleEquipment }
    function Get_TransportVehicleEquipmentCode: IXMLTransportVehicleEquipmentCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_TransportVehicleEquipmentDescription: IXMLTransportVehicleEquipmentDescriptionList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportVehicleEquipmentList }

  TXMLTransportVehicleEquipmentList = class(TXMLNodeCollection, IXMLTransportVehicleEquipmentList)
  protected
    { IXMLTransportVehicleEquipmentList }
    function Add: IXMLTransportVehicleEquipment;
    function Insert(const Index: Integer): IXMLTransportVehicleEquipment;

    function Get_Item(Index: Integer): IXMLTransportVehicleEquipment;
  end;

{ TXMLTransportVehicleEquipmentCode }

  TXMLTransportVehicleEquipmentCode = class(TXMLNode, IXMLTransportVehicleEquipmentCode)
  protected
    { IXMLTransportVehicleEquipmentCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportVehicleEquipmentDescription }

  TXMLTransportVehicleEquipmentDescription = class(TXMLNode, IXMLTransportVehicleEquipmentDescription)
  protected
    { IXMLTransportVehicleEquipmentDescription }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
  end;

{ TXMLTransportVehicleEquipmentDescriptionList }

  TXMLTransportVehicleEquipmentDescriptionList = class(TXMLNodeCollection, IXMLTransportVehicleEquipmentDescriptionList)
  protected
    { IXMLTransportVehicleEquipmentDescriptionList }
    function Add: IXMLTransportVehicleEquipmentDescription;
    function Insert(const Index: Integer): IXMLTransportVehicleEquipmentDescription;

    function Get_Item(Index: Integer): IXMLTransportVehicleEquipmentDescription;
  end;

{ TXMLBrandAndModel }

  TXMLBrandAndModel = class(TXMLNode, IXMLBrandAndModel)
  protected
    { IXMLBrandAndModel }
    function Get_Brand: UnicodeString;
    function Get_Model: IXMLModel;
    procedure Set_Brand(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLModel }

  TXMLModel = class(TXMLNode, IXMLModel)
  protected
    { IXMLModel }
    function Get_ModelYear: UnicodeString;
    procedure Set_ModelYear(Value: UnicodeString);
  end;

{ TXMLTransportVehicleDetail }

  TXMLTransportVehicleDetail = class(TXMLNode, IXMLTransportVehicleDetail)
  protected
    { IXMLTransportVehicleDetail }
    function Get_RearCouplingType: UnicodeString;
    procedure Set_RearCouplingType(Value: UnicodeString);
  end;

{ TXMLChargeReference }

  TXMLChargeReference = class(TXMLNode, IXMLChargeReference)
  protected
    { IXMLChargeReference }
    function Get_ChargeReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ChargeReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLChargeReferenceList }

  TXMLChargeReferenceList = class(TXMLNodeCollection, IXMLChargeReferenceList)
  protected
    { IXMLChargeReferenceList }
    function Add: IXMLChargeReference;
    function Insert(const Index: Integer): IXMLChargeReference;

    function Get_Item(Index: Integer): IXMLChargeReference;
  end;

{ TXMLChargeAmount }

  TXMLChargeAmount = class(TXMLNode, IXMLChargeAmount)
  protected
    { IXMLChargeAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLChargeNetAmount }

  TXMLChargeNetAmount = class(TXMLNode, IXMLChargeNetAmount)
  protected
    { IXMLChargeNetAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceLineAmount }

  TXMLInvoiceLineAmount = class(TXMLNode, IXMLInvoiceLineAmount)
  protected
    { IXMLInvoiceLineAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceDeliveryInformation }

  TXMLInvoiceDeliveryInformation = class(TXMLNode, IXMLInvoiceDeliveryInformation)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
    FChargeInformation: IXMLChargeInformationList;
    FTransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    FTransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FDeliveryMessageReference: IXMLDeliveryMessageReferenceList;
  protected
    { IXMLInvoiceDeliveryInformation }
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryDate: IXMLDeliveryDate;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ChargeInformation: IXMLChargeInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceDeliveryInformationList }

  TXMLInvoiceDeliveryInformationList = class(TXMLNodeCollection, IXMLInvoiceDeliveryInformationList)
  protected
    { IXMLInvoiceDeliveryInformationList }
    function Add: IXMLInvoiceDeliveryInformation;
    function Insert(const Index: Integer): IXMLInvoiceDeliveryInformation;

    function Get_Item(Index: Integer): IXMLInvoiceDeliveryInformation;
  end;

{ TXMLDeliveryMessageDate }

  TXMLDeliveryMessageDate = class(TXMLNode, IXMLDeliveryMessageDate)
  protected
    { IXMLDeliveryMessageDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryDate }

  TXMLDeliveryDate = class(TXMLNode, IXMLDeliveryDate)
  protected
    { IXMLDeliveryDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageReference }

  TXMLDeliveryMessageReference = class(TXMLNode, IXMLDeliveryMessageReference)
  protected
    { IXMLDeliveryMessageReference }
    function Get_DeliveryMessageReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DeliveryMessageReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLDeliveryMessageReferenceList }

  TXMLDeliveryMessageReferenceList = class(TXMLNodeCollection, IXMLDeliveryMessageReferenceList)
  protected
    { IXMLDeliveryMessageReferenceList }
    function Add: IXMLDeliveryMessageReference;
    function Insert(const Index: Integer): IXMLDeliveryMessageReference;

    function Get_Item(Index: Integer): IXMLDeliveryMessageReference;
  end;

{ TXMLMillCharacteristics }

  TXMLMillCharacteristics = class(TXMLNode, IXMLMillCharacteristics)
  protected
    { IXMLMillCharacteristics }
    function Get_MillParty: IXMLParty;
    function Get_MachineID: UnicodeString;
    procedure Set_MachineID(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportModeCharacteristics }

  TXMLTransportModeCharacteristics = class(TXMLNode, IXMLTransportModeCharacteristics)
  protected
    { IXMLTransportModeCharacteristics }
    function Get_TransportModeType: UnicodeString;
    function Get_TransportModeCode: IXMLTransportModeCode;
    function Get_TransportModeText: UnicodeString;
    procedure Set_TransportModeType(Value: UnicodeString);
    procedure Set_TransportModeText(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportModeCharacteristicsList }

  TXMLTransportModeCharacteristicsList = class(TXMLNodeCollection, IXMLTransportModeCharacteristicsList)
  protected
    { IXMLTransportModeCharacteristicsList }
    function Add: IXMLTransportModeCharacteristics;
    function Insert(const Index: Integer): IXMLTransportModeCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportModeCharacteristics;
  end;

{ TXMLTransportModeCode }

  TXMLTransportModeCode = class(TXMLNode, IXMLTransportModeCode)
  protected
    { IXMLTransportModeCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLDeliveryDateWindow }

  TXMLDeliveryDateWindow = class(TXMLNode, IXMLDeliveryDateWindow)
  protected
    { IXMLDeliveryDateWindow }
    function Get_DeliveryDateType: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    function Get_Year: UnicodeString;
    function Get_YearMonth: UnicodeString;
    function Get_Month: LongWord;
    function Get_Week: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_DeliveryDateType(Value: UnicodeString);
    procedure Set_Year(Value: UnicodeString);
    procedure Set_YearMonth(Value: UnicodeString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Week(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryDateWindowList }

  TXMLDeliveryDateWindowList = class(TXMLNodeCollection, IXMLDeliveryDateWindowList)
  protected
    { IXMLDeliveryDateWindowList }
    function Add: IXMLDeliveryDateWindow;
    function Insert(const Index: Integer): IXMLDeliveryDateWindow;

    function Get_Item(Index: Integer): IXMLDeliveryDateWindow;
  end;

{ TXMLTaxStatement }

  TXMLTaxStatement = class(TXMLNode, IXMLTaxStatement)
  protected
    { IXMLTaxStatement }
    function Get_TaxStatementCode: IXMLTaxStatementCode;
    function Get_TaxStatementDescription: UnicodeString;
    procedure Set_TaxStatementDescription(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxStatementCode }

  TXMLTaxStatementCode = class(TXMLNode, IXMLTaxStatementCode)
  protected
    { IXMLTaxStatementCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLStatisticalGoodsInformation }

  TXMLStatisticalGoodsInformation = class(TXMLNode, IXMLStatisticalGoodsInformation)
  protected
    { IXMLStatisticalGoodsInformation }
    function Get_CommodityGoodsCode: IXMLCommodityGoodsCode;
    function Get_PriceDetails: IXMLPriceDetails;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCommodityGoodsCode }

  TXMLCommodityGoodsCode = class(TXMLNode, IXMLCommodityGoodsCode)
  protected
    { IXMLCommodityGoodsCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLProductGroupSummary }

  TXMLProductGroupSummary = class(TXMLNode, IXMLProductGroupSummary)
  private
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLProductGroupSummary }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalQuantity }

  TXMLTotalQuantity = class(TXMLMeasurement, IXMLTotalQuantity)
  protected
    { IXMLTotalQuantity }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
  end;

{ TXMLTotalQuantityList }

  TXMLTotalQuantityList = class(TXMLNodeCollection, IXMLTotalQuantityList)
  protected
    { IXMLTotalQuantityList }
    function Add: IXMLTotalQuantity;
    function Insert(const Index: Integer): IXMLTotalQuantity;

    function Get_Item(Index: Integer): IXMLTotalQuantity;
  end;

{ TXMLTotalInformationalQuantity }

  TXMLTotalInformationalQuantity = class(TXMLMeasurement, IXMLTotalInformationalQuantity)
  protected
    { IXMLTotalInformationalQuantity }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
  end;

{ TXMLTotalInformationalQuantityList }

  TXMLTotalInformationalQuantityList = class(TXMLNodeCollection, IXMLTotalInformationalQuantityList)
  protected
    { IXMLTotalInformationalQuantityList }
    function Add: IXMLTotalInformationalQuantity;
    function Insert(const Index: Integer): IXMLTotalInformationalQuantity;

    function Get_Item(Index: Integer): IXMLTotalInformationalQuantity;
  end;

{ TXMLProductSummary }

  TXMLProductSummary = class(TXMLNode, IXMLProductSummary)
  private
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
  protected
    { IXMLProductSummary }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLengthSpecification }

  TXMLLengthSpecification = class(TXMLNode, IXMLLengthSpecification)
  protected
    { IXMLLengthSpecification }
    function Get_LengthCategory: IXMLLengthCategory;
    function Get_TotalNumberOfUnits: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLengthSpecificationList }

  TXMLLengthSpecificationList = class(TXMLNodeCollection, IXMLLengthSpecificationList)
  protected
    { IXMLLengthSpecificationList }
    function Add: IXMLLengthSpecification;
    function Insert(const Index: Integer): IXMLLengthSpecification;

    function Get_Item(Index: Integer): IXMLLengthSpecification;
  end;

{ TXMLLengthCategory }

  TXMLLengthCategory = class(TXMLNode, IXMLLengthCategory)
  protected
    { IXMLLengthCategory }
    function Get_UOM: UnicodeString;
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLShipmentSummary }

  TXMLShipmentSummary = class(TXMLNode, IXMLShipmentSummary)
  private
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLShipmentSummary }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceWoodSummary }

  TXMLInvoiceWoodSummary = class(TXMLNode, IXMLInvoiceWoodSummary)
  private
    FTotalQuantity: IXMLTotalQuantityList;
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FInformationalAmount: IXMLInformationalAmountList;
    FTermsOfPayment: IXMLTermsOfPaymentList;
    FTotalNetOfTermsDiscount: IXMLTotalNetOfTermsDiscountList;
    FCustomsTotals: IXMLCustomsTotalsList;
    FCustomsStampInformation: IXMLCustomsStampInformationList;
    FAdditionalText: IXMLS255List;
    FTermsAndDisclaimers: IXMLTermsAndDisclaimersList;
  protected
    { IXMLInvoiceWoodSummary }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_LineItemSubTotal: IXMLLineItemSubTotal;
    function Get_TotalAdjustments: IXMLTotalAdjustments;
    function Get_TotalTaxAmount: IXMLTotalTaxAmount;
    function Get_TotalFASAmount: IXMLTotalFASAmount;
    function Get_TotalNetAmount: IXMLTotalNetAmount;
    function Get_TotalAmount: IXMLTotalAmount;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    function Get_TermsOfPayment: IXMLTermsOfPaymentList;
    function Get_TotalNetOfTermsDiscount: IXMLTotalNetOfTermsDiscountList;
    function Get_CustomsTotals: IXMLCustomsTotalsList;
    function Get_CustomsStampInformation: IXMLCustomsStampInformationList;
    function Get_AdditionalText: IXMLS255List;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    function Get_TaxStatement: IXMLTaxStatement;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLineItemSubTotal }

  TXMLLineItemSubTotal = class(TXMLNode, IXMLLineItemSubTotal)
  protected
    { IXMLLineItemSubTotal }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalAdjustments }

  TXMLTotalAdjustments = class(TXMLNode, IXMLTotalAdjustments)
  protected
    { IXMLTotalAdjustments }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTaxAmount }

  TXMLTotalTaxAmount = class(TXMLNode, IXMLTotalTaxAmount)
  protected
    { IXMLTotalTaxAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalFASAmount }

  TXMLTotalFASAmount = class(TXMLNode, IXMLTotalFASAmount)
  protected
    { IXMLTotalFASAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalNetAmount }

  TXMLTotalNetAmount = class(TXMLNode, IXMLTotalNetAmount)
  protected
    { IXMLTotalNetAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalAmount }

  TXMLTotalAmount = class(TXMLNode, IXMLTotalAmount)
  protected
    { IXMLTotalAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTermsOfPayment }

  TXMLTermsOfPayment = class(TXMLNode, IXMLTermsOfPayment)
  protected
    { IXMLTermsOfPayment }
    function Get_TermsBasisDateType: UnicodeString;
    function Get_TermsOfPaymentCode: IXMLTermsOfPaymentCode;
    function Get_TermsDescription: UnicodeString;
    function Get_TermsBasisDate: IXMLTermsBasisDate;
    function Get_TermsDiscountPercent: IXMLMeasurement;
    function Get_TermsDiscountDueDate: IXMLTermsDiscountDueDate;
    function Get_TermsDiscountDaysDue: LongWord;
    function Get_TermsNetDueDate: IXMLTermsNetDueDate;
    function Get_TermsNetDaysDue: LongWord;
    function Get_TermsInterestPenaltyPercent: Double;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_MethodOfPayment: UnicodeString;
    procedure Set_TermsBasisDateType(Value: UnicodeString);
    procedure Set_TermsDescription(Value: UnicodeString);
    procedure Set_TermsDiscountDaysDue(Value: LongWord);
    procedure Set_TermsNetDaysDue(Value: LongWord);
    procedure Set_TermsInterestPenaltyPercent(Value: Double);
    procedure Set_MethodOfPayment(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTermsOfPaymentList }

  TXMLTermsOfPaymentList = class(TXMLNodeCollection, IXMLTermsOfPaymentList)
  protected
    { IXMLTermsOfPaymentList }
    function Add: IXMLTermsOfPayment;
    function Insert(const Index: Integer): IXMLTermsOfPayment;

    function Get_Item(Index: Integer): IXMLTermsOfPayment;
  end;

{ TXMLTermsOfPaymentCode }

  TXMLTermsOfPaymentCode = class(TXMLNode, IXMLTermsOfPaymentCode)
  protected
    { IXMLTermsOfPaymentCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTermsBasisDate }

  TXMLTermsBasisDate = class(TXMLNode, IXMLTermsBasisDate)
  protected
    { IXMLTermsBasisDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTermsDiscountDueDate }

  TXMLTermsDiscountDueDate = class(TXMLNode, IXMLTermsDiscountDueDate)
  protected
    { IXMLTermsDiscountDueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTermsNetDueDate }

  TXMLTermsNetDueDate = class(TXMLNode, IXMLTermsNetDueDate)
  protected
    { IXMLTermsNetDueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalNetOfTermsDiscount }

  TXMLTotalNetOfTermsDiscount = class(TXMLNode, IXMLTotalNetOfTermsDiscount)
  private
    FInformationalAmount: IXMLInformationalAmountList;
  protected
    { IXMLTotalNetOfTermsDiscount }
    function Get_AmountSubjectToTermsDiscount: IXMLAmountSubjectToTermsDiscount;
    function Get_TotalTermsDiscountNetAmount: IXMLTotalTermsDiscountNetAmount;
    function Get_TotalTermsDiscountNetAmountTax: IXMLTotalTermsDiscountNetAmountTax;
    function Get_TotalTermsDiscountAmount: IXMLTotalTermsDiscountAmount;
    function Get_TotalTermsDiscountNetAmountDue: IXMLTotalTermsDiscountNetAmountDue;
    function Get_TotalTermsDiscountTaxAmount: IXMLTotalTermsDiscountTaxAmount;
    function Get_TotalTermsDiscountAmountDue: IXMLTotalTermsDiscountAmountDue;
    function Get_InformationalAmount: IXMLInformationalAmountList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalNetOfTermsDiscountList }

  TXMLTotalNetOfTermsDiscountList = class(TXMLNodeCollection, IXMLTotalNetOfTermsDiscountList)
  protected
    { IXMLTotalNetOfTermsDiscountList }
    function Add: IXMLTotalNetOfTermsDiscount;
    function Insert(const Index: Integer): IXMLTotalNetOfTermsDiscount;

    function Get_Item(Index: Integer): IXMLTotalNetOfTermsDiscount;
  end;

{ TXMLAmountSubjectToTermsDiscount }

  TXMLAmountSubjectToTermsDiscount = class(TXMLNode, IXMLAmountSubjectToTermsDiscount)
  protected
    { IXMLAmountSubjectToTermsDiscount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTermsDiscountNetAmount }

  TXMLTotalTermsDiscountNetAmount = class(TXMLNode, IXMLTotalTermsDiscountNetAmount)
  protected
    { IXMLTotalTermsDiscountNetAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTermsDiscountNetAmountTax }

  TXMLTotalTermsDiscountNetAmountTax = class(TXMLNode, IXMLTotalTermsDiscountNetAmountTax)
  protected
    { IXMLTotalTermsDiscountNetAmountTax }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTermsDiscountAmount }

  TXMLTotalTermsDiscountAmount = class(TXMLNode, IXMLTotalTermsDiscountAmount)
  protected
    { IXMLTotalTermsDiscountAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTermsDiscountNetAmountDue }

  TXMLTotalTermsDiscountNetAmountDue = class(TXMLNode, IXMLTotalTermsDiscountNetAmountDue)
  protected
    { IXMLTotalTermsDiscountNetAmountDue }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTermsDiscountTaxAmount }

  TXMLTotalTermsDiscountTaxAmount = class(TXMLNode, IXMLTotalTermsDiscountTaxAmount)
  protected
    { IXMLTotalTermsDiscountTaxAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalTermsDiscountAmountDue }

  TXMLTotalTermsDiscountAmountDue = class(TXMLNode, IXMLTotalTermsDiscountAmountDue)
  protected
    { IXMLTotalTermsDiscountAmountDue }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsTotals }

  TXMLCustomsTotals = class(TXMLNode, IXMLCustomsTotals)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLCustomsTotals }
    function Get_CustomsTariffCode: UnicodeString;
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_CustomsTariffCode(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsTotalsList }

  TXMLCustomsTotalsList = class(TXMLNodeCollection, IXMLCustomsTotalsList)
  protected
    { IXMLCustomsTotalsList }
    function Add: IXMLCustomsTotals;
    function Insert(const Index: Integer): IXMLCustomsTotals;

    function Get_Item(Index: Integer): IXMLCustomsTotals;
  end;

{ TXMLCustomsStampInformation }

  TXMLCustomsStampInformation = class(TXMLNode, IXMLCustomsStampInformation)
  private
    FCustomsStampHeaderText: IXMLS255List;
    FCustomsStampTrailerText: IXMLS255List;
  protected
    { IXMLCustomsStampInformation }
    function Get_CustomsStampHeaderText: IXMLS255List;
    function Get_CustomsParty: IXMLParty;
    function Get_CustomsStampDate: IXMLCustomsStampDate;
    function Get_CustomsReferenceNumber: IXMLCustomsReferenceNumber;
    function Get_SupplierCustomsReference: IXMLSupplierCustomsReference;
    function Get_MillParty: IXMLParty;
    function Get_CustomsStampTrailerText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsStampInformationList }

  TXMLCustomsStampInformationList = class(TXMLNodeCollection, IXMLCustomsStampInformationList)
  protected
    { IXMLCustomsStampInformationList }
    function Add: IXMLCustomsStampInformation;
    function Insert(const Index: Integer): IXMLCustomsStampInformation;

    function Get_Item(Index: Integer): IXMLCustomsStampInformation;
  end;

{ TXMLCustomsStampDate }

  TXMLCustomsStampDate = class(TXMLNode, IXMLCustomsStampDate)
  protected
    { IXMLCustomsStampDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsReferenceNumber }

  TXMLCustomsReferenceNumber = class(TXMLNode, IXMLCustomsReferenceNumber)
  protected
    { IXMLCustomsReferenceNumber }
    function Get_CustomsReferenceNumberType: UnicodeString;
    procedure Set_CustomsReferenceNumberType(Value: UnicodeString);
  end;

{ TXMLSupplierCustomsReference }

  TXMLSupplierCustomsReference = class(TXMLNode, IXMLSupplierCustomsReference)
  protected
    { IXMLSupplierCustomsReference }
    function Get_SupplierCustomsReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_SupplierCustomsReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLTermsAndDisclaimers }

  TXMLTermsAndDisclaimers = class(TXMLNode, IXMLTermsAndDisclaimers)
  protected
    { IXMLTermsAndDisclaimers }
    function Get_Language: UnicodeString;
    procedure Set_Language(Value: UnicodeString);
  end;

{ TXMLTermsAndDisclaimersList }

  TXMLTermsAndDisclaimersList = class(TXMLNodeCollection, IXMLTermsAndDisclaimersList)
  protected
    { IXMLTermsAndDisclaimersList }
    function Add: IXMLTermsAndDisclaimers;
    function Insert(const Index: Integer): IXMLTermsAndDisclaimers;

    function Get_Item(Index: Integer): IXMLTermsAndDisclaimers;
  end;

{ TXMLBusinessParty }

  TXMLBusinessParty = class(TXMLNode, IXMLBusinessParty)
  private
    FPartyIdentifier: IXMLPartyIdentifierList;
    FCommonContact: IXMLCommonContactList;
  protected
    { IXMLBusinessParty }
    function Get_PartyType: UnicodeString;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_NameAddress: IXMLNameAddress;
    function Get_URL: IXMLURL;
    function Get_CommonContact: IXMLCommonContactList;
    procedure Set_PartyType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCurrencyPerUnit }

  TXMLCurrencyPerUnit = class(TXMLNode, IXMLCurrencyPerUnit)
  protected
    { IXMLCurrencyPerUnit }
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryInformationType }

  TXMLDeliveryInformationType = class(TXMLNode, IXMLDeliveryInformationType)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
    FChargeInformation: IXMLChargeInformationList;
    FTransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    FTransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    FDeliveryMessageReference: IXMLDeliveryMessageReferenceList;
  protected
    { IXMLDeliveryInformationType }
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryDate: IXMLDeliveryDate;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ChargeInformation: IXMLChargeInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageHeader }

  TXMLDeliveryMessageHeader = class(TXMLNode, IXMLDeliveryMessageHeader)
  private
    FDeliveryMessageReason: IXMLDeliveryMessageReasonList;
    FDeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    FOtherParty: IXMLTypedPartyList;
    FReceiverParty: IXMLTypedPartyList;
    FDocumentInformation: IXMLDocumentInformationList;
    FCoLoading: IXMLCoLoadingList;
    FAdditionalText: IXMLS255List;
    FDeliveryLeg: IXMLDeliveryLegList;
    FAdditionalItemInfo: IXMLCodeInfoList;
  protected
    { IXMLDeliveryMessageHeader }
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryMessageReason: IXMLDeliveryMessageReasonList;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DocumentInformation: IXMLDocumentInformationList;
    function Get_CoLoading: IXMLCoLoadingList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DeliveryLeg: IXMLDeliveryLegList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_AdditionalItemInfo: IXMLCodeInfoList;
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageReason }

  TXMLDeliveryMessageReason = class(TXMLNode, IXMLDeliveryMessageReason)
  private
    FDeliveryMessageReasonDescription: IXMLS255List;
  protected
    { IXMLDeliveryMessageReason }
    function Get_DeliveryMessageReasonCode: IXMLDeliveryMessageReasonCode;
    function Get_DeliveryMessageReasonDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageReasonList }

  TXMLDeliveryMessageReasonList = class(TXMLNodeCollection, IXMLDeliveryMessageReasonList)
  protected
    { IXMLDeliveryMessageReasonList }
    function Add: IXMLDeliveryMessageReason;
    function Insert(const Index: Integer): IXMLDeliveryMessageReason;

    function Get_Item(Index: Integer): IXMLDeliveryMessageReason;
  end;

{ TXMLDeliveryMessageReasonCode }

  TXMLDeliveryMessageReasonCode = class(TXMLNode, IXMLDeliveryMessageReasonCode)
  protected
    { IXMLDeliveryMessageReasonCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLCoLoading }

  TXMLCoLoading = class(TXMLNode, IXMLCoLoading)
  private
    FCoLoadingReference: IXMLCoLoadingReferenceList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLCoLoading }
    function Get_CoLoadingType: UnicodeString;
    function Get_CoLoadingNumber: IXMLCoLoadingNumber;
    function Get_DeliveryInstructionNumber: UnicodeString;
    function Get_DeliveryInstructionSequenceNumber: LongWord;
    function Get_CoLoadingReference: IXMLCoLoadingReferenceList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CoLoadingType(Value: UnicodeString);
    procedure Set_DeliveryInstructionNumber(Value: UnicodeString);
    procedure Set_DeliveryInstructionSequenceNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCoLoadingList }

  TXMLCoLoadingList = class(TXMLNodeCollection, IXMLCoLoadingList)
  protected
    { IXMLCoLoadingList }
    function Add: IXMLCoLoading;
    function Insert(const Index: Integer): IXMLCoLoading;

    function Get_Item(Index: Integer): IXMLCoLoading;
  end;

{ TXMLCoLoadingNumber }

  TXMLCoLoadingNumber = class(TXMLNode, IXMLCoLoadingNumber)
  protected
    { IXMLCoLoadingNumber }
    function Get_AssignedBy: UnicodeString;
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLCoLoadingReference }

  TXMLCoLoadingReference = class(TXMLNode, IXMLCoLoadingReference)
  protected
    { IXMLCoLoadingReference }
    function Get_CoLoadingReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_CoLoadingReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLCoLoadingReferenceList }

  TXMLCoLoadingReferenceList = class(TXMLNodeCollection, IXMLCoLoadingReferenceList)
  protected
    { IXMLCoLoadingReferenceList }
    function Add: IXMLCoLoadingReference;
    function Insert(const Index: Integer): IXMLCoLoadingReference;

    function Get_Item(Index: Integer): IXMLCoLoadingReference;
  end;

{ TXMLDeliveryLeg }

  TXMLDeliveryLeg = class(TXMLNode, IXMLDeliveryLeg)
  private
    FDeliveryOrigin: IXMLDeliveryOriginList;
    FOtherParty: IXMLTypedPartyList;
    FTransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    FTransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    FTransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
    FTransportOtherInstructions: IXMLTransportOtherInstructionsList;
    FRoute: IXMLRouteList;
    FDeliveryDestination: IXMLDeliveryDestinationList;
    FDeliveryDateWindow: IXMLDeliveryDateWindowList;
    FDeliveryLegReference: IXMLDeliveryLegReferenceList;
    FTermsOfChartering: IXMLTermsOfCharteringList;
  protected
    { IXMLDeliveryLeg }
    function Get_DeliveryModeType: UnicodeString;
    function Get_DeliveryLegType: UnicodeString;
    function Get_EventType: UnicodeString;
    function Get_LegStageType: UnicodeString;
    function Get_TransportContextType: UnicodeString;
    function Get_IsOpenDeliveryAgreement: UnicodeString;
    function Get_DeliveryLegSequenceNumber: LongWord;
    function Get_DeliveryOrigin: IXMLDeliveryOriginList;
    function Get_CarrierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_TransportModeCharacteristics: IXMLTransportModeCharacteristics;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_ResourceInformation: IXMLResourceInformation;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_Route: IXMLRouteList;
    function Get_DeliveryTransitTime: IXMLDeliveryTransitTime;
    function Get_DeliveryDestination: IXMLDeliveryDestinationList;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_DeliveryLegReference: IXMLDeliveryLegReferenceList;
    function Get_TermsOfChartering: IXMLTermsOfCharteringList;
    function Get_BusinessChainInfo: IXMLBusinessChainInfo;
    procedure Set_DeliveryModeType(Value: UnicodeString);
    procedure Set_DeliveryLegType(Value: UnicodeString);
    procedure Set_EventType(Value: UnicodeString);
    procedure Set_LegStageType(Value: UnicodeString);
    procedure Set_TransportContextType(Value: UnicodeString);
    procedure Set_IsOpenDeliveryAgreement(Value: UnicodeString);
    procedure Set_DeliveryLegSequenceNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryLegList }

  TXMLDeliveryLegList = class(TXMLNodeCollection, IXMLDeliveryLegList)
  protected
    { IXMLDeliveryLegList }
    function Add: IXMLDeliveryLeg;
    function Insert(const Index: Integer): IXMLDeliveryLeg;

    function Get_Item(Index: Integer): IXMLDeliveryLeg;
  end;

{ TXMLDeliveryOrigin }

  TXMLDeliveryOrigin = class(TXMLNode, IXMLDeliveryOrigin)
  private
    FSupplyPoint: IXMLSupplyPointList;
    FMapCoordinates: IXMLMapCoordinatesList;
  protected
    { IXMLDeliveryOrigin }
    function Get_IsOptionalDeliveryOrigin: UnicodeString;
    function Get_PriorityOrder: LongWord;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_LocationCharacteristics: IXMLLocationCharacteristics;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_IsOptionalDeliveryOrigin(Value: UnicodeString);
    procedure Set_PriorityOrder(Value: LongWord);
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryOriginList }

  TXMLDeliveryOriginList = class(TXMLNodeCollection, IXMLDeliveryOriginList)
  protected
    { IXMLDeliveryOriginList }
    function Add: IXMLDeliveryOrigin;
    function Insert(const Index: Integer): IXMLDeliveryOrigin;

    function Get_Item(Index: Integer): IXMLDeliveryOrigin;
  end;

{ TXMLLocationCharacteristics }

  TXMLLocationCharacteristics = class(TXMLNode, IXMLLocationCharacteristics)
  private
    FLocationProperty: IXMLCodeInfoList;
    FMapPoint: IXMLMapPointList;
    FAreaInfo: IXMLAreaInfoList;
    FOtherDate: IXMLOtherDateList;
    FOtherParty: IXMLTypedPartyList;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLLocationCharacteristics }
    function Get_LocationProperty: IXMLCodeInfoList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_AreaInfo: IXMLAreaInfoList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceInformation }

  TXMLResourceInformation = class(TXMLNode, IXMLResourceInformation)
  private
    FResourceCharacteristics: IXMLResourceCharacteristicsList;
  protected
    { IXMLResourceInformation }
    function Get_ResourceInformationNumber: UnicodeString;
    function Get_ResourceInformationIssueDate: IXMLResourceInformationIssueDate;
    function Get_ResourceCharacteristics: IXMLResourceCharacteristicsList;
    procedure Set_ResourceInformationNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceInformationIssueDate }

  TXMLResourceInformationIssueDate = class(TXMLNode, IXMLResourceInformationIssueDate)
  protected
    { IXMLResourceInformationIssueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceCharacteristics }

  TXMLResourceCharacteristics = class(TXMLNode, IXMLResourceCharacteristics)
  private
    FResourceTypeDescription: IXMLS255List;
    FResourceIDInfo: IXMLResourceIDInfoList;
    FResourceReferenceIDInfo: IXMLResourceReferenceIDInfoList;
    FResourceReference: IXMLResourceReferenceList;
    FOtherParty: IXMLTypedPartyList;
    FResourcePropertyValue: IXMLResourcePropertyValueList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLResourceCharacteristics }
    function Get_ResourceTypeCode: IXMLResourceTypeCode;
    function Get_ResourceTypeDescription: IXMLS255List;
    function Get_ResourceIDInfo: IXMLResourceIDInfoList;
    function Get_ResourceReferenceIDInfo: IXMLResourceReferenceIDInfoList;
    function Get_ResourceReference: IXMLResourceReferenceList;
    function Get_ResourceIntroductionDate: IXMLResourceIntroductionDate;
    function Get_ResourceAvailability: IXMLResourceAvailability;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_ResourcePropertyValue: IXMLResourcePropertyValueList;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceCharacteristicsList }

  TXMLResourceCharacteristicsList = class(TXMLNodeCollection, IXMLResourceCharacteristicsList)
  protected
    { IXMLResourceCharacteristicsList }
    function Add: IXMLResourceCharacteristics;
    function Insert(const Index: Integer): IXMLResourceCharacteristics;

    function Get_Item(Index: Integer): IXMLResourceCharacteristics;
  end;

{ TXMLResourceTypeCode }

  TXMLResourceTypeCode = class(TXMLNode, IXMLResourceTypeCode)
  protected
    { IXMLResourceTypeCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLResourceIDInfo }

  TXMLResourceIDInfo = class(TXMLNode, IXMLResourceIDInfo)
  private
    FResourceDescription: IXMLS255List;
  protected
    { IXMLResourceIDInfo }
    function Get_ResourceIdentifier: IXMLResourceIdentifier;
    function Get_ResourceDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceIDInfoList }

  TXMLResourceIDInfoList = class(TXMLNodeCollection, IXMLResourceIDInfoList)
  protected
    { IXMLResourceIDInfoList }
    function Add: IXMLResourceIDInfo;
    function Insert(const Index: Integer): IXMLResourceIDInfo;

    function Get_Item(Index: Integer): IXMLResourceIDInfo;
  end;

{ TXMLResourceIdentifier }

  TXMLResourceIdentifier = class(TXMLNode, IXMLResourceIdentifier)
  protected
    { IXMLResourceIdentifier }
    function Get_ResourceIdentifierType: UnicodeString;
    function Get_Agency: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    procedure Set_ResourceIdentifierType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
  end;

{ TXMLResourceReferenceIDInfo }

  TXMLResourceReferenceIDInfo = class(TXMLNodeCollection, IXMLResourceReferenceIDInfo)
  protected
    { IXMLResourceReferenceIDInfo }
    function Get_ResourceReferenceIDType: UnicodeString;
    function Get_ResourceIDInfo(Index: Integer): IXMLResourceIDInfo;
    procedure Set_ResourceReferenceIDType(Value: UnicodeString);
    function Add: IXMLResourceIDInfo;
    function Insert(const Index: Integer): IXMLResourceIDInfo;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceReferenceIDInfoList }

  TXMLResourceReferenceIDInfoList = class(TXMLNodeCollection, IXMLResourceReferenceIDInfoList)
  protected
    { IXMLResourceReferenceIDInfoList }
    function Add: IXMLResourceReferenceIDInfo;
    function Insert(const Index: Integer): IXMLResourceReferenceIDInfo;

    function Get_Item(Index: Integer): IXMLResourceReferenceIDInfo;
  end;

{ TXMLResourceReference }

  TXMLResourceReference = class(TXMLNode, IXMLResourceReference)
  protected
    { IXMLResourceReference }
    function Get_ResourceReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ResourceReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLResourceReferenceList }

  TXMLResourceReferenceList = class(TXMLNodeCollection, IXMLResourceReferenceList)
  protected
    { IXMLResourceReferenceList }
    function Add: IXMLResourceReference;
    function Insert(const Index: Integer): IXMLResourceReference;

    function Get_Item(Index: Integer): IXMLResourceReference;
  end;

{ TXMLResourceIntroductionDate }

  TXMLResourceIntroductionDate = class(TXMLNode, IXMLResourceIntroductionDate)
  protected
    { IXMLResourceIntroductionDate }
    function Get_Date: IXMLDateBasis;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceAvailability }

  TXMLResourceAvailability = class(TXMLNode, IXMLResourceAvailability)
  private
    FDateTimeRange: IXMLDateTimeRangeList;
    FResourceShiftInformation: IXMLResourceShiftInformationList;
  protected
    { IXMLResourceAvailability }
    function Get_DateTimeRange: IXMLDateTimeRangeList;
    function Get_ResourceShiftInformation: IXMLResourceShiftInformationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceShiftInformation }

  TXMLResourceShiftInformation = class(TXMLNode, IXMLResourceShiftInformation)
  private
    FResourceShiftDescription: IXMLS255List;
  protected
    { IXMLResourceShiftInformation }
    function Get_ResourceShiftCode: IXMLResourceShiftCode;
    function Get_ResourceShiftDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourceShiftInformationList }

  TXMLResourceShiftInformationList = class(TXMLNodeCollection, IXMLResourceShiftInformationList)
  protected
    { IXMLResourceShiftInformationList }
    function Add: IXMLResourceShiftInformation;
    function Insert(const Index: Integer): IXMLResourceShiftInformation;

    function Get_Item(Index: Integer): IXMLResourceShiftInformation;
  end;

{ TXMLResourceShiftCode }

  TXMLResourceShiftCode = class(TXMLNode, IXMLResourceShiftCode)
  protected
    { IXMLResourceShiftCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLResourcePropertyValue }

  TXMLResourcePropertyValue = class(TXMLNode, IXMLResourcePropertyValue)
  private
    FPropertyDescription: IXMLS255List;
    FQuantityValue: IXMLQuantityValueList;
  protected
    { IXMLResourcePropertyValue }
    function Get_PropertyCode: IXMLPropertyCode;
    function Get_PropertyDescription: IXMLS255List;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    function Get_QuantityValue: IXMLQuantityValueList;
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLResourcePropertyValueList }

  TXMLResourcePropertyValueList = class(TXMLNodeCollection, IXMLResourcePropertyValueList)
  protected
    { IXMLResourcePropertyValueList }
    function Add: IXMLResourcePropertyValue;
    function Insert(const Index: Integer): IXMLResourcePropertyValue;

    function Get_Item(Index: Integer): IXMLResourcePropertyValue;
  end;

{ TXMLPropertyCode }

  TXMLPropertyCode = class(TXMLNode, IXMLPropertyCode)
  protected
    { IXMLPropertyCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLQuantityValue }

  TXMLQuantityValue = class(TXMLMeasurement, IXMLQuantityValue)
  protected
    { IXMLQuantityValue }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
  end;

{ TXMLQuantityValueList }

  TXMLQuantityValueList = class(TXMLNodeCollection, IXMLQuantityValueList)
  protected
    { IXMLQuantityValueList }
    function Add: IXMLQuantityValue;
    function Insert(const Index: Integer): IXMLQuantityValue;

    function Get_Item(Index: Integer): IXMLQuantityValue;
  end;

{ TXMLTransportLoadingCharacteristics }

  TXMLTransportLoadingCharacteristics = class(TXMLNode, IXMLTransportLoadingCharacteristics)
  private
    FTransportLoadingText: IXMLS255List;
  protected
    { IXMLTransportLoadingCharacteristics }
    function Get_MixProductIndicator: UnicodeString;
    function Get_TransportLoadingType: UnicodeString;
    function Get_TransportDeckOption: UnicodeString;
    function Get_LoadingTolerance: UnicodeString;
    function Get_DirectLoading: UnicodeString;
    function Get_GoodsLoadingPrinciple: UnicodeString;
    function Get_LabelOrientation: UnicodeString;
    function Get_IsSlotManaged: UnicodeString;
    function Get_IsCarrierLoadingOperator: UnicodeString;
    function Get_TransportLoadingCode: IXMLTransportLoadingCode;
    function Get_TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription;
    function Get_TransportLoadingText: IXMLS255List;
    function Get_GoodsLoadingSequence: IXMLGoodsLoadingSequence;
    function Get_LoadingFrom: IXMLLoadingFrom;
    procedure Set_MixProductIndicator(Value: UnicodeString);
    procedure Set_TransportLoadingType(Value: UnicodeString);
    procedure Set_TransportDeckOption(Value: UnicodeString);
    procedure Set_LoadingTolerance(Value: UnicodeString);
    procedure Set_DirectLoading(Value: UnicodeString);
    procedure Set_GoodsLoadingPrinciple(Value: UnicodeString);
    procedure Set_LabelOrientation(Value: UnicodeString);
    procedure Set_IsSlotManaged(Value: UnicodeString);
    procedure Set_IsCarrierLoadingOperator(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportLoadingCharacteristicsList }

  TXMLTransportLoadingCharacteristicsList = class(TXMLNodeCollection, IXMLTransportLoadingCharacteristicsList)
  protected
    { IXMLTransportLoadingCharacteristicsList }
    function Add: IXMLTransportLoadingCharacteristics;
    function Insert(const Index: Integer): IXMLTransportLoadingCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportLoadingCharacteristics;
  end;

{ TXMLTransportLoadingCode }

  TXMLTransportLoadingCode = class(TXMLNode, IXMLTransportLoadingCode)
  protected
    { IXMLTransportLoadingCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportLoadingCodeDescription }

  TXMLTransportLoadingCodeDescription = class(TXMLNode, IXMLTransportLoadingCodeDescription)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTransportLoadingCodeDescription }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsLoadingSequence }

  TXMLGoodsLoadingSequence = class(TXMLNode, IXMLGoodsLoadingSequence)
  private
    FTransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
    FLoadingSequence: IXMLLoadingSequenceList;
  protected
    { IXMLGoodsLoadingSequence }
    function Get_LoadingSequenceType: UnicodeString;
    function Get_TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
    function Get_LoadingSequence: IXMLLoadingSequenceList;
    procedure Set_LoadingSequenceType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLoadingSequence }

  TXMLLoadingSequence = class(TXMLNode, IXMLLoadingSequence)
  private
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
  protected
    { IXMLLoadingSequence }
    function Get_SequenceNumber: LongWord;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    procedure Set_SequenceNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLoadingSequenceList }

  TXMLLoadingSequenceList = class(TXMLNodeCollection, IXMLLoadingSequenceList)
  protected
    { IXMLLoadingSequenceList }
    function Add: IXMLLoadingSequence;
    function Insert(const Index: Integer): IXMLLoadingSequence;

    function Get_Item(Index: Integer): IXMLLoadingSequence;
  end;

{ TXMLLoadingFrom }

  TXMLLoadingFrom = class(TXMLNode, IXMLLoadingFrom)
  protected
    { IXMLLoadingFrom }
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnloadingCharacteristics }

  TXMLTransportUnloadingCharacteristics = class(TXMLNode, IXMLTransportUnloadingCharacteristics)
  private
    FTransportUnloadingText: IXMLS255List;
  protected
    { IXMLTransportUnloadingCharacteristics }
    function Get_TransportUnloadingType: UnicodeString;
    function Get_DirectUnloading: UnicodeString;
    function Get_IsSlotManaged: UnicodeString;
    function Get_IsCarrierUnloadingOperator: UnicodeString;
    function Get_TransportUnloadingCode: IXMLTransportUnloadingCode;
    function Get_TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription;
    function Get_TransportUnloadingText: IXMLS255List;
    procedure Set_TransportUnloadingType(Value: UnicodeString);
    procedure Set_DirectUnloading(Value: UnicodeString);
    procedure Set_IsSlotManaged(Value: UnicodeString);
    procedure Set_IsCarrierUnloadingOperator(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnloadingCharacteristicsList }

  TXMLTransportUnloadingCharacteristicsList = class(TXMLNodeCollection, IXMLTransportUnloadingCharacteristicsList)
  protected
    { IXMLTransportUnloadingCharacteristicsList }
    function Add: IXMLTransportUnloadingCharacteristics;
    function Insert(const Index: Integer): IXMLTransportUnloadingCharacteristics;

    function Get_Item(Index: Integer): IXMLTransportUnloadingCharacteristics;
  end;

{ TXMLTransportUnloadingCode }

  TXMLTransportUnloadingCode = class(TXMLNode, IXMLTransportUnloadingCode)
  protected
    { IXMLTransportUnloadingCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportUnloadingCodeDescription }

  TXMLTransportUnloadingCodeDescription = class(TXMLNode, IXMLTransportUnloadingCodeDescription)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTransportUnloadingCodeDescription }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportOtherInstructions }

  TXMLTransportOtherInstructions = class(TXMLNode, IXMLTransportOtherInstructions)
  private
    FTransportInstructionText: IXMLS255List;
    FTransportPropertyValue: IXMLTransportPropertyValueList;
    FOtherDate: IXMLOtherDateList;
    FLocationParty: IXMLLocationPartyList;
  protected
    { IXMLTransportOtherInstructions }
    function Get_TransportInstructionType: UnicodeString;
    function Get_TransportInstructionCode: IXMLTransportInstructionCode;
    function Get_TransportInstructionText: IXMLS255List;
    function Get_TransportPropertyValue: IXMLTransportPropertyValueList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_LocationParty: IXMLLocationPartyList;
    procedure Set_TransportInstructionType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportOtherInstructionsList }

  TXMLTransportOtherInstructionsList = class(TXMLNodeCollection, IXMLTransportOtherInstructionsList)
  protected
    { IXMLTransportOtherInstructionsList }
    function Add: IXMLTransportOtherInstructions;
    function Insert(const Index: Integer): IXMLTransportOtherInstructions;

    function Get_Item(Index: Integer): IXMLTransportOtherInstructions;
  end;

{ TXMLTransportInstructionCode }

  TXMLTransportInstructionCode = class(TXMLNode, IXMLTransportInstructionCode)
  protected
    { IXMLTransportInstructionCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLTransportPropertyValue }

  TXMLTransportPropertyValue = class(TXMLNode, IXMLTransportPropertyValue)
  protected
    { IXMLTransportPropertyValue }
    function Get_TransportPropertyType: UnicodeString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_PriceDetails: IXMLPriceDetails;
    procedure Set_TransportPropertyType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportPropertyValueList }

  TXMLTransportPropertyValueList = class(TXMLNodeCollection, IXMLTransportPropertyValueList)
  protected
    { IXMLTransportPropertyValueList }
    function Add: IXMLTransportPropertyValue;
    function Insert(const Index: Integer): IXMLTransportPropertyValue;

    function Get_Item(Index: Integer): IXMLTransportPropertyValue;
  end;

{ TXMLRoute }

  TXMLRoute = class(TXMLNode, IXMLRoute)
  private
    FRouteComment: IXMLS255List;
    FRouteLocation: IXMLRouteLocationList;
    FSupplyPoint: IXMLSupplyPointList;
    FMapPoint: IXMLMapPointList;
    FRouteReference: IXMLRouteReferenceList;
    FRouteLength: IXMLRouteLengthList;
    FRouteLeg: IXMLRouteLegList;
  protected
    { IXMLRoute }
    function Get_RouteType: UnicodeString;
    function Get_IsWithLoad: UnicodeString;
    function Get_RouteSeasonType: UnicodeString;
    function Get_IsRouteAsInstructed: UnicodeString;
    function Get_RouteName: UnicodeString;
    function Get_RouteComment: IXMLS255List;
    function Get_RouteLocation: IXMLRouteLocationList;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_RouteReference: IXMLRouteReferenceList;
    function Get_RouteLength: IXMLRouteLengthList;
    function Get_RouteDefinition: IXMLRouteDefinition;
    function Get_EAttachment: IXMLEAttachment;
    function Get_RouteLeg: IXMLRouteLegList;
    procedure Set_RouteType(Value: UnicodeString);
    procedure Set_IsWithLoad(Value: UnicodeString);
    procedure Set_RouteSeasonType(Value: UnicodeString);
    procedure Set_IsRouteAsInstructed(Value: UnicodeString);
    procedure Set_RouteName(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRouteList }

  TXMLRouteList = class(TXMLNodeCollection, IXMLRouteList)
  protected
    { IXMLRouteList }
    function Add: IXMLRoute;
    function Insert(const Index: Integer): IXMLRoute;

    function Get_Item(Index: Integer): IXMLRoute;
  end;

{ TXMLRouteLocation }

  TXMLRouteLocation = class(TXMLNode, IXMLRouteLocation)
  protected
    { IXMLRouteLocation }
    function Get_LocationParty: IXMLLocationParty;
    function Get_SupplyPoint: IXMLSupplyPoint;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRouteLocationList }

  TXMLRouteLocationList = class(TXMLNodeCollection, IXMLRouteLocationList)
  protected
    { IXMLRouteLocationList }
    function Add: IXMLRouteLocation;
    function Insert(const Index: Integer): IXMLRouteLocation;

    function Get_Item(Index: Integer): IXMLRouteLocation;
  end;

{ TXMLRouteReference }

  TXMLRouteReference = class(TXMLNode, IXMLRouteReference)
  protected
    { IXMLRouteReference }
    function Get_RouteReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_RouteReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLRouteReferenceList }

  TXMLRouteReferenceList = class(TXMLNodeCollection, IXMLRouteReferenceList)
  protected
    { IXMLRouteReferenceList }
    function Add: IXMLRouteReference;
    function Insert(const Index: Integer): IXMLRouteReference;

    function Get_Item(Index: Integer): IXMLRouteReference;
  end;

{ TXMLRouteLength }

  TXMLRouteLength = class(TXMLMeasurement, IXMLRouteLength)
  protected
    { IXMLRouteLength }
    function Get_LengthType: UnicodeString;
    function Get_LengthTypeVersion: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_LengthType(Value: UnicodeString);
    procedure Set_LengthTypeVersion(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLRouteLengthList }

  TXMLRouteLengthList = class(TXMLNodeCollection, IXMLRouteLengthList)
  protected
    { IXMLRouteLengthList }
    function Add: IXMLRouteLength;
    function Insert(const Index: Integer): IXMLRouteLength;

    function Get_Item(Index: Integer): IXMLRouteLength;
  end;

{ TXMLRouteDefinition }

  TXMLRouteDefinition = class(TXMLNode, IXMLRouteDefinition)
  protected
    { IXMLRouteDefinition }
    function Get_RouteDefinitionFormat: UnicodeString;
    procedure Set_RouteDefinitionFormat(Value: UnicodeString);
  end;

{ TXMLRouteLeg }

  TXMLRouteLeg = class(TXMLNode, IXMLRouteLeg)
  private
    FOtherParty: IXMLTypedPartyList;
    FMapPoint: IXMLMapPointList;
    FRouteReference: IXMLRouteReferenceList;
    FRouteLegLength: IXMLRouteLegLengthList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLRouteLeg }
    function Get_RouteLegNumber: LongWord;
    function Get_RouteLegName: UnicodeString;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_MapPoint: IXMLMapPointList;
    function Get_RouteReference: IXMLRouteReferenceList;
    function Get_RouteLegLength: IXMLRouteLegLengthList;
    function Get_RoadCharacteristics: IXMLRoadCharacteristics;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_RouteLegNumber(Value: LongWord);
    procedure Set_RouteLegName(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRouteLegList }

  TXMLRouteLegList = class(TXMLNodeCollection, IXMLRouteLegList)
  protected
    { IXMLRouteLegList }
    function Add: IXMLRouteLeg;
    function Insert(const Index: Integer): IXMLRouteLeg;

    function Get_Item(Index: Integer): IXMLRouteLeg;
  end;

{ TXMLRouteLegLength }

  TXMLRouteLegLength = class(TXMLMeasurement, IXMLRouteLegLength)
  protected
    { IXMLRouteLegLength }
    function Get_LengthType: UnicodeString;
    function Get_LengthTypeVersion: UnicodeString;
    function Get_Agency: UnicodeString;
    procedure Set_LengthType(Value: UnicodeString);
    procedure Set_LengthTypeVersion(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLRouteLegLengthList }

  TXMLRouteLegLengthList = class(TXMLNodeCollection, IXMLRouteLegLengthList)
  protected
    { IXMLRouteLegLengthList }
    function Add: IXMLRouteLegLength;
    function Insert(const Index: Integer): IXMLRouteLegLength;

    function Get_Item(Index: Integer): IXMLRouteLegLength;
  end;

{ TXMLRoadCharacteristics }

  TXMLRoadCharacteristics = class(TXMLNode, IXMLRoadCharacteristics)
  private
    FRoadClassification: IXMLRoadClassificationList;
    FRoadAvailability: IXMLRoadAvailabilityTypeList;
    FRoadBearingCapacity: IXMLRoadBearingCapacityList;
    FRoadObstruction: IXMLRoadObstructionList;
    FRoadMaintenanceInfo: IXMLRoadMaintenanceInfoList;
  protected
    { IXMLRoadCharacteristics }
    function Get_RoadOwnerType: UnicodeString;
    function Get_RoadKeeperType: UnicodeString;
    function Get_RoadAccessibilityType: UnicodeString;
    function Get_RoadTurningPossibilityType: UnicodeString;
    function Get_RoadTurningPointType: UnicodeString;
    function Get_RoadPassingPossibility: UnicodeString;
    function Get_IsDeadEndRoad: UnicodeString;
    function Get_RoadName: UnicodeString;
    function Get_RoadNumber: UnicodeString;
    function Get_RoadClassification: IXMLRoadClassificationList;
    function Get_RoadAvailability: IXMLRoadAvailabilityTypeList;
    function Get_RoadBearingCapacity: IXMLRoadBearingCapacityList;
    function Get_RoadObstruction: IXMLRoadObstructionList;
    function Get_RoadMaintenanceInfo: IXMLRoadMaintenanceInfoList;
    procedure Set_RoadOwnerType(Value: UnicodeString);
    procedure Set_RoadKeeperType(Value: UnicodeString);
    procedure Set_RoadAccessibilityType(Value: UnicodeString);
    procedure Set_RoadTurningPossibilityType(Value: UnicodeString);
    procedure Set_RoadTurningPointType(Value: UnicodeString);
    procedure Set_RoadPassingPossibility(Value: UnicodeString);
    procedure Set_IsDeadEndRoad(Value: UnicodeString);
    procedure Set_RoadName(Value: UnicodeString);
    procedure Set_RoadNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRoadClassification }

  TXMLRoadClassification = class(TXMLNode, IXMLRoadClassification)
  private
    FRoadClassificationDescription: IXMLS255List;
  protected
    { IXMLRoadClassification }
    function Get_RoadClassificationCode: IXMLRoadClassificationCode;
    function Get_CodeValue: IXMLCodeValue;
    function Get_RoadClassificationDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRoadClassificationList }

  TXMLRoadClassificationList = class(TXMLNodeCollection, IXMLRoadClassificationList)
  protected
    { IXMLRoadClassificationList }
    function Add: IXMLRoadClassification;
    function Insert(const Index: Integer): IXMLRoadClassification;

    function Get_Item(Index: Integer): IXMLRoadClassification;
  end;

{ TXMLRoadClassificationCode }

  TXMLRoadClassificationCode = class(TXMLNode, IXMLRoadClassificationCode)
  protected
    { IXMLRoadClassificationCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLRoadBearingCapacity }

  TXMLRoadBearingCapacity = class(TXMLMeasurement, IXMLRoadBearingCapacity)
  protected
    { IXMLRoadBearingCapacity }
    function Get_RoadBearingCapacityType: UnicodeString;
    procedure Set_RoadBearingCapacityType(Value: UnicodeString);
  end;

{ TXMLRoadBearingCapacityList }

  TXMLRoadBearingCapacityList = class(TXMLNodeCollection, IXMLRoadBearingCapacityList)
  protected
    { IXMLRoadBearingCapacityList }
    function Add: IXMLRoadBearingCapacity;
    function Insert(const Index: Integer): IXMLRoadBearingCapacity;

    function Get_Item(Index: Integer): IXMLRoadBearingCapacity;
  end;

{ TXMLRoadObstruction }

  TXMLRoadObstruction = class(TXMLNode, IXMLRoadObstruction)
  private
    FMapPointComment: IXMLS255List;
    FMapCoordinates: IXMLMapCoordinatesList;
    FRoadBearingCapacity: IXMLRoadBearingCapacityList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLRoadObstruction }
    function Get_RoadObstructionType: UnicodeString;
    function Get_MapPointName: UnicodeString;
    function Get_MapPointComment: IXMLS255List;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    function Get_RoadSlopePercent: Double;
    function Get_RoadBearingCapacity: IXMLRoadBearingCapacityList;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Height: IXMLMeasurement;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_RoadObstructionType(Value: UnicodeString);
    procedure Set_MapPointName(Value: UnicodeString);
    procedure Set_RoadSlopePercent(Value: Double);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRoadObstructionList }

  TXMLRoadObstructionList = class(TXMLNodeCollection, IXMLRoadObstructionList)
  protected
    { IXMLRoadObstructionList }
    function Add: IXMLRoadObstruction;
    function Insert(const Index: Integer): IXMLRoadObstruction;

    function Get_Item(Index: Integer): IXMLRoadObstruction;
  end;

{ TXMLRoadMaintenanceInfo }

  TXMLRoadMaintenanceInfo = class(TXMLNode, IXMLRoadMaintenanceInfo)
  private
    FOtherDate: IXMLOtherDateList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLRoadMaintenanceInfo }
    function Get_RoadMaintenanceCodeInfo: IXMLCodeInfo;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRoadMaintenanceInfoList }

  TXMLRoadMaintenanceInfoList = class(TXMLNodeCollection, IXMLRoadMaintenanceInfoList)
  protected
    { IXMLRoadMaintenanceInfoList }
    function Add: IXMLRoadMaintenanceInfo;
    function Insert(const Index: Integer): IXMLRoadMaintenanceInfo;

    function Get_Item(Index: Integer): IXMLRoadMaintenanceInfo;
  end;

{ TXMLDeliveryTransitTime }

  TXMLDeliveryTransitTime = class(TXMLNode, IXMLDeliveryTransitTime)
  protected
    { IXMLDeliveryTransitTime }
    function Get_Days: LongWord;
    function Get_Hours: LongWord;
    function Get_Minutes: LongWord;
    procedure Set_Days(Value: LongWord);
    procedure Set_Hours(Value: LongWord);
    procedure Set_Minutes(Value: LongWord);
  end;

{ TXMLDeliveryDestination }

  TXMLDeliveryDestination = class(TXMLNode, IXMLDeliveryDestination)
  private
    FSupplyPoint: IXMLSupplyPointList;
    FMapCoordinates: IXMLMapCoordinatesList;
  protected
    { IXMLDeliveryDestination }
    function Get_IsOptionalDestination: UnicodeString;
    function Get_PriorityOrder: LongWord;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    function Get_MapCoordinates: IXMLMapCoordinatesList;
    procedure Set_IsOptionalDestination(Value: UnicodeString);
    procedure Set_PriorityOrder(Value: LongWord);
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryDestinationList }

  TXMLDeliveryDestinationList = class(TXMLNodeCollection, IXMLDeliveryDestinationList)
  protected
    { IXMLDeliveryDestinationList }
    function Add: IXMLDeliveryDestination;
    function Insert(const Index: Integer): IXMLDeliveryDestination;

    function Get_Item(Index: Integer): IXMLDeliveryDestination;
  end;

{ TXMLDeliveryLegReference }

  TXMLDeliveryLegReference = class(TXMLNode, IXMLDeliveryLegReference)
  protected
    { IXMLDeliveryLegReference }
    function Get_DeliveryLegReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DeliveryLegReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLDeliveryLegReferenceList }

  TXMLDeliveryLegReferenceList = class(TXMLNodeCollection, IXMLDeliveryLegReferenceList)
  protected
    { IXMLDeliveryLegReferenceList }
    function Add: IXMLDeliveryLegReference;
    function Insert(const Index: Integer): IXMLDeliveryLegReference;

    function Get_Item(Index: Integer): IXMLDeliveryLegReference;
  end;

{ TXMLTermsOfChartering }

  TXMLTermsOfChartering = class(TXMLNode, IXMLTermsOfChartering)
  protected
    { IXMLTermsOfChartering }
    function Get_TermsOfCharteringType: UnicodeString;
    procedure Set_TermsOfCharteringType(Value: UnicodeString);
  end;

{ TXMLTermsOfCharteringList }

  TXMLTermsOfCharteringList = class(TXMLNodeCollection, IXMLTermsOfCharteringList)
  protected
    { IXMLTermsOfCharteringList }
    function Add: IXMLTermsOfChartering;
    function Insert(const Index: Integer): IXMLTermsOfChartering;

    function Get_Item(Index: Integer): IXMLTermsOfChartering;
  end;

{ TXMLBusinessChainInfo }

  TXMLBusinessChainInfo = class(TXMLNode, IXMLBusinessChainInfo)
  private
    FBusinessChainDescription: IXMLS255List;
    FOtherParty: IXMLTypedPartyList;
    FBusinessChainSequence: IXMLBusinessChainSequenceList;
  protected
    { IXMLBusinessChainInfo }
    function Get_BusinessChainContextType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    function Get_ValidityStatus: UnicodeString;
    function Get_BusinessChainNumber: UnicodeString;
    function Get_BusinessChainDescription: IXMLS255List;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_ValidityPeriod: IXMLValidityPeriod;
    function Get_BusinessChainSequence: IXMLBusinessChainSequenceList;
    procedure Set_BusinessChainContextType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
    procedure Set_ValidityStatus(Value: UnicodeString);
    procedure Set_BusinessChainNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLValidityPeriod }

  TXMLValidityPeriod = class(TXMLNode, IXMLValidityPeriod)
  protected
    { IXMLValidityPeriod }
    function Get_DateTimeFrom: IXMLDateTimeFrom;
    function Get_DateTimeTo: IXMLDateTimeTo;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBusinessChainSequence }

  TXMLBusinessChainSequence = class(TXMLNode, IXMLBusinessChainSequence)
  private
    FOtherParty: IXMLTypedPartyList;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FDocumentRequiredInfo: IXMLDocumentRequiredInfoList;
  protected
    { IXMLBusinessChainSequence }
    function Get_IsBusinessChainSequenceApplicable: UnicodeString;
    function Get_BusinessChainSequenceNumber: LongWord;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_DocumentRequiredInfo: IXMLDocumentRequiredInfoList;
    procedure Set_IsBusinessChainSequenceApplicable(Value: UnicodeString);
    procedure Set_BusinessChainSequenceNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBusinessChainSequenceList }

  TXMLBusinessChainSequenceList = class(TXMLNodeCollection, IXMLBusinessChainSequenceList)
  protected
    { IXMLBusinessChainSequenceList }
    function Add: IXMLBusinessChainSequence;
    function Insert(const Index: Integer): IXMLBusinessChainSequence;

    function Get_Item(Index: Integer): IXMLBusinessChainSequence;
  end;

{ TXMLDocumentRequiredInfo }

  TXMLDocumentRequiredInfo = class(TXMLNode, IXMLDocumentRequiredInfo)
  private
    FRespondToParty: IXMLTypedPartyList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDocumentRequiredInfo }
    function Get_DocumentName: UnicodeString;
    function Get_DocumentType: UnicodeString;
    function Get_DocumentFormatType: UnicodeString;
    function Get_DocumentExchangeType: UnicodeString;
    function Get_RespondToParty: IXMLTypedPartyList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DocumentName(Value: UnicodeString);
    procedure Set_DocumentType(Value: UnicodeString);
    procedure Set_DocumentFormatType(Value: UnicodeString);
    procedure Set_DocumentExchangeType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentRequiredInfoList }

  TXMLDocumentRequiredInfoList = class(TXMLNodeCollection, IXMLDocumentRequiredInfoList)
  protected
    { IXMLDocumentRequiredInfoList }
    function Add: IXMLDocumentRequiredInfo;
    function Insert(const Index: Integer): IXMLDocumentRequiredInfo;

    function Get_Item(Index: Integer): IXMLDocumentRequiredInfo;
  end;

{ TXMLDeliveryMessageLineItem }

  TXMLDeliveryMessageLineItem = class(TXMLNode, IXMLDeliveryMessageLineItem)
  private
    FDeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    FSupplyPoint: IXMLSupplyPointList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FTransportOtherInstructions: IXMLTransportOtherInstructionsList;
    FTransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    FTransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
    FOtherParty: IXMLTypedPartyList;
    FPackageInformation: IXMLPackageInformationClassList;
    FOtherDate: IXMLOtherDateList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    FMeasuringSpecification: IXMLMeasuringSpecificationList;
    FAdditionalItemInfo: IXMLCodeInfoList;
  protected
    { IXMLDeliveryMessageLineItem }
    function Get_ShipmentComplete: UnicodeString;
    function Get_InstructionByType: UnicodeString;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_Product: IXMLProductClass;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_NumberOfPackages: LongWord;
    function Get_SupplyPoint: IXMLSupplyPointList;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
    function Get_BillToParty: IXMLParty;
    function Get_MillCharacteristics: IXMLMillCharacteristics;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_StatisticalGoodsInformation: IXMLStatisticalGoodsInformation;
    function Get_PackageInformation: IXMLPackageInformationClassList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_MeasuringSpecification: IXMLMeasuringSpecificationList;
    function Get_AdditionalItemInfo: IXMLCodeInfoList;
    procedure Set_ShipmentComplete(Value: UnicodeString);
    procedure Set_InstructionByType(Value: UnicodeString);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    procedure Set_NumberOfPackages(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInventoryClass }

  TXMLInventoryClass = class(TXMLNode, IXMLInventoryClass)
  private
    FInventoryClassCode: IXMLInventoryClassCodeList;
    FInventoryClassDescription: IXMLS72List;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLInventoryClass }
    function Get_InventoryStatusType: UnicodeString;
    function Get_InventoryOwnedBy: UnicodeString;
    function Get_InventoryClassCode: IXMLInventoryClassCodeList;
    function Get_InventoryClassDescription: IXMLS72List;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_InventoryStatusType(Value: UnicodeString);
    procedure Set_InventoryOwnedBy(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInventoryClassCode }

  TXMLInventoryClassCode = class(TXMLNode, IXMLInventoryClassCode)
  protected
    { IXMLInventoryClassCode }
    function Get_Agency: UnicodeString;
    function Get_InventoryClassLevel: LongWord;
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_InventoryClassLevel(Value: LongWord);
  end;

{ TXMLInventoryClassCodeList }

  TXMLInventoryClassCodeList = class(TXMLNodeCollection, IXMLInventoryClassCodeList)
  protected
    { IXMLInventoryClassCodeList }
    function Add: IXMLInventoryClassCode;
    function Insert(const Index: Integer): IXMLInventoryClassCode;

    function Get_Item(Index: Integer): IXMLInventoryClassCode;
  end;

{ TXMLPackageInformationClass }

  TXMLPackageInformationClass = class(TXMLNode, IXMLPackageInformationClass)
  private
    FIdentifier: IXMLIdentifierS60List;
    FSupplierMarks: IXMLS30List;
    FRawMaterialSet: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FBaleItem: IXMLBaleItemList;
    FBoxItem: IXMLBoxItemList;
    FReelItem: IXMLReelItemList;
    FReamItem: IXMLReamItemList;
    FSheetItem: IXMLSheetItemList;
    FUnitItem: IXMLUnitItemList;
    FWoodItem: IXMLWoodItemList;
    FOtherDate: IXMLOtherDateList;
    FAdditionalText: IXMLS255List;
    FPackageReference: IXMLPackageReferenceList;
  protected
    { IXMLPackageInformationClass }
    function Get_PackageType: UnicodeString;
    function Get_MixedProductPalletIndicator: UnicodeString;
    function Get_PackageLevel: Double;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_SupplierMarks: IXMLS30List;
    function Get_RawMaterialSet: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_PackageCharacteristics: IXMLPackageCharacteristics;
    function Get_BaleItem: IXMLBaleItemList;
    function Get_BoxItem: IXMLBoxItemList;
    function Get_ReelItem: IXMLReelItemList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItemList;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_WoodItem: IXMLWoodItemList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    function Get_PackageReference: IXMLPackageReferenceList;
    procedure Set_PackageType(Value: UnicodeString);
    procedure Set_MixedProductPalletIndicator(Value: UnicodeString);
    procedure Set_PackageLevel(Value: Double);
    procedure Set_MachineID(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackageInformationClassList }

  TXMLPackageInformationClassList = class(TXMLNodeCollection, IXMLPackageInformationClassList)
  protected
    { IXMLPackageInformationClassList }
    function Add: IXMLPackageInformationClass;
    function Insert(const Index: Integer): IXMLPackageInformationClass;

    function Get_Item(Index: Integer): IXMLPackageInformationClass;
  end;

{ TXMLPackageCharacteristics }

  TXMLPackageCharacteristics = class(TXMLNode, IXMLPackageCharacteristics)
  private
    FPropertyValue: IXMLPropertyValueList;
  protected
    { IXMLPackageCharacteristics }
    function Get_Height: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    function Get_PropertyValue: IXMLPropertyValueList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleItem }

  TXMLBaleItem = class(TXMLNode, IXMLBaleItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FBaleReference: IXMLBaleReferenceList;
    FOtherDate: IXMLOtherDateList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLBaleItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_BaleCharacteristics: IXMLBaleCharacteristics;
    function Get_BaleReference: IXMLBaleReferenceList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_MachineID(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleItemList }

  TXMLBaleItemList = class(TXMLNodeCollection, IXMLBaleItemList)
  protected
    { IXMLBaleItemList }
    function Add: IXMLBaleItem;
    function Insert(const Index: Integer): IXMLBaleItem;

    function Get_Item(Index: Integer): IXMLBaleItem;
  end;

{ TXMLBaleCharacteristics }

  TXMLBaleCharacteristics = class(TXMLNode, IXMLBaleCharacteristics)
  protected
    { IXMLBaleCharacteristics }
    function Get_BaleHeight: IXMLMeasurement;
    function Get_BaleWidth: IXMLMeasurement;
    function Get_BaleDepth: IXMLMeasurement;
    function Get_DateMade: IXMLDateMade;
    function Get_DateFinished: IXMLDateFinished;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateMade }

  TXMLDateMade = class(TXMLNode, IXMLDateMade)
  protected
    { IXMLDateMade }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateFinished }

  TXMLDateFinished = class(TXMLNode, IXMLDateFinished)
  protected
    { IXMLDateFinished }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleReference }

  TXMLBaleReference = class(TXMLNode, IXMLBaleReference)
  protected
    { IXMLBaleReference }
    function Get_BaleReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_BaleReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLBaleReferenceList }

  TXMLBaleReferenceList = class(TXMLNodeCollection, IXMLBaleReferenceList)
  protected
    { IXMLBaleReferenceList }
    function Add: IXMLBaleReference;
    function Insert(const Index: Integer): IXMLBaleReference;

    function Get_Item(Index: Integer): IXMLBaleReference;
  end;

{ TXMLBoxItem }

  TXMLBoxItem = class(TXMLNode, IXMLBoxItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FReamItem: IXMLReamItemList;
    FUnitItem: IXMLUnitItemList;
    FBoxReference: IXMLBoxReferenceList;
    FOtherDate: IXMLOtherDateList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLBoxItem }
    function Get_MixProductIndicator: UnicodeString;
    function Get_IsPartialIndicator: UnicodeString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItem;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_BoxReference: IXMLBoxReferenceList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_MixProductIndicator(Value: UnicodeString);
    procedure Set_IsPartialIndicator(Value: UnicodeString);
    procedure Set_MachineID(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBoxItemList }

  TXMLBoxItemList = class(TXMLNodeCollection, IXMLBoxItemList)
  protected
    { IXMLBoxItemList }
    function Add: IXMLBoxItem;
    function Insert(const Index: Integer): IXMLBoxItem;

    function Get_Item(Index: Integer): IXMLBoxItem;
  end;

{ TXMLReamItem }

  TXMLReamItem = class(TXMLNode, IXMLReamItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLReamItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_SheetItem: IXMLSheetItem;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReamItemList }

  TXMLReamItemList = class(TXMLNodeCollection, IXMLReamItemList)
  protected
    { IXMLReamItemList }
    function Add: IXMLReamItem;
    function Insert(const Index: Integer): IXMLReamItem;

    function Get_Item(Index: Integer): IXMLReamItem;
  end;

{ TXMLSheetItem }

  TXMLSheetItem = class(TXMLNode, IXMLSheetItem)
  protected
    { IXMLSheetItem }
    function Get_DateSheeted: IXMLDateSheeted;
    function Get_DateFinished: IXMLDateFinished;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetItemList }

  TXMLSheetItemList = class(TXMLNodeCollection, IXMLSheetItemList)
  protected
    { IXMLSheetItemList }
    function Add: IXMLSheetItem;
    function Insert(const Index: Integer): IXMLSheetItem;

    function Get_Item(Index: Integer): IXMLSheetItem;
  end;

{ TXMLDateSheeted }

  TXMLDateSheeted = class(TXMLNode, IXMLDateSheeted)
  protected
    { IXMLDateSheeted }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitItem }

  TXMLUnitItem = class(TXMLNode, IXMLUnitItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FUnitReference: IXMLUnitReferenceList;
    FOtherDate: IXMLOtherDateList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLUnitItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_Product: IXMLProductClass;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_UnitReference: IXMLUnitReferenceList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitItemList }

  TXMLUnitItemList = class(TXMLNodeCollection, IXMLUnitItemList)
  protected
    { IXMLUnitItemList }
    function Add: IXMLUnitItem;
    function Insert(const Index: Integer): IXMLUnitItem;

    function Get_Item(Index: Integer): IXMLUnitItem;
  end;

{ TXMLUnitReference }

  TXMLUnitReference = class(TXMLNode, IXMLUnitReference)
  protected
    { IXMLUnitReference }
    function Get_UnitReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_UnitReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLUnitReferenceList }

  TXMLUnitReferenceList = class(TXMLNodeCollection, IXMLUnitReferenceList)
  protected
    { IXMLUnitReferenceList }
    function Add: IXMLUnitReference;
    function Insert(const Index: Integer): IXMLUnitReference;

    function Get_Item(Index: Integer): IXMLUnitReference;
  end;

{ TXMLBoxReference }

  TXMLBoxReference = class(TXMLNode, IXMLBoxReference)
  protected
    { IXMLBoxReference }
    function Get_BoxReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_BoxReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLBoxReferenceList }

  TXMLBoxReferenceList = class(TXMLNodeCollection, IXMLBoxReferenceList)
  protected
    { IXMLBoxReferenceList }
    function Add: IXMLBoxReference;
    function Insert(const Index: Integer): IXMLBoxReference;

    function Get_Item(Index: Integer): IXMLBoxReference;
  end;

{ TXMLReelItem }

  TXMLReelItem = class(TXMLNode, IXMLReelItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLReelItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: UnicodeString;
    function Get_DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_MillOrderNumber: UnicodeString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_MachineID(Value: UnicodeString);
    procedure Set_MillOrderNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReelItemList }

  TXMLReelItemList = class(TXMLNodeCollection, IXMLReelItemList)
  protected
    { IXMLReelItemList }
    function Add: IXMLReelItem;
    function Insert(const Index: Integer): IXMLReelItem;

    function Get_Item(Index: Integer): IXMLReelItem;
  end;

{ TXMLDeliveryMessageReelCharacteristics }

  TXMLDeliveryMessageReelCharacteristics = class(TXMLNode, IXMLDeliveryMessageReelCharacteristics)
  private
    FMillJoinLocation: IXMLMillJoinLocationList;
  protected
    { IXMLDeliveryMessageReelCharacteristics }
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MachineID: UnicodeString;
    function Get_TambourID: UnicodeString;
    function Get_SetNumber: LongWord;
    function Get_SetPosition: LongWord;
    function Get_TotalSetPositions: LongWord;
    function Get_TotalSetNumbers: LongWord;
    function Get_NumberOfMillJoins: LongWord;
    function Get_MillJoinLocation: IXMLMillJoinLocationList;
    function Get_DateFinished: IXMLDateFinished;
    function Get_DateWound: IXMLDateWound;
    function Get_Caliper: IXMLCaliper;
    procedure Set_MachineID(Value: UnicodeString);
    procedure Set_TambourID(Value: UnicodeString);
    procedure Set_SetNumber(Value: LongWord);
    procedure Set_SetPosition(Value: LongWord);
    procedure Set_TotalSetPositions(Value: LongWord);
    procedure Set_TotalSetNumbers(Value: LongWord);
    procedure Set_NumberOfMillJoins(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMillJoinLocation }

  TXMLMillJoinLocation = class(TXMLNode, IXMLMillJoinLocation)
  protected
    { IXMLMillJoinLocation }
    function Get_MillJoinNumber: LongWord;
    function Get_LengthFromCore: IXMLMeasurement;
    function Get_DistanceFromCore: IXMLMeasurement;
    procedure Set_MillJoinNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMillJoinLocationList }

  TXMLMillJoinLocationList = class(TXMLNodeCollection, IXMLMillJoinLocationList)
  protected
    { IXMLMillJoinLocationList }
    function Add: IXMLMillJoinLocation;
    function Insert(const Index: Integer): IXMLMillJoinLocation;

    function Get_Item(Index: Integer): IXMLMillJoinLocation;
  end;

{ TXMLDateWound }

  TXMLDateWound = class(TXMLNode, IXMLDateWound)
  protected
    { IXMLDateWound }
    function Get_RewoundIndicator: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_RewoundIndicator(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodItem }

  TXMLWoodItem = class(TXMLNode, IXMLWoodItem)
  private
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLWoodItem }
    function Get_Product: IXMLProductClass;
    function Get_PackagingInformation: IXMLProductPackagingClass;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodItemList }

  TXMLWoodItemList = class(TXMLNodeCollection, IXMLWoodItemList)
  protected
    { IXMLWoodItemList }
    function Add: IXMLWoodItem;
    function Insert(const Index: Integer): IXMLWoodItem;

    function Get_Item(Index: Integer): IXMLWoodItem;
  end;

{ TXMLPackageReference }

  TXMLPackageReference = class(TXMLNode, IXMLPackageReference)
  protected
    { IXMLPackageReference }
    function Get_PackageReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_PackageReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLPackageReferenceList }

  TXMLPackageReferenceList = class(TXMLNodeCollection, IXMLPackageReferenceList)
  protected
    { IXMLPackageReferenceList }
    function Add: IXMLPackageReference;
    function Insert(const Index: Integer): IXMLPackageReference;

    function Get_Item(Index: Integer): IXMLPackageReference;
  end;

{ TXMLMeasuringSpecification }

  TXMLMeasuringSpecification = class(TXMLNode, IXMLMeasuringSpecification)
  private
    FMeasuringReference: IXMLMeasuringReferenceList;
    FMeasuringCodeInfo: IXMLMeasuringCodeInfoList;
    FMeasuringDescription: IXMLS255List;
  protected
    { IXMLMeasuringSpecification }
    function Get_MeasuringType: UnicodeString;
    function Get_PrioritisedMeasuringType: UnicodeString;
    function Get_CompensationMeasuringType: UnicodeString;
    function Get_MeasuringParty: IXMLParty;
    function Get_MeasuringLocation: IXMLMeasuringLocation;
    function Get_MeasuringReference: IXMLMeasuringReferenceList;
    function Get_MeasuringCodeInfo: IXMLMeasuringCodeInfoList;
    function Get_MeasuringCode: IXMLMeasuringCode;
    function Get_MeasuringDescription: IXMLS255List;
    function Get_MeasuringProduct: IXMLMeasuringProduct;
    function Get_MeasurementSpecification: IXMLMeasurementSpecification;
    procedure Set_MeasuringType(Value: UnicodeString);
    procedure Set_PrioritisedMeasuringType(Value: UnicodeString);
    procedure Set_CompensationMeasuringType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasuringSpecificationList }

  TXMLMeasuringSpecificationList = class(TXMLNodeCollection, IXMLMeasuringSpecificationList)
  protected
    { IXMLMeasuringSpecificationList }
    function Add: IXMLMeasuringSpecification;
    function Insert(const Index: Integer): IXMLMeasuringSpecification;

    function Get_Item(Index: Integer): IXMLMeasuringSpecification;
  end;

{ TXMLMeasuringLocation }

  TXMLMeasuringLocation = class(TXMLNode, IXMLMeasuringLocation)
  private
    FMeasuringUnitIdentifier: IXMLMeasuringUnitIdentifierList;
    FMeasuringEquipment: IXMLMeasuringEquipmentList;
  protected
    { IXMLMeasuringLocation }
    function Get_LocationParty: IXMLLocationParty;
    function Get_MeasuringUnitIdentifier: IXMLMeasuringUnitIdentifierList;
    function Get_MeasuringUnitBrandAndModel: IXMLMeasuringUnitBrandAndModel;
    function Get_MeasuringEquipment: IXMLMeasuringEquipmentList;
    function Get_MeasuringLineID: UnicodeString;
    procedure Set_MeasuringLineID(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasuringUnitIdentifier }

  TXMLMeasuringUnitIdentifier = class(TXMLNode, IXMLMeasuringUnitIdentifier)
  protected
    { IXMLMeasuringUnitIdentifier }
    function Get_MeasuringUnitIdentifierType: UnicodeString;
    function Get_Agency: UnicodeString;
    function Get_StateOrProvince: UnicodeString;
    function Get_ISOCountryCode: UnicodeString;
    function Get_ISOCountryCodeAlpha3: UnicodeString;
    function Get_ISOCountryCodeNumeric: UnicodeString;
    procedure Set_MeasuringUnitIdentifierType(Value: UnicodeString);
    procedure Set_Agency(Value: UnicodeString);
    procedure Set_StateOrProvince(Value: UnicodeString);
    procedure Set_ISOCountryCode(Value: UnicodeString);
    procedure Set_ISOCountryCodeAlpha3(Value: UnicodeString);
    procedure Set_ISOCountryCodeNumeric(Value: UnicodeString);
  end;

{ TXMLMeasuringUnitIdentifierList }

  TXMLMeasuringUnitIdentifierList = class(TXMLNodeCollection, IXMLMeasuringUnitIdentifierList)
  protected
    { IXMLMeasuringUnitIdentifierList }
    function Add: IXMLMeasuringUnitIdentifier;
    function Insert(const Index: Integer): IXMLMeasuringUnitIdentifier;

    function Get_Item(Index: Integer): IXMLMeasuringUnitIdentifier;
  end;

{ TXMLMeasuringUnitBrandAndModel }

  TXMLMeasuringUnitBrandAndModel = class(TXMLNode, IXMLMeasuringUnitBrandAndModel)
  protected
    { IXMLMeasuringUnitBrandAndModel }
    function Get_Brand: UnicodeString;
    function Get_Model: IXMLModel;
    procedure Set_Brand(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasuringEquipment }

  TXMLMeasuringEquipment = class(TXMLNode, IXMLMeasuringEquipment)
  private
    FMeasuringEquipmentCode: IXMLMeasuringEquipmentCodeList;
    FCodeValue: IXMLCodeValueList;
    FMeasuringEquipmentDescription: IXMLS72List;
  protected
    { IXMLMeasuringEquipment }
    function Get_MeasuringEquipmentCode: IXMLMeasuringEquipmentCodeList;
    function Get_CodeValue: IXMLCodeValueList;
    function Get_MeasuringEquipmentDescription: IXMLS72List;
    function Get_MeasurementSystem: UnicodeString;
    function Get_MeasurementModule: IXMLMeasurementModule;
    function Get_Calibration: IXMLCalibration;
    procedure Set_MeasurementSystem(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasuringEquipmentList }

  TXMLMeasuringEquipmentList = class(TXMLNodeCollection, IXMLMeasuringEquipmentList)
  protected
    { IXMLMeasuringEquipmentList }
    function Add: IXMLMeasuringEquipment;
    function Insert(const Index: Integer): IXMLMeasuringEquipment;

    function Get_Item(Index: Integer): IXMLMeasuringEquipment;
  end;

{ TXMLMeasuringEquipmentCode }

  TXMLMeasuringEquipmentCode = class(TXMLNode, IXMLMeasuringEquipmentCode)
  protected
    { IXMLMeasuringEquipmentCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLMeasuringEquipmentCodeList }

  TXMLMeasuringEquipmentCodeList = class(TXMLNodeCollection, IXMLMeasuringEquipmentCodeList)
  protected
    { IXMLMeasuringEquipmentCodeList }
    function Add: IXMLMeasuringEquipmentCode;
    function Insert(const Index: Integer): IXMLMeasuringEquipmentCode;

    function Get_Item(Index: Integer): IXMLMeasuringEquipmentCode;
  end;

{ TXMLMeasurementModule }

  TXMLMeasurementModule = class(TXMLNode, IXMLMeasurementModule)
  protected
    { IXMLMeasurementModule }
    function Get_BrandName: UnicodeString;
    function Get_ModelYear: UnicodeString;
    procedure Set_BrandName(Value: UnicodeString);
    procedure Set_ModelYear(Value: UnicodeString);
  end;

{ TXMLCalibration }

  TXMLCalibration = class(TXMLNode, IXMLCalibration)
  private
    FCalibrationDescription: IXMLS255List;
  protected
    { IXMLCalibration }
    function Get_CalibrationNumber: UnicodeString;
    function Get_CalibrationDescription: IXMLS255List;
    function Get_CalibrationDate: IXMLCalibrationDate;
    procedure Set_CalibrationNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCalibrationDate }

  TXMLCalibrationDate = class(TXMLNode, IXMLCalibrationDate)
  protected
    { IXMLCalibrationDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasuringReference }

  TXMLMeasuringReference = class(TXMLNode, IXMLMeasuringReference)
  protected
    { IXMLMeasuringReference }
    function Get_MeasuringReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_MeasuringReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLMeasuringReferenceList }

  TXMLMeasuringReferenceList = class(TXMLNodeCollection, IXMLMeasuringReferenceList)
  protected
    { IXMLMeasuringReferenceList }
    function Add: IXMLMeasuringReference;
    function Insert(const Index: Integer): IXMLMeasuringReference;

    function Get_Item(Index: Integer): IXMLMeasuringReference;
  end;

{ TXMLMeasuringCodeInfo }

  TXMLMeasuringCodeInfo = class(TXMLCodeInfo, IXMLMeasuringCodeInfo)
  protected
    { IXMLMeasuringCodeInfo }
    function Get_MeasuringCodeType: UnicodeString;
    procedure Set_MeasuringCodeType(Value: UnicodeString);
  end;

{ TXMLMeasuringCodeInfoList }

  TXMLMeasuringCodeInfoList = class(TXMLNodeCollection, IXMLMeasuringCodeInfoList)
  protected
    { IXMLMeasuringCodeInfoList }
    function Add: IXMLMeasuringCodeInfo;
    function Insert(const Index: Integer): IXMLMeasuringCodeInfo;

    function Get_Item(Index: Integer): IXMLMeasuringCodeInfo;
  end;

{ TXMLMeasuringCode }

  TXMLMeasuringCode = class(TXMLNode, IXMLMeasuringCode)
  protected
    { IXMLMeasuringCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLMeasuringProduct }

  TXMLMeasuringProduct = class(TXMLNode, IXMLMeasuringProduct)
  protected
    { IXMLMeasuringProduct }
    function Get_Product: IXMLProductClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasurementSpecification }

  TXMLMeasurementSpecification = class(TXMLNode, IXMLMeasurementSpecification)
  private
    FPropertySpecification: IXMLPropertySpecificationList;
    FQuantitySpecification: IXMLQuantitySpecificationList;
  protected
    { IXMLMeasurementSpecification }
    function Get_PropertySpecification: IXMLPropertySpecificationList;
    function Get_QuantitySpecification: IXMLQuantitySpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPropertySpecification }

  TXMLPropertySpecification = class(TXMLNode, IXMLPropertySpecification)
  private
    FPropertySubSpecification: IXMLPropertySubSpecificationList;
  protected
    { IXMLPropertySpecification }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_ValueType: UnicodeString;
    function Get_UOM: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    function Get_PropertySubSpecification: IXMLPropertySubSpecificationList;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_ValueType(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPropertySpecificationList }

  TXMLPropertySpecificationList = class(TXMLNodeCollection, IXMLPropertySpecificationList)
  protected
    { IXMLPropertySpecificationList }
    function Add: IXMLPropertySpecification;
    function Insert(const Index: Integer): IXMLPropertySpecification;

    function Get_Item(Index: Integer): IXMLPropertySpecification;
  end;

{ TXMLPropertySubSpecification }

  TXMLPropertySubSpecification = class(TXMLNode, IXMLPropertySubSpecification)
  protected
    { IXMLPropertySubSpecification }
    function Get_PropertyType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_ValueType: UnicodeString;
    function Get_UOM: UnicodeString;
    function Get_ItemType: UnicodeString;
    function Get_PositionOnItem: IXMLPositionOnItem;
    procedure Set_PropertyType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_ValueType(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
    procedure Set_ItemType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPropertySubSpecificationList }

  TXMLPropertySubSpecificationList = class(TXMLNodeCollection, IXMLPropertySubSpecificationList)
  protected
    { IXMLPropertySubSpecificationList }
    function Add: IXMLPropertySubSpecification;
    function Insert(const Index: Integer): IXMLPropertySubSpecification;

    function Get_Item(Index: Integer): IXMLPropertySubSpecification;
  end;

{ TXMLQuantitySpecification }

  TXMLQuantitySpecification = class(TXMLNode, IXMLQuantitySpecification)
  protected
    { IXMLQuantitySpecification }
    function Get_QuantityType: UnicodeString;
    function Get_QuantityTypeContext: UnicodeString;
    function Get_AdjustmentType: UnicodeString;
    function Get_MeasuringMethodType: UnicodeString;
    function Get_MeasuringAgency: UnicodeString;
    function Get_MeasuringMethod: UnicodeString;
    function Get_UOM: UnicodeString;
    procedure Set_QuantityType(Value: UnicodeString);
    procedure Set_QuantityTypeContext(Value: UnicodeString);
    procedure Set_AdjustmentType(Value: UnicodeString);
    procedure Set_MeasuringMethodType(Value: UnicodeString);
    procedure Set_MeasuringAgency(Value: UnicodeString);
    procedure Set_MeasuringMethod(Value: UnicodeString);
    procedure Set_UOM(Value: UnicodeString);
  end;

{ TXMLQuantitySpecificationList }

  TXMLQuantitySpecificationList = class(TXMLNodeCollection, IXMLQuantitySpecificationList)
  protected
    { IXMLQuantitySpecificationList }
    function Add: IXMLQuantitySpecification;
    function Insert(const Index: Integer): IXMLQuantitySpecification;

    function Get_Item(Index: Integer): IXMLQuantitySpecification;
  end;

{ TXMLDeliveryMessageSummary }

  TXMLDeliveryMessageSummary = class(TXMLNode, IXMLDeliveryMessageSummary)
  private
    FTotalQuantity: IXMLTotalQuantityList;
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FTermsAndDisclaimers: IXMLTermsAndDisclaimersList;
  protected
    { IXMLDeliveryMessageSummary }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryPlanningBucket }

  TXMLDeliveryPlanningBucket = class(TXMLNode, IXMLDeliveryPlanningBucket)
  private
    FPlanningOutcome: IXMLPlanningOutcomeList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDeliveryPlanningBucket }
    function Get_BucketStatusType: UnicodeString;
    function Get_TimePeriod: IXMLTimePeriod;
    function Get_PlanningOutcome: IXMLPlanningOutcomeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BucketStatusType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTimePeriod }

  TXMLTimePeriod = class(TXMLNode, IXMLTimePeriod)
  protected
    { IXMLTimePeriod }
    function Get_PeriodType: UnicodeString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    function Get_Week: UnicodeString;
    procedure Set_PeriodType(Value: UnicodeString);
    procedure Set_Time(Value: UnicodeString);
    procedure Set_Week(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlanningOutcome }

  TXMLPlanningOutcome = class(TXMLNode, IXMLPlanningOutcome)
  private
    FPlanningPropertyValue: IXMLPlanningPropertyValueList;
    FDeviationReason: IXMLDeviationReasonList;
    FPlanningReferenceInformation: IXMLPlanningReferenceInformationList;
  protected
    { IXMLPlanningOutcome }
    function Get_PlanningOutcomeType: UnicodeString;
    function Get_PlanningOutcomePeriodType: UnicodeString;
    function Get_PlanningOutcomeContextType: UnicodeString;
    function Get_TransportModeType: UnicodeString;
    function Get_TransportContextType: UnicodeString;
    function Get_IsTotal: UnicodeString;
    function Get_QuantityInformation: IXMLQuantityInformation;
    function Get_PlanningPropertyValue: IXMLPlanningPropertyValueList;
    function Get_DeviationReason: IXMLDeviationReasonList;
    function Get_PlanningReferenceInformation: IXMLPlanningReferenceInformationList;
    function Get_ResourceInformation: IXMLResourceInformation;
    procedure Set_PlanningOutcomeType(Value: UnicodeString);
    procedure Set_PlanningOutcomePeriodType(Value: UnicodeString);
    procedure Set_PlanningOutcomeContextType(Value: UnicodeString);
    procedure Set_TransportModeType(Value: UnicodeString);
    procedure Set_TransportContextType(Value: UnicodeString);
    procedure Set_IsTotal(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlanningOutcomeList }

  TXMLPlanningOutcomeList = class(TXMLNodeCollection, IXMLPlanningOutcomeList)
  protected
    { IXMLPlanningOutcomeList }
    function Add: IXMLPlanningOutcome;
    function Insert(const Index: Integer): IXMLPlanningOutcome;

    function Get_Item(Index: Integer): IXMLPlanningOutcome;
  end;

{ TXMLPlanningPropertyValue }

  TXMLPlanningPropertyValue = class(TXMLNode, IXMLPlanningPropertyValue)
  protected
    { IXMLPlanningPropertyValue }
    function Get_PlanningPropertyType: UnicodeString;
    function Get_BinaryValue: UnicodeString;
    function Get_BooleanValue: Boolean;
    function Get_DateTimeValue: UnicodeString;
    function Get_NumericValue: IXMLDetailMeasurement;
    function Get_TextValue: UnicodeString;
    procedure Set_PlanningPropertyType(Value: UnicodeString);
    procedure Set_BinaryValue(Value: UnicodeString);
    procedure Set_BooleanValue(Value: Boolean);
    procedure Set_DateTimeValue(Value: UnicodeString);
    procedure Set_TextValue(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlanningPropertyValueList }

  TXMLPlanningPropertyValueList = class(TXMLNodeCollection, IXMLPlanningPropertyValueList)
  protected
    { IXMLPlanningPropertyValueList }
    function Add: IXMLPlanningPropertyValue;
    function Insert(const Index: Integer): IXMLPlanningPropertyValue;

    function Get_Item(Index: Integer): IXMLPlanningPropertyValue;
  end;

{ TXMLDeviationReason }

  TXMLDeviationReason = class(TXMLNode, IXMLDeviationReason)
  private
    FDeviationReasonDescription: IXMLS255List;
  protected
    { IXMLDeviationReason }
    function Get_DeviationReasonCode: IXMLDeviationReasonCode;
    function Get_DeviationReasonDescription: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeviationReasonList }

  TXMLDeviationReasonList = class(TXMLNodeCollection, IXMLDeviationReasonList)
  protected
    { IXMLDeviationReasonList }
    function Add: IXMLDeviationReason;
    function Insert(const Index: Integer): IXMLDeviationReason;

    function Get_Item(Index: Integer): IXMLDeviationReason;
  end;

{ TXMLDeviationReasonCode }

  TXMLDeviationReasonCode = class(TXMLNode, IXMLDeviationReasonCode)
  protected
    { IXMLDeviationReasonCode }
    function Get_Agency: UnicodeString;
    procedure Set_Agency(Value: UnicodeString);
  end;

{ TXMLPlanningReferenceInformation }

  TXMLPlanningReferenceInformation = class(TXMLNode, IXMLPlanningReferenceInformation)
  protected
    { IXMLPlanningReferenceInformation }
    function Get_Document: IXMLInvoiceDocument;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlanningReferenceInformationList }

  TXMLPlanningReferenceInformationList = class(TXMLNodeCollection, IXMLPlanningReferenceInformationList)
  protected
    { IXMLPlanningReferenceInformationList }
    function Add: IXMLPlanningReferenceInformation;
    function Insert(const Index: Integer): IXMLPlanningReferenceInformation;

    function Get_Item(Index: Integer): IXMLPlanningReferenceInformation;
  end;

{ TXMLDocument }

  TXMLDocument = class(TXMLNode, IXMLInvoiceDocument)
  private
    FDocumentReference: IXMLDocumentReferenceList;
  protected
    { IXMLDocument }
    function Get_DocumentName: UnicodeString;
    function Get_DocumentType: UnicodeString;
    function Get_OtherDocumentName: UnicodeString;
    function Get_OtherDocumentType: UnicodeString;
    function Get_DocumentNumber: UnicodeString;
    function Get_DocumentVersionNumber: UnicodeString;
    function Get_DocumentDate: IXMLDocumentDate;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DocumentReference: IXMLDocumentReferenceList;
    procedure Set_DocumentName(Value: UnicodeString);
    procedure Set_DocumentType(Value: UnicodeString);
    procedure Set_OtherDocumentName(Value: UnicodeString);
    procedure Set_OtherDocumentType(Value: UnicodeString);
    procedure Set_DocumentNumber(Value: UnicodeString);
    procedure Set_DocumentVersionNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentDate }

  TXMLDocumentDate = class(TXMLNode, IXMLDocumentDate)
  protected
    { IXMLDocumentDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliverySchedule }

  TXMLDeliverySchedule = class(TXMLNode, IXMLDeliverySchedule)
  private
    FDeliveryDateWindow: IXMLDeliveryDateWindowList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
    FDeliveryLeg: IXMLDeliveryLegList;
    FDeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDeliverySchedule }
    function Get_DeliveryLineNumber: LongWord;
    function Get_ProductionStatus: IXMLProductionStatus;
    function Get_DeliveryStatus: IXMLDeliveryStatus;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_DeliveryLeg: IXMLDeliveryLegList;
    function Get_DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DeliveryLineNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryScheduleList }

  TXMLDeliveryScheduleList = class(TXMLNodeCollection, IXMLDeliveryScheduleList)
  protected
    { IXMLDeliveryScheduleList }
    function Add: IXMLDeliverySchedule;
    function Insert(const Index: Integer): IXMLDeliverySchedule;

    function Get_Item(Index: Integer): IXMLDeliverySchedule;
  end;

{ TXMLProductionStatus }

  TXMLProductionStatus = class(TXMLNode, IXMLProductionStatus)
  protected
    { IXMLProductionStatus }
    function Get_ProductionStatusType: UnicodeString;
    function Get_ProductionLastDateOfChange: IXMLProductionLastDateOfChange;
    procedure Set_ProductionStatusType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductionLastDateOfChange }

  TXMLProductionLastDateOfChange = class(TXMLNode, IXMLProductionLastDateOfChange)
  protected
    { IXMLProductionLastDateOfChange }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryStatus }

  TXMLDeliveryStatus = class(TXMLNode, IXMLDeliveryStatus)
  protected
    { IXMLDeliveryStatus }
    function Get_DeliveryStatusType: UnicodeString;
    function Get_DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange;
    procedure Set_DeliveryStatusType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryLastDateOfChange }

  TXMLDeliveryLastDateOfChange = class(TXMLNode, IXMLDeliveryLastDateOfChange)
  protected
    { IXMLDeliveryLastDateOfChange }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryScheduleReference }

  TXMLDeliveryScheduleReference = class(TXMLNode, IXMLDeliveryScheduleReference)
  protected
    { IXMLDeliveryScheduleReference }
    function Get_DeliveryScheduleReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_DeliveryScheduleReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLDeliveryScheduleReferenceList }

  TXMLDeliveryScheduleReferenceList = class(TXMLNodeCollection, IXMLDeliveryScheduleReferenceList)
  protected
    { IXMLDeliveryScheduleReferenceList }
    function Add: IXMLDeliveryScheduleReference;
    function Insert(const Index: Integer): IXMLDeliveryScheduleReference;

    function Get_Item(Index: Integer): IXMLDeliveryScheduleReference;
  end;

{ TXMLGoodsReceiptHeader }

  TXMLGoodsReceiptHeader = class(TXMLNode, IXMLGoodsReceiptHeader)
  private
    FGoodsReceiptReference: IXMLGoodsReceiptReferenceList;
    FOtherParty: IXMLTypedPartyList;
    FReceiverParty: IXMLTypedPartyList;
    FTransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    FTransportationComment: IXMLTransportationCommentList;
  protected
    { IXMLGoodsReceiptHeader }
    function Get_GoodsReceiptHeaderAcceptance: UnicodeString;
    function Get_GoodsReceiptNumber: UnicodeString;
    function Get_GoodsReceiptIssueDate: IXMLGoodsReceiptIssueDate;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_GoodsReceiptArrivalDate: IXMLGoodsReceiptArrivalDate;
    function Get_TimePeriod: IXMLTimePeriod;
    function Get_GoodsReceiptUnloadDate: IXMLGoodsReceiptUnloadDate;
    function Get_GoodsReceiptReference: IXMLGoodsReceiptReferenceList;
    function Get_DeliveryMessageNumber: UnicodeString;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_OtherDate: IXMLOtherDate;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_CarrierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportationComment: IXMLTransportationCommentList;
    procedure Set_GoodsReceiptHeaderAcceptance(Value: UnicodeString);
    procedure Set_GoodsReceiptNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    procedure Set_DeliveryMessageNumber(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsReceiptIssueDate }

  TXMLGoodsReceiptIssueDate = class(TXMLNode, IXMLGoodsReceiptIssueDate)
  protected
    { IXMLGoodsReceiptIssueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsReceiptArrivalDate }

  TXMLGoodsReceiptArrivalDate = class(TXMLNode, IXMLGoodsReceiptArrivalDate)
  protected
    { IXMLGoodsReceiptArrivalDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsReceiptUnloadDate }

  TXMLGoodsReceiptUnloadDate = class(TXMLNode, IXMLGoodsReceiptUnloadDate)
  protected
    { IXMLGoodsReceiptUnloadDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsReceiptReference }

  TXMLGoodsReceiptReference = class(TXMLNode, IXMLGoodsReceiptReference)
  protected
    { IXMLGoodsReceiptReference }
    function Get_GoodsReceiptReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_GoodsReceiptReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLGoodsReceiptReferenceList }

  TXMLGoodsReceiptReferenceList = class(TXMLNodeCollection, IXMLGoodsReceiptReferenceList)
  protected
    { IXMLGoodsReceiptReferenceList }
    function Add: IXMLGoodsReceiptReference;
    function Insert(const Index: Integer): IXMLGoodsReceiptReference;

    function Get_Item(Index: Integer): IXMLGoodsReceiptReference;
  end;

{ TXMLTransportationComment }

  TXMLTransportationComment = class(TXMLNode, IXMLTransportationComment)
  protected
    { IXMLTransportationComment }
    function Get_AdditionalText: UnicodeString;
    procedure Set_AdditionalText(Value: UnicodeString);
  end;

{ TXMLTransportationCommentList }

  TXMLTransportationCommentList = class(TXMLNodeCollection, IXMLTransportationCommentList)
  protected
    { IXMLTransportationCommentList }
    function Add: IXMLTransportationComment;
    function Insert(const Index: Integer): IXMLTransportationComment;

    function Get_Item(Index: Integer): IXMLTransportationComment;
  end;

{ TXMLGoodsReceiptLineItem }

  TXMLGoodsReceiptLineItem = class(TXMLNode, IXMLGoodsReceiptLineItem)
  private
    FGoodsReceiptReference: IXMLGoodsReceiptReferenceList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FGoodsReceiptPackage: IXMLGoodsReceiptPackageList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLGoodsReceiptLineItem }
    function Get_GoodsReceiptAcceptance: UnicodeString;
    function Get_GoodsReceivedRejectedType: UnicodeString;
    function Get_GoodsReceiptLineItemNumber: LongWord;
    function Get_DeliveryMessageLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_MillParty: IXMLParty;
    function Get_GoodsReceiptReference: IXMLGoodsReceiptReferenceList;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_NumberOfGoodsReceiptPackages: LongWord;
    function Get_GoodsReceiptPackage: IXMLGoodsReceiptPackageList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_GoodsReceiptAcceptance(Value: UnicodeString);
    procedure Set_GoodsReceivedRejectedType(Value: UnicodeString);
    procedure Set_GoodsReceiptLineItemNumber(Value: LongWord);
    procedure Set_DeliveryMessageLineItemNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    procedure Set_NumberOfGoodsReceiptPackages(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsReceiptPackage }

  TXMLGoodsReceiptPackage = class(TXMLNode, IXMLGoodsReceiptPackage)
  protected
    { IXMLGoodsReceiptPackage }
    function Get_GoodsReceiptAcceptance: UnicodeString;
    function Get_VarianceType: UnicodeString;
    function Get_GoodsReceivedRejectedType: UnicodeString;
    function Get_PackageInformation: IXMLPackageInformationClass;
    procedure Set_GoodsReceiptAcceptance(Value: UnicodeString);
    procedure Set_VarianceType(Value: UnicodeString);
    procedure Set_GoodsReceivedRejectedType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsReceiptPackageList }

  TXMLGoodsReceiptPackageList = class(TXMLNodeCollection, IXMLGoodsReceiptPackageList)
  protected
    { IXMLGoodsReceiptPackageList }
    function Add: IXMLGoodsReceiptPackage;
    function Insert(const Index: Integer): IXMLGoodsReceiptPackage;

    function Get_Item(Index: Integer): IXMLGoodsReceiptPackage;
  end;

{ TXMLGoodsReceiptSummary }

  TXMLGoodsReceiptSummary = class(TXMLNode, IXMLGoodsReceiptSummary)
  private
    FTotalQuantity: IXMLTotalQuantityList;
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FTermsAndDisclaimers: IXMLTermsAndDisclaimersList;
  protected
    { IXMLGoodsReceiptSummary }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasurementWithText }

  TXMLMeasurementWithText = class(TXMLNode, IXMLMeasurementWithText)
  protected
    { IXMLMeasurementWithText }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: UnicodeString;
    procedure Set_AdditionalText(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlanningOutcomeBucket }

  TXMLPlanningOutcomeBucket = class(TXMLNode, IXMLPlanningOutcomeBucket)
  private
    FPlanningOutcome: IXMLPlanningOutcomeList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPlanningOutcomeBucket }
    function Get_BucketStatusType: UnicodeString;
    function Get_TimePeriod: IXMLTimePeriod;
    function Get_PlanningOutcome: IXMLPlanningOutcomeList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BucketStatusType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLScaleHouse }

  TXMLScaleHouse = class(TXMLNode, IXMLScaleHouse)
  protected
    { IXMLScaleHouse }
    function Get_ScaleHouseID: UnicodeString;
    function Get_ScaleHouseName: UnicodeString;
    function Get_ScalerID: UnicodeString;
    function Get_ScalerName: UnicodeString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantity;
    procedure Set_ScaleHouseID(Value: UnicodeString);
    procedure Set_ScaleHouseName(Value: UnicodeString);
    procedure Set_ScalerID(Value: UnicodeString);
    procedure Set_ScalerName(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsHeader }

  TXMLShippingInstructionsHeader = class(TXMLNode, IXMLShippingInstructionsHeader)
  private
    FOtherParty: IXMLTypedPartyList;
    FReceiverParty: IXMLTypedPartyList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLShippingInstructionsHeader }
    function Get_ShippingInstructionsHeaderStatusType: UnicodeString;
    function Get_ShippingInstructionsInformation: IXMLShippingInstructionsInformation;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ShippingInstructionsHeaderStatusType(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsInformation }

  TXMLShippingInstructionsInformation = class(TXMLNode, IXMLShippingInstructionsInformation)
  private
    FShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
  protected
    { IXMLShippingInstructionsInformation }
    function Get_ShippingInstructionsNumber: UnicodeString;
    function Get_ShippingInstructionsIssuedDate: IXMLShippingInstructionsIssuedDate;
    function Get_ShippingInstructionsConfirmationIssuedDate: IXMLShippingInstructionsConfirmationIssuedDate;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_TransactionHistoryConfirmationNumber: LongWord;
    function Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    procedure Set_ShippingInstructionsNumber(Value: UnicodeString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    procedure Set_TransactionHistoryConfirmationNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsIssuedDate }

  TXMLShippingInstructionsIssuedDate = class(TXMLNode, IXMLShippingInstructionsIssuedDate)
  protected
    { IXMLShippingInstructionsIssuedDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsConfirmationIssuedDate }

  TXMLShippingInstructionsConfirmationIssuedDate = class(TXMLNode, IXMLShippingInstructionsConfirmationIssuedDate)
  protected
    { IXMLShippingInstructionsConfirmationIssuedDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: UnicodeString;
    procedure Set_Time(Value: UnicodeString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsReference }

  TXMLShippingInstructionsReference = class(TXMLNode, IXMLShippingInstructionsReference)
  protected
    { IXMLShippingInstructionsReference }
    function Get_ShippingInstructionsReferenceType: UnicodeString;
    function Get_AssignedBy: UnicodeString;
    procedure Set_ShippingInstructionsReferenceType(Value: UnicodeString);
    procedure Set_AssignedBy(Value: UnicodeString);
  end;

{ TXMLShippingInstructionsReferenceList }

  TXMLShippingInstructionsReferenceList = class(TXMLNodeCollection, IXMLShippingInstructionsReferenceList)
  protected
    { IXMLShippingInstructionsReferenceList }
    function Add: IXMLShippingInstructionsReference;
    function Insert(const Index: Integer): IXMLShippingInstructionsReference;

    function Get_Item(Index: Integer): IXMLShippingInstructionsReference;
  end;

{ TXMLShippingInstructionsLineItemByProduct }

  TXMLShippingInstructionsLineItemByProduct = class(TXMLNode, IXMLShippingInstructionsLineItemByProduct)
  private
    FShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    FShipToInformation: IXMLShipToInformationList;
    FPackagingCharacteristics: IXMLPackagingCharacteristicsList;
    FAdditionalText: IXMLS255List;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
  protected
    { IXMLShippingInstructionsLineItemByProduct }
    function Get_ShippingInstructionsLineItemStatusType: UnicodeString;
    function Get_IsThirdPartyShipment: UnicodeString;
    function Get_ShippingInstructionsLineItemNumber: LongWord;
    function Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    function Get_ShipToInformation: IXMLShipToInformationList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    procedure Set_ShippingInstructionsLineItemStatusType(Value: UnicodeString);
    procedure Set_IsThirdPartyShipment(Value: UnicodeString);
    procedure Set_ShippingInstructionsLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShipToInformation }

  TXMLShipToInformation = class(TXMLNode, IXMLShipToInformation)
  private
    FDeliverySchedule: IXMLDeliveryScheduleList;
  protected
    { IXMLShipToInformation }
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DeliverySchedule: IXMLDeliveryScheduleList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShipToInformationList }

  TXMLShipToInformationList = class(TXMLNodeCollection, IXMLShipToInformationList)
  protected
    { IXMLShipToInformationList }
    function Add: IXMLShipToInformation;
    function Insert(const Index: Integer): IXMLShipToInformation;

    function Get_Item(Index: Integer): IXMLShipToInformation;
  end;

{ TXMLShippingInstructionsLineItemByShipTo }

  TXMLShippingInstructionsLineItemByShipTo = class(TXMLNode, IXMLShippingInstructionsLineItemByShipTo)
  private
    FShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    FOtherDate: IXMLOtherDateList;
    FDeliverySchedule: IXMLDeliveryScheduleList;
    FPackagingCharacteristics: IXMLPackagingCharacteristicsList;
    FAdditionalText: IXMLS255List;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
  protected
    { IXMLShippingInstructionsLineItemByShipTo }
    function Get_ShippingInstructionsLineItemStatusType: UnicodeString;
    function Get_ShippingInstructionsLineItemNumber: LongWord;
    function Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
    function Get_Product: IXMLProductClass;
    function Get_ShippingInstructionsPurchaseOrderLineItem: IXMLShippingInstructionsPurchaseOrderLineItem;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_DeliverySchedule: IXMLDeliveryScheduleList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    procedure Set_ShippingInstructionsLineItemStatusType(Value: UnicodeString);
    procedure Set_ShippingInstructionsLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsPurchaseOrderLineItem }

  TXMLShippingInstructionsPurchaseOrderLineItem = class(TXMLNode, IXMLShippingInstructionsPurchaseOrderLineItem)
  private
    FProductIdentification: IXMLProductIdentificationList;
    FClassification: IXMLClassificationList;
  protected
    { IXMLShippingInstructionsPurchaseOrderLineItem }
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PackageIdentifier: IXMLPackageIdentifier;
    function Get_ProductIdentification: IXMLProductIdentificationList;
    function Get_Classification: IXMLClassificationList;
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackageIdentifier }

  TXMLPackageIdentifier = class(TXMLNode, IXMLPackageIdentifier)
  protected
    { IXMLPackageIdentifier }
    function Get_Identifier: IXMLIdentifierS60;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShippingInstructionsSummary }

  TXMLShippingInstructionsSummary = class(TXMLNode, IXMLShippingInstructionsSummary)
  private
    FTotalQuantity: IXMLTotalQuantityList;
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FTermsAndDisclaimers: IXMLTermsAndDisclaimersList;
  protected
    { IXMLShippingInstructionsSummary }
    function Get_TotalNumberOfLineItems: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfLineItems(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTrimSize }

  TXMLTrimSize = class(TXMLNode, IXMLTrimSize)
  protected
    { IXMLTrimSize }
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_BookBlockBulk: IXMLBookBlockBulk;
    function Get_SpineSize: IXMLSpineSize;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBookBlockBulk }

  TXMLBookBlockBulk = class(TXMLNode, IXMLBookBlockBulk)
  protected
    { IXMLBookBlockBulk }
    function Get_Value: IXMLValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSpineSize }

  TXMLSpineSize = class(TXMLNode, IXMLSpineSize)
  protected
    { IXMLSpineSize }
    function Get_Value: IXMLValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBSpeciesTypeList }

  TXMLPlywoodOSBSpeciesTypeList = class(TXMLNodeCollection, IXMLPlywoodOSBSpeciesTypeList)
  protected
    { IXMLPlywoodOSBSpeciesTypeList }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLS60List }

  TXMLS60List = class(TXMLNodeCollection, IXMLS60List)
  protected
    { IXMLS60List }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLS72List }

  TXMLS72List = class(TXMLNodeCollection, IXMLS72List)
  protected
    { IXMLS72List }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLS20List }

  TXMLS20List = class(TXMLNodeCollection, IXMLS20List)
  protected
    { IXMLS20List }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLNni1List }

  TXMLNni1List = class(TXMLNodeCollection, IXMLNni1List)
  protected
    { IXMLNni1List }
    function Add(const Value: LongWord): IXMLNode;
    function Insert(const Index: Integer; const Value: LongWord): IXMLNode;

    function Get_Item(Index: Integer): LongWord;
  end;

{ TXMLReamTypeList }

  TXMLReamTypeList = class(TXMLNodeCollection, IXMLReamTypeList)
  protected
    { IXMLReamTypeList }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLRoadAvailabilityTypeList }

  TXMLRoadAvailabilityTypeList = class(TXMLNodeCollection, IXMLRoadAvailabilityTypeList)
  protected
    { IXMLRoadAvailabilityTypeList }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLGlueExposureIDTypeList }

  TXMLGlueExposureIDTypeList = class(TXMLNodeCollection, IXMLGlueExposureIDTypeList)
  protected
    { IXMLGlueExposureIDTypeList }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLBooleanList }

  TXMLBooleanList = class(TXMLNodeCollection, IXMLBooleanList)
  protected
    { IXMLBooleanList }
    function Add(const Value: Boolean): IXMLNode;
    function Insert(const Index: Integer; const Value: Boolean): IXMLNode;

    function Get_Item(Index: Integer): Boolean;
  end;

{ TXMLS30List }

  TXMLS30List = class(TXMLNodeCollection, IXMLS30List)
  protected
    { IXMLS30List }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLS255List }

  TXMLS255List = class(TXMLNodeCollection, IXMLS255List)
  protected
    { IXMLS255List }
    function Add(const Value: UnicodeString): IXMLNode;
    function Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ Global Functions }

function GetInvoiceWood(Doc: IXMLDocument): IXMLInvoiceWood;
function LoadInvoiceWood(const FileName: string): IXMLInvoiceWood;
function NewInvoiceWood: IXMLInvoiceWood;

const
  TargetNamespace = '';

implementation

uses System.Variants, Xml.xmlutil;

{ Global Functions }

function GetInvoiceWood(Doc: IXMLDocument): IXMLInvoiceWood;
begin
  Result := Doc.GetDocBinding('InvoiceWood', TXMLInvoiceWood, TargetNamespace) as IXMLInvoiceWood;
end;

function LoadInvoiceWood(const FileName: string): IXMLInvoiceWood;
begin
  Result := LoadXMLDocument(FileName).GetDocBinding('InvoiceWood', TXMLInvoiceWood, TargetNamespace) as IXMLInvoiceWood;
end;

function NewInvoiceWood: IXMLInvoiceWood;
begin
  Result := NewXMLDocument.GetDocBinding('InvoiceWood', TXMLInvoiceWood, TargetNamespace) as IXMLInvoiceWood;
end;

{ TXMLInvoiceWood }

procedure TXMLInvoiceWood.AfterConstruction;
begin
  RegisterChildNode('InvoiceWoodHeader', TXMLInvoiceWoodHeader);
  RegisterChildNode('InvoiceShipment', TXMLInvoiceShipment);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('InvoiceWoodSummary', TXMLInvoiceWoodSummary);
  FInvoiceShipment := CreateCollection(TXMLInvoiceShipmentList, IXMLInvoiceShipment, 'InvoiceShipment') as IXMLInvoiceShipmentList;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  inherited;
end;

function TXMLInvoiceWood.Get_InvoiceType: UnicodeString;
begin
  Result := AttributeNodes['InvoiceType'].Text;
end;

procedure TXMLInvoiceWood.Set_InvoiceType(Value: UnicodeString);
begin
  SetAttribute('InvoiceType', Value);
end;

function TXMLInvoiceWood.Get_InvoiceContextType: UnicodeString;
begin
  Result := AttributeNodes['InvoiceContextType'].Text;
end;

procedure TXMLInvoiceWood.Set_InvoiceContextType(Value: UnicodeString);
begin
  SetAttribute('InvoiceContextType', Value);
end;

function TXMLInvoiceWood.Get_Reissued: UnicodeString;
begin
  Result := AttributeNodes['Reissued'].Text;
end;

procedure TXMLInvoiceWood.Set_Reissued(Value: UnicodeString);
begin
  SetAttribute('Reissued', Value);
end;

function TXMLInvoiceWood.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLInvoiceWood.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

function TXMLInvoiceWood.Get_InvoiceWoodHeader: IXMLInvoiceWoodHeader;
begin
  Result := ChildNodes['InvoiceWoodHeader'] as IXMLInvoiceWoodHeader;
end;

function TXMLInvoiceWood.Get_InvoiceShipment: IXMLInvoiceShipmentList;
begin
  Result := FInvoiceShipment;
end;

function TXMLInvoiceWood.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLInvoiceWood.Get_InvoiceWoodSummary: IXMLInvoiceWoodSummary;
begin
  Result := ChildNodes['InvoiceWoodSummary'] as IXMLInvoiceWoodSummary;
end;

{ TXMLInvoiceWoodHeader }

procedure TXMLInvoiceWoodHeader.AfterConstruction;
begin
  RegisterChildNode('InvoiceDate', TXMLInvoiceDate);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('InvoiceReference', TXMLInvoiceReference);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('BuyerParty', TXMLParty);
  RegisterChildNode('RemitToParty', TXMLParty);
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('SenderParty', TXMLTypedParty);
  RegisterChildNode('ReceiverParty', TXMLTypedParty);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('CarrierParty', TXMLParty);
  RegisterChildNode('TransportVehicleIdentifier', TXMLTransportVehicleIdentifier);
  RegisterChildNode('TransportUnitIdentifier', TXMLTransportUnitIdentifier);
  RegisterChildNode('Insurance', TXMLInsurance);
  RegisterChildNode('CreditDebitNoteReason', TXMLCreditDebitNoteReason);
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FInvoiceReference := CreateCollection(TXMLInvoiceReferenceList, IXMLInvoiceReference, 'InvoiceReference') as IXMLInvoiceReferenceList;
  FRemitToParty := CreateCollection(TXMLPartyList, IXMLParty, 'RemitToParty') as IXMLPartyList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FReceiverParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'ReceiverParty') as IXMLTypedPartyList;
  FLocationParty := CreateCollection(TXMLLocationPartyList, IXMLLocationParty, 'LocationParty') as IXMLLocationPartyList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLInvoiceWoodHeader.Get_InvoiceNumber: UnicodeString;
begin
  Result := ChildNodes['InvoiceNumber'].Text;
end;

procedure TXMLInvoiceWoodHeader.Set_InvoiceNumber(Value: UnicodeString);
begin
  ChildNodes['InvoiceNumber'].NodeValue := Value;
end;

function TXMLInvoiceWoodHeader.Get_InvoiceDate: IXMLInvoiceDate;
begin
  Result := ChildNodes['InvoiceDate'] as IXMLInvoiceDate;
end;

function TXMLInvoiceWoodHeader.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLInvoiceWoodHeader.Get_InvoiceReference: IXMLInvoiceReferenceList;
begin
  Result := FInvoiceReference;
end;

function TXMLInvoiceWoodHeader.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLInvoiceWoodHeader.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLInvoiceWoodHeader.Get_BuyerParty: IXMLParty;
begin
  Result := ChildNodes['BuyerParty'] as IXMLParty;
end;

function TXMLInvoiceWoodHeader.Get_RemitToParty: IXMLPartyList;
begin
  Result := FRemitToParty;
end;

function TXMLInvoiceWoodHeader.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLInvoiceWoodHeader.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLInvoiceWoodHeader.Get_SenderParty: IXMLTypedParty;
begin
  Result := ChildNodes['SenderParty'] as IXMLTypedParty;
end;

function TXMLInvoiceWoodHeader.Get_ReceiverParty: IXMLTypedPartyList;
begin
  Result := FReceiverParty;
end;

function TXMLInvoiceWoodHeader.Get_LocationParty: IXMLLocationPartyList;
begin
  Result := FLocationParty;
end;

function TXMLInvoiceWoodHeader.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLInvoiceWoodHeader.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLInvoiceWoodHeader.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLInvoiceWoodHeader.Get_CarrierParty: IXMLParty;
begin
  Result := ChildNodes['CarrierParty'] as IXMLParty;
end;

function TXMLInvoiceWoodHeader.Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifier;
begin
  Result := ChildNodes['TransportVehicleIdentifier'] as IXMLTransportVehicleIdentifier;
end;

function TXMLInvoiceWoodHeader.Get_TransportUnitIdentifier: IXMLTransportUnitIdentifier;
begin
  Result := ChildNodes['TransportUnitIdentifier'] as IXMLTransportUnitIdentifier;
end;

function TXMLInvoiceWoodHeader.Get_Insurance: IXMLInsurance;
begin
  Result := ChildNodes['Insurance'] as IXMLInsurance;
end;

function TXMLInvoiceWoodHeader.Get_CreditDebitNoteReason: IXMLCreditDebitNoteReason;
begin
  Result := ChildNodes['CreditDebitNoteReason'] as IXMLCreditDebitNoteReason;
end;

function TXMLInvoiceWoodHeader.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLInvoiceDate }

procedure TXMLInvoiceDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLInvoiceDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLInvoiceDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLInvoiceDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDateBasis }

function TXMLDateBasis.Get_Year: UnicodeString;
begin
  Result := ChildNodes['Year'].Text;
end;

procedure TXMLDateBasis.Set_Year(Value: UnicodeString);
begin
  ChildNodes['Year'].NodeValue := Value;
end;

function TXMLDateBasis.Get_Month: LongWord;
begin
  Result := ChildNodes['Month'].NodeValue;
end;

procedure TXMLDateBasis.Set_Month(Value: LongWord);
begin
  ChildNodes['Month'].NodeValue := Value;
end;

function TXMLDateBasis.Get_Day: LongWord;
begin
  Result := ChildNodes['Day'].NodeValue;
end;

procedure TXMLDateBasis.Set_Day(Value: LongWord);
begin
  ChildNodes['Day'].NodeValue := Value;
end;

{ TXMLOtherDate }

procedure TXMLOtherDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  inherited;
end;

function TXMLOtherDate.Get_DateType: UnicodeString;
begin
  Result := AttributeNodes['DateType'].Text;
end;

procedure TXMLOtherDate.Set_DateType(Value: UnicodeString);
begin
  SetAttribute('DateType', Value);
end;

function TXMLOtherDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLOtherDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLOtherDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLOtherDate.Get_Year: UnicodeString;
begin
  Result := ChildNodes['Year'].Text;
end;

procedure TXMLOtherDate.Set_Year(Value: UnicodeString);
begin
  ChildNodes['Year'].NodeValue := Value;
end;

function TXMLOtherDate.Get_YearMonth: UnicodeString;
begin
  Result := ChildNodes['YearMonth'].Text;
end;

procedure TXMLOtherDate.Set_YearMonth(Value: UnicodeString);
begin
  ChildNodes['YearMonth'].NodeValue := Value;
end;

function TXMLOtherDate.Get_Week: UnicodeString;
begin
  Result := ChildNodes['Week'].Text;
end;

procedure TXMLOtherDate.Set_Week(Value: UnicodeString);
begin
  ChildNodes['Week'].NodeValue := Value;
end;

function TXMLOtherDate.Get_DateTimeRange: IXMLDateTimeRange;
begin
  Result := ChildNodes['DateTimeRange'] as IXMLDateTimeRange;
end;

{ TXMLOtherDateList }

function TXMLOtherDateList.Add: IXMLOtherDate;
begin
  Result := AddItem(-1) as IXMLOtherDate;
end;

function TXMLOtherDateList.Insert(const Index: Integer): IXMLOtherDate;
begin
  Result := AddItem(Index) as IXMLOtherDate;
end;

function TXMLOtherDateList.Get_Item(Index: Integer): IXMLOtherDate;
begin
  Result := List[Index] as IXMLOtherDate;
end;

{ TXMLDateTimeRange }

procedure TXMLDateTimeRange.AfterConstruction;
begin
  RegisterChildNode('DateTimeFrom', TXMLDateTimeFrom);
  RegisterChildNode('DateTimeTo', TXMLDateTimeTo);
  inherited;
end;

function TXMLDateTimeRange.Get_DateTimeFrom: IXMLDateTimeFrom;
begin
  Result := ChildNodes['DateTimeFrom'] as IXMLDateTimeFrom;
end;

function TXMLDateTimeRange.Get_DateTimeTo: IXMLDateTimeTo;
begin
  Result := ChildNodes['DateTimeTo'] as IXMLDateTimeTo;
end;

{ TXMLDateTimeRangeList }

function TXMLDateTimeRangeList.Add: IXMLDateTimeRange;
begin
  Result := AddItem(-1) as IXMLDateTimeRange;
end;

function TXMLDateTimeRangeList.Insert(const Index: Integer): IXMLDateTimeRange;
begin
  Result := AddItem(Index) as IXMLDateTimeRange;
end;

function TXMLDateTimeRangeList.Get_Item(Index: Integer): IXMLDateTimeRange;
begin
  Result := List[Index] as IXMLDateTimeRange;
end;

{ TXMLDateTimeFrom }

procedure TXMLDateTimeFrom.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateTimeFrom.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateTimeFrom.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateTimeFrom.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDateTimeTo }

procedure TXMLDateTimeTo.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateTimeTo.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateTimeTo.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateTimeTo.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLInvoiceReference }

function TXMLInvoiceReference.Get_InvoiceReferenceType: UnicodeString;
begin
  Result := AttributeNodes['InvoiceReferenceType'].Text;
end;

procedure TXMLInvoiceReference.Set_InvoiceReferenceType(Value: UnicodeString);
begin
  SetAttribute('InvoiceReferenceType', Value);
end;

function TXMLInvoiceReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLInvoiceReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLInvoiceReferenceList }

function TXMLInvoiceReferenceList.Add: IXMLInvoiceReference;
begin
  Result := AddItem(-1) as IXMLInvoiceReference;
end;

function TXMLInvoiceReferenceList.Insert(const Index: Integer): IXMLInvoiceReference;
begin
  Result := AddItem(Index) as IXMLInvoiceReference;
end;

function TXMLInvoiceReferenceList.Get_Item(Index: Integer): IXMLInvoiceReference;
begin
  Result := List[Index] as IXMLInvoiceReference;
end;

{ TXMLParty }

procedure TXMLParty.AfterConstruction;
begin
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('NameAddress', TXMLNameAddress);
  RegisterChildNode('URL', TXMLURL);
  RegisterChildNode('CommonContact', TXMLCommonContact);
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FCommonContact := CreateCollection(TXMLCommonContactList, IXMLCommonContact, 'CommonContact') as IXMLCommonContactList;
  inherited;
end;

function TXMLParty.Get_LogisticsRole: UnicodeString;
begin
  Result := AttributeNodes['LogisticsRole'].Text;
end;

procedure TXMLParty.Set_LogisticsRole(Value: UnicodeString);
begin
  SetAttribute('LogisticsRole', Value);
end;

function TXMLParty.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLParty.Get_NameAddress: IXMLNameAddress;
begin
  Result := ChildNodes['NameAddress'] as IXMLNameAddress;
end;

function TXMLParty.Get_URL: IXMLURL;
begin
  Result := ChildNodes['URL'] as IXMLURL;
end;

function TXMLParty.Get_CommonContact: IXMLCommonContactList;
begin
  Result := FCommonContact;
end;

{ TXMLPartyList }

function TXMLPartyList.Add: IXMLParty;
begin
  Result := AddItem(-1) as IXMLParty;
end;

function TXMLPartyList.Insert(const Index: Integer): IXMLParty;
begin
  Result := AddItem(Index) as IXMLParty;
end;

function TXMLPartyList.Get_Item(Index: Integer): IXMLParty;
begin
  Result := List[Index] as IXMLParty;
end;

{ TXMLPartyIdentifier }

function TXMLPartyIdentifier.Get_PartyIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['PartyIdentifierType'].Text;
end;

procedure TXMLPartyIdentifier.Set_PartyIdentifierType(Value: UnicodeString);
begin
  SetAttribute('PartyIdentifierType', Value);
end;

function TXMLPartyIdentifier.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLPartyIdentifier.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLPartyIdentifierList }

function TXMLPartyIdentifierList.Add: IXMLPartyIdentifier;
begin
  Result := AddItem(-1) as IXMLPartyIdentifier;
end;

function TXMLPartyIdentifierList.Insert(const Index: Integer): IXMLPartyIdentifier;
begin
  Result := AddItem(Index) as IXMLPartyIdentifier;
end;

function TXMLPartyIdentifierList.Get_Item(Index: Integer): IXMLPartyIdentifier;
begin
  Result := List[Index] as IXMLPartyIdentifier;
end;

{ TXMLNameAddress }

procedure TXMLNameAddress.AfterConstruction;
begin
  RegisterChildNode('OrganisationUnit', TXMLOrganisationUnit);
  RegisterChildNode('PostalCode', TXMLPostalCode);
  RegisterChildNode('Country', TXMLCountry);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  inherited;
end;

function TXMLNameAddress.Get_CommunicationRole: UnicodeString;
begin
  Result := AttributeNodes['CommunicationRole'].Text;
end;

procedure TXMLNameAddress.Set_CommunicationRole(Value: UnicodeString);
begin
  SetAttribute('CommunicationRole', Value);
end;

function TXMLNameAddress.Get_AddressRoleType: UnicodeString;
begin
  Result := AttributeNodes['AddressRoleType'].Text;
end;

procedure TXMLNameAddress.Set_AddressRoleType(Value: UnicodeString);
begin
  SetAttribute('AddressRoleType', Value);
end;

function TXMLNameAddress.Get_Name1: UnicodeString;
begin
  Result := ChildNodes['Name1'].Text;
end;

procedure TXMLNameAddress.Set_Name1(Value: UnicodeString);
begin
  ChildNodes['Name1'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Name2: UnicodeString;
begin
  Result := ChildNodes['Name2'].Text;
end;

procedure TXMLNameAddress.Set_Name2(Value: UnicodeString);
begin
  ChildNodes['Name2'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Name3: UnicodeString;
begin
  Result := ChildNodes['Name3'].Text;
end;

procedure TXMLNameAddress.Set_Name3(Value: UnicodeString);
begin
  ChildNodes['Name3'].NodeValue := Value;
end;

procedure TXMLNameAddress.Set_PostalCode(Value: IXMLPostalCode);
begin
  ChildNodes['PostalCode'].NodeValue := Value;
end;

function TXMLNameAddress.Get_OrganisationUnit: IXMLOrganisationUnit;
begin
  Result := ChildNodes['OrganisationUnit'] as IXMLOrganisationUnit;
end;

function TXMLNameAddress.Get_Address1: UnicodeString;
begin
  Result := ChildNodes['Address1'].Text;
end;

procedure TXMLNameAddress.Set_Address1(Value: UnicodeString);
begin
  ChildNodes['Address1'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Address2: UnicodeString;
begin
  Result := ChildNodes['Address2'].Text;
end;

procedure TXMLNameAddress.Set_Address2(Value: UnicodeString);
begin
  ChildNodes['Address2'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Address3: UnicodeString;
begin
  Result := ChildNodes['Address3'].Text;
end;

procedure TXMLNameAddress.Set_Address3(Value: UnicodeString);
begin
  ChildNodes['Address3'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Address4: UnicodeString;
begin
  Result := ChildNodes['Address4'].Text;
end;

procedure TXMLNameAddress.Set_Address4(Value: UnicodeString);
begin
  ChildNodes['Address4'].NodeValue := Value;
end;

function TXMLNameAddress.Get_City: UnicodeString;
begin
  Result := ChildNodes['City'].Text;
end;

procedure TXMLNameAddress.Set_City(Value: UnicodeString);
begin
  ChildNodes['City'].NodeValue := Value;
end;

function TXMLNameAddress.Get_County: UnicodeString;
begin
  Result := ChildNodes['County'].Text;
end;

procedure TXMLNameAddress.Set_County(Value: UnicodeString);
begin
  ChildNodes['County'].NodeValue := Value;
end;

function TXMLNameAddress.Get_StateOrProvince: UnicodeString;
begin
  Result := ChildNodes['StateOrProvince'].Text;
end;

procedure TXMLNameAddress.Set_StateOrProvince(Value: UnicodeString);
begin
  ChildNodes['StateOrProvince'].NodeValue := Value;
end;

function TXMLNameAddress.Get_PostalCode: IXMLPostalCode;
begin
  Result := ChildNodes['PostalCode'] as IXMLPostalCode;
end;

function TXMLNameAddress.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

function TXMLNameAddress.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

function TXMLNameAddress.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

{ TXMLOrganisationUnit }

function TXMLOrganisationUnit.Get_OrganisationUnitType: UnicodeString;
begin
  Result := AttributeNodes['OrganisationUnitType'].Text;
end;

procedure TXMLOrganisationUnit.Set_OrganisationUnitType(Value: UnicodeString);
begin
  SetAttribute('OrganisationUnitType', Value);
end;

function TXMLOrganisationUnit.Get_OrganisationUnitName: UnicodeString;
begin
  Result := ChildNodes['OrganisationUnitName'].Text;
end;

procedure TXMLOrganisationUnit.Set_OrganisationUnitName(Value: UnicodeString);
begin
  ChildNodes['OrganisationUnitName'].NodeValue := Value;
end;

function TXMLOrganisationUnit.Get_OrganisationUnitCode: UnicodeString;
begin
  Result := ChildNodes['OrganisationUnitCode'].Text;
end;

procedure TXMLOrganisationUnit.Set_OrganisationUnitCode(Value: UnicodeString);
begin
  ChildNodes['OrganisationUnitCode'].NodeValue := Value;
end;

{ TXMLPostalCode }

{ TXMLCountry }

function TXMLCountry.Get_ISOCountryCode: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCode'].Text;
end;

procedure TXMLCountry.Set_ISOCountryCode(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCode', Value);
end;

function TXMLCountry.Get_ISOCountryCodeAlpha3: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeAlpha3'].Text;
end;

procedure TXMLCountry.Set_ISOCountryCodeAlpha3(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeAlpha3', Value);
end;

function TXMLCountry.Get_ISOCountryCodeNumeric: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeNumeric'].Text;
end;

procedure TXMLCountry.Set_ISOCountryCodeNumeric(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeNumeric', Value);
end;

{ TXMLGPSCoordinates }

procedure TXMLGPSCoordinates.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  inherited;
end;

function TXMLGPSCoordinates.Get_GPSSystem: UnicodeString;
begin
  Result := AttributeNodes['GPSSystem'].Text;
end;

procedure TXMLGPSCoordinates.Set_GPSSystem(Value: UnicodeString);
begin
  SetAttribute('GPSSystem', Value);
end;

function TXMLGPSCoordinates.Get_Latitude: Double;
begin
  Result := XmlStrToFloatExt(ChildNodes['Latitude'].Text);
end;

procedure TXMLGPSCoordinates.Set_Latitude(Value: Double);
begin
  ChildNodes['Latitude'].NodeValue := Value;
end;

function TXMLGPSCoordinates.Get_Longitude: Double;
begin
  Result := XmlStrToFloatExt(ChildNodes['Longitude'].Text);
end;

procedure TXMLGPSCoordinates.Set_Longitude(Value: Double);
begin
  ChildNodes['Longitude'].NodeValue := Value;
end;

function TXMLGPSCoordinates.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

{ TXMLMeasurement }

procedure TXMLMeasurement.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLMeasurement.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLMeasurement.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLMeasurement.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLMeasurementList }

function TXMLMeasurementList.Add: IXMLMeasurement;
begin
  Result := AddItem(-1) as IXMLMeasurement;
end;

function TXMLMeasurementList.Insert(const Index: Integer): IXMLMeasurement;
begin
  Result := AddItem(Index) as IXMLMeasurement;
end;

function TXMLMeasurementList.Get_Item(Index: Integer): IXMLMeasurement;
begin
  Result := List[Index] as IXMLMeasurement;
end;

{ TXMLValue }

function TXMLValue.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLValue.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLRangeMin }

function TXMLRangeMin.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLRangeMin.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLRangeMax }

function TXMLRangeMax.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLRangeMax.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLMapCoordinates }

procedure TXMLMapCoordinates.AfterConstruction;
begin
  RegisterChildNode('Coordinates', TXMLCoordinates);
  RegisterChildNode('Altitude', TXMLMeasurement);
  FCoordinates := CreateCollection(TXMLCoordinatesList, IXMLCoordinates, 'Coordinates') as IXMLCoordinatesList;
  FAltitude := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'Altitude') as IXMLMeasurementList;
  inherited;
end;

function TXMLMapCoordinates.Get_MapReferenceSystem: UnicodeString;
begin
  Result := AttributeNodes['MapReferenceSystem'].Text;
end;

procedure TXMLMapCoordinates.Set_MapReferenceSystem(Value: UnicodeString);
begin
  SetAttribute('MapReferenceSystem', Value);
end;

function TXMLMapCoordinates.Get_MapCoordinateType: UnicodeString;
begin
  Result := AttributeNodes['MapCoordinateType'].Text;
end;

procedure TXMLMapCoordinates.Set_MapCoordinateType(Value: UnicodeString);
begin
  SetAttribute('MapCoordinateType', Value);
end;

function TXMLMapCoordinates.Get_MapAreaBorderType: UnicodeString;
begin
  Result := AttributeNodes['MapAreaBorderType'].Text;
end;

procedure TXMLMapCoordinates.Set_MapAreaBorderType(Value: UnicodeString);
begin
  SetAttribute('MapAreaBorderType', Value);
end;

function TXMLMapCoordinates.Get_Coordinates: IXMLCoordinatesList;
begin
  Result := FCoordinates;
end;

function TXMLMapCoordinates.Get_Altitude: IXMLMeasurementList;
begin
  Result := FAltitude;
end;

{ TXMLMapCoordinatesList }

function TXMLMapCoordinatesList.Add: IXMLMapCoordinates;
begin
  Result := AddItem(-1) as IXMLMapCoordinates;
end;

function TXMLMapCoordinatesList.Insert(const Index: Integer): IXMLMapCoordinates;
begin
  Result := AddItem(Index) as IXMLMapCoordinates;
end;

function TXMLMapCoordinatesList.Get_Item(Index: Integer): IXMLMapCoordinates;
begin
  Result := List[Index] as IXMLMapCoordinates;
end;

{ TXMLCoordinates }

function TXMLCoordinates.Get_CoordinateFormatType: UnicodeString;
begin
  Result := AttributeNodes['CoordinateFormatType'].Text;
end;

procedure TXMLCoordinates.Set_CoordinateFormatType(Value: UnicodeString);
begin
  SetAttribute('CoordinateFormatType', Value);
end;

function TXMLCoordinates.Get_CoordinateDisplayOrder: LongWord;
begin
  Result := AttributeNodes['CoordinateDisplayOrder'].NodeValue;
end;

procedure TXMLCoordinates.Set_CoordinateDisplayOrder(Value: LongWord);
begin
  SetAttribute('CoordinateDisplayOrder', Value);
end;

{ TXMLCoordinatesList }

function TXMLCoordinatesList.Add: IXMLCoordinates;
begin
  Result := AddItem(-1) as IXMLCoordinates;
end;

function TXMLCoordinatesList.Insert(const Index: Integer): IXMLCoordinates;
begin
  Result := AddItem(Index) as IXMLCoordinates;
end;

function TXMLCoordinatesList.Get_Item(Index: Integer): IXMLCoordinates;
begin
  Result := List[Index] as IXMLCoordinates;
end;

{ TXMLURL }

function TXMLURL.Get_URLContext: UnicodeString;
begin
  Result := AttributeNodes['URLContext'].Text;
end;

procedure TXMLURL.Set_URLContext(Value: UnicodeString);
begin
  SetAttribute('URLContext', Value);
end;

{ TXMLURLList }

function TXMLURLList.Add: IXMLURL;
begin
  Result := AddItem(-1) as IXMLURL;
end;

function TXMLURLList.Insert(const Index: Integer): IXMLURL;
begin
  Result := AddItem(Index) as IXMLURL;
end;

function TXMLURLList.Get_Item(Index: Integer): IXMLURL;
begin
  Result := List[Index] as IXMLURL;
end;

{ TXMLCommonContact }

procedure TXMLCommonContact.AfterConstruction;
begin
  RegisterChildNode('ContactIdentifier', TXMLContactIdentifier);
  RegisterChildNode('ContactAvailability', TXMLContactAvailability);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  FContactAvailability := CreateCollection(TXMLContactAvailabilityList, IXMLContactAvailability, 'ContactAvailability') as IXMLContactAvailabilityList;
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  inherited;
end;

function TXMLCommonContact.Get_ContactType: UnicodeString;
begin
  Result := AttributeNodes['ContactType'].Text;
end;

procedure TXMLCommonContact.Set_ContactType(Value: UnicodeString);
begin
  SetAttribute('ContactType', Value);
end;

function TXMLCommonContact.Get_ContactName: UnicodeString;
begin
  Result := ChildNodes['ContactName'].Text;
end;

procedure TXMLCommonContact.Set_ContactName(Value: UnicodeString);
begin
  ChildNodes['ContactName'].NodeValue := Value;
end;

function TXMLCommonContact.Get_ContactIdentifier: IXMLContactIdentifier;
begin
  Result := ChildNodes['ContactIdentifier'] as IXMLContactIdentifier;
end;

function TXMLCommonContact.Get_Telephone: UnicodeString;
begin
  Result := ChildNodes['Telephone'].Text;
end;

procedure TXMLCommonContact.Set_Telephone(Value: UnicodeString);
begin
  ChildNodes['Telephone'].NodeValue := Value;
end;

function TXMLCommonContact.Get_MobilePhone: UnicodeString;
begin
  Result := ChildNodes['MobilePhone'].Text;
end;

procedure TXMLCommonContact.Set_MobilePhone(Value: UnicodeString);
begin
  ChildNodes['MobilePhone'].NodeValue := Value;
end;

function TXMLCommonContact.Get_Email: UnicodeString;
begin
  Result := ChildNodes['Email'].Text;
end;

procedure TXMLCommonContact.Set_Email(Value: UnicodeString);
begin
  ChildNodes['Email'].NodeValue := Value;
end;

function TXMLCommonContact.Get_Fax: UnicodeString;
begin
  Result := ChildNodes['Fax'].Text;
end;

procedure TXMLCommonContact.Set_Fax(Value: UnicodeString);
begin
  ChildNodes['Fax'].NodeValue := Value;
end;

function TXMLCommonContact.Get_ContactAvailability: IXMLContactAvailabilityList;
begin
  Result := FContactAvailability;
end;

function TXMLCommonContact.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

function TXMLCommonContact.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

{ TXMLCommonContactList }

function TXMLCommonContactList.Add: IXMLCommonContact;
begin
  Result := AddItem(-1) as IXMLCommonContact;
end;

function TXMLCommonContactList.Insert(const Index: Integer): IXMLCommonContact;
begin
  Result := AddItem(Index) as IXMLCommonContact;
end;

function TXMLCommonContactList.Get_Item(Index: Integer): IXMLCommonContact;
begin
  Result := List[Index] as IXMLCommonContact;
end;

{ TXMLContactIdentifier }

function TXMLContactIdentifier.Get_ContactIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['ContactIdentifierType'].Text;
end;

procedure TXMLContactIdentifier.Set_ContactIdentifierType(Value: UnicodeString);
begin
  SetAttribute('ContactIdentifierType', Value);
end;

{ TXMLContactAvailability }

procedure TXMLContactAvailability.AfterConstruction;
begin
  RegisterChildNode('TimeSlot', TXMLTimeSlot);
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  FTimeSlot := CreateCollection(TXMLTimeSlotList, IXMLTimeSlot, 'TimeSlot') as IXMLTimeSlotList;
  FDateTimeRange := CreateCollection(TXMLDateTimeRangeList, IXMLDateTimeRange, 'DateTimeRange') as IXMLDateTimeRangeList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLContactAvailability.Get_CalendarPeriod: UnicodeString;
begin
  Result := AttributeNodes['CalendarPeriod'].Text;
end;

procedure TXMLContactAvailability.Set_CalendarPeriod(Value: UnicodeString);
begin
  SetAttribute('CalendarPeriod', Value);
end;

function TXMLContactAvailability.Get_IsTimeSlotAvailable: UnicodeString;
begin
  Result := AttributeNodes['IsTimeSlotAvailable'].Text;
end;

procedure TXMLContactAvailability.Set_IsTimeSlotAvailable(Value: UnicodeString);
begin
  SetAttribute('IsTimeSlotAvailable', Value);
end;

function TXMLContactAvailability.Get_TimeSlot: IXMLTimeSlotList;
begin
  Result := FTimeSlot;
end;

function TXMLContactAvailability.Get_DateTimeRange: IXMLDateTimeRangeList;
begin
  Result := FDateTimeRange;
end;

function TXMLContactAvailability.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLContactAvailabilityList }

function TXMLContactAvailabilityList.Add: IXMLContactAvailability;
begin
  Result := AddItem(-1) as IXMLContactAvailability;
end;

function TXMLContactAvailabilityList.Insert(const Index: Integer): IXMLContactAvailability;
begin
  Result := AddItem(Index) as IXMLContactAvailability;
end;

function TXMLContactAvailabilityList.Get_Item(Index: Integer): IXMLContactAvailability;
begin
  Result := List[Index] as IXMLContactAvailability;
end;

{ TXMLTimeSlot }

function TXMLTimeSlot.Get_From: UnicodeString;
begin
  Result := ChildNodes['From'].Text;
end;

procedure TXMLTimeSlot.Set_From(Value: UnicodeString);
begin
  ChildNodes['From'].NodeValue := Value;
end;

function TXMLTimeSlot.Get_To_: UnicodeString;
begin
  Result := ChildNodes['To'].Text;
end;

procedure TXMLTimeSlot.Set_To_(Value: UnicodeString);
begin
  ChildNodes['To'].NodeValue := Value;
end;

{ TXMLTimeSlotList }

function TXMLTimeSlotList.Add: IXMLTimeSlot;
begin
  Result := AddItem(-1) as IXMLTimeSlot;
end;

function TXMLTimeSlotList.Insert(const Index: Integer): IXMLTimeSlot;
begin
  Result := AddItem(Index) as IXMLTimeSlot;
end;

function TXMLTimeSlotList.Get_Item(Index: Integer): IXMLTimeSlot;
begin
  Result := List[Index] as IXMLTimeSlot;
end;

{ TXMLShipToCharacteristics }

procedure TXMLShipToCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ShipToParty', TXMLTypedParty);
  RegisterChildNode('SupplyPoint', TXMLSupplyPoint);
  RegisterChildNode('LocationCode', TXMLLocationCode);
  RegisterChildNode('TermsOfDelivery', TXMLTermsOfDelivery);
  RegisterChildNode('DeliveryRouteCode', TXMLDeliveryRouteCode);
  FSupplyPoint := CreateCollection(TXMLSupplyPointList, IXMLSupplyPoint, 'SupplyPoint') as IXMLSupplyPointList;
  inherited;
end;

function TXMLShipToCharacteristics.Get_ShipToParty: IXMLTypedParty;
begin
  Result := ChildNodes['ShipToParty'] as IXMLTypedParty;
end;

function TXMLShipToCharacteristics.Get_SupplyPoint: IXMLSupplyPointList;
begin
  Result := FSupplyPoint;
end;

function TXMLShipToCharacteristics.Get_LocationCode: IXMLLocationCode;
begin
  Result := ChildNodes['LocationCode'] as IXMLLocationCode;
end;

function TXMLShipToCharacteristics.Get_TermsOfDelivery: IXMLTermsOfDelivery;
begin
  Result := ChildNodes['TermsOfDelivery'] as IXMLTermsOfDelivery;
end;

function TXMLShipToCharacteristics.Get_DeliveryRouteCode: IXMLDeliveryRouteCode;
begin
  Result := ChildNodes['DeliveryRouteCode'] as IXMLDeliveryRouteCode;
end;

{ TXMLTypedParty }

function TXMLTypedParty.Get_PartyType: UnicodeString;
begin
  Result := AttributeNodes['PartyType'].Text;
end;

procedure TXMLTypedParty.Set_PartyType(Value: UnicodeString);
begin
  SetAttribute('PartyType', Value);
end;

{ TXMLTypedPartyList }

function TXMLTypedPartyList.Add: IXMLTypedParty;
begin
  Result := AddItem(-1) as IXMLTypedParty;
end;

function TXMLTypedPartyList.Insert(const Index: Integer): IXMLTypedParty;
begin
  Result := AddItem(Index) as IXMLTypedParty;
end;

function TXMLTypedPartyList.Get_Item(Index: Integer): IXMLTypedParty;
begin
  Result := List[Index] as IXMLTypedParty;
end;

{ TXMLSupplyPoint }

procedure TXMLSupplyPoint.AfterConstruction;
begin
  RegisterChildNode('SupplyPointCode', TXMLSupplyPointCode);
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  RegisterChildNode('SupplyPointCharacteristics', TXMLSupplyPointCharacteristics);
  FSupplyPointCode := CreateCollection(TXMLSupplyPointCodeList, IXMLSupplyPointCode, 'SupplyPointCode') as IXMLSupplyPointCodeList;
  FSupplyPointDescription := CreateCollection(TXMLS255List, IXMLNode, 'SupplyPointDescription') as IXMLS255List;
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  inherited;
end;

function TXMLSupplyPoint.Get_LocationType: UnicodeString;
begin
  Result := AttributeNodes['LocationType'].Text;
end;

procedure TXMLSupplyPoint.Set_LocationType(Value: UnicodeString);
begin
  SetAttribute('LocationType', Value);
end;

function TXMLSupplyPoint.Get_SupplyPointCode: IXMLSupplyPointCodeList;
begin
  Result := FSupplyPointCode;
end;

function TXMLSupplyPoint.Get_SupplyPointDescription: IXMLS255List;
begin
  Result := FSupplyPointDescription;
end;

function TXMLSupplyPoint.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

function TXMLSupplyPoint.Get_SupplyPointCharacteristics: IXMLSupplyPointCharacteristics;
begin
  Result := ChildNodes['SupplyPointCharacteristics'] as IXMLSupplyPointCharacteristics;
end;

{ TXMLSupplyPointList }

function TXMLSupplyPointList.Add: IXMLSupplyPoint;
begin
  Result := AddItem(-1) as IXMLSupplyPoint;
end;

function TXMLSupplyPointList.Insert(const Index: Integer): IXMLSupplyPoint;
begin
  Result := AddItem(Index) as IXMLSupplyPoint;
end;

function TXMLSupplyPointList.Get_Item(Index: Integer): IXMLSupplyPoint;
begin
  Result := List[Index] as IXMLSupplyPoint;
end;

{ TXMLSupplyPointCode }

function TXMLSupplyPointCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLSupplyPointCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLSupplyPointCodeList }

function TXMLSupplyPointCodeList.Add: IXMLSupplyPointCode;
begin
  Result := AddItem(-1) as IXMLSupplyPointCode;
end;

function TXMLSupplyPointCodeList.Insert(const Index: Integer): IXMLSupplyPointCode;
begin
  Result := AddItem(Index) as IXMLSupplyPointCode;
end;

function TXMLSupplyPointCodeList.Get_Item(Index: Integer): IXMLSupplyPointCode;
begin
  Result := List[Index] as IXMLSupplyPointCode;
end;

{ TXMLSupplyPointCharacteristics }

procedure TXMLSupplyPointCharacteristics.AfterConstruction;
begin
  RegisterChildNode('SupplyPointProperty', TXMLSupplyPointProperty);
  RegisterChildNode('QuantityInformation', TXMLQuantityInformation);
  RegisterChildNode('MapPoint', TXMLMapPoint);
  RegisterChildNode('AreaInfo', TXMLAreaInfo);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  FSupplyPointProperty := CreateCollection(TXMLSupplyPointPropertyList, IXMLSupplyPointProperty, 'SupplyPointProperty') as IXMLSupplyPointPropertyList;
  FMapPoint := CreateCollection(TXMLMapPointList, IXMLMapPoint, 'MapPoint') as IXMLMapPointList;
  FAreaInfo := CreateCollection(TXMLAreaInfoList, IXMLAreaInfo, 'AreaInfo') as IXMLAreaInfoList;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  inherited;
end;

function TXMLSupplyPointCharacteristics.Get_SupplyPointProperty: IXMLSupplyPointPropertyList;
begin
  Result := FSupplyPointProperty;
end;

function TXMLSupplyPointCharacteristics.Get_QuantityInformation: IXMLQuantityInformation;
begin
  Result := ChildNodes['QuantityInformation'] as IXMLQuantityInformation;
end;

function TXMLSupplyPointCharacteristics.Get_MapPoint: IXMLMapPointList;
begin
  Result := FMapPoint;
end;

function TXMLSupplyPointCharacteristics.Get_AreaInfo: IXMLAreaInfoList;
begin
  Result := FAreaInfo;
end;

function TXMLSupplyPointCharacteristics.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

{ TXMLSupplyPointProperty }

procedure TXMLSupplyPointProperty.AfterConstruction;
begin
  RegisterChildNode('SupplyPointPropertyCode', TXMLSupplyPointPropertyCode);
  RegisterChildNode('SupplyPointPropertyCodeValue', TXMLSupplyPointPropertyCodeValue);
  FSupplyPointPropertyDescription := CreateCollection(TXMLS255List, IXMLNode, 'SupplyPointPropertyDescription') as IXMLS255List;
  inherited;
end;

function TXMLSupplyPointProperty.Get_SupplyPointPropertyCode: IXMLSupplyPointPropertyCode;
begin
  Result := ChildNodes['SupplyPointPropertyCode'] as IXMLSupplyPointPropertyCode;
end;

function TXMLSupplyPointProperty.Get_SupplyPointPropertyCodeValue: IXMLSupplyPointPropertyCodeValue;
begin
  Result := ChildNodes['SupplyPointPropertyCodeValue'] as IXMLSupplyPointPropertyCodeValue;
end;

function TXMLSupplyPointProperty.Get_SupplyPointPropertyDescription: IXMLS255List;
begin
  Result := FSupplyPointPropertyDescription;
end;

{ TXMLSupplyPointPropertyList }

function TXMLSupplyPointPropertyList.Add: IXMLSupplyPointProperty;
begin
  Result := AddItem(-1) as IXMLSupplyPointProperty;
end;

function TXMLSupplyPointPropertyList.Insert(const Index: Integer): IXMLSupplyPointProperty;
begin
  Result := AddItem(Index) as IXMLSupplyPointProperty;
end;

function TXMLSupplyPointPropertyList.Get_Item(Index: Integer): IXMLSupplyPointProperty;
begin
  Result := List[Index] as IXMLSupplyPointProperty;
end;

{ TXMLSupplyPointPropertyCode }

function TXMLSupplyPointPropertyCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLSupplyPointPropertyCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLSupplyPointPropertyCodeValue }

procedure TXMLSupplyPointPropertyCodeValue.AfterConstruction;
begin
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLSupplyPointPropertyCodeValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLSupplyPointPropertyCodeValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLSupplyPointPropertyCodeValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLSupplyPointPropertyCodeValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLSupplyPointPropertyCodeValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

{ TXMLDetailMeasurement }

procedure TXMLDetailMeasurement.AfterConstruction;
begin
  RegisterChildNode('DetailValue', TXMLDetailValue);
  RegisterChildNode('DetailRangeMin', TXMLDetailRangeMin);
  RegisterChildNode('DetailRangeMax', TXMLDetailRangeMax);
  RegisterChildNode('StandardDeviation', TXMLStandardDeviation);
  RegisterChildNode('TwoSigmaLower', TXMLTwoSigmaLower);
  RegisterChildNode('TwoSigmaUpper', TXMLTwoSigmaUpper);
  inherited;
end;

function TXMLDetailMeasurement.Get_DetailValue: IXMLDetailValue;
begin
  Result := ChildNodes['DetailValue'] as IXMLDetailValue;
end;

function TXMLDetailMeasurement.Get_DetailRangeMin: IXMLDetailRangeMin;
begin
  Result := ChildNodes['DetailRangeMin'] as IXMLDetailRangeMin;
end;

function TXMLDetailMeasurement.Get_DetailRangeMax: IXMLDetailRangeMax;
begin
  Result := ChildNodes['DetailRangeMax'] as IXMLDetailRangeMax;
end;

function TXMLDetailMeasurement.Get_StandardDeviation: IXMLStandardDeviation;
begin
  Result := ChildNodes['StandardDeviation'] as IXMLStandardDeviation;
end;

function TXMLDetailMeasurement.Get_SampleSize: LongWord;
begin
  Result := ChildNodes['SampleSize'].NodeValue;
end;

procedure TXMLDetailMeasurement.Set_SampleSize(Value: LongWord);
begin
  ChildNodes['SampleSize'].NodeValue := Value;
end;

function TXMLDetailMeasurement.Get_TwoSigmaLower: IXMLTwoSigmaLower;
begin
  Result := ChildNodes['TwoSigmaLower'] as IXMLTwoSigmaLower;
end;

function TXMLDetailMeasurement.Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
begin
  Result := ChildNodes['TwoSigmaUpper'] as IXMLTwoSigmaUpper;
end;

{ TXMLDetailValue }

function TXMLDetailValue.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLDetailValue.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLDetailRangeMin }

function TXMLDetailRangeMin.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLDetailRangeMin.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLDetailRangeMax }

function TXMLDetailRangeMax.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLDetailRangeMax.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLStandardDeviation }

function TXMLStandardDeviation.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLStandardDeviation.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLTwoSigmaLower }

function TXMLTwoSigmaLower.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLTwoSigmaLower.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLTwoSigmaUpper }

function TXMLTwoSigmaUpper.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLTwoSigmaUpper.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLQuantityInformation }

procedure TXMLQuantityInformation.AfterConstruction;
begin
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLQuantityInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLQuantityInformation.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLQuantity }

function TXMLQuantity.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLQuantity.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLQuantity.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLQuantity.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLQuantity.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLQuantity.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLQuantity.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLQuantity.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLQuantity.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLQuantity.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLQuantity.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLQuantity.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

{ TXMLInformationalQuantity }

function TXMLInformationalQuantity.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLInformationalQuantity.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLInformationalQuantity.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLInformationalQuantity.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLInformationalQuantity.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLInformationalQuantity.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLInformationalQuantity.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLInformationalQuantity.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLInformationalQuantity.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLInformationalQuantity.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLInformationalQuantity.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLInformationalQuantity.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

{ TXMLInformationalQuantityList }

function TXMLInformationalQuantityList.Add: IXMLInformationalQuantity;
begin
  Result := AddItem(-1) as IXMLInformationalQuantity;
end;

function TXMLInformationalQuantityList.Insert(const Index: Integer): IXMLInformationalQuantity;
begin
  Result := AddItem(Index) as IXMLInformationalQuantity;
end;

function TXMLInformationalQuantityList.Get_Item(Index: Integer): IXMLInformationalQuantity;
begin
  Result := List[Index] as IXMLInformationalQuantity;
end;

{ TXMLMapPoint }

procedure TXMLMapPoint.AfterConstruction;
begin
  RegisterChildNode('MapPointID', TXMLMapPointID);
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  FMapPointID := CreateCollection(TXMLMapPointIDList, IXMLMapPointID, 'MapPointID') as IXMLMapPointIDList;
  FMapPointComment := CreateCollection(TXMLS255List, IXMLNode, 'MapPointComment') as IXMLS255List;
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  inherited;
end;

function TXMLMapPoint.Get_MapPointType: UnicodeString;
begin
  Result := AttributeNodes['MapPointType'].Text;
end;

procedure TXMLMapPoint.Set_MapPointType(Value: UnicodeString);
begin
  SetAttribute('MapPointType', Value);
end;

function TXMLMapPoint.Get_MapPointDisplayType: UnicodeString;
begin
  Result := AttributeNodes['MapPointDisplayType'].Text;
end;

procedure TXMLMapPoint.Set_MapPointDisplayType(Value: UnicodeString);
begin
  SetAttribute('MapPointDisplayType', Value);
end;

function TXMLMapPoint.Get_MapPointName: UnicodeString;
begin
  Result := ChildNodes['MapPointName'].Text;
end;

procedure TXMLMapPoint.Set_MapPointName(Value: UnicodeString);
begin
  ChildNodes['MapPointName'].NodeValue := Value;
end;

function TXMLMapPoint.Get_MapPointID: IXMLMapPointIDList;
begin
  Result := FMapPointID;
end;

function TXMLMapPoint.Get_MapPointComment: IXMLS255List;
begin
  Result := FMapPointComment;
end;

function TXMLMapPoint.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

{ TXMLMapPointList }

function TXMLMapPointList.Add: IXMLMapPoint;
begin
  Result := AddItem(-1) as IXMLMapPoint;
end;

function TXMLMapPointList.Insert(const Index: Integer): IXMLMapPoint;
begin
  Result := AddItem(Index) as IXMLMapPoint;
end;

function TXMLMapPointList.Get_Item(Index: Integer): IXMLMapPoint;
begin
  Result := List[Index] as IXMLMapPoint;
end;

{ TXMLMapPointID }

function TXMLMapPointID.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLMapPointID.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLMapPointIDList }

function TXMLMapPointIDList.Add: IXMLMapPointID;
begin
  Result := AddItem(-1) as IXMLMapPointID;
end;

function TXMLMapPointIDList.Insert(const Index: Integer): IXMLMapPointID;
begin
  Result := AddItem(Index) as IXMLMapPointID;
end;

function TXMLMapPointIDList.Get_Item(Index: Integer): IXMLMapPointID;
begin
  Result := List[Index] as IXMLMapPointID;
end;

{ TXMLAreaInfo }

procedure TXMLAreaInfo.AfterConstruction;
begin
  RegisterChildNode('AreaProperty', TXMLCodeInfo);
  RegisterChildNode('MapPoint', TXMLMapPoint);
  RegisterChildNode('PropertyValue', TXMLPropertyValue);
  RegisterChildNode('eAttachment', TXMLEAttachment);
  FAreaProperty := CreateCollection(TXMLCodeInfoList, IXMLCodeInfo, 'AreaProperty') as IXMLCodeInfoList;
  FMapPoint := CreateCollection(TXMLMapPointList, IXMLMapPoint, 'MapPoint') as IXMLMapPointList;
  FPropertyValue := CreateCollection(TXMLPropertyValueList, IXMLPropertyValue, 'PropertyValue') as IXMLPropertyValueList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLAreaInfo.Get_AreaProperty: IXMLCodeInfoList;
begin
  Result := FAreaProperty;
end;

function TXMLAreaInfo.Get_MapPoint: IXMLMapPointList;
begin
  Result := FMapPoint;
end;

function TXMLAreaInfo.Get_PropertyValue: IXMLPropertyValueList;
begin
  Result := FPropertyValue;
end;

function TXMLAreaInfo.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['eAttachment'] as IXMLEAttachment;
end;

function TXMLAreaInfo.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLAreaInfoList }

function TXMLAreaInfoList.Add: IXMLAreaInfo;
begin
  Result := AddItem(-1) as IXMLAreaInfo;
end;

function TXMLAreaInfoList.Insert(const Index: Integer): IXMLAreaInfo;
begin
  Result := AddItem(Index) as IXMLAreaInfo;
end;

function TXMLAreaInfoList.Get_Item(Index: Integer): IXMLAreaInfo;
begin
  Result := List[Index] as IXMLAreaInfo;
end;

{ TXMLCodeInfo }

procedure TXMLCodeInfo.AfterConstruction;
begin
  RegisterChildNode('CodeValue', TXMLCodeValue);
  FCodeDescription := CreateCollection(TXMLS255List, IXMLNode, 'CodeDescription') as IXMLS255List;
  inherited;
end;

function TXMLCodeInfo.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCodeInfo.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLCodeInfo.Get_Code: UnicodeString;
begin
  Result := ChildNodes['Code'].Text;
end;

procedure TXMLCodeInfo.Set_Code(Value: UnicodeString);
begin
  ChildNodes['Code'].NodeValue := Value;
end;

function TXMLCodeInfo.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLCodeInfo.Get_CodeDescription: IXMLS255List;
begin
  Result := FCodeDescription;
end;

{ TXMLCodeInfoList }

function TXMLCodeInfoList.Add: IXMLCodeInfo;
begin
  Result := AddItem(-1) as IXMLCodeInfo;
end;

function TXMLCodeInfoList.Insert(const Index: Integer): IXMLCodeInfo;
begin
  Result := AddItem(Index) as IXMLCodeInfo;
end;

function TXMLCodeInfoList.Get_Item(Index: Integer): IXMLCodeInfo;
begin
  Result := List[Index] as IXMLCodeInfo;
end;

{ TXMLCodeValue }

procedure TXMLCodeValue.AfterConstruction;
begin
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLCodeValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLCodeValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLCodeValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLCodeValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLCodeValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

{ TXMLCodeValueList }

function TXMLCodeValueList.Add: IXMLCodeValue;
begin
  Result := AddItem(-1) as IXMLCodeValue;
end;

function TXMLCodeValueList.Insert(const Index: Integer): IXMLCodeValue;
begin
  Result := AddItem(Index) as IXMLCodeValue;
end;

function TXMLCodeValueList.Get_Item(Index: Integer): IXMLCodeValue;
begin
  Result := List[Index] as IXMLCodeValue;
end;

{ TXMLPropertyValue }

procedure TXMLPropertyValue.AfterConstruction;
begin
  RegisterChildNode('PositionOnItem', TXMLPositionOnItem);
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  RegisterChildNode('PropertySubValue', TXMLPropertySubValue);
  FPropertySubValue := CreateCollection(TXMLPropertySubValueList, IXMLPropertySubValue, 'PropertySubValue') as IXMLPropertySubValueList;
  inherited;
end;

function TXMLPropertyValue.Get_PropertyType: UnicodeString;
begin
  Result := AttributeNodes['PropertyType'].Text;
end;

procedure TXMLPropertyValue.Set_PropertyType(Value: UnicodeString);
begin
  SetAttribute('PropertyType', Value);
end;

function TXMLPropertyValue.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLPropertyValue.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLPropertyValue.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLPropertyValue.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLPropertyValue.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLPropertyValue.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

function TXMLPropertyValue.Get_IsAverageValue: UnicodeString;
begin
  Result := AttributeNodes['IsAverageValue'].Text;
end;

procedure TXMLPropertyValue.Set_IsAverageValue(Value: UnicodeString);
begin
  SetAttribute('IsAverageValue', Value);
end;

function TXMLPropertyValue.Get_ItemType: UnicodeString;
begin
  Result := AttributeNodes['ItemType'].Text;
end;

procedure TXMLPropertyValue.Set_ItemType(Value: UnicodeString);
begin
  SetAttribute('ItemType', Value);
end;

function TXMLPropertyValue.Get_PositionOnItem: IXMLPositionOnItem;
begin
  Result := ChildNodes['PositionOnItem'] as IXMLPositionOnItem;
end;

function TXMLPropertyValue.Get_BinaryValue: UnicodeString;
begin
  Result := ChildNodes['BinaryValue'].Text;
end;

procedure TXMLPropertyValue.Set_BinaryValue(Value: UnicodeString);
begin
  ChildNodes['BinaryValue'].NodeValue := Value;
end;

function TXMLPropertyValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLPropertyValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLPropertyValue.Get_DateTimeValue: UnicodeString;
begin
  Result := ChildNodes['DateTimeValue'].Text;
end;

procedure TXMLPropertyValue.Set_DateTimeValue(Value: UnicodeString);
begin
  ChildNodes['DateTimeValue'].NodeValue := Value;
end;

function TXMLPropertyValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLPropertyValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLPropertyValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

function TXMLPropertyValue.Get_PropertySubValue: IXMLPropertySubValueList;
begin
  Result := FPropertySubValue;
end;

{ TXMLPositionOnItem }

function TXMLPositionOnItem.Get_PositionMeasuredFrom: UnicodeString;
begin
  Result := AttributeNodes['PositionMeasuredFrom'].Text;
end;

procedure TXMLPositionOnItem.Set_PositionMeasuredFrom(Value: UnicodeString);
begin
  SetAttribute('PositionMeasuredFrom', Value);
end;

function TXMLPositionOnItem.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLPositionOnItem.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLPropertySubValue }

procedure TXMLPropertySubValue.AfterConstruction;
begin
  RegisterChildNode('PositionOnItem', TXMLPositionOnItem);
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLPropertySubValue.Get_PropertyType: UnicodeString;
begin
  Result := AttributeNodes['PropertyType'].Text;
end;

procedure TXMLPropertySubValue.Set_PropertyType(Value: UnicodeString);
begin
  SetAttribute('PropertyType', Value);
end;

function TXMLPropertySubValue.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLPropertySubValue.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLPropertySubValue.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLPropertySubValue.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLPropertySubValue.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLPropertySubValue.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

function TXMLPropertySubValue.Get_IsAverageValue: UnicodeString;
begin
  Result := AttributeNodes['IsAverageValue'].Text;
end;

procedure TXMLPropertySubValue.Set_IsAverageValue(Value: UnicodeString);
begin
  SetAttribute('IsAverageValue', Value);
end;

function TXMLPropertySubValue.Get_ItemType: UnicodeString;
begin
  Result := AttributeNodes['ItemType'].Text;
end;

procedure TXMLPropertySubValue.Set_ItemType(Value: UnicodeString);
begin
  SetAttribute('ItemType', Value);
end;

function TXMLPropertySubValue.Get_PositionOnItem: IXMLPositionOnItem;
begin
  Result := ChildNodes['PositionOnItem'] as IXMLPositionOnItem;
end;

function TXMLPropertySubValue.Get_BinaryValue: UnicodeString;
begin
  Result := ChildNodes['BinaryValue'].Text;
end;

procedure TXMLPropertySubValue.Set_BinaryValue(Value: UnicodeString);
begin
  ChildNodes['BinaryValue'].NodeValue := Value;
end;

function TXMLPropertySubValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLPropertySubValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLPropertySubValue.Get_DateTimeValue: UnicodeString;
begin
  Result := ChildNodes['DateTimeValue'].Text;
end;

procedure TXMLPropertySubValue.Set_DateTimeValue(Value: UnicodeString);
begin
  ChildNodes['DateTimeValue'].NodeValue := Value;
end;

function TXMLPropertySubValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLPropertySubValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLPropertySubValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

{ TXMLPropertySubValueList }

function TXMLPropertySubValueList.Add: IXMLPropertySubValue;
begin
  Result := AddItem(-1) as IXMLPropertySubValue;
end;

function TXMLPropertySubValueList.Insert(const Index: Integer): IXMLPropertySubValue;
begin
  Result := AddItem(Index) as IXMLPropertySubValue;
end;

function TXMLPropertySubValueList.Get_Item(Index: Integer): IXMLPropertySubValue;
begin
  Result := List[Index] as IXMLPropertySubValue;
end;

{ TXMLEAttachment }

procedure TXMLEAttachment.AfterConstruction;
begin
  RegisterChildNode('AttachmentFileName', TXMLAttachmentFileName);
  RegisterChildNode('URL', TXMLURL);
  FAttachmentFileName := CreateCollection(TXMLAttachmentFileNameList, IXMLAttachmentFileName, 'AttachmentFileName') as IXMLAttachmentFileNameList;
  FURL := CreateCollection(TXMLURLList, IXMLURL, 'URL') as IXMLURLList;
  inherited;
end;

function TXMLEAttachment.Get_AttachmentFileName: IXMLAttachmentFileNameList;
begin
  Result := FAttachmentFileName;
end;

function TXMLEAttachment.Get_NumberOfAttachments: LongWord;
begin
  Result := ChildNodes['NumberOfAttachments'].NodeValue;
end;

procedure TXMLEAttachment.Set_NumberOfAttachments(Value: LongWord);
begin
  ChildNodes['NumberOfAttachments'].NodeValue := Value;
end;

function TXMLEAttachment.Get_URL: IXMLURLList;
begin
  Result := FURL;
end;

{ TXMLAttachmentFileName }

function TXMLAttachmentFileName.Get_AttachmentContext: UnicodeString;
begin
  Result := AttributeNodes['AttachmentContext'].Text;
end;

procedure TXMLAttachmentFileName.Set_AttachmentContext(Value: UnicodeString);
begin
  SetAttribute('AttachmentContext', Value);
end;

{ TXMLAttachmentFileNameList }

function TXMLAttachmentFileNameList.Add: IXMLAttachmentFileName;
begin
  Result := AddItem(-1) as IXMLAttachmentFileName;
end;

function TXMLAttachmentFileNameList.Insert(const Index: Integer): IXMLAttachmentFileName;
begin
  Result := AddItem(Index) as IXMLAttachmentFileName;
end;

function TXMLAttachmentFileNameList.Get_Item(Index: Integer): IXMLAttachmentFileName;
begin
  Result := List[Index] as IXMLAttachmentFileName;
end;

{ TXMLDocumentReferenceInformation }

procedure TXMLDocumentReferenceInformation.AfterConstruction;
begin
  RegisterChildNode('DocumentReferenceID', TXMLDocumentReferenceID);
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('DocumentReference', TXMLDocumentReference);
  FDocumentReference := CreateCollection(TXMLDocumentReferenceList, IXMLDocumentReference, 'DocumentReference') as IXMLDocumentReferenceList;
  inherited;
end;

function TXMLDocumentReferenceInformation.Get_DocumentReferenceID: IXMLDocumentReferenceID;
begin
  Result := ChildNodes['DocumentReferenceID'] as IXMLDocumentReferenceID;
end;

function TXMLDocumentReferenceInformation.Get_DocumentReferenceIDLineItemNumber: LongWord;
begin
  Result := ChildNodes['DocumentReferenceIDLineItemNumber'].NodeValue;
end;

procedure TXMLDocumentReferenceInformation.Set_DocumentReferenceIDLineItemNumber(Value: LongWord);
begin
  ChildNodes['DocumentReferenceIDLineItemNumber'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_TransactionHistoryNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryNumber'].NodeValue;
end;

procedure TXMLDocumentReferenceInformation.Set_TransactionHistoryNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryNumber'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_DocumentVersionNumber: UnicodeString;
begin
  Result := ChildNodes['DocumentVersionNumber'].Text;
end;

procedure TXMLDocumentReferenceInformation.Set_DocumentVersionNumber(Value: UnicodeString);
begin
  ChildNodes['DocumentVersionNumber'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDocumentReferenceInformation.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDocumentReferenceInformation.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_NumberOfDocumentsRequired: LongWord;
begin
  Result := ChildNodes['NumberOfDocumentsRequired'].NodeValue;
end;

procedure TXMLDocumentReferenceInformation.Set_NumberOfDocumentsRequired(Value: LongWord);
begin
  ChildNodes['NumberOfDocumentsRequired'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_DocumentReference: IXMLDocumentReferenceList;
begin
  Result := FDocumentReference;
end;

{ TXMLDocumentReferenceInformationList }

function TXMLDocumentReferenceInformationList.Add: IXMLDocumentReferenceInformation;
begin
  Result := AddItem(-1) as IXMLDocumentReferenceInformation;
end;

function TXMLDocumentReferenceInformationList.Insert(const Index: Integer): IXMLDocumentReferenceInformation;
begin
  Result := AddItem(Index) as IXMLDocumentReferenceInformation;
end;

function TXMLDocumentReferenceInformationList.Get_Item(Index: Integer): IXMLDocumentReferenceInformation;
begin
  Result := List[Index] as IXMLDocumentReferenceInformation;
end;

{ TXMLDocumentReferenceID }

function TXMLDocumentReferenceID.Get_DocumentReferenceIDType: UnicodeString;
begin
  Result := AttributeNodes['DocumentReferenceIDType'].Text;
end;

procedure TXMLDocumentReferenceID.Set_DocumentReferenceIDType(Value: UnicodeString);
begin
  SetAttribute('DocumentReferenceIDType', Value);
end;

function TXMLDocumentReferenceID.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDocumentReferenceID.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDocumentReference }

function TXMLDocumentReference.Get_DocumentReferenceType: UnicodeString;
begin
  Result := AttributeNodes['DocumentReferenceType'].Text;
end;

procedure TXMLDocumentReference.Set_DocumentReferenceType(Value: UnicodeString);
begin
  SetAttribute('DocumentReferenceType', Value);
end;

function TXMLDocumentReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDocumentReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDocumentReferenceList }

function TXMLDocumentReferenceList.Add: IXMLDocumentReference;
begin
  Result := AddItem(-1) as IXMLDocumentReference;
end;

function TXMLDocumentReferenceList.Insert(const Index: Integer): IXMLDocumentReference;
begin
  Result := AddItem(Index) as IXMLDocumentReference;
end;

function TXMLDocumentReferenceList.Get_Item(Index: Integer): IXMLDocumentReference;
begin
  Result := List[Index] as IXMLDocumentReference;
end;

{ TXMLLocationCode }

function TXMLLocationCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLLocationCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTermsOfDelivery }

procedure TXMLTermsOfDelivery.AfterConstruction;
begin
  RegisterChildNode('IncotermsLocation', TXMLIncotermsLocation);
  RegisterChildNode('ShipmentMethodOfPayment', TXMLShipmentMethodOfPayment);
  RegisterChildNode('ServiceLevel', TXMLServiceLevel);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FServiceLevel := CreateCollection(TXMLServiceLevelList, IXMLServiceLevel, 'ServiceLevel') as IXMLServiceLevelList;
  inherited;
end;

function TXMLTermsOfDelivery.Get_IncotermsLocation: IXMLIncotermsLocation;
begin
  Result := ChildNodes['IncotermsLocation'] as IXMLIncotermsLocation;
end;

function TXMLTermsOfDelivery.Get_ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment;
begin
  Result := ChildNodes['ShipmentMethodOfPayment'] as IXMLShipmentMethodOfPayment;
end;

function TXMLTermsOfDelivery.Get_FreightPayableAt: UnicodeString;
begin
  Result := ChildNodes['FreightPayableAt'].Text;
end;

procedure TXMLTermsOfDelivery.Set_FreightPayableAt(Value: UnicodeString);
begin
  ChildNodes['FreightPayableAt'].NodeValue := Value;
end;

function TXMLTermsOfDelivery.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLTermsOfDelivery.Get_ServiceLevel: IXMLServiceLevelList;
begin
  Result := FServiceLevel;
end;

{ TXMLIncotermsLocation }

function TXMLIncotermsLocation.Get_Incoterms: UnicodeString;
begin
  Result := AttributeNodes['Incoterms'].Text;
end;

procedure TXMLIncotermsLocation.Set_Incoterms(Value: UnicodeString);
begin
  SetAttribute('Incoterms', Value);
end;

function TXMLIncotermsLocation.Get_IncotermsVersion: UnicodeString;
begin
  Result := AttributeNodes['IncotermsVersion'].Text;
end;

procedure TXMLIncotermsLocation.Set_IncotermsVersion(Value: UnicodeString);
begin
  SetAttribute('IncotermsVersion', Value);
end;

{ TXMLShipmentMethodOfPayment }

function TXMLShipmentMethodOfPayment.Get_LocationQualifier: UnicodeString;
begin
  Result := AttributeNodes['LocationQualifier'].Text;
end;

procedure TXMLShipmentMethodOfPayment.Set_LocationQualifier(Value: UnicodeString);
begin
  SetAttribute('LocationQualifier', Value);
end;

function TXMLShipmentMethodOfPayment.Get_Method: UnicodeString;
begin
  Result := AttributeNodes['Method'].Text;
end;

procedure TXMLShipmentMethodOfPayment.Set_Method(Value: UnicodeString);
begin
  SetAttribute('Method', Value);
end;

{ TXMLServiceLevel }

procedure TXMLServiceLevel.AfterConstruction;
begin
  RegisterChildNode('ServiceLevelReference', TXMLServiceLevelReference);
  FServiceLevelText := CreateCollection(TXMLS255List, IXMLNode, 'ServiceLevelText') as IXMLS255List;
  FServiceLevelReference := CreateCollection(TXMLServiceLevelReferenceList, IXMLServiceLevelReference, 'ServiceLevelReference') as IXMLServiceLevelReferenceList;
  inherited;
end;

function TXMLServiceLevel.Get_ServiceLevelContextType: UnicodeString;
begin
  Result := AttributeNodes['ServiceLevelContextType'].Text;
end;

procedure TXMLServiceLevel.Set_ServiceLevelContextType(Value: UnicodeString);
begin
  SetAttribute('ServiceLevelContextType', Value);
end;

function TXMLServiceLevel.Get_ServiceLevelText: IXMLS255List;
begin
  Result := FServiceLevelText;
end;

function TXMLServiceLevel.Get_ServiceLevelReference: IXMLServiceLevelReferenceList;
begin
  Result := FServiceLevelReference;
end;

{ TXMLServiceLevelList }

function TXMLServiceLevelList.Add: IXMLServiceLevel;
begin
  Result := AddItem(-1) as IXMLServiceLevel;
end;

function TXMLServiceLevelList.Insert(const Index: Integer): IXMLServiceLevel;
begin
  Result := AddItem(Index) as IXMLServiceLevel;
end;

function TXMLServiceLevelList.Get_Item(Index: Integer): IXMLServiceLevel;
begin
  Result := List[Index] as IXMLServiceLevel;
end;

{ TXMLServiceLevelReference }

function TXMLServiceLevelReference.Get_ServiceLevelReferenceType: UnicodeString;
begin
  Result := AttributeNodes['ServiceLevelReferenceType'].Text;
end;

procedure TXMLServiceLevelReference.Set_ServiceLevelReferenceType(Value: UnicodeString);
begin
  SetAttribute('ServiceLevelReferenceType', Value);
end;

function TXMLServiceLevelReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLServiceLevelReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLServiceLevelReferenceList }

function TXMLServiceLevelReferenceList.Add: IXMLServiceLevelReference;
begin
  Result := AddItem(-1) as IXMLServiceLevelReference;
end;

function TXMLServiceLevelReferenceList.Insert(const Index: Integer): IXMLServiceLevelReference;
begin
  Result := AddItem(Index) as IXMLServiceLevelReference;
end;

function TXMLServiceLevelReferenceList.Get_Item(Index: Integer): IXMLServiceLevelReference;
begin
  Result := List[Index] as IXMLServiceLevelReference;
end;

{ TXMLDeliveryRouteCode }

function TXMLDeliveryRouteCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLDeliveryRouteCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLLocationParty }

function TXMLLocationParty.Get_LocationType: UnicodeString;
begin
  Result := AttributeNodes['LocationType'].Text;
end;

procedure TXMLLocationParty.Set_LocationType(Value: UnicodeString);
begin
  SetAttribute('LocationType', Value);
end;

{ TXMLLocationPartyList }

function TXMLLocationPartyList.Add: IXMLLocationParty;
begin
  Result := AddItem(-1) as IXMLLocationParty;
end;

function TXMLLocationPartyList.Insert(const Index: Integer): IXMLLocationParty;
begin
  Result := AddItem(Index) as IXMLLocationParty;
end;

function TXMLLocationPartyList.Get_Item(Index: Integer): IXMLLocationParty;
begin
  Result := List[Index] as IXMLLocationParty;
end;

{ TXMLCountryOfOrigin }

procedure TXMLCountryOfOrigin.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLCountryOfOrigin.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLCountryOfDestination }

procedure TXMLCountryOfDestination.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLCountryOfDestination.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLCountryOfConsumption }

procedure TXMLCountryOfConsumption.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLCountryOfConsumption.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLTransportVehicleIdentifier }

function TXMLTransportVehicleIdentifier.Get_TransportVehicleIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['TransportVehicleIdentifierType'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_TransportVehicleIdentifierType(Value: UnicodeString);
begin
  SetAttribute('TransportVehicleIdentifierType', Value);
end;

function TXMLTransportVehicleIdentifier.Get_StateOrProvince: UnicodeString;
begin
  Result := AttributeNodes['StateOrProvince'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_StateOrProvince(Value: UnicodeString);
begin
  SetAttribute('StateOrProvince', Value);
end;

function TXMLTransportVehicleIdentifier.Get_ISOCountryCode: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCode'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_ISOCountryCode(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCode', Value);
end;

function TXMLTransportVehicleIdentifier.Get_ISOCountryCodeAlpha3: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeAlpha3'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_ISOCountryCodeAlpha3(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeAlpha3', Value);
end;

function TXMLTransportVehicleIdentifier.Get_ISOCountryCodeNumeric: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeNumeric'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_ISOCountryCodeNumeric(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeNumeric', Value);
end;

function TXMLTransportVehicleIdentifier.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportVehicleIdentifierList }

function TXMLTransportVehicleIdentifierList.Add: IXMLTransportVehicleIdentifier;
begin
  Result := AddItem(-1) as IXMLTransportVehicleIdentifier;
end;

function TXMLTransportVehicleIdentifierList.Insert(const Index: Integer): IXMLTransportVehicleIdentifier;
begin
  Result := AddItem(Index) as IXMLTransportVehicleIdentifier;
end;

function TXMLTransportVehicleIdentifierList.Get_Item(Index: Integer): IXMLTransportVehicleIdentifier;
begin
  Result := List[Index] as IXMLTransportVehicleIdentifier;
end;

{ TXMLTransportUnitIdentifier }

function TXMLTransportUnitIdentifier.Get_TransportUnitIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['TransportUnitIdentifierType'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_TransportUnitIdentifierType(Value: UnicodeString);
begin
  SetAttribute('TransportUnitIdentifierType', Value);
end;

function TXMLTransportUnitIdentifier.Get_StateOrProvince: UnicodeString;
begin
  Result := AttributeNodes['StateOrProvince'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_StateOrProvince(Value: UnicodeString);
begin
  SetAttribute('StateOrProvince', Value);
end;

function TXMLTransportUnitIdentifier.Get_ISOCountryCode: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCode'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_ISOCountryCode(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCode', Value);
end;

function TXMLTransportUnitIdentifier.Get_ISOCountryCodeAlpha3: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeAlpha3'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_ISOCountryCodeAlpha3(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeAlpha3', Value);
end;

function TXMLTransportUnitIdentifier.Get_ISOCountryCodeNumeric: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeNumeric'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_ISOCountryCodeNumeric(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeNumeric', Value);
end;

function TXMLTransportUnitIdentifier.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnitIdentifierList }

function TXMLTransportUnitIdentifierList.Add: IXMLTransportUnitIdentifier;
begin
  Result := AddItem(-1) as IXMLTransportUnitIdentifier;
end;

function TXMLTransportUnitIdentifierList.Insert(const Index: Integer): IXMLTransportUnitIdentifier;
begin
  Result := AddItem(Index) as IXMLTransportUnitIdentifier;
end;

function TXMLTransportUnitIdentifierList.Get_Item(Index: Integer): IXMLTransportUnitIdentifier;
begin
  Result := List[Index] as IXMLTransportUnitIdentifier;
end;

{ TXMLInsurance }

procedure TXMLInsurance.AfterConstruction;
begin
  RegisterChildNode('InsuredValue', TXMLInsuredValue);
  inherited;
end;

function TXMLInsurance.Get_Insurer: UnicodeString;
begin
  Result := ChildNodes['Insurer'].Text;
end;

procedure TXMLInsurance.Set_Insurer(Value: UnicodeString);
begin
  ChildNodes['Insurer'].NodeValue := Value;
end;

function TXMLInsurance.Get_InsuranceContractNo: UnicodeString;
begin
  Result := ChildNodes['InsuranceContractNo'].Text;
end;

procedure TXMLInsurance.Set_InsuranceContractNo(Value: UnicodeString);
begin
  ChildNodes['InsuranceContractNo'].NodeValue := Value;
end;

function TXMLInsurance.Get_InsuredValue: IXMLInsuredValue;
begin
  Result := ChildNodes['InsuredValue'] as IXMLInsuredValue;
end;

function TXMLInsurance.Get_InsuranceInfo: UnicodeString;
begin
  Result := ChildNodes['InsuranceInfo'].Text;
end;

procedure TXMLInsurance.Set_InsuranceInfo(Value: UnicodeString);
begin
  ChildNodes['InsuranceInfo'].NodeValue := Value;
end;

{ TXMLInsuredValue }

procedure TXMLInsuredValue.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLInsuredValue.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLCurrencyValue }

function TXMLCurrencyValue.Get_CurrencyType: UnicodeString;
begin
  Result := AttributeNodes['CurrencyType'].Text;
end;

procedure TXMLCurrencyValue.Set_CurrencyType(Value: UnicodeString);
begin
  SetAttribute('CurrencyType', Value);
end;

{ TXMLCreditDebitNoteReason }

procedure TXMLCreditDebitNoteReason.AfterConstruction;
begin
  RegisterChildNode('CreditDebitNoteReasonCode', TXMLCreditDebitNoteReasonCode);
  inherited;
end;

function TXMLCreditDebitNoteReason.Get_CreditDebitNoteReasonCode: IXMLCreditDebitNoteReasonCode;
begin
  Result := ChildNodes['CreditDebitNoteReasonCode'] as IXMLCreditDebitNoteReasonCode;
end;

function TXMLCreditDebitNoteReason.Get_ReasonDescription: UnicodeString;
begin
  Result := ChildNodes['ReasonDescription'].Text;
end;

procedure TXMLCreditDebitNoteReason.Set_ReasonDescription(Value: UnicodeString);
begin
  ChildNodes['ReasonDescription'].NodeValue := Value;
end;

{ TXMLCreditDebitNoteReasonCode }

function TXMLCreditDebitNoteReasonCode.Get_CreditDebitNoteReasonType: UnicodeString;
begin
  Result := AttributeNodes['CreditDebitNoteReasonType'].Text;
end;

procedure TXMLCreditDebitNoteReasonCode.Set_CreditDebitNoteReasonType(Value: UnicodeString);
begin
  SetAttribute('CreditDebitNoteReasonType', Value);
end;

function TXMLCreditDebitNoteReasonCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCreditDebitNoteReasonCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLInvoiceShipment }

procedure TXMLInvoiceShipment.AfterConstruction;
begin
  RegisterChildNode('ShipmentID', TXMLShipmentID);
  RegisterChildNode('InvoiceProductGroup', TXMLInvoiceProductGroup);
  RegisterChildNode('ShipmentSummary', TXMLShipmentSummary);
  FInvoiceProductGroup := CreateCollection(TXMLInvoiceProductGroupList, IXMLInvoiceProductGroup, 'InvoiceProductGroup') as IXMLInvoiceProductGroupList;
  inherited;
end;

function TXMLInvoiceShipment.Get_ShipmentID: IXMLShipmentID;
begin
  Result := ChildNodes['ShipmentID'] as IXMLShipmentID;
end;

function TXMLInvoiceShipment.Get_InvoiceProductGroup: IXMLInvoiceProductGroupList;
begin
  Result := FInvoiceProductGroup;
end;

function TXMLInvoiceShipment.Get_ShipmentSummary: IXMLShipmentSummary;
begin
  Result := ChildNodes['ShipmentSummary'] as IXMLShipmentSummary;
end;

{ TXMLInvoiceShipmentList }

function TXMLInvoiceShipmentList.Add: IXMLInvoiceShipment;
begin
  Result := AddItem(-1) as IXMLInvoiceShipment;
end;

function TXMLInvoiceShipmentList.Insert(const Index: Integer): IXMLInvoiceShipment;
begin
  Result := AddItem(Index) as IXMLInvoiceShipment;
end;

function TXMLInvoiceShipmentList.Get_Item(Index: Integer): IXMLInvoiceShipment;
begin
  Result := List[Index] as IXMLInvoiceShipment;
end;

{ TXMLShipmentID }

function TXMLShipmentID.Get_ShipmentIDType: UnicodeString;
begin
  Result := AttributeNodes['ShipmentIDType'].Text;
end;

procedure TXMLShipmentID.Set_ShipmentIDType(Value: UnicodeString);
begin
  SetAttribute('ShipmentIDType', Value);
end;

{ TXMLInvoiceProductGroup }

procedure TXMLInvoiceProductGroup.AfterConstruction;
begin
  RegisterChildNode('ProductGroupID', TXMLProductGroupID);
  RegisterChildNode('InvoiceWoodLineItem', TXMLInvoiceWoodLineItem);
  RegisterChildNode('ProductGroupSummary', TXMLProductGroupSummary);
  FInvoiceWoodLineItem := CreateCollection(TXMLInvoiceWoodLineItemList, IXMLInvoiceWoodLineItem, 'InvoiceWoodLineItem') as IXMLInvoiceWoodLineItemList;
  inherited;
end;

function TXMLInvoiceProductGroup.Get_ProductGroupID: IXMLProductGroupID;
begin
  Result := ChildNodes['ProductGroupID'] as IXMLProductGroupID;
end;

function TXMLInvoiceProductGroup.Get_InvoiceWoodLineItem: IXMLInvoiceWoodLineItemList;
begin
  Result := FInvoiceWoodLineItem;
end;

function TXMLInvoiceProductGroup.Get_ProductGroupSummary: IXMLProductGroupSummary;
begin
  Result := ChildNodes['ProductGroupSummary'] as IXMLProductGroupSummary;
end;

{ TXMLInvoiceProductGroupList }

function TXMLInvoiceProductGroupList.Add: IXMLInvoiceProductGroup;
begin
  Result := AddItem(-1) as IXMLInvoiceProductGroup;
end;

function TXMLInvoiceProductGroupList.Insert(const Index: Integer): IXMLInvoiceProductGroup;
begin
  Result := AddItem(Index) as IXMLInvoiceProductGroup;
end;

function TXMLInvoiceProductGroupList.Get_Item(Index: Integer): IXMLInvoiceProductGroup;
begin
  Result := List[Index] as IXMLInvoiceProductGroup;
end;

{ TXMLProductGroupID }

function TXMLProductGroupID.Get_ProductGroupIDType: UnicodeString;
begin
  Result := AttributeNodes['ProductGroupIDType'].Text;
end;

procedure TXMLProductGroupID.Set_ProductGroupIDType(Value: UnicodeString);
begin
  SetAttribute('ProductGroupIDType', Value);
end;

{ TXMLInvoiceWoodLineItem }

procedure TXMLInvoiceWoodLineItem.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderInformation', TXMLPurchaseOrderInformation);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('EndsDiscountInformation', TXMLEndsDiscountInformation);
  RegisterChildNode('ChargeOrAllowance', TXMLChargeOrAllowance);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('InvoiceLineBaseAmountInformation', TXMLInvoiceLineBaseAmountInformation);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('ChargeInformation', TXMLChargeInformation);
  RegisterChildNode('InvoiceLineAmount', TXMLInvoiceLineAmount);
  RegisterChildNode('InvoiceDeliveryInformation', TXMLInvoiceDeliveryInformation);
  RegisterChildNode('InvoiceReference', TXMLInvoiceReference);
  RegisterChildNode('GeneralLedgerAccount', TXMLGeneralLedgerAccount);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('MillCharacteristics', TXMLMillCharacteristics);
  RegisterChildNode('TransportModeCharacteristics', TXMLTransportModeCharacteristics);
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  RegisterChildNode('TransportVehicleCharacteristics', TXMLTransportVehicleCharacteristics);
  RegisterChildNode('DeliveryDateWindow', TXMLDeliveryDateWindow);
  RegisterChildNode('TaxStatement', TXMLTaxStatement);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('StatisticalGoodsInformation', TXMLStatisticalGoodsInformation);
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  FChargeInformation := CreateCollection(TXMLChargeInformationList, IXMLChargeInformation, 'ChargeInformation') as IXMLChargeInformationList;
  FInvoiceDeliveryInformation := CreateCollection(TXMLInvoiceDeliveryInformationList, IXMLInvoiceDeliveryInformation, 'InvoiceDeliveryInformation') as IXMLInvoiceDeliveryInformationList;
  FInvoiceReference := CreateCollection(TXMLInvoiceReferenceList, IXMLInvoiceReference, 'InvoiceReference') as IXMLInvoiceReferenceList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FTransportModeCharacteristics := CreateCollection(TXMLTransportModeCharacteristicsList, IXMLTransportModeCharacteristics, 'TransportModeCharacteristics') as IXMLTransportModeCharacteristicsList;
  FTransportUnitCharacteristics := CreateCollection(TXMLTransportUnitCharacteristicsList, IXMLTransportUnitCharacteristics, 'TransportUnitCharacteristics') as IXMLTransportUnitCharacteristicsList;
  FLocationParty := CreateCollection(TXMLLocationPartyList, IXMLLocationParty, 'LocationParty') as IXMLLocationPartyList;
  inherited;
end;

function TXMLInvoiceWoodLineItem.Get_InvoiceLineNumber: LongWord;
begin
  Result := ChildNodes['InvoiceLineNumber'].NodeValue;
end;

procedure TXMLInvoiceWoodLineItem.Set_InvoiceLineNumber(Value: LongWord);
begin
  ChildNodes['InvoiceLineNumber'].NodeValue := Value;
end;

function TXMLInvoiceWoodLineItem.Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
begin
  Result := ChildNodes['PurchaseOrderInformation'] as IXMLPurchaseOrderInformation;
end;

function TXMLInvoiceWoodLineItem.Get_PurchaseOrderLineItemNumber: LongWord;
begin
  Result := ChildNodes['PurchaseOrderLineItemNumber'].NodeValue;
end;

procedure TXMLInvoiceWoodLineItem.Set_PurchaseOrderLineItemNumber(Value: LongWord);
begin
  ChildNodes['PurchaseOrderLineItemNumber'].NodeValue := Value;
end;

function TXMLInvoiceWoodLineItem.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLInvoiceWoodLineItem.Get_EndsDiscountInformation: IXMLEndsDiscountInformation;
begin
  Result := ChildNodes['EndsDiscountInformation'] as IXMLEndsDiscountInformation;
end;

function TXMLInvoiceWoodLineItem.Get_ChargeOrAllowance: IXMLChargeOrAllowance;
begin
  Result := ChildNodes['ChargeOrAllowance'] as IXMLChargeOrAllowance;
end;

function TXMLInvoiceWoodLineItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLInvoiceWoodLineItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLInvoiceWoodLineItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLInvoiceWoodLineItem.Get_InvoiceLineBaseAmountInformation: IXMLInvoiceLineBaseAmountInformation;
begin
  Result := ChildNodes['InvoiceLineBaseAmountInformation'] as IXMLInvoiceLineBaseAmountInformation;
end;

function TXMLInvoiceWoodLineItem.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLInvoiceWoodLineItem.Get_ChargeInformation: IXMLChargeInformationList;
begin
  Result := FChargeInformation;
end;

function TXMLInvoiceWoodLineItem.Get_InvoiceLineAmount: IXMLInvoiceLineAmount;
begin
  Result := ChildNodes['InvoiceLineAmount'] as IXMLInvoiceLineAmount;
end;

function TXMLInvoiceWoodLineItem.Get_InvoiceDeliveryInformation: IXMLInvoiceDeliveryInformationList;
begin
  Result := FInvoiceDeliveryInformation;
end;

function TXMLInvoiceWoodLineItem.Get_InvoiceReference: IXMLInvoiceReferenceList;
begin
  Result := FInvoiceReference;
end;

function TXMLInvoiceWoodLineItem.Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
begin
  Result := ChildNodes['GeneralLedgerAccount'] as IXMLGeneralLedgerAccount;
end;

function TXMLInvoiceWoodLineItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

function TXMLInvoiceWoodLineItem.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLInvoiceWoodLineItem.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLInvoiceWoodLineItem.Get_MillCharacteristics: IXMLMillCharacteristics;
begin
  Result := ChildNodes['MillCharacteristics'] as IXMLMillCharacteristics;
end;

function TXMLInvoiceWoodLineItem.Get_TransportModeCharacteristics: IXMLTransportModeCharacteristicsList;
begin
  Result := FTransportModeCharacteristics;
end;

function TXMLInvoiceWoodLineItem.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
begin
  Result := FTransportUnitCharacteristics;
end;

function TXMLInvoiceWoodLineItem.Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
begin
  Result := ChildNodes['TransportVehicleCharacteristics'] as IXMLTransportVehicleCharacteristics;
end;

function TXMLInvoiceWoodLineItem.Get_DeliveryDateWindow: IXMLDeliveryDateWindow;
begin
  Result := ChildNodes['DeliveryDateWindow'] as IXMLDeliveryDateWindow;
end;

function TXMLInvoiceWoodLineItem.Get_TaxStatement: IXMLTaxStatement;
begin
  Result := ChildNodes['TaxStatement'] as IXMLTaxStatement;
end;

function TXMLInvoiceWoodLineItem.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLInvoiceWoodLineItem.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLInvoiceWoodLineItem.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLInvoiceWoodLineItem.Get_LocationParty: IXMLLocationPartyList;
begin
  Result := FLocationParty;
end;

function TXMLInvoiceWoodLineItem.Get_StatisticalGoodsInformation: IXMLStatisticalGoodsInformation;
begin
  Result := ChildNodes['StatisticalGoodsInformation'] as IXMLStatisticalGoodsInformation;
end;

{ TXMLInvoiceWoodLineItemList }

function TXMLInvoiceWoodLineItemList.Add: IXMLInvoiceWoodLineItem;
begin
  Result := AddItem(-1) as IXMLInvoiceWoodLineItem;
end;

function TXMLInvoiceWoodLineItemList.Insert(const Index: Integer): IXMLInvoiceWoodLineItem;
begin
  Result := AddItem(Index) as IXMLInvoiceWoodLineItem;
end;

function TXMLInvoiceWoodLineItemList.Get_Item(Index: Integer): IXMLInvoiceWoodLineItem;
begin
  Result := List[Index] as IXMLInvoiceWoodLineItem;
end;

{ TXMLPurchaseOrderInformation }

procedure TXMLPurchaseOrderInformation.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderIssuedDate', TXMLDateTimeBasis);
  RegisterChildNode('PurchaseOrderReference', TXMLPurchaseOrderReference);
  RegisterChildNode('ServiceLevel', TXMLServiceLevel);
  FOrderTitle := CreateCollection(TXMLS255List, IXMLNode, 'OrderTitle') as IXMLS255List;
  FPurchaseOrderReference := CreateCollection(TXMLPurchaseOrderReferenceList, IXMLPurchaseOrderReference, 'PurchaseOrderReference') as IXMLPurchaseOrderReferenceList;
  FServiceLevel := CreateCollection(TXMLServiceLevelList, IXMLServiceLevel, 'ServiceLevel') as IXMLServiceLevelList;
  inherited;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderNumber: UnicodeString;
begin
  Result := ChildNodes['PurchaseOrderNumber'].Text;
end;

procedure TXMLPurchaseOrderInformation.Set_PurchaseOrderNumber(Value: UnicodeString);
begin
  ChildNodes['PurchaseOrderNumber'].NodeValue := Value;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderReleaseNumber: UnicodeString;
begin
  Result := ChildNodes['PurchaseOrderReleaseNumber'].Text;
end;

procedure TXMLPurchaseOrderInformation.Set_PurchaseOrderReleaseNumber(Value: UnicodeString);
begin
  ChildNodes['PurchaseOrderReleaseNumber'].NodeValue := Value;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderIssuedDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PurchaseOrderIssuedDate'] as IXMLDateTimeBasis;
end;

function TXMLPurchaseOrderInformation.Get_OrderTitle: IXMLS255List;
begin
  Result := FOrderTitle;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderReference: IXMLPurchaseOrderReferenceList;
begin
  Result := FPurchaseOrderReference;
end;

function TXMLPurchaseOrderInformation.Get_ServiceLevel: IXMLServiceLevelList;
begin
  Result := FServiceLevel;
end;

{ TXMLDateTimeBasis }

procedure TXMLDateTimeBasis.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateTimeBasis.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateTimeBasis.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateTimeBasis.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLPurchaseOrderReference }

function TXMLPurchaseOrderReference.Get_PurchaseOrderReferenceType: UnicodeString;
begin
  Result := AttributeNodes['PurchaseOrderReferenceType'].Text;
end;

procedure TXMLPurchaseOrderReference.Set_PurchaseOrderReferenceType(Value: UnicodeString);
begin
  SetAttribute('PurchaseOrderReferenceType', Value);
end;

function TXMLPurchaseOrderReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLPurchaseOrderReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLPurchaseOrderReferenceList }

function TXMLPurchaseOrderReferenceList.Add: IXMLPurchaseOrderReference;
begin
  Result := AddItem(-1) as IXMLPurchaseOrderReference;
end;

function TXMLPurchaseOrderReferenceList.Insert(const Index: Integer): IXMLPurchaseOrderReference;
begin
  Result := AddItem(Index) as IXMLPurchaseOrderReference;
end;

function TXMLPurchaseOrderReferenceList.Get_Item(Index: Integer): IXMLPurchaseOrderReference;
begin
  Result := List[Index] as IXMLPurchaseOrderReference;
end;

{ TXMLEndsDiscountInformation }

procedure TXMLEndsDiscountInformation.AfterConstruction;
begin
  RegisterChildNode('EndsLengthMax', TXMLMeasurement);
  RegisterChildNode('EndsPermittedPercent', TXMLMeasurement);
  RegisterChildNode('EndsDiscountPercent', TXMLMeasurement);
  inherited;
end;

function TXMLEndsDiscountInformation.Get_EndsDiscountRule: UnicodeString;
begin
  Result := AttributeNodes['EndsDiscountRule'].Text;
end;

procedure TXMLEndsDiscountInformation.Set_EndsDiscountRule(Value: UnicodeString);
begin
  SetAttribute('EndsDiscountRule', Value);
end;

function TXMLEndsDiscountInformation.Get_EndsLengthMax: IXMLMeasurement;
begin
  Result := ChildNodes['EndsLengthMax'] as IXMLMeasurement;
end;

function TXMLEndsDiscountInformation.Get_EndsPermittedPercent: IXMLMeasurement;
begin
  Result := ChildNodes['EndsPermittedPercent'] as IXMLMeasurement;
end;

function TXMLEndsDiscountInformation.Get_EndsDiscountPercent: IXMLMeasurement;
begin
  Result := ChildNodes['EndsDiscountPercent'] as IXMLMeasurement;
end;

{ TXMLChargeOrAllowance }

function TXMLChargeOrAllowance.Get_ChargeOrAllowanceType: UnicodeString;
begin
  Result := AttributeNodes['ChargeOrAllowanceType'].Text;
end;

procedure TXMLChargeOrAllowance.Set_ChargeOrAllowanceType(Value: UnicodeString);
begin
  SetAttribute('ChargeOrAllowanceType', Value);
end;

{ TXMLProductClass }

procedure TXMLProductClass.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  RegisterChildNode('ProductDescription', TXMLProductDescription);
  RegisterChildNode('Classification', TXMLClassification);
  RegisterChildNode('ProductReference', TXMLProductReference);
  RegisterChildNode('BookManufacturing', TXMLBookManufacturing);
  RegisterChildNode('ForestWood', TXMLForestWood);
  RegisterChildNode('LabelStock', TXMLLabelStock);
  RegisterChildNode('Paper', TXMLPaper);
  RegisterChildNode('Pulp', TXMLPulpClass);
  RegisterChildNode('RecoveredPaper', TXMLRecoveredPaper);
  RegisterChildNode('VirginFibre', TXMLVirginFibre);
  RegisterChildNode('WoodProducts', TXMLWoodProducts);
  RegisterChildNode('OtherProducts', TXMLOtherProducts);
  FProductIdentifier := CreateCollection(TXMLProductIdentifierList, IXMLProductIdentifier, 'ProductIdentifier') as IXMLProductIdentifierList;
  FProductDescription := CreateCollection(TXMLProductDescriptionList, IXMLProductDescription, 'ProductDescription') as IXMLProductDescriptionList;
  FClassification := CreateCollection(TXMLClassificationList, IXMLClassification, 'Classification') as IXMLClassificationList;
  FProductReference := CreateCollection(TXMLProductReferenceList, IXMLProductReference, 'ProductReference') as IXMLProductReferenceList;
  inherited;
end;

function TXMLProductClass.Get_ProductIdentifier: IXMLProductIdentifierList;
begin
  Result := FProductIdentifier;
end;

function TXMLProductClass.Get_ProductDescription: IXMLProductDescriptionList;
begin
  Result := FProductDescription;
end;

function TXMLProductClass.Get_Classification: IXMLClassificationList;
begin
  Result := FClassification;
end;

function TXMLProductClass.Get_ProductReference: IXMLProductReferenceList;
begin
  Result := FProductReference;
end;

function TXMLProductClass.Get_BookManufacturing: IXMLBookManufacturing;
begin
  Result := ChildNodes['BookManufacturing'] as IXMLBookManufacturing;
end;

function TXMLProductClass.Get_ForestWood: IXMLForestWood;
begin
  Result := ChildNodes['ForestWood'] as IXMLForestWood;
end;

function TXMLProductClass.Get_LabelStock: IXMLLabelStock;
begin
  Result := ChildNodes['LabelStock'] as IXMLLabelStock;
end;

function TXMLProductClass.Get_Paper: IXMLPaper;
begin
  Result := ChildNodes['Paper'] as IXMLPaper;
end;

function TXMLProductClass.Get_Pulp: IXMLPulpClass;
begin
  Result := ChildNodes['Pulp'] as IXMLPulpClass;
end;

function TXMLProductClass.Get_RecoveredPaper: IXMLRecoveredPaper;
begin
  Result := ChildNodes['RecoveredPaper'] as IXMLRecoveredPaper;
end;

function TXMLProductClass.Get_VirginFibre: IXMLVirginFibre;
begin
  Result := ChildNodes['VirginFibre'] as IXMLVirginFibre;
end;

function TXMLProductClass.Get_WoodProducts: IXMLWoodProducts;
begin
  Result := ChildNodes['WoodProducts'] as IXMLWoodProducts;
end;

function TXMLProductClass.Get_OtherProducts: IXMLOtherProducts;
begin
  Result := ChildNodes['OtherProducts'] as IXMLOtherProducts;
end;

{ TXMLProductIdentifier }

function TXMLProductIdentifier.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLProductIdentifier.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLProductIdentifier.Get_ProductIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['ProductIdentifierType'].Text;
end;

procedure TXMLProductIdentifier.Set_ProductIdentifierType(Value: UnicodeString);
begin
  SetAttribute('ProductIdentifierType', Value);
end;

{ TXMLProductIdentifierList }

function TXMLProductIdentifierList.Add: IXMLProductIdentifier;
begin
  Result := AddItem(-1) as IXMLProductIdentifier;
end;

function TXMLProductIdentifierList.Insert(const Index: Integer): IXMLProductIdentifier;
begin
  Result := AddItem(Index) as IXMLProductIdentifier;
end;

function TXMLProductIdentifierList.Get_Item(Index: Integer): IXMLProductIdentifier;
begin
  Result := List[Index] as IXMLProductIdentifier;
end;

{ TXMLProductDescription }

function TXMLProductDescription.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLProductDescription.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLProductDescriptionList }

function TXMLProductDescriptionList.Add: IXMLProductDescription;
begin
  Result := AddItem(-1) as IXMLProductDescription;
end;

function TXMLProductDescriptionList.Insert(const Index: Integer): IXMLProductDescription;
begin
  Result := AddItem(Index) as IXMLProductDescription;
end;

function TXMLProductDescriptionList.Get_Item(Index: Integer): IXMLProductDescription;
begin
  Result := List[Index] as IXMLProductDescription;
end;

{ TXMLClassification }

procedure TXMLClassification.AfterConstruction;
begin
  RegisterChildNode('ClassificationCode', TXMLClassificationCode);
  FClassificationDescription := CreateCollection(TXMLS255List, IXMLNode, 'ClassificationDescription') as IXMLS255List;
  inherited;
end;

function TXMLClassification.Get_ClassificationCode: IXMLClassificationCode;
begin
  Result := ChildNodes['ClassificationCode'] as IXMLClassificationCode;
end;

function TXMLClassification.Get_ClassificationDescription: IXMLS255List;
begin
  Result := FClassificationDescription;
end;

{ TXMLClassificationList }

function TXMLClassificationList.Add: IXMLClassification;
begin
  Result := AddItem(-1) as IXMLClassification;
end;

function TXMLClassificationList.Insert(const Index: Integer): IXMLClassification;
begin
  Result := AddItem(Index) as IXMLClassification;
end;

function TXMLClassificationList.Get_Item(Index: Integer): IXMLClassification;
begin
  Result := List[Index] as IXMLClassification;
end;

{ TXMLClassificationCode }

function TXMLClassificationCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLClassificationCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLClassificationCode.Get_ClassificationCodeType: UnicodeString;
begin
  Result := AttributeNodes['ClassificationCodeType'].Text;
end;

procedure TXMLClassificationCode.Set_ClassificationCodeType(Value: UnicodeString);
begin
  SetAttribute('ClassificationCodeType', Value);
end;

{ TXMLProductReference }

function TXMLProductReference.Get_ProductReferenceType: UnicodeString;
begin
  Result := AttributeNodes['ProductReferenceType'].Text;
end;

procedure TXMLProductReference.Set_ProductReferenceType(Value: UnicodeString);
begin
  SetAttribute('ProductReferenceType', Value);
end;

function TXMLProductReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLProductReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLProductReferenceList }

function TXMLProductReferenceList.Add: IXMLProductReference;
begin
  Result := AddItem(-1) as IXMLProductReference;
end;

function TXMLProductReferenceList.Insert(const Index: Integer): IXMLProductReference;
begin
  Result := AddItem(Index) as IXMLProductReference;
end;

function TXMLProductReferenceList.Get_Item(Index: Integer): IXMLProductReference;
begin
  Result := List[Index] as IXMLProductReference;
end;

{ TXMLBookManufacturing }

procedure TXMLBookManufacturing.AfterConstruction;
begin
  RegisterChildNode('BookClassification', TXMLBookClassification);
  RegisterChildNode('ProofInformationalQuantity', TXMLProofInformationalQuantity);
  RegisterChildNode('PrepInformation', TXMLPrepInformation);
  RegisterChildNode('SuppliedComponentInformation', TXMLSuppliedComponentInformation);
  RegisterChildNode('PackagingCharacteristics', TXMLPackagingCharacteristics);
  FBookClassification := CreateCollection(TXMLBookClassificationList, IXMLBookClassification, 'BookClassification') as IXMLBookClassificationList;
  FProofInformationalQuantity := CreateCollection(TXMLProofInformationalQuantityList, IXMLProofInformationalQuantity, 'ProofInformationalQuantity') as IXMLProofInformationalQuantityList;
  FPrepInformation := CreateCollection(TXMLPrepInformationList, IXMLPrepInformation, 'PrepInformation') as IXMLPrepInformationList;
  FSuppliedComponentInformation := CreateCollection(TXMLSuppliedComponentInformationList, IXMLSuppliedComponentInformation, 'SuppliedComponentInformation') as IXMLSuppliedComponentInformationList;
  FPackagingCharacteristics := CreateCollection(TXMLPackagingCharacteristicsList, IXMLPackagingCharacteristics, 'PackagingCharacteristics') as IXMLPackagingCharacteristicsList;
  inherited;
end;

function TXMLBookManufacturing.Get_BookClassification: IXMLBookClassificationList;
begin
  Result := FBookClassification;
end;

function TXMLBookManufacturing.Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
begin
  Result := FProofInformationalQuantity;
end;

function TXMLBookManufacturing.Get_PrepInformation: IXMLPrepInformationList;
begin
  Result := FPrepInformation;
end;

function TXMLBookManufacturing.Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
begin
  Result := FSuppliedComponentInformation;
end;

function TXMLBookManufacturing.Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
begin
  Result := FPackagingCharacteristics;
end;

{ TXMLBookClassification }

procedure TXMLBookClassification.AfterConstruction;
begin
  RegisterChildNode('BookSubClassification', TXMLBookSubClassification);
  FClassificationDescription := CreateCollection(TXMLS255List, IXMLNode, 'ClassificationDescription') as IXMLS255List;
  FBookSubClassification := CreateCollection(TXMLBookSubClassificationList, IXMLBookSubClassification, 'BookSubClassification') as IXMLBookSubClassificationList;
  inherited;
end;

function TXMLBookClassification.Get_BookClassificationType: UnicodeString;
begin
  Result := AttributeNodes['BookClassificationType'].Text;
end;

procedure TXMLBookClassification.Set_BookClassificationType(Value: UnicodeString);
begin
  SetAttribute('BookClassificationType', Value);
end;

function TXMLBookClassification.Get_ClassificationDescription: IXMLS255List;
begin
  Result := FClassificationDescription;
end;

function TXMLBookClassification.Get_BookSubClassification: IXMLBookSubClassificationList;
begin
  Result := FBookSubClassification;
end;

{ TXMLBookClassificationList }

function TXMLBookClassificationList.Add: IXMLBookClassification;
begin
  Result := AddItem(-1) as IXMLBookClassification;
end;

function TXMLBookClassificationList.Insert(const Index: Integer): IXMLBookClassification;
begin
  Result := AddItem(Index) as IXMLBookClassification;
end;

function TXMLBookClassificationList.Get_Item(Index: Integer): IXMLBookClassification;
begin
  Result := List[Index] as IXMLBookClassification;
end;

{ TXMLBookSubClassification }

procedure TXMLBookSubClassification.AfterConstruction;
begin
  ItemTag := 'ClassificationDescription';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLBookSubClassification.Get_BookSubClassificationType: UnicodeString;
begin
  Result := AttributeNodes['BookSubClassificationType'].Text;
end;

procedure TXMLBookSubClassification.Set_BookSubClassificationType(Value: UnicodeString);
begin
  SetAttribute('BookSubClassificationType', Value);
end;

function TXMLBookSubClassification.Get_ClassificationDescription(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLBookSubClassification.Add(const ClassificationDescription: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := ClassificationDescription;
end;

function TXMLBookSubClassification.Insert(const Index: Integer; const ClassificationDescription: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := ClassificationDescription;
end;

{ TXMLBookSubClassificationList }

function TXMLBookSubClassificationList.Add: IXMLBookSubClassification;
begin
  Result := AddItem(-1) as IXMLBookSubClassification;
end;

function TXMLBookSubClassificationList.Insert(const Index: Integer): IXMLBookSubClassification;
begin
  Result := AddItem(Index) as IXMLBookSubClassification;
end;

function TXMLBookSubClassificationList.Get_Item(Index: Integer): IXMLBookSubClassification;
begin
  Result := List[Index] as IXMLBookSubClassification;
end;

{ TXMLProofInformationalQuantity }

procedure TXMLProofInformationalQuantity.AfterConstruction;
begin
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('ProofApprovalDate', TXMLProofApprovalDate);
  RegisterChildNode('ProofDueDate', TXMLProofDueDate);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLProofInformationalQuantity.Get_ProofType: UnicodeString;
begin
  Result := AttributeNodes['ProofType'].Text;
end;

procedure TXMLProofInformationalQuantity.Set_ProofType(Value: UnicodeString);
begin
  SetAttribute('ProofType', Value);
end;

function TXMLProofInformationalQuantity.Get_ProofColourType: UnicodeString;
begin
  Result := AttributeNodes['ProofColourType'].Text;
end;

procedure TXMLProofInformationalQuantity.Set_ProofColourType(Value: UnicodeString);
begin
  SetAttribute('ProofColourType', Value);
end;

function TXMLProofInformationalQuantity.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLProofInformationalQuantity.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLProofInformationalQuantity.Get_OtherParty: IXMLTypedParty;
begin
  Result := ChildNodes['OtherParty'] as IXMLTypedParty;
end;

function TXMLProofInformationalQuantity.Get_ProofApprovalDate: IXMLProofApprovalDate;
begin
  Result := ChildNodes['ProofApprovalDate'] as IXMLProofApprovalDate;
end;

function TXMLProofInformationalQuantity.Get_ProofDueDate: IXMLProofDueDate;
begin
  Result := ChildNodes['ProofDueDate'] as IXMLProofDueDate;
end;

function TXMLProofInformationalQuantity.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLProofInformationalQuantityList }

function TXMLProofInformationalQuantityList.Add: IXMLProofInformationalQuantity;
begin
  Result := AddItem(-1) as IXMLProofInformationalQuantity;
end;

function TXMLProofInformationalQuantityList.Insert(const Index: Integer): IXMLProofInformationalQuantity;
begin
  Result := AddItem(Index) as IXMLProofInformationalQuantity;
end;

function TXMLProofInformationalQuantityList.Get_Item(Index: Integer): IXMLProofInformationalQuantity;
begin
  Result := List[Index] as IXMLProofInformationalQuantity;
end;

{ TXMLProofApprovalDate }

procedure TXMLProofApprovalDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLProofApprovalDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLProofApprovalDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLProofApprovalDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLProofDueDate }

procedure TXMLProofDueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLProofDueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLProofDueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLProofDueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLPrepInformation }

procedure TXMLPrepInformation.AfterConstruction;
begin
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('PrepShipDate', TXMLDateTimeBasis);
  RegisterChildNode('PrepDueDate', TXMLDateTimeBasis);
  RegisterChildNode('PrepNeededDate', TXMLDateTimeBasis);
  RegisterChildNode('PrepReference', TXMLPrepReference);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FPrepReference := CreateCollection(TXMLPrepReferenceList, IXMLPrepReference, 'PrepReference') as IXMLPrepReferenceList;
  inherited;
end;

function TXMLPrepInformation.Get_PrepType: UnicodeString;
begin
  Result := AttributeNodes['PrepType'].Text;
end;

procedure TXMLPrepInformation.Set_PrepType(Value: UnicodeString);
begin
  SetAttribute('PrepType', Value);
end;

function TXMLPrepInformation.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLPrepInformation.Get_PrepShipDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PrepShipDate'] as IXMLDateTimeBasis;
end;

function TXMLPrepInformation.Get_PrepDueDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PrepDueDate'] as IXMLDateTimeBasis;
end;

function TXMLPrepInformation.Get_PrepNeededDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PrepNeededDate'] as IXMLDateTimeBasis;
end;

function TXMLPrepInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLPrepInformation.Get_PrepReference: IXMLPrepReferenceList;
begin
  Result := FPrepReference;
end;

{ TXMLPrepInformationList }

function TXMLPrepInformationList.Add: IXMLPrepInformation;
begin
  Result := AddItem(-1) as IXMLPrepInformation;
end;

function TXMLPrepInformationList.Insert(const Index: Integer): IXMLPrepInformation;
begin
  Result := AddItem(Index) as IXMLPrepInformation;
end;

function TXMLPrepInformationList.Get_Item(Index: Integer): IXMLPrepInformation;
begin
  Result := List[Index] as IXMLPrepInformation;
end;

{ TXMLPrepReference }

function TXMLPrepReference.Get_PrepReferenceType: UnicodeString;
begin
  Result := AttributeNodes['PrepReferenceType'].Text;
end;

procedure TXMLPrepReference.Set_PrepReferenceType(Value: UnicodeString);
begin
  SetAttribute('PrepReferenceType', Value);
end;

function TXMLPrepReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLPrepReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLPrepReferenceList }

function TXMLPrepReferenceList.Add: IXMLPrepReference;
begin
  Result := AddItem(-1) as IXMLPrepReference;
end;

function TXMLPrepReferenceList.Insert(const Index: Integer): IXMLPrepReference;
begin
  Result := AddItem(Index) as IXMLPrepReference;
end;

function TXMLPrepReferenceList.Get_Item(Index: Integer): IXMLPrepReference;
begin
  Result := List[Index] as IXMLPrepReference;
end;

{ TXMLSuppliedComponentInformation }

procedure TXMLSuppliedComponentInformation.AfterConstruction;
begin
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  RegisterChildNode('ProductDescription', TXMLProductDescription);
  RegisterChildNode('Classification', TXMLClassification);
  RegisterChildNode('BookClassification', TXMLBookClassification);
  RegisterChildNode('Paper', TXMLPaper);
  RegisterChildNode('SuppliedComponentReference', TXMLSuppliedComponentReference);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('ComponentShipDate', TXMLComponentShipDate);
  RegisterChildNode('ComponentDueDate', TXMLComponentDueDate);
  RegisterChildNode('ComponentNeededDate', TXMLComponentNeededDate);
  RegisterChildNode('OrderStatusInformation', TXMLOrderStatusInformation);
  FProductIdentifier := CreateCollection(TXMLProductIdentifierList, IXMLProductIdentifier, 'ProductIdentifier') as IXMLProductIdentifierList;
  FProductDescription := CreateCollection(TXMLProductDescriptionList, IXMLProductDescription, 'ProductDescription') as IXMLProductDescriptionList;
  FClassification := CreateCollection(TXMLClassificationList, IXMLClassification, 'Classification') as IXMLClassificationList;
  FBookClassification := CreateCollection(TXMLBookClassificationList, IXMLBookClassification, 'BookClassification') as IXMLBookClassificationList;
  FSuppliedComponentReference := CreateCollection(TXMLSuppliedComponentReferenceList, IXMLSuppliedComponentReference, 'SuppliedComponentReference') as IXMLSuppliedComponentReferenceList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSuppliedComponentInformation.Get_SuppliedComponentType: UnicodeString;
begin
  Result := AttributeNodes['SuppliedComponentType'].Text;
end;

procedure TXMLSuppliedComponentInformation.Set_SuppliedComponentType(Value: UnicodeString);
begin
  SetAttribute('SuppliedComponentType', Value);
end;

function TXMLSuppliedComponentInformation.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLSuppliedComponentInformation.Get_ProductIdentifier: IXMLProductIdentifierList;
begin
  Result := FProductIdentifier;
end;

function TXMLSuppliedComponentInformation.Get_ProductDescription: IXMLProductDescriptionList;
begin
  Result := FProductDescription;
end;

function TXMLSuppliedComponentInformation.Get_Classification: IXMLClassificationList;
begin
  Result := FClassification;
end;

function TXMLSuppliedComponentInformation.Get_BookClassification: IXMLBookClassificationList;
begin
  Result := FBookClassification;
end;

function TXMLSuppliedComponentInformation.Get_Paper: IXMLPaper;
begin
  Result := ChildNodes['Paper'] as IXMLPaper;
end;

function TXMLSuppliedComponentInformation.Get_SuppliedComponentReference: IXMLSuppliedComponentReferenceList;
begin
  Result := FSuppliedComponentReference;
end;

function TXMLSuppliedComponentInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLSuppliedComponentInformation.Get_ComponentShipDate: IXMLComponentShipDate;
begin
  Result := ChildNodes['ComponentShipDate'] as IXMLComponentShipDate;
end;

function TXMLSuppliedComponentInformation.Get_ComponentDueDate: IXMLComponentDueDate;
begin
  Result := ChildNodes['ComponentDueDate'] as IXMLComponentDueDate;
end;

function TXMLSuppliedComponentInformation.Get_ComponentNeededDate: IXMLComponentNeededDate;
begin
  Result := ChildNodes['ComponentNeededDate'] as IXMLComponentNeededDate;
end;

function TXMLSuppliedComponentInformation.Get_OrderStatusInformation: IXMLOrderStatusInformation;
begin
  Result := ChildNodes['OrderStatusInformation'] as IXMLOrderStatusInformation;
end;

function TXMLSuppliedComponentInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSuppliedComponentInformationList }

function TXMLSuppliedComponentInformationList.Add: IXMLSuppliedComponentInformation;
begin
  Result := AddItem(-1) as IXMLSuppliedComponentInformation;
end;

function TXMLSuppliedComponentInformationList.Insert(const Index: Integer): IXMLSuppliedComponentInformation;
begin
  Result := AddItem(Index) as IXMLSuppliedComponentInformation;
end;

function TXMLSuppliedComponentInformationList.Get_Item(Index: Integer): IXMLSuppliedComponentInformation;
begin
  Result := List[Index] as IXMLSuppliedComponentInformation;
end;

{ TXMLPaper }

procedure TXMLPaper.AfterConstruction;
begin
  RegisterChildNode('PaperCharacteristics', TXMLPaperCharacteristics);
  RegisterChildNode('Reel', TXMLReel);
  RegisterChildNode('Sheet', TXMLSheet);
  inherited;
end;

function TXMLPaper.Get_PaperCharacteristics: IXMLPaperCharacteristics;
begin
  Result := ChildNodes['PaperCharacteristics'] as IXMLPaperCharacteristics;
end;

function TXMLPaper.Get_Reel: IXMLReel;
begin
  Result := ChildNodes['Reel'] as IXMLReel;
end;

function TXMLPaper.Get_Sheet: IXMLSheet;
begin
  Result := ChildNodes['Sheet'] as IXMLSheet;
end;

{ TXMLPaperCharacteristics }

procedure TXMLPaperCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Abrasion', TXMLAbrasion);
  RegisterChildNode('AbsorptionInk', TXMLAbsorptionInk);
  RegisterChildNode('AbsorptionLight', TXMLAbsorptionLight);
  RegisterChildNode('AbsorptionWater', TXMLAbsorptionWater);
  RegisterChildNode('Appearance', TXMLAppearance);
  RegisterChildNode('Ash', TXMLAsh);
  RegisterChildNode('BasisWeight', TXMLBasisWeight);
  RegisterChildNode('BendingResistance', TXMLBendingResistance);
  RegisterChildNode('BendingStiffness', TXMLBendingStiffness);
  RegisterChildNode('Brightness', TXMLBrightness);
  RegisterChildNode('Bulk', TXMLBulk);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('Caliper', TXMLCaliper);
  RegisterChildNode('CoatWeight', TXMLCoatWeight);
  RegisterChildNode('ColourDetail', TXMLColourDetail);
  RegisterChildNode('Density', TXMLDensity);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('DominantWavelength', TXMLDominantWavelength);
  RegisterChildNode('ExcitationPurity', TXMLExcitationPurity);
  RegisterChildNode('FibreLength', TXMLFibreLength);
  RegisterChildNode('FibreClassification', TXMLFibreClassification);
  RegisterChildNode('Folding', TXMLFolding);
  RegisterChildNode('Formation', TXMLFormation);
  RegisterChildNode('Freeness', TXMLFreeness);
  RegisterChildNode('Friction', TXMLFriction);
  RegisterChildNode('Gloss', TXMLGloss);
  RegisterChildNode('LightScattering', TXMLLightScattering);
  RegisterChildNode('Luminance', TXMLLuminance);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Mullen', TXMLMullen);
  RegisterChildNode('Opacity', TXMLOpacity);
  RegisterChildNode('Permeability', TXMLPermeability);
  RegisterChildNode('pH', TXMLPH);
  RegisterChildNode('PlyBond', TXMLPlyBond);
  RegisterChildNode('Porosity', TXMLPorosity);
  RegisterChildNode('PostConsumerWaste', TXMLPostConsumerWaste);
  RegisterChildNode('PPI', TXMLMeasurement);
  RegisterChildNode('PreConsumerWaste', TXMLPreConsumerWaste);
  RegisterChildNode('Recycled', TXMLRecycled);
  RegisterChildNode('Resistance', TXMLResistance);
  RegisterChildNode('RingCrush', TXMLRingCrush);
  RegisterChildNode('Roughness', TXMLRoughness);
  RegisterChildNode('RunnabilityIndex', TXMLRunnabilityIndex);
  RegisterChildNode('ShowThrough', TXMLShowThrough);
  RegisterChildNode('Sizing', TXMLSizing);
  RegisterChildNode('Smoothness', TXMLSmoothness);
  RegisterChildNode('Stiffness', TXMLStiffness);
  RegisterChildNode('Stretch', TXMLStretch);
  RegisterChildNode('SurfaceStrength', TXMLSurfaceStrength);
  RegisterChildNode('TEA', TXMLTEA);
  RegisterChildNode('Tear', TXMLTear);
  RegisterChildNode('TearIndex', TXMLTearIndex);
  RegisterChildNode('Tensile', TXMLTensile);
  RegisterChildNode('TensileIndex', TXMLTensileIndex);
  RegisterChildNode('Whiteness', TXMLWhiteness);
  RegisterChildNode('AdditionalTest', TXMLAdditionalTest);
  RegisterChildNode('PlyAttributes', TXMLPlyAttributes);
  RegisterChildNode('PlySet', TXMLPlySet);
  FAbrasion := CreateCollection(TXMLAbrasionList, IXMLAbrasion, 'Abrasion') as IXMLAbrasionList;
  FAbsorptionInk := CreateCollection(TXMLAbsorptionInkList, IXMLAbsorptionInk, 'AbsorptionInk') as IXMLAbsorptionInkList;
  FAbsorptionLight := CreateCollection(TXMLAbsorptionLightList, IXMLAbsorptionLight, 'AbsorptionLight') as IXMLAbsorptionLightList;
  FAbsorptionWater := CreateCollection(TXMLAbsorptionWaterList, IXMLAbsorptionWater, 'AbsorptionWater') as IXMLAbsorptionWaterList;
  FAppearance := CreateCollection(TXMLAppearanceList, IXMLAppearance, 'Appearance') as IXMLAppearanceList;
  FAsh := CreateCollection(TXMLAshList, IXMLAsh, 'Ash') as IXMLAshList;
  FBasisWeight := CreateCollection(TXMLBasisWeightList, IXMLBasisWeight, 'BasisWeight') as IXMLBasisWeightList;
  FBendingResistance := CreateCollection(TXMLBendingResistanceList, IXMLBendingResistance, 'BendingResistance') as IXMLBendingResistanceList;
  FBendingStiffness := CreateCollection(TXMLBendingStiffnessList, IXMLBendingStiffness, 'BendingStiffness') as IXMLBendingStiffnessList;
  FBrightness := CreateCollection(TXMLBrightnessList, IXMLBrightness, 'Brightness') as IXMLBrightnessList;
  FBulk := CreateCollection(TXMLBulkList, IXMLBulk, 'Bulk') as IXMLBulkList;
  FBurst := CreateCollection(TXMLBurstList, IXMLBurst, 'Burst') as IXMLBurstList;
  FBurstIndex := CreateCollection(TXMLBurstIndexList, IXMLBurstIndex, 'BurstIndex') as IXMLBurstIndexList;
  FCaliper := CreateCollection(TXMLCaliperList, IXMLCaliper, 'Caliper') as IXMLCaliperList;
  FCoatWeight := CreateCollection(TXMLCoatWeightList, IXMLCoatWeight, 'CoatWeight') as IXMLCoatWeightList;
  FColourDetail := CreateCollection(TXMLColourDetailList, IXMLColourDetail, 'ColourDetail') as IXMLColourDetailList;
  FDensity := CreateCollection(TXMLDensityList, IXMLDensity, 'Density') as IXMLDensityList;
  FDirt := CreateCollection(TXMLDirtList, IXMLDirt, 'Dirt') as IXMLDirtList;
  FDominantWavelength := CreateCollection(TXMLDominantWavelengthList, IXMLDominantWavelength, 'DominantWavelength') as IXMLDominantWavelengthList;
  FExcitationPurity := CreateCollection(TXMLExcitationPurityList, IXMLExcitationPurity, 'ExcitationPurity') as IXMLExcitationPurityList;
  FFibreLength := CreateCollection(TXMLFibreLengthList, IXMLFibreLength, 'FibreLength') as IXMLFibreLengthList;
  FFibreClassification := CreateCollection(TXMLFibreClassificationList, IXMLFibreClassification, 'FibreClassification') as IXMLFibreClassificationList;
  FFolding := CreateCollection(TXMLFoldingList, IXMLFolding, 'Folding') as IXMLFoldingList;
  FFormation := CreateCollection(TXMLFormationList, IXMLFormation, 'Formation') as IXMLFormationList;
  FFreeness := CreateCollection(TXMLFreenessList, IXMLFreeness, 'Freeness') as IXMLFreenessList;
  FFriction := CreateCollection(TXMLFrictionList, IXMLFriction, 'Friction') as IXMLFrictionList;
  FGloss := CreateCollection(TXMLGlossList, IXMLGloss, 'Gloss') as IXMLGlossList;
  FLightScattering := CreateCollection(TXMLLightScatteringList, IXMLLightScattering, 'LightScattering') as IXMLLightScatteringList;
  FLuminance := CreateCollection(TXMLLuminanceList, IXMLLuminance, 'Luminance') as IXMLLuminanceList;
  FMoisture := CreateCollection(TXMLMoistureList, IXMLMoisture, 'Moisture') as IXMLMoistureList;
  FMullen := CreateCollection(TXMLMullenList, IXMLMullen, 'Mullen') as IXMLMullenList;
  FOpacity := CreateCollection(TXMLOpacityList, IXMLOpacity, 'Opacity') as IXMLOpacityList;
  FPermeability := CreateCollection(TXMLPermeabilityList, IXMLPermeability, 'Permeability') as IXMLPermeabilityList;
  FPH := CreateCollection(TXMLPHList, IXMLPH, 'pH') as IXMLPHList;
  FPlyBond := CreateCollection(TXMLPlyBondList, IXMLPlyBond, 'PlyBond') as IXMLPlyBondList;
  FPorosity := CreateCollection(TXMLPorosityList, IXMLPorosity, 'Porosity') as IXMLPorosityList;
  FPostConsumerWaste := CreateCollection(TXMLPostConsumerWasteList, IXMLPostConsumerWaste, 'PostConsumerWaste') as IXMLPostConsumerWasteList;
  FPPI := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'PPI') as IXMLMeasurementList;
  FPreConsumerWaste := CreateCollection(TXMLPreConsumerWasteList, IXMLPreConsumerWaste, 'PreConsumerWaste') as IXMLPreConsumerWasteList;
  FRecycled := CreateCollection(TXMLRecycledList, IXMLRecycled, 'Recycled') as IXMLRecycledList;
  FResistance := CreateCollection(TXMLResistanceList, IXMLResistance, 'Resistance') as IXMLResistanceList;
  FRingCrush := CreateCollection(TXMLRingCrushList, IXMLRingCrush, 'RingCrush') as IXMLRingCrushList;
  FRoughness := CreateCollection(TXMLRoughnessList, IXMLRoughness, 'Roughness') as IXMLRoughnessList;
  FRunnabilityIndex := CreateCollection(TXMLRunnabilityIndexList, IXMLRunnabilityIndex, 'RunnabilityIndex') as IXMLRunnabilityIndexList;
  FShowThrough := CreateCollection(TXMLShowThroughList, IXMLShowThrough, 'ShowThrough') as IXMLShowThroughList;
  FSizing := CreateCollection(TXMLSizingList, IXMLSizing, 'Sizing') as IXMLSizingList;
  FSmoothness := CreateCollection(TXMLSmoothnessList, IXMLSmoothness, 'Smoothness') as IXMLSmoothnessList;
  FStiffness := CreateCollection(TXMLStiffnessList, IXMLStiffness, 'Stiffness') as IXMLStiffnessList;
  FStretch := CreateCollection(TXMLStretchList, IXMLStretch, 'Stretch') as IXMLStretchList;
  FSurfaceStrength := CreateCollection(TXMLSurfaceStrengthList, IXMLSurfaceStrength, 'SurfaceStrength') as IXMLSurfaceStrengthList;
  FTEA := CreateCollection(TXMLTEAList, IXMLTEA, 'TEA') as IXMLTEAList;
  FTear := CreateCollection(TXMLTearList, IXMLTear, 'Tear') as IXMLTearList;
  FTearIndex := CreateCollection(TXMLTearIndexList, IXMLTearIndex, 'TearIndex') as IXMLTearIndexList;
  FTensile := CreateCollection(TXMLTensileList, IXMLTensile, 'Tensile') as IXMLTensileList;
  FTensileIndex := CreateCollection(TXMLTensileIndexList, IXMLTensileIndex, 'TensileIndex') as IXMLTensileIndexList;
  FWhiteness := CreateCollection(TXMLWhitenessList, IXMLWhiteness, 'Whiteness') as IXMLWhitenessList;
  FNumberOfPlies := CreateCollection(TXMLNni1List, IXMLNode, 'NumberOfPlies') as IXMLNni1List;
  FPlyAttributes := CreateCollection(TXMLPlyAttributesList, IXMLPlyAttributes, 'PlyAttributes') as IXMLPlyAttributesList;
  FPlySet := CreateCollection(TXMLPlySetList, IXMLPlySet, 'PlySet') as IXMLPlySetList;
  inherited;
end;

function TXMLPaperCharacteristics.Get_CoatingTop: UnicodeString;
begin
  Result := AttributeNodes['CoatingTop'].Text;
end;

procedure TXMLPaperCharacteristics.Set_CoatingTop(Value: UnicodeString);
begin
  SetAttribute('CoatingTop', Value);
end;

function TXMLPaperCharacteristics.Get_CoatingBottom: UnicodeString;
begin
  Result := AttributeNodes['CoatingBottom'].Text;
end;

procedure TXMLPaperCharacteristics.Set_CoatingBottom(Value: UnicodeString);
begin
  SetAttribute('CoatingBottom', Value);
end;

function TXMLPaperCharacteristics.Get_FinishType: UnicodeString;
begin
  Result := AttributeNodes['FinishType'].Text;
end;

procedure TXMLPaperCharacteristics.Set_FinishType(Value: UnicodeString);
begin
  SetAttribute('FinishType', Value);
end;

function TXMLPaperCharacteristics.Get_PrintType: UnicodeString;
begin
  Result := AttributeNodes['PrintType'].Text;
end;

procedure TXMLPaperCharacteristics.Set_PrintType(Value: UnicodeString);
begin
  SetAttribute('PrintType', Value);
end;

function TXMLPaperCharacteristics.Get_Abrasion: IXMLAbrasionList;
begin
  Result := FAbrasion;
end;

function TXMLPaperCharacteristics.Get_AbsorptionInk: IXMLAbsorptionInkList;
begin
  Result := FAbsorptionInk;
end;

function TXMLPaperCharacteristics.Get_AbsorptionLight: IXMLAbsorptionLightList;
begin
  Result := FAbsorptionLight;
end;

function TXMLPaperCharacteristics.Get_AbsorptionWater: IXMLAbsorptionWaterList;
begin
  Result := FAbsorptionWater;
end;

function TXMLPaperCharacteristics.Get_Appearance: IXMLAppearanceList;
begin
  Result := FAppearance;
end;

function TXMLPaperCharacteristics.Get_Ash: IXMLAshList;
begin
  Result := FAsh;
end;

function TXMLPaperCharacteristics.Get_BasisWeight: IXMLBasisWeightList;
begin
  Result := FBasisWeight;
end;

function TXMLPaperCharacteristics.Get_BendingResistance: IXMLBendingResistanceList;
begin
  Result := FBendingResistance;
end;

function TXMLPaperCharacteristics.Get_BendingStiffness: IXMLBendingStiffnessList;
begin
  Result := FBendingStiffness;
end;

function TXMLPaperCharacteristics.Get_Brightness: IXMLBrightnessList;
begin
  Result := FBrightness;
end;

function TXMLPaperCharacteristics.Get_Bulk: IXMLBulkList;
begin
  Result := FBulk;
end;

function TXMLPaperCharacteristics.Get_Burst: IXMLBurstList;
begin
  Result := FBurst;
end;

function TXMLPaperCharacteristics.Get_BurstIndex: IXMLBurstIndexList;
begin
  Result := FBurstIndex;
end;

function TXMLPaperCharacteristics.Get_Caliper: IXMLCaliperList;
begin
  Result := FCaliper;
end;

function TXMLPaperCharacteristics.Get_CoatWeight: IXMLCoatWeightList;
begin
  Result := FCoatWeight;
end;

function TXMLPaperCharacteristics.Get_ColourDetail: IXMLColourDetailList;
begin
  Result := FColourDetail;
end;

function TXMLPaperCharacteristics.Get_Density: IXMLDensityList;
begin
  Result := FDensity;
end;

function TXMLPaperCharacteristics.Get_Dirt: IXMLDirtList;
begin
  Result := FDirt;
end;

function TXMLPaperCharacteristics.Get_DominantWavelength: IXMLDominantWavelengthList;
begin
  Result := FDominantWavelength;
end;

function TXMLPaperCharacteristics.Get_ExcitationPurity: IXMLExcitationPurityList;
begin
  Result := FExcitationPurity;
end;

function TXMLPaperCharacteristics.Get_FibreLength: IXMLFibreLengthList;
begin
  Result := FFibreLength;
end;

function TXMLPaperCharacteristics.Get_FibreClassification: IXMLFibreClassificationList;
begin
  Result := FFibreClassification;
end;

function TXMLPaperCharacteristics.Get_Folding: IXMLFoldingList;
begin
  Result := FFolding;
end;

function TXMLPaperCharacteristics.Get_Formation: IXMLFormationList;
begin
  Result := FFormation;
end;

function TXMLPaperCharacteristics.Get_Freeness: IXMLFreenessList;
begin
  Result := FFreeness;
end;

function TXMLPaperCharacteristics.Get_Friction: IXMLFrictionList;
begin
  Result := FFriction;
end;

function TXMLPaperCharacteristics.Get_Gloss: IXMLGlossList;
begin
  Result := FGloss;
end;

function TXMLPaperCharacteristics.Get_LightScattering: IXMLLightScatteringList;
begin
  Result := FLightScattering;
end;

function TXMLPaperCharacteristics.Get_Luminance: IXMLLuminanceList;
begin
  Result := FLuminance;
end;

function TXMLPaperCharacteristics.Get_Moisture: IXMLMoistureList;
begin
  Result := FMoisture;
end;

function TXMLPaperCharacteristics.Get_Mullen: IXMLMullenList;
begin
  Result := FMullen;
end;

function TXMLPaperCharacteristics.Get_Opacity: IXMLOpacityList;
begin
  Result := FOpacity;
end;

function TXMLPaperCharacteristics.Get_Permeability: IXMLPermeabilityList;
begin
  Result := FPermeability;
end;

function TXMLPaperCharacteristics.Get_PH: IXMLPHList;
begin
  Result := FPH;
end;

function TXMLPaperCharacteristics.Get_PlyBond: IXMLPlyBondList;
begin
  Result := FPlyBond;
end;

function TXMLPaperCharacteristics.Get_Porosity: IXMLPorosityList;
begin
  Result := FPorosity;
end;

function TXMLPaperCharacteristics.Get_PostConsumerWaste: IXMLPostConsumerWasteList;
begin
  Result := FPostConsumerWaste;
end;

function TXMLPaperCharacteristics.Get_PPI: IXMLMeasurementList;
begin
  Result := FPPI;
end;

function TXMLPaperCharacteristics.Get_PreConsumerWaste: IXMLPreConsumerWasteList;
begin
  Result := FPreConsumerWaste;
end;

function TXMLPaperCharacteristics.Get_Recycled: IXMLRecycledList;
begin
  Result := FRecycled;
end;

function TXMLPaperCharacteristics.Get_Resistance: IXMLResistanceList;
begin
  Result := FResistance;
end;

function TXMLPaperCharacteristics.Get_RingCrush: IXMLRingCrushList;
begin
  Result := FRingCrush;
end;

function TXMLPaperCharacteristics.Get_Roughness: IXMLRoughnessList;
begin
  Result := FRoughness;
end;

function TXMLPaperCharacteristics.Get_RunnabilityIndex: IXMLRunnabilityIndexList;
begin
  Result := FRunnabilityIndex;
end;

function TXMLPaperCharacteristics.Get_ShowThrough: IXMLShowThroughList;
begin
  Result := FShowThrough;
end;

function TXMLPaperCharacteristics.Get_Sizing: IXMLSizingList;
begin
  Result := FSizing;
end;

function TXMLPaperCharacteristics.Get_Smoothness: IXMLSmoothnessList;
begin
  Result := FSmoothness;
end;

function TXMLPaperCharacteristics.Get_Stiffness: IXMLStiffnessList;
begin
  Result := FStiffness;
end;

function TXMLPaperCharacteristics.Get_Stretch: IXMLStretchList;
begin
  Result := FStretch;
end;

function TXMLPaperCharacteristics.Get_SurfaceStrength: IXMLSurfaceStrengthList;
begin
  Result := FSurfaceStrength;
end;

function TXMLPaperCharacteristics.Get_TEA: IXMLTEAList;
begin
  Result := FTEA;
end;

function TXMLPaperCharacteristics.Get_Tear: IXMLTearList;
begin
  Result := FTear;
end;

function TXMLPaperCharacteristics.Get_TearIndex: IXMLTearIndexList;
begin
  Result := FTearIndex;
end;

function TXMLPaperCharacteristics.Get_Tensile: IXMLTensileList;
begin
  Result := FTensile;
end;

function TXMLPaperCharacteristics.Get_TensileIndex: IXMLTensileIndexList;
begin
  Result := FTensileIndex;
end;

function TXMLPaperCharacteristics.Get_Whiteness: IXMLWhitenessList;
begin
  Result := FWhiteness;
end;

function TXMLPaperCharacteristics.Get_AdditionalTest: IXMLAdditionalTest;
begin
  Result := ChildNodes['AdditionalTest'] as IXMLAdditionalTest;
end;

function TXMLPaperCharacteristics.Get_NumberOfPlies: IXMLNni1List;
begin
  Result := FNumberOfPlies;
end;

function TXMLPaperCharacteristics.Get_PlyAttributes: IXMLPlyAttributesList;
begin
  Result := FPlyAttributes;
end;

function TXMLPaperCharacteristics.Get_PlySet: IXMLPlySetList;
begin
  Result := FPlySet;
end;

{ TXMLAbrasion }

function TXMLAbrasion.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbrasion.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbrasion.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbrasion.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbrasion.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbrasion.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbrasion.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbrasion.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbrasionList }

function TXMLAbrasionList.Add: IXMLAbrasion;
begin
  Result := AddItem(-1) as IXMLAbrasion;
end;

function TXMLAbrasionList.Insert(const Index: Integer): IXMLAbrasion;
begin
  Result := AddItem(Index) as IXMLAbrasion;
end;

function TXMLAbrasionList.Get_Item(Index: Integer): IXMLAbrasion;
begin
  Result := List[Index] as IXMLAbrasion;
end;

{ TXMLAbsorptionInk }

function TXMLAbsorptionInk.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbsorptionInk.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbsorptionInk.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbsorptionInk.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbsorptionInk.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbsorptionInk.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbsorptionInk.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbsorptionInk.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbsorptionInkList }

function TXMLAbsorptionInkList.Add: IXMLAbsorptionInk;
begin
  Result := AddItem(-1) as IXMLAbsorptionInk;
end;

function TXMLAbsorptionInkList.Insert(const Index: Integer): IXMLAbsorptionInk;
begin
  Result := AddItem(Index) as IXMLAbsorptionInk;
end;

function TXMLAbsorptionInkList.Get_Item(Index: Integer): IXMLAbsorptionInk;
begin
  Result := List[Index] as IXMLAbsorptionInk;
end;

{ TXMLAbsorptionLight }

function TXMLAbsorptionLight.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbsorptionLight.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbsorptionLight.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbsorptionLight.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbsorptionLight.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbsorptionLight.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbsorptionLight.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbsorptionLight.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbsorptionLightList }

function TXMLAbsorptionLightList.Add: IXMLAbsorptionLight;
begin
  Result := AddItem(-1) as IXMLAbsorptionLight;
end;

function TXMLAbsorptionLightList.Insert(const Index: Integer): IXMLAbsorptionLight;
begin
  Result := AddItem(Index) as IXMLAbsorptionLight;
end;

function TXMLAbsorptionLightList.Get_Item(Index: Integer): IXMLAbsorptionLight;
begin
  Result := List[Index] as IXMLAbsorptionLight;
end;

{ TXMLAbsorptionWater }

function TXMLAbsorptionWater.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbsorptionWater.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbsorptionWater.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbsorptionWater.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbsorptionWater.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbsorptionWater.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbsorptionWater.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbsorptionWater.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbsorptionWaterList }

function TXMLAbsorptionWaterList.Add: IXMLAbsorptionWater;
begin
  Result := AddItem(-1) as IXMLAbsorptionWater;
end;

function TXMLAbsorptionWaterList.Insert(const Index: Integer): IXMLAbsorptionWater;
begin
  Result := AddItem(Index) as IXMLAbsorptionWater;
end;

function TXMLAbsorptionWaterList.Get_Item(Index: Integer): IXMLAbsorptionWater;
begin
  Result := List[Index] as IXMLAbsorptionWater;
end;

{ TXMLAppearance }

function TXMLAppearance.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAppearance.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAppearance.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAppearance.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAppearance.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAppearance.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAppearance.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAppearance.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAppearanceList }

function TXMLAppearanceList.Add: IXMLAppearance;
begin
  Result := AddItem(-1) as IXMLAppearance;
end;

function TXMLAppearanceList.Insert(const Index: Integer): IXMLAppearance;
begin
  Result := AddItem(Index) as IXMLAppearance;
end;

function TXMLAppearanceList.Get_Item(Index: Integer): IXMLAppearance;
begin
  Result := List[Index] as IXMLAppearance;
end;

{ TXMLAsh }

function TXMLAsh.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAsh.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAsh.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAsh.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAsh.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAsh.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAsh.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAsh.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAshList }

function TXMLAshList.Add: IXMLAsh;
begin
  Result := AddItem(-1) as IXMLAsh;
end;

function TXMLAshList.Insert(const Index: Integer): IXMLAsh;
begin
  Result := AddItem(Index) as IXMLAsh;
end;

function TXMLAshList.Get_Item(Index: Integer): IXMLAsh;
begin
  Result := List[Index] as IXMLAsh;
end;

{ TXMLBasisWeight }

procedure TXMLBasisWeight.AfterConstruction;
begin
  RegisterChildNode('DetailValue', TXMLDetailValue);
  RegisterChildNode('DetailRangeMin', TXMLDetailRangeMin);
  RegisterChildNode('DetailRangeMax', TXMLDetailRangeMax);
  RegisterChildNode('StandardDeviation', TXMLStandardDeviation);
  RegisterChildNode('TwoSigmaLower', TXMLTwoSigmaLower);
  RegisterChildNode('TwoSigmaUpper', TXMLTwoSigmaUpper);
  RegisterChildNode('IncrementalValue', TXMLIncrementalValue);
  FIncrementalValue := CreateCollection(TXMLIncrementalValueList, IXMLIncrementalValue, 'IncrementalValue') as IXMLIncrementalValueList;
  inherited;
end;

function TXMLBasisWeight.Get_ProductBasisSizeType: UnicodeString;
begin
  Result := AttributeNodes['ProductBasisSizeType'].Text;
end;

procedure TXMLBasisWeight.Set_ProductBasisSizeType(Value: UnicodeString);
begin
  SetAttribute('ProductBasisSizeType', Value);
end;

function TXMLBasisWeight.Get_DetailValue: IXMLDetailValue;
begin
  Result := ChildNodes['DetailValue'] as IXMLDetailValue;
end;

function TXMLBasisWeight.Get_DetailRangeMin: IXMLDetailRangeMin;
begin
  Result := ChildNodes['DetailRangeMin'] as IXMLDetailRangeMin;
end;

function TXMLBasisWeight.Get_DetailRangeMax: IXMLDetailRangeMax;
begin
  Result := ChildNodes['DetailRangeMax'] as IXMLDetailRangeMax;
end;

function TXMLBasisWeight.Get_StandardDeviation: IXMLStandardDeviation;
begin
  Result := ChildNodes['StandardDeviation'] as IXMLStandardDeviation;
end;

function TXMLBasisWeight.Get_SampleSize: LongWord;
begin
  Result := ChildNodes['SampleSize'].NodeValue;
end;

procedure TXMLBasisWeight.Set_SampleSize(Value: LongWord);
begin
  ChildNodes['SampleSize'].NodeValue := Value;
end;

function TXMLBasisWeight.Get_TwoSigmaLower: IXMLTwoSigmaLower;
begin
  Result := ChildNodes['TwoSigmaLower'] as IXMLTwoSigmaLower;
end;

function TXMLBasisWeight.Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
begin
  Result := ChildNodes['TwoSigmaUpper'] as IXMLTwoSigmaUpper;
end;

function TXMLBasisWeight.Get_IncrementalValue: IXMLIncrementalValueList;
begin
  Result := FIncrementalValue;
end;

{ TXMLIncrementalValue }

function TXMLIncrementalValue.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLIncrementalValue.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLIncrementalValueList }

function TXMLIncrementalValueList.Add: IXMLIncrementalValue;
begin
  Result := AddItem(-1) as IXMLIncrementalValue;
end;

function TXMLIncrementalValueList.Insert(const Index: Integer): IXMLIncrementalValue;
begin
  Result := AddItem(Index) as IXMLIncrementalValue;
end;

function TXMLIncrementalValueList.Get_Item(Index: Integer): IXMLIncrementalValue;
begin
  Result := List[Index] as IXMLIncrementalValue;
end;

{ TXMLBendingResistance }

function TXMLBendingResistance.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBendingResistance.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBendingResistance.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBendingResistance.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBendingResistance.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBendingResistance.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBendingResistance.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBendingResistance.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBendingResistanceList }

function TXMLBendingResistanceList.Add: IXMLBendingResistance;
begin
  Result := AddItem(-1) as IXMLBendingResistance;
end;

function TXMLBendingResistanceList.Insert(const Index: Integer): IXMLBendingResistance;
begin
  Result := AddItem(Index) as IXMLBendingResistance;
end;

function TXMLBendingResistanceList.Get_Item(Index: Integer): IXMLBendingResistance;
begin
  Result := List[Index] as IXMLBendingResistance;
end;

{ TXMLBendingStiffness }

function TXMLBendingStiffness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBendingStiffness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBendingStiffness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBendingStiffness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBendingStiffness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBendingStiffness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBendingStiffness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBendingStiffness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBendingStiffnessList }

function TXMLBendingStiffnessList.Add: IXMLBendingStiffness;
begin
  Result := AddItem(-1) as IXMLBendingStiffness;
end;

function TXMLBendingStiffnessList.Insert(const Index: Integer): IXMLBendingStiffness;
begin
  Result := AddItem(Index) as IXMLBendingStiffness;
end;

function TXMLBendingStiffnessList.Get_Item(Index: Integer): IXMLBendingStiffness;
begin
  Result := List[Index] as IXMLBendingStiffness;
end;

{ TXMLBrightness }

function TXMLBrightness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBrightness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBrightness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBrightness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBrightness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBrightness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBrightness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBrightness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBrightnessList }

function TXMLBrightnessList.Add: IXMLBrightness;
begin
  Result := AddItem(-1) as IXMLBrightness;
end;

function TXMLBrightnessList.Insert(const Index: Integer): IXMLBrightness;
begin
  Result := AddItem(Index) as IXMLBrightness;
end;

function TXMLBrightnessList.Get_Item(Index: Integer): IXMLBrightness;
begin
  Result := List[Index] as IXMLBrightness;
end;

{ TXMLBulk }

function TXMLBulk.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBulk.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBulk.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBulk.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBulk.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBulk.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBulk.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBulk.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBulkList }

function TXMLBulkList.Add: IXMLBulk;
begin
  Result := AddItem(-1) as IXMLBulk;
end;

function TXMLBulkList.Insert(const Index: Integer): IXMLBulk;
begin
  Result := AddItem(Index) as IXMLBulk;
end;

function TXMLBulkList.Get_Item(Index: Integer): IXMLBulk;
begin
  Result := List[Index] as IXMLBulk;
end;

{ TXMLBurst }

function TXMLBurst.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBurst.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBurst.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBurst.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBurst.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBurst.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBurst.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBurst.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBurstList }

function TXMLBurstList.Add: IXMLBurst;
begin
  Result := AddItem(-1) as IXMLBurst;
end;

function TXMLBurstList.Insert(const Index: Integer): IXMLBurst;
begin
  Result := AddItem(Index) as IXMLBurst;
end;

function TXMLBurstList.Get_Item(Index: Integer): IXMLBurst;
begin
  Result := List[Index] as IXMLBurst;
end;

{ TXMLBurstIndex }

function TXMLBurstIndex.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBurstIndex.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBurstIndex.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBurstIndex.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBurstIndex.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBurstIndex.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBurstIndex.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBurstIndex.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBurstIndexList }

function TXMLBurstIndexList.Add: IXMLBurstIndex;
begin
  Result := AddItem(-1) as IXMLBurstIndex;
end;

function TXMLBurstIndexList.Insert(const Index: Integer): IXMLBurstIndex;
begin
  Result := AddItem(Index) as IXMLBurstIndex;
end;

function TXMLBurstIndexList.Get_Item(Index: Integer): IXMLBurstIndex;
begin
  Result := List[Index] as IXMLBurstIndex;
end;

{ TXMLCaliper }

function TXMLCaliper.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLCaliper.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLCaliper.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLCaliper.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLCaliper.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLCaliper.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLCaliper.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLCaliper.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLCaliperList }

function TXMLCaliperList.Add: IXMLCaliper;
begin
  Result := AddItem(-1) as IXMLCaliper;
end;

function TXMLCaliperList.Insert(const Index: Integer): IXMLCaliper;
begin
  Result := AddItem(Index) as IXMLCaliper;
end;

function TXMLCaliperList.Get_Item(Index: Integer): IXMLCaliper;
begin
  Result := List[Index] as IXMLCaliper;
end;

{ TXMLCoatWeight }

function TXMLCoatWeight.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLCoatWeight.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLCoatWeight.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLCoatWeight.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLCoatWeight.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLCoatWeight.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLCoatWeight.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLCoatWeight.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLCoatWeightList }

function TXMLCoatWeightList.Add: IXMLCoatWeight;
begin
  Result := AddItem(-1) as IXMLCoatWeight;
end;

function TXMLCoatWeightList.Insert(const Index: Integer): IXMLCoatWeight;
begin
  Result := AddItem(Index) as IXMLCoatWeight;
end;

function TXMLCoatWeightList.Get_Item(Index: Integer): IXMLCoatWeight;
begin
  Result := List[Index] as IXMLCoatWeight;
end;

{ TXMLColourDetail }

procedure TXMLColourDetail.AfterConstruction;
begin
  RegisterChildNode('CMYK', TXMLCMYK);
  RegisterChildNode('ColourShade', TXMLColourShade);
  RegisterChildNode('HSB', TXMLHSB);
  RegisterChildNode('Lab', TXMLLab);
  RegisterChildNode('RGB', TXMLRGB);
  RegisterChildNode('ColourCode', TXMLColourCode);
  FColourDescription := CreateCollection(TXMLS72List, IXMLNode, 'ColourDescription') as IXMLS72List;
  inherited;
end;

function TXMLColourDetail.Get_CMYK: IXMLCMYK;
begin
  Result := ChildNodes['CMYK'] as IXMLCMYK;
end;

function TXMLColourDetail.Get_ColourShade: IXMLColourShade;
begin
  Result := ChildNodes['ColourShade'] as IXMLColourShade;
end;

function TXMLColourDetail.Get_HSB: IXMLHSB;
begin
  Result := ChildNodes['HSB'] as IXMLHSB;
end;

function TXMLColourDetail.Get_Lab: IXMLLab;
begin
  Result := ChildNodes['Lab'] as IXMLLab;
end;

function TXMLColourDetail.Get_RGB: IXMLRGB;
begin
  Result := ChildNodes['RGB'] as IXMLRGB;
end;

function TXMLColourDetail.Get_ColourDescription: IXMLS72List;
begin
  Result := FColourDescription;
end;

function TXMLColourDetail.Get_ColourCode: IXMLColourCode;
begin
  Result := ChildNodes['ColourCode'] as IXMLColourCode;
end;

{ TXMLColourDetailList }

function TXMLColourDetailList.Add: IXMLColourDetail;
begin
  Result := AddItem(-1) as IXMLColourDetail;
end;

function TXMLColourDetailList.Insert(const Index: Integer): IXMLColourDetail;
begin
  Result := AddItem(Index) as IXMLColourDetail;
end;

function TXMLColourDetailList.Get_Item(Index: Integer): IXMLColourDetail;
begin
  Result := List[Index] as IXMLColourDetail;
end;

{ TXMLCMYK }

procedure TXMLCMYK.AfterConstruction;
begin
  RegisterChildNode('Cyan', TXMLDetailMeasurement);
  RegisterChildNode('Magenta', TXMLDetailMeasurement);
  RegisterChildNode('Yellow', TXMLDetailMeasurement);
  RegisterChildNode('Black', TXMLDetailMeasurement);
  inherited;
end;

function TXMLCMYK.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLCMYK.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLCMYK.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLCMYK.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLCMYK.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLCMYK.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLCMYK.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLCMYK.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLCMYK.Get_Cyan: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Cyan'] as IXMLDetailMeasurement;
end;

function TXMLCMYK.Get_Magenta: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Magenta'] as IXMLDetailMeasurement;
end;

function TXMLCMYK.Get_Yellow: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Yellow'] as IXMLDetailMeasurement;
end;

function TXMLCMYK.Get_Black: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Black'] as IXMLDetailMeasurement;
end;

{ TXMLColourShade }

function TXMLColourShade.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLColourShade.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLHSB }

procedure TXMLHSB.AfterConstruction;
begin
  RegisterChildNode('Hue', TXMLDetailMeasurement);
  RegisterChildNode('Saturation', TXMLDetailMeasurement);
  RegisterChildNode('Brilliance', TXMLDetailMeasurement);
  inherited;
end;

function TXMLHSB.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLHSB.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLHSB.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLHSB.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLHSB.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLHSB.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLHSB.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLHSB.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLHSB.Get_Hue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Hue'] as IXMLDetailMeasurement;
end;

function TXMLHSB.Get_Saturation: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Saturation'] as IXMLDetailMeasurement;
end;

function TXMLHSB.Get_Brilliance: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Brilliance'] as IXMLDetailMeasurement;
end;

{ TXMLLab }

procedure TXMLLab.AfterConstruction;
begin
  RegisterChildNode('L', TXMLDetailMeasurement);
  RegisterChildNode('a', TXMLDetailMeasurement);
  RegisterChildNode('b', TXMLDetailMeasurement);
  inherited;
end;

function TXMLLab.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLLab.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLLab.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLLab.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLLab.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLLab.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLLab.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLLab.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLLab.Get_L: IXMLDetailMeasurement;
begin
  Result := ChildNodes[WideString('L')] as IXMLDetailMeasurement;
end;

function TXMLLab.Get_A: IXMLDetailMeasurement;
begin
  Result := ChildNodes[WideString('a')] as IXMLDetailMeasurement;
end;

function TXMLLab.Get_B: IXMLDetailMeasurement;
begin
  Result := ChildNodes[WideString('b')] as IXMLDetailMeasurement;
end;

{ TXMLRGB }

procedure TXMLRGB.AfterConstruction;
begin
  RegisterChildNode('Red', TXMLDetailMeasurement);
  RegisterChildNode('Green', TXMLDetailMeasurement);
  RegisterChildNode('Blue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLRGB.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRGB.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRGB.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRGB.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRGB.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRGB.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRGB.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRGB.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLRGB.Get_Red: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Red'] as IXMLDetailMeasurement;
end;

function TXMLRGB.Get_Green: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Green'] as IXMLDetailMeasurement;
end;

function TXMLRGB.Get_Blue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Blue'] as IXMLDetailMeasurement;
end;

{ TXMLColourCode }

function TXMLColourCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLColourCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLDensity }

function TXMLDensity.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDensity.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDensity.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDensity.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDensity.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDensity.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDensity.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDensity.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDensityList }

function TXMLDensityList.Add: IXMLDensity;
begin
  Result := AddItem(-1) as IXMLDensity;
end;

function TXMLDensityList.Insert(const Index: Integer): IXMLDensity;
begin
  Result := AddItem(Index) as IXMLDensity;
end;

function TXMLDensityList.Get_Item(Index: Integer): IXMLDensity;
begin
  Result := List[Index] as IXMLDensity;
end;

{ TXMLDirt }

function TXMLDirt.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDirt.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDirt.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDirt.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDirt.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDirt.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDirt.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDirt.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDirtList }

function TXMLDirtList.Add: IXMLDirt;
begin
  Result := AddItem(-1) as IXMLDirt;
end;

function TXMLDirtList.Insert(const Index: Integer): IXMLDirt;
begin
  Result := AddItem(Index) as IXMLDirt;
end;

function TXMLDirtList.Get_Item(Index: Integer): IXMLDirt;
begin
  Result := List[Index] as IXMLDirt;
end;

{ TXMLDominantWavelength }

function TXMLDominantWavelength.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDominantWavelength.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDominantWavelength.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDominantWavelength.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDominantWavelength.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDominantWavelength.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDominantWavelength.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDominantWavelength.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDominantWavelengthList }

function TXMLDominantWavelengthList.Add: IXMLDominantWavelength;
begin
  Result := AddItem(-1) as IXMLDominantWavelength;
end;

function TXMLDominantWavelengthList.Insert(const Index: Integer): IXMLDominantWavelength;
begin
  Result := AddItem(Index) as IXMLDominantWavelength;
end;

function TXMLDominantWavelengthList.Get_Item(Index: Integer): IXMLDominantWavelength;
begin
  Result := List[Index] as IXMLDominantWavelength;
end;

{ TXMLExcitationPurity }

function TXMLExcitationPurity.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLExcitationPurity.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLExcitationPurity.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLExcitationPurity.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLExcitationPurity.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLExcitationPurity.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLExcitationPurity.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLExcitationPurity.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLExcitationPurityList }

function TXMLExcitationPurityList.Add: IXMLExcitationPurity;
begin
  Result := AddItem(-1) as IXMLExcitationPurity;
end;

function TXMLExcitationPurityList.Insert(const Index: Integer): IXMLExcitationPurity;
begin
  Result := AddItem(Index) as IXMLExcitationPurity;
end;

function TXMLExcitationPurityList.Get_Item(Index: Integer): IXMLExcitationPurity;
begin
  Result := List[Index] as IXMLExcitationPurity;
end;

{ TXMLFibreLength }

function TXMLFibreLength.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFibreLength.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFibreLength.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFibreLength.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFibreLength.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFibreLength.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFibreLength.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFibreLength.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFibreLengthList }

function TXMLFibreLengthList.Add: IXMLFibreLength;
begin
  Result := AddItem(-1) as IXMLFibreLength;
end;

function TXMLFibreLengthList.Insert(const Index: Integer): IXMLFibreLength;
begin
  Result := AddItem(Index) as IXMLFibreLength;
end;

function TXMLFibreLengthList.Get_Item(Index: Integer): IXMLFibreLength;
begin
  Result := List[Index] as IXMLFibreLength;
end;

{ TXMLFibreClassification }

function TXMLFibreClassification.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFibreClassification.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFibreClassification.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFibreClassification.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFibreClassification.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFibreClassification.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFibreClassification.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFibreClassification.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFibreClassificationList }

function TXMLFibreClassificationList.Add: IXMLFibreClassification;
begin
  Result := AddItem(-1) as IXMLFibreClassification;
end;

function TXMLFibreClassificationList.Insert(const Index: Integer): IXMLFibreClassification;
begin
  Result := AddItem(Index) as IXMLFibreClassification;
end;

function TXMLFibreClassificationList.Get_Item(Index: Integer): IXMLFibreClassification;
begin
  Result := List[Index] as IXMLFibreClassification;
end;

{ TXMLFolding }

function TXMLFolding.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFolding.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFolding.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFolding.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFolding.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFolding.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFolding.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFolding.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFoldingList }

function TXMLFoldingList.Add: IXMLFolding;
begin
  Result := AddItem(-1) as IXMLFolding;
end;

function TXMLFoldingList.Insert(const Index: Integer): IXMLFolding;
begin
  Result := AddItem(Index) as IXMLFolding;
end;

function TXMLFoldingList.Get_Item(Index: Integer): IXMLFolding;
begin
  Result := List[Index] as IXMLFolding;
end;

{ TXMLFormation }

function TXMLFormation.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFormation.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFormation.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFormation.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFormation.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFormation.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFormation.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFormation.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFormationList }

function TXMLFormationList.Add: IXMLFormation;
begin
  Result := AddItem(-1) as IXMLFormation;
end;

function TXMLFormationList.Insert(const Index: Integer): IXMLFormation;
begin
  Result := AddItem(Index) as IXMLFormation;
end;

function TXMLFormationList.Get_Item(Index: Integer): IXMLFormation;
begin
  Result := List[Index] as IXMLFormation;
end;

{ TXMLFreeness }

function TXMLFreeness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFreeness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFreeness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFreeness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFreeness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFreeness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFreeness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFreeness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFreenessList }

function TXMLFreenessList.Add: IXMLFreeness;
begin
  Result := AddItem(-1) as IXMLFreeness;
end;

function TXMLFreenessList.Insert(const Index: Integer): IXMLFreeness;
begin
  Result := AddItem(Index) as IXMLFreeness;
end;

function TXMLFreenessList.Get_Item(Index: Integer): IXMLFreeness;
begin
  Result := List[Index] as IXMLFreeness;
end;

{ TXMLFriction }

function TXMLFriction.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFriction.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFriction.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFriction.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFriction.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFriction.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFriction.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFriction.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFrictionList }

function TXMLFrictionList.Add: IXMLFriction;
begin
  Result := AddItem(-1) as IXMLFriction;
end;

function TXMLFrictionList.Insert(const Index: Integer): IXMLFriction;
begin
  Result := AddItem(Index) as IXMLFriction;
end;

function TXMLFrictionList.Get_Item(Index: Integer): IXMLFriction;
begin
  Result := List[Index] as IXMLFriction;
end;

{ TXMLGloss }

function TXMLGloss.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLGloss.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLGloss.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLGloss.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLGloss.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLGloss.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLGloss.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLGloss.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLGlossList }

function TXMLGlossList.Add: IXMLGloss;
begin
  Result := AddItem(-1) as IXMLGloss;
end;

function TXMLGlossList.Insert(const Index: Integer): IXMLGloss;
begin
  Result := AddItem(Index) as IXMLGloss;
end;

function TXMLGlossList.Get_Item(Index: Integer): IXMLGloss;
begin
  Result := List[Index] as IXMLGloss;
end;

{ TXMLLightScattering }

function TXMLLightScattering.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLLightScattering.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLLightScattering.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLLightScattering.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLLightScattering.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLLightScattering.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLLightScattering.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLLightScattering.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLLightScatteringList }

function TXMLLightScatteringList.Add: IXMLLightScattering;
begin
  Result := AddItem(-1) as IXMLLightScattering;
end;

function TXMLLightScatteringList.Insert(const Index: Integer): IXMLLightScattering;
begin
  Result := AddItem(Index) as IXMLLightScattering;
end;

function TXMLLightScatteringList.Get_Item(Index: Integer): IXMLLightScattering;
begin
  Result := List[Index] as IXMLLightScattering;
end;

{ TXMLLuminance }

function TXMLLuminance.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLLuminance.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLLuminance.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLLuminance.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLLuminance.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLLuminance.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLLuminance.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLLuminance.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLLuminanceList }

function TXMLLuminanceList.Add: IXMLLuminance;
begin
  Result := AddItem(-1) as IXMLLuminance;
end;

function TXMLLuminanceList.Insert(const Index: Integer): IXMLLuminance;
begin
  Result := AddItem(Index) as IXMLLuminance;
end;

function TXMLLuminanceList.Get_Item(Index: Integer): IXMLLuminance;
begin
  Result := List[Index] as IXMLLuminance;
end;

{ TXMLMoisture }

function TXMLMoisture.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLMoisture.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLMoisture.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLMoisture.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLMoisture.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLMoisture.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLMoisture.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLMoisture.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLMoistureList }

function TXMLMoistureList.Add: IXMLMoisture;
begin
  Result := AddItem(-1) as IXMLMoisture;
end;

function TXMLMoistureList.Insert(const Index: Integer): IXMLMoisture;
begin
  Result := AddItem(Index) as IXMLMoisture;
end;

function TXMLMoistureList.Get_Item(Index: Integer): IXMLMoisture;
begin
  Result := List[Index] as IXMLMoisture;
end;

{ TXMLMullen }

function TXMLMullen.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLMullen.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLMullen.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLMullen.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLMullen.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLMullen.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLMullen.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLMullen.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLMullenList }

function TXMLMullenList.Add: IXMLMullen;
begin
  Result := AddItem(-1) as IXMLMullen;
end;

function TXMLMullenList.Insert(const Index: Integer): IXMLMullen;
begin
  Result := AddItem(Index) as IXMLMullen;
end;

function TXMLMullenList.Get_Item(Index: Integer): IXMLMullen;
begin
  Result := List[Index] as IXMLMullen;
end;

{ TXMLOpacity }

function TXMLOpacity.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLOpacity.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLOpacity.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLOpacity.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLOpacity.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLOpacity.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLOpacity.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLOpacity.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLOpacityList }

function TXMLOpacityList.Add: IXMLOpacity;
begin
  Result := AddItem(-1) as IXMLOpacity;
end;

function TXMLOpacityList.Insert(const Index: Integer): IXMLOpacity;
begin
  Result := AddItem(Index) as IXMLOpacity;
end;

function TXMLOpacityList.Get_Item(Index: Integer): IXMLOpacity;
begin
  Result := List[Index] as IXMLOpacity;
end;

{ TXMLPermeability }

function TXMLPermeability.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPermeability.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPermeability.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPermeability.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPermeability.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPermeability.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPermeability.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPermeability.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPermeabilityList }

function TXMLPermeabilityList.Add: IXMLPermeability;
begin
  Result := AddItem(-1) as IXMLPermeability;
end;

function TXMLPermeabilityList.Insert(const Index: Integer): IXMLPermeability;
begin
  Result := AddItem(Index) as IXMLPermeability;
end;

function TXMLPermeabilityList.Get_Item(Index: Integer): IXMLPermeability;
begin
  Result := List[Index] as IXMLPermeability;
end;

{ TXMLPH }

function TXMLPH.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPH.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPH.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPH.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPH.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPH.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPH.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPH.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPHList }

function TXMLPHList.Add: IXMLPH;
begin
  Result := AddItem(-1) as IXMLPH;
end;

function TXMLPHList.Insert(const Index: Integer): IXMLPH;
begin
  Result := AddItem(Index) as IXMLPH;
end;

function TXMLPHList.Get_Item(Index: Integer): IXMLPH;
begin
  Result := List[Index] as IXMLPH;
end;

{ TXMLPlyBond }

function TXMLPlyBond.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPlyBond.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPlyBond.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPlyBond.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPlyBond.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPlyBond.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPlyBond.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPlyBond.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPlyBondList }

function TXMLPlyBondList.Add: IXMLPlyBond;
begin
  Result := AddItem(-1) as IXMLPlyBond;
end;

function TXMLPlyBondList.Insert(const Index: Integer): IXMLPlyBond;
begin
  Result := AddItem(Index) as IXMLPlyBond;
end;

function TXMLPlyBondList.Get_Item(Index: Integer): IXMLPlyBond;
begin
  Result := List[Index] as IXMLPlyBond;
end;

{ TXMLPorosity }

function TXMLPorosity.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPorosity.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPorosity.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPorosity.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPorosity.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPorosity.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPorosity.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPorosity.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPorosityList }

function TXMLPorosityList.Add: IXMLPorosity;
begin
  Result := AddItem(-1) as IXMLPorosity;
end;

function TXMLPorosityList.Insert(const Index: Integer): IXMLPorosity;
begin
  Result := AddItem(Index) as IXMLPorosity;
end;

function TXMLPorosityList.Get_Item(Index: Integer): IXMLPorosity;
begin
  Result := List[Index] as IXMLPorosity;
end;

{ TXMLPostConsumerWaste }

function TXMLPostConsumerWaste.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPostConsumerWaste.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPostConsumerWaste.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPostConsumerWaste.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPostConsumerWaste.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPostConsumerWaste.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPostConsumerWaste.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPostConsumerWaste.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPostConsumerWasteList }

function TXMLPostConsumerWasteList.Add: IXMLPostConsumerWaste;
begin
  Result := AddItem(-1) as IXMLPostConsumerWaste;
end;

function TXMLPostConsumerWasteList.Insert(const Index: Integer): IXMLPostConsumerWaste;
begin
  Result := AddItem(Index) as IXMLPostConsumerWaste;
end;

function TXMLPostConsumerWasteList.Get_Item(Index: Integer): IXMLPostConsumerWaste;
begin
  Result := List[Index] as IXMLPostConsumerWaste;
end;

{ TXMLPreConsumerWaste }

function TXMLPreConsumerWaste.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPreConsumerWaste.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPreConsumerWaste.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPreConsumerWaste.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPreConsumerWaste.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPreConsumerWaste.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPreConsumerWaste.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPreConsumerWaste.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPreConsumerWasteList }

function TXMLPreConsumerWasteList.Add: IXMLPreConsumerWaste;
begin
  Result := AddItem(-1) as IXMLPreConsumerWaste;
end;

function TXMLPreConsumerWasteList.Insert(const Index: Integer): IXMLPreConsumerWaste;
begin
  Result := AddItem(Index) as IXMLPreConsumerWaste;
end;

function TXMLPreConsumerWasteList.Get_Item(Index: Integer): IXMLPreConsumerWaste;
begin
  Result := List[Index] as IXMLPreConsumerWaste;
end;

{ TXMLRecycled }

function TXMLRecycled.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRecycled.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRecycled.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRecycled.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRecycled.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRecycled.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRecycled.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRecycled.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRecycledList }

function TXMLRecycledList.Add: IXMLRecycled;
begin
  Result := AddItem(-1) as IXMLRecycled;
end;

function TXMLRecycledList.Insert(const Index: Integer): IXMLRecycled;
begin
  Result := AddItem(Index) as IXMLRecycled;
end;

function TXMLRecycledList.Get_Item(Index: Integer): IXMLRecycled;
begin
  Result := List[Index] as IXMLRecycled;
end;

{ TXMLResistance }

function TXMLResistance.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLResistance.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLResistance.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLResistance.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLResistance.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLResistance.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLResistance.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLResistance.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLResistanceList }

function TXMLResistanceList.Add: IXMLResistance;
begin
  Result := AddItem(-1) as IXMLResistance;
end;

function TXMLResistanceList.Insert(const Index: Integer): IXMLResistance;
begin
  Result := AddItem(Index) as IXMLResistance;
end;

function TXMLResistanceList.Get_Item(Index: Integer): IXMLResistance;
begin
  Result := List[Index] as IXMLResistance;
end;

{ TXMLRingCrush }

function TXMLRingCrush.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRingCrush.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRingCrush.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRingCrush.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRingCrush.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRingCrush.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRingCrush.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRingCrush.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRingCrushList }

function TXMLRingCrushList.Add: IXMLRingCrush;
begin
  Result := AddItem(-1) as IXMLRingCrush;
end;

function TXMLRingCrushList.Insert(const Index: Integer): IXMLRingCrush;
begin
  Result := AddItem(Index) as IXMLRingCrush;
end;

function TXMLRingCrushList.Get_Item(Index: Integer): IXMLRingCrush;
begin
  Result := List[Index] as IXMLRingCrush;
end;

{ TXMLRoughness }

function TXMLRoughness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRoughness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRoughness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRoughness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRoughness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRoughness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRoughness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRoughness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRoughnessList }

function TXMLRoughnessList.Add: IXMLRoughness;
begin
  Result := AddItem(-1) as IXMLRoughness;
end;

function TXMLRoughnessList.Insert(const Index: Integer): IXMLRoughness;
begin
  Result := AddItem(Index) as IXMLRoughness;
end;

function TXMLRoughnessList.Get_Item(Index: Integer): IXMLRoughness;
begin
  Result := List[Index] as IXMLRoughness;
end;

{ TXMLRunnabilityIndex }

function TXMLRunnabilityIndex.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRunnabilityIndex.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRunnabilityIndex.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRunnabilityIndex.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRunnabilityIndex.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRunnabilityIndex.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRunnabilityIndex.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRunnabilityIndex.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRunnabilityIndexList }

function TXMLRunnabilityIndexList.Add: IXMLRunnabilityIndex;
begin
  Result := AddItem(-1) as IXMLRunnabilityIndex;
end;

function TXMLRunnabilityIndexList.Insert(const Index: Integer): IXMLRunnabilityIndex;
begin
  Result := AddItem(Index) as IXMLRunnabilityIndex;
end;

function TXMLRunnabilityIndexList.Get_Item(Index: Integer): IXMLRunnabilityIndex;
begin
  Result := List[Index] as IXMLRunnabilityIndex;
end;

{ TXMLShowThrough }

function TXMLShowThrough.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLShowThrough.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLShowThrough.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLShowThrough.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLShowThrough.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLShowThrough.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLShowThrough.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLShowThrough.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLShowThroughList }

function TXMLShowThroughList.Add: IXMLShowThrough;
begin
  Result := AddItem(-1) as IXMLShowThrough;
end;

function TXMLShowThroughList.Insert(const Index: Integer): IXMLShowThrough;
begin
  Result := AddItem(Index) as IXMLShowThrough;
end;

function TXMLShowThroughList.Get_Item(Index: Integer): IXMLShowThrough;
begin
  Result := List[Index] as IXMLShowThrough;
end;

{ TXMLSizing }

function TXMLSizing.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSizing.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSizing.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSizing.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSizing.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSizing.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSizing.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSizing.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSizingList }

function TXMLSizingList.Add: IXMLSizing;
begin
  Result := AddItem(-1) as IXMLSizing;
end;

function TXMLSizingList.Insert(const Index: Integer): IXMLSizing;
begin
  Result := AddItem(Index) as IXMLSizing;
end;

function TXMLSizingList.Get_Item(Index: Integer): IXMLSizing;
begin
  Result := List[Index] as IXMLSizing;
end;

{ TXMLSmoothness }

function TXMLSmoothness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSmoothness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSmoothness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSmoothness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSmoothness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSmoothness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSmoothness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSmoothness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSmoothnessList }

function TXMLSmoothnessList.Add: IXMLSmoothness;
begin
  Result := AddItem(-1) as IXMLSmoothness;
end;

function TXMLSmoothnessList.Insert(const Index: Integer): IXMLSmoothness;
begin
  Result := AddItem(Index) as IXMLSmoothness;
end;

function TXMLSmoothnessList.Get_Item(Index: Integer): IXMLSmoothness;
begin
  Result := List[Index] as IXMLSmoothness;
end;

{ TXMLStiffness }

function TXMLStiffness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLStiffness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLStiffness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLStiffness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLStiffness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLStiffness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLStiffness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLStiffness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLStiffnessList }

function TXMLStiffnessList.Add: IXMLStiffness;
begin
  Result := AddItem(-1) as IXMLStiffness;
end;

function TXMLStiffnessList.Insert(const Index: Integer): IXMLStiffness;
begin
  Result := AddItem(Index) as IXMLStiffness;
end;

function TXMLStiffnessList.Get_Item(Index: Integer): IXMLStiffness;
begin
  Result := List[Index] as IXMLStiffness;
end;

{ TXMLStretch }

function TXMLStretch.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLStretch.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLStretch.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLStretch.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLStretch.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLStretch.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLStretch.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLStretch.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLStretchList }

function TXMLStretchList.Add: IXMLStretch;
begin
  Result := AddItem(-1) as IXMLStretch;
end;

function TXMLStretchList.Insert(const Index: Integer): IXMLStretch;
begin
  Result := AddItem(Index) as IXMLStretch;
end;

function TXMLStretchList.Get_Item(Index: Integer): IXMLStretch;
begin
  Result := List[Index] as IXMLStretch;
end;

{ TXMLSurfaceStrength }

function TXMLSurfaceStrength.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSurfaceStrength.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSurfaceStrength.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSurfaceStrength.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSurfaceStrength.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSurfaceStrength.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSurfaceStrength.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSurfaceStrength.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSurfaceStrengthList }

function TXMLSurfaceStrengthList.Add: IXMLSurfaceStrength;
begin
  Result := AddItem(-1) as IXMLSurfaceStrength;
end;

function TXMLSurfaceStrengthList.Insert(const Index: Integer): IXMLSurfaceStrength;
begin
  Result := AddItem(Index) as IXMLSurfaceStrength;
end;

function TXMLSurfaceStrengthList.Get_Item(Index: Integer): IXMLSurfaceStrength;
begin
  Result := List[Index] as IXMLSurfaceStrength;
end;

{ TXMLTEA }

function TXMLTEA.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTEA.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTEA.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTEA.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTEA.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTEA.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTEA.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTEA.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTEAList }

function TXMLTEAList.Add: IXMLTEA;
begin
  Result := AddItem(-1) as IXMLTEA;
end;

function TXMLTEAList.Insert(const Index: Integer): IXMLTEA;
begin
  Result := AddItem(Index) as IXMLTEA;
end;

function TXMLTEAList.Get_Item(Index: Integer): IXMLTEA;
begin
  Result := List[Index] as IXMLTEA;
end;

{ TXMLTear }

function TXMLTear.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTear.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTear.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTear.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTear.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTear.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTear.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTear.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTearList }

function TXMLTearList.Add: IXMLTear;
begin
  Result := AddItem(-1) as IXMLTear;
end;

function TXMLTearList.Insert(const Index: Integer): IXMLTear;
begin
  Result := AddItem(Index) as IXMLTear;
end;

function TXMLTearList.Get_Item(Index: Integer): IXMLTear;
begin
  Result := List[Index] as IXMLTear;
end;

{ TXMLTearIndex }

function TXMLTearIndex.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTearIndex.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTearIndex.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTearIndex.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTearIndex.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTearIndex.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTearIndex.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTearIndex.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTearIndexList }

function TXMLTearIndexList.Add: IXMLTearIndex;
begin
  Result := AddItem(-1) as IXMLTearIndex;
end;

function TXMLTearIndexList.Insert(const Index: Integer): IXMLTearIndex;
begin
  Result := AddItem(Index) as IXMLTearIndex;
end;

function TXMLTearIndexList.Get_Item(Index: Integer): IXMLTearIndex;
begin
  Result := List[Index] as IXMLTearIndex;
end;

{ TXMLTensile }

function TXMLTensile.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTensile.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTensile.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTensile.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTensile.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTensile.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTensile.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTensile.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTensileList }

function TXMLTensileList.Add: IXMLTensile;
begin
  Result := AddItem(-1) as IXMLTensile;
end;

function TXMLTensileList.Insert(const Index: Integer): IXMLTensile;
begin
  Result := AddItem(Index) as IXMLTensile;
end;

function TXMLTensileList.Get_Item(Index: Integer): IXMLTensile;
begin
  Result := List[Index] as IXMLTensile;
end;

{ TXMLTensileIndex }

function TXMLTensileIndex.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTensileIndex.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTensileIndex.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTensileIndex.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTensileIndex.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTensileIndex.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTensileIndex.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTensileIndex.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTensileIndexList }

function TXMLTensileIndexList.Add: IXMLTensileIndex;
begin
  Result := AddItem(-1) as IXMLTensileIndex;
end;

function TXMLTensileIndexList.Insert(const Index: Integer): IXMLTensileIndex;
begin
  Result := AddItem(Index) as IXMLTensileIndex;
end;

function TXMLTensileIndexList.Get_Item(Index: Integer): IXMLTensileIndex;
begin
  Result := List[Index] as IXMLTensileIndex;
end;

{ TXMLWhiteness }

function TXMLWhiteness.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLWhiteness.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLWhiteness.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLWhiteness.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLWhiteness.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLWhiteness.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLWhiteness.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLWhiteness.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLWhitenessList }

function TXMLWhitenessList.Add: IXMLWhiteness;
begin
  Result := AddItem(-1) as IXMLWhiteness;
end;

function TXMLWhitenessList.Insert(const Index: Integer): IXMLWhiteness;
begin
  Result := AddItem(Index) as IXMLWhiteness;
end;

function TXMLWhitenessList.Get_Item(Index: Integer): IXMLWhiteness;
begin
  Result := List[Index] as IXMLWhiteness;
end;

{ TXMLAdditionalTest }

procedure TXMLAdditionalTest.AfterConstruction;
begin
  RegisterChildNode('DetailValue', TXMLDetailValue);
  RegisterChildNode('DetailRangeMin', TXMLDetailRangeMin);
  RegisterChildNode('DetailRangeMax', TXMLDetailRangeMax);
  RegisterChildNode('StandardDeviation', TXMLStandardDeviation);
  RegisterChildNode('TwoSigmaLower', TXMLTwoSigmaLower);
  RegisterChildNode('TwoSigmaUpper', TXMLTwoSigmaUpper);
  inherited;
end;

function TXMLAdditionalTest.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAdditionalTest.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAdditionalTest.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAdditionalTest.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAdditionalTest.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAdditionalTest.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAdditionalTest.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAdditionalTest.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLAdditionalTest.Get_AdditionalTestName: UnicodeString;
begin
  Result := ChildNodes['AdditionalTestName'].Text;
end;

procedure TXMLAdditionalTest.Set_AdditionalTestName(Value: UnicodeString);
begin
  ChildNodes['AdditionalTestName'].NodeValue := Value;
end;

function TXMLAdditionalTest.Get_DetailValue: IXMLDetailValue;
begin
  Result := ChildNodes['DetailValue'] as IXMLDetailValue;
end;

function TXMLAdditionalTest.Get_DetailRangeMin: IXMLDetailRangeMin;
begin
  Result := ChildNodes['DetailRangeMin'] as IXMLDetailRangeMin;
end;

function TXMLAdditionalTest.Get_DetailRangeMax: IXMLDetailRangeMax;
begin
  Result := ChildNodes['DetailRangeMax'] as IXMLDetailRangeMax;
end;

function TXMLAdditionalTest.Get_StandardDeviation: IXMLStandardDeviation;
begin
  Result := ChildNodes['StandardDeviation'] as IXMLStandardDeviation;
end;

function TXMLAdditionalTest.Get_SampleSize: LongWord;
begin
  Result := ChildNodes['SampleSize'].NodeValue;
end;

procedure TXMLAdditionalTest.Set_SampleSize(Value: LongWord);
begin
  ChildNodes['SampleSize'].NodeValue := Value;
end;

function TXMLAdditionalTest.Get_TwoSigmaLower: IXMLTwoSigmaLower;
begin
  Result := ChildNodes['TwoSigmaLower'] as IXMLTwoSigmaLower;
end;

function TXMLAdditionalTest.Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
begin
  Result := ChildNodes['TwoSigmaUpper'] as IXMLTwoSigmaUpper;
end;

{ TXMLPlyAttributes }

procedure TXMLPlyAttributes.AfterConstruction;
begin
  RegisterChildNode('Abrasion', TXMLAbrasion);
  RegisterChildNode('AbsorptionInk', TXMLAbsorptionInk);
  RegisterChildNode('AbsorptionLight', TXMLAbsorptionLight);
  RegisterChildNode('AbsorptionWater', TXMLAbsorptionWater);
  RegisterChildNode('Appearance', TXMLAppearance);
  RegisterChildNode('Ash', TXMLAsh);
  RegisterChildNode('BasisWeight', TXMLBasisWeight);
  RegisterChildNode('BendingResistance', TXMLBendingResistance);
  RegisterChildNode('BendingStiffness', TXMLBendingStiffness);
  RegisterChildNode('Brightness', TXMLBrightness);
  RegisterChildNode('Bulk', TXMLBulk);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('Caliper', TXMLCaliper);
  RegisterChildNode('CoatWeight', TXMLCoatWeight);
  RegisterChildNode('ColourDetail', TXMLColourDetail);
  RegisterChildNode('Density', TXMLDensity);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('DominantWavelength', TXMLDominantWavelength);
  RegisterChildNode('FibreLength', TXMLFibreLength);
  RegisterChildNode('FibreClassification', TXMLFibreClassification);
  RegisterChildNode('Folding', TXMLFolding);
  RegisterChildNode('Formation', TXMLFormation);
  RegisterChildNode('Freeness', TXMLFreeness);
  RegisterChildNode('Friction', TXMLFriction);
  RegisterChildNode('Gloss', TXMLGloss);
  RegisterChildNode('LightScattering', TXMLLightScattering);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Opacity', TXMLOpacity);
  RegisterChildNode('Permeability', TXMLPermeability);
  RegisterChildNode('pH', TXMLPH);
  RegisterChildNode('PlyBond', TXMLPlyBond);
  RegisterChildNode('Porosity', TXMLPorosity);
  RegisterChildNode('PostConsumerWaste', TXMLPostConsumerWaste);
  RegisterChildNode('PPI', TXMLMeasurement);
  RegisterChildNode('PreConsumerWaste', TXMLPreConsumerWaste);
  RegisterChildNode('Recycled', TXMLRecycled);
  RegisterChildNode('Resistance', TXMLResistance);
  RegisterChildNode('RingCrush', TXMLRingCrush);
  RegisterChildNode('Roughness', TXMLRoughness);
  RegisterChildNode('RunnabilityIndex', TXMLRunnabilityIndex);
  RegisterChildNode('ShowThrough', TXMLShowThrough);
  RegisterChildNode('Sizing', TXMLSizing);
  RegisterChildNode('Smoothness', TXMLSmoothness);
  RegisterChildNode('Stiffness', TXMLStiffness);
  RegisterChildNode('Stretch', TXMLStretch);
  RegisterChildNode('SurfaceStrength', TXMLSurfaceStrength);
  RegisterChildNode('TEA', TXMLTEA);
  RegisterChildNode('Tear', TXMLTear);
  RegisterChildNode('TearIndex', TXMLTearIndex);
  RegisterChildNode('Tensile', TXMLTensile);
  RegisterChildNode('TensileIndex', TXMLTensileIndex);
  RegisterChildNode('Whiteness', TXMLWhiteness);
  RegisterChildNode('AdditionalTest', TXMLAdditionalTest);
  FAbrasion := CreateCollection(TXMLAbrasionList, IXMLAbrasion, 'Abrasion') as IXMLAbrasionList;
  FAbsorptionInk := CreateCollection(TXMLAbsorptionInkList, IXMLAbsorptionInk, 'AbsorptionInk') as IXMLAbsorptionInkList;
  FAbsorptionLight := CreateCollection(TXMLAbsorptionLightList, IXMLAbsorptionLight, 'AbsorptionLight') as IXMLAbsorptionLightList;
  FAbsorptionWater := CreateCollection(TXMLAbsorptionWaterList, IXMLAbsorptionWater, 'AbsorptionWater') as IXMLAbsorptionWaterList;
  FAppearance := CreateCollection(TXMLAppearanceList, IXMLAppearance, 'Appearance') as IXMLAppearanceList;
  FAsh := CreateCollection(TXMLAshList, IXMLAsh, 'Ash') as IXMLAshList;
  FBasisWeight := CreateCollection(TXMLBasisWeightList, IXMLBasisWeight, 'BasisWeight') as IXMLBasisWeightList;
  FBendingResistance := CreateCollection(TXMLBendingResistanceList, IXMLBendingResistance, 'BendingResistance') as IXMLBendingResistanceList;
  FBendingStiffness := CreateCollection(TXMLBendingStiffnessList, IXMLBendingStiffness, 'BendingStiffness') as IXMLBendingStiffnessList;
  FBrightness := CreateCollection(TXMLBrightnessList, IXMLBrightness, 'Brightness') as IXMLBrightnessList;
  FBulk := CreateCollection(TXMLBulkList, IXMLBulk, 'Bulk') as IXMLBulkList;
  FBurst := CreateCollection(TXMLBurstList, IXMLBurst, 'Burst') as IXMLBurstList;
  FBurstIndex := CreateCollection(TXMLBurstIndexList, IXMLBurstIndex, 'BurstIndex') as IXMLBurstIndexList;
  FCaliper := CreateCollection(TXMLCaliperList, IXMLCaliper, 'Caliper') as IXMLCaliperList;
  FCoatWeight := CreateCollection(TXMLCoatWeightList, IXMLCoatWeight, 'CoatWeight') as IXMLCoatWeightList;
  FColourDetail := CreateCollection(TXMLColourDetailList, IXMLColourDetail, 'ColourDetail') as IXMLColourDetailList;
  FDensity := CreateCollection(TXMLDensityList, IXMLDensity, 'Density') as IXMLDensityList;
  FDirt := CreateCollection(TXMLDirtList, IXMLDirt, 'Dirt') as IXMLDirtList;
  FDominantWavelength := CreateCollection(TXMLDominantWavelengthList, IXMLDominantWavelength, 'DominantWavelength') as IXMLDominantWavelengthList;
  FFibreLength := CreateCollection(TXMLFibreLengthList, IXMLFibreLength, 'FibreLength') as IXMLFibreLengthList;
  FFibreClassification := CreateCollection(TXMLFibreClassificationList, IXMLFibreClassification, 'FibreClassification') as IXMLFibreClassificationList;
  FFolding := CreateCollection(TXMLFoldingList, IXMLFolding, 'Folding') as IXMLFoldingList;
  FFormation := CreateCollection(TXMLFormationList, IXMLFormation, 'Formation') as IXMLFormationList;
  FFreeness := CreateCollection(TXMLFreenessList, IXMLFreeness, 'Freeness') as IXMLFreenessList;
  FFriction := CreateCollection(TXMLFrictionList, IXMLFriction, 'Friction') as IXMLFrictionList;
  FGloss := CreateCollection(TXMLGlossList, IXMLGloss, 'Gloss') as IXMLGlossList;
  FLightScattering := CreateCollection(TXMLLightScatteringList, IXMLLightScattering, 'LightScattering') as IXMLLightScatteringList;
  FMoisture := CreateCollection(TXMLMoistureList, IXMLMoisture, 'Moisture') as IXMLMoistureList;
  FOpacity := CreateCollection(TXMLOpacityList, IXMLOpacity, 'Opacity') as IXMLOpacityList;
  FPermeability := CreateCollection(TXMLPermeabilityList, IXMLPermeability, 'Permeability') as IXMLPermeabilityList;
  FPH := CreateCollection(TXMLPHList, IXMLPH, 'pH') as IXMLPHList;
  FPlyBond := CreateCollection(TXMLPlyBondList, IXMLPlyBond, 'PlyBond') as IXMLPlyBondList;
  FPorosity := CreateCollection(TXMLPorosityList, IXMLPorosity, 'Porosity') as IXMLPorosityList;
  FPostConsumerWaste := CreateCollection(TXMLPostConsumerWasteList, IXMLPostConsumerWaste, 'PostConsumerWaste') as IXMLPostConsumerWasteList;
  FPPI := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'PPI') as IXMLMeasurementList;
  FPreConsumerWaste := CreateCollection(TXMLPreConsumerWasteList, IXMLPreConsumerWaste, 'PreConsumerWaste') as IXMLPreConsumerWasteList;
  FRecycled := CreateCollection(TXMLRecycledList, IXMLRecycled, 'Recycled') as IXMLRecycledList;
  FResistance := CreateCollection(TXMLResistanceList, IXMLResistance, 'Resistance') as IXMLResistanceList;
  FRingCrush := CreateCollection(TXMLRingCrushList, IXMLRingCrush, 'RingCrush') as IXMLRingCrushList;
  FRoughness := CreateCollection(TXMLRoughnessList, IXMLRoughness, 'Roughness') as IXMLRoughnessList;
  FRunnabilityIndex := CreateCollection(TXMLRunnabilityIndexList, IXMLRunnabilityIndex, 'RunnabilityIndex') as IXMLRunnabilityIndexList;
  FShowThrough := CreateCollection(TXMLShowThroughList, IXMLShowThrough, 'ShowThrough') as IXMLShowThroughList;
  FSizing := CreateCollection(TXMLSizingList, IXMLSizing, 'Sizing') as IXMLSizingList;
  FSmoothness := CreateCollection(TXMLSmoothnessList, IXMLSmoothness, 'Smoothness') as IXMLSmoothnessList;
  FStiffness := CreateCollection(TXMLStiffnessList, IXMLStiffness, 'Stiffness') as IXMLStiffnessList;
  FStretch := CreateCollection(TXMLStretchList, IXMLStretch, 'Stretch') as IXMLStretchList;
  FSurfaceStrength := CreateCollection(TXMLSurfaceStrengthList, IXMLSurfaceStrength, 'SurfaceStrength') as IXMLSurfaceStrengthList;
  FTEA := CreateCollection(TXMLTEAList, IXMLTEA, 'TEA') as IXMLTEAList;
  FTear := CreateCollection(TXMLTearList, IXMLTear, 'Tear') as IXMLTearList;
  FTearIndex := CreateCollection(TXMLTearIndexList, IXMLTearIndex, 'TearIndex') as IXMLTearIndexList;
  FTensile := CreateCollection(TXMLTensileList, IXMLTensile, 'Tensile') as IXMLTensileList;
  FTensileIndex := CreateCollection(TXMLTensileIndexList, IXMLTensileIndex, 'TensileIndex') as IXMLTensileIndexList;
  FWhiteness := CreateCollection(TXMLWhitenessList, IXMLWhiteness, 'Whiteness') as IXMLWhitenessList;
  inherited;
end;

function TXMLPlyAttributes.Get_CoatingLocation: UnicodeString;
begin
  Result := AttributeNodes['CoatingLocation'].Text;
end;

procedure TXMLPlyAttributes.Set_CoatingLocation(Value: UnicodeString);
begin
  SetAttribute('CoatingLocation', Value);
end;

function TXMLPlyAttributes.Get_PlyNumber: LongWord;
begin
  Result := ChildNodes['PlyNumber'].NodeValue;
end;

procedure TXMLPlyAttributes.Set_PlyNumber(Value: LongWord);
begin
  ChildNodes['PlyNumber'].NodeValue := Value;
end;

function TXMLPlyAttributes.Get_Abrasion: IXMLAbrasionList;
begin
  Result := FAbrasion;
end;

function TXMLPlyAttributes.Get_AbsorptionInk: IXMLAbsorptionInkList;
begin
  Result := FAbsorptionInk;
end;

function TXMLPlyAttributes.Get_AbsorptionLight: IXMLAbsorptionLightList;
begin
  Result := FAbsorptionLight;
end;

function TXMLPlyAttributes.Get_AbsorptionWater: IXMLAbsorptionWaterList;
begin
  Result := FAbsorptionWater;
end;

function TXMLPlyAttributes.Get_Appearance: IXMLAppearanceList;
begin
  Result := FAppearance;
end;

function TXMLPlyAttributes.Get_Ash: IXMLAshList;
begin
  Result := FAsh;
end;

function TXMLPlyAttributes.Get_BasisWeight: IXMLBasisWeightList;
begin
  Result := FBasisWeight;
end;

function TXMLPlyAttributes.Get_BendingResistance: IXMLBendingResistanceList;
begin
  Result := FBendingResistance;
end;

function TXMLPlyAttributes.Get_BendingStiffness: IXMLBendingStiffnessList;
begin
  Result := FBendingStiffness;
end;

function TXMLPlyAttributes.Get_Brightness: IXMLBrightnessList;
begin
  Result := FBrightness;
end;

function TXMLPlyAttributes.Get_Bulk: IXMLBulkList;
begin
  Result := FBulk;
end;

function TXMLPlyAttributes.Get_Burst: IXMLBurstList;
begin
  Result := FBurst;
end;

function TXMLPlyAttributes.Get_BurstIndex: IXMLBurstIndexList;
begin
  Result := FBurstIndex;
end;

function TXMLPlyAttributes.Get_Caliper: IXMLCaliperList;
begin
  Result := FCaliper;
end;

function TXMLPlyAttributes.Get_CoatWeight: IXMLCoatWeightList;
begin
  Result := FCoatWeight;
end;

function TXMLPlyAttributes.Get_ColourDetail: IXMLColourDetailList;
begin
  Result := FColourDetail;
end;

function TXMLPlyAttributes.Get_Density: IXMLDensityList;
begin
  Result := FDensity;
end;

function TXMLPlyAttributes.Get_Dirt: IXMLDirtList;
begin
  Result := FDirt;
end;

function TXMLPlyAttributes.Get_DominantWavelength: IXMLDominantWavelengthList;
begin
  Result := FDominantWavelength;
end;

function TXMLPlyAttributes.Get_FibreLength: IXMLFibreLengthList;
begin
  Result := FFibreLength;
end;

function TXMLPlyAttributes.Get_FibreClassification: IXMLFibreClassificationList;
begin
  Result := FFibreClassification;
end;

function TXMLPlyAttributes.Get_Folding: IXMLFoldingList;
begin
  Result := FFolding;
end;

function TXMLPlyAttributes.Get_Formation: IXMLFormationList;
begin
  Result := FFormation;
end;

function TXMLPlyAttributes.Get_Freeness: IXMLFreenessList;
begin
  Result := FFreeness;
end;

function TXMLPlyAttributes.Get_Friction: IXMLFrictionList;
begin
  Result := FFriction;
end;

function TXMLPlyAttributes.Get_Gloss: IXMLGlossList;
begin
  Result := FGloss;
end;

function TXMLPlyAttributes.Get_LightScattering: IXMLLightScatteringList;
begin
  Result := FLightScattering;
end;

function TXMLPlyAttributes.Get_Moisture: IXMLMoistureList;
begin
  Result := FMoisture;
end;

function TXMLPlyAttributes.Get_Opacity: IXMLOpacityList;
begin
  Result := FOpacity;
end;

function TXMLPlyAttributes.Get_Permeability: IXMLPermeabilityList;
begin
  Result := FPermeability;
end;

function TXMLPlyAttributes.Get_PH: IXMLPHList;
begin
  Result := FPH;
end;

function TXMLPlyAttributes.Get_PlyBond: IXMLPlyBondList;
begin
  Result := FPlyBond;
end;

function TXMLPlyAttributes.Get_Porosity: IXMLPorosityList;
begin
  Result := FPorosity;
end;

function TXMLPlyAttributes.Get_PostConsumerWaste: IXMLPostConsumerWasteList;
begin
  Result := FPostConsumerWaste;
end;

function TXMLPlyAttributes.Get_PPI: IXMLMeasurementList;
begin
  Result := FPPI;
end;

function TXMLPlyAttributes.Get_PreConsumerWaste: IXMLPreConsumerWasteList;
begin
  Result := FPreConsumerWaste;
end;

function TXMLPlyAttributes.Get_Recycled: IXMLRecycledList;
begin
  Result := FRecycled;
end;

function TXMLPlyAttributes.Get_Resistance: IXMLResistanceList;
begin
  Result := FResistance;
end;

function TXMLPlyAttributes.Get_RingCrush: IXMLRingCrushList;
begin
  Result := FRingCrush;
end;

function TXMLPlyAttributes.Get_Roughness: IXMLRoughnessList;
begin
  Result := FRoughness;
end;

function TXMLPlyAttributes.Get_RunnabilityIndex: IXMLRunnabilityIndexList;
begin
  Result := FRunnabilityIndex;
end;

function TXMLPlyAttributes.Get_ShowThrough: IXMLShowThroughList;
begin
  Result := FShowThrough;
end;

function TXMLPlyAttributes.Get_Sizing: IXMLSizingList;
begin
  Result := FSizing;
end;

function TXMLPlyAttributes.Get_Smoothness: IXMLSmoothnessList;
begin
  Result := FSmoothness;
end;

function TXMLPlyAttributes.Get_Stiffness: IXMLStiffnessList;
begin
  Result := FStiffness;
end;

function TXMLPlyAttributes.Get_Stretch: IXMLStretchList;
begin
  Result := FStretch;
end;

function TXMLPlyAttributes.Get_SurfaceStrength: IXMLSurfaceStrengthList;
begin
  Result := FSurfaceStrength;
end;

function TXMLPlyAttributes.Get_TEA: IXMLTEAList;
begin
  Result := FTEA;
end;

function TXMLPlyAttributes.Get_Tear: IXMLTearList;
begin
  Result := FTear;
end;

function TXMLPlyAttributes.Get_TearIndex: IXMLTearIndexList;
begin
  Result := FTearIndex;
end;

function TXMLPlyAttributes.Get_Tensile: IXMLTensileList;
begin
  Result := FTensile;
end;

function TXMLPlyAttributes.Get_TensileIndex: IXMLTensileIndexList;
begin
  Result := FTensileIndex;
end;

function TXMLPlyAttributes.Get_Whiteness: IXMLWhitenessList;
begin
  Result := FWhiteness;
end;

function TXMLPlyAttributes.Get_AdditionalTest: IXMLAdditionalTest;
begin
  Result := ChildNodes['AdditionalTest'] as IXMLAdditionalTest;
end;

{ TXMLPlyAttributesList }

function TXMLPlyAttributesList.Add: IXMLPlyAttributes;
begin
  Result := AddItem(-1) as IXMLPlyAttributes;
end;

function TXMLPlyAttributesList.Insert(const Index: Integer): IXMLPlyAttributes;
begin
  Result := AddItem(Index) as IXMLPlyAttributes;
end;

function TXMLPlyAttributesList.Get_Item(Index: Integer): IXMLPlyAttributes;
begin
  Result := List[Index] as IXMLPlyAttributes;
end;

{ TXMLPlySet }

procedure TXMLPlySet.AfterConstruction;
begin
  RegisterChildNode('PlyAttributes', TXMLPlyAttributes);
  FNumberOfPlies := CreateCollection(TXMLNni1List, IXMLNode, 'NumberOfPlies') as IXMLNni1List;
  FPlyAttributes := CreateCollection(TXMLPlyAttributesList, IXMLPlyAttributes, 'PlyAttributes') as IXMLPlyAttributesList;
  inherited;
end;

function TXMLPlySet.Get_EdgePaddable: UnicodeString;
begin
  Result := AttributeNodes['EdgePaddable'].Text;
end;

procedure TXMLPlySet.Set_EdgePaddable(Value: UnicodeString);
begin
  SetAttribute('EdgePaddable', Value);
end;

function TXMLPlySet.Get_NumberOfPlies: IXMLNni1List;
begin
  Result := FNumberOfPlies;
end;

function TXMLPlySet.Get_PlyAttributes: IXMLPlyAttributesList;
begin
  Result := FPlyAttributes;
end;

{ TXMLPlySetList }

function TXMLPlySetList.Add: IXMLPlySet;
begin
  Result := AddItem(-1) as IXMLPlySet;
end;

function TXMLPlySetList.Insert(const Index: Integer): IXMLPlySet;
begin
  Result := AddItem(Index) as IXMLPlySet;
end;

function TXMLPlySetList.Get_Item(Index: Integer): IXMLPlySet;
begin
  Result := List[Index] as IXMLPlySet;
end;

{ TXMLReel }

procedure TXMLReel.AfterConstruction;
begin
  RegisterChildNode('ReelConversionCharacteristics', TXMLReelConversionCharacteristicsClass);
  RegisterChildNode('ReelPackagingCharacteristics', TXMLReelPackagingCharacteristicsClass);
  inherited;
end;

function TXMLReel.Get_ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass;
begin
  Result := ChildNodes['ReelConversionCharacteristics'] as IXMLReelConversionCharacteristicsClass;
end;

function TXMLReel.Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
begin
  Result := ChildNodes['ReelPackagingCharacteristics'] as IXMLReelPackagingCharacteristicsClass;
end;

{ TXMLReelConversionCharacteristicsClass }

procedure TXMLReelConversionCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('ConversionCode', TXMLConversionCode);
  RegisterChildNode('ReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('TargetProductWeight', TXMLMeasurement);
  RegisterChildNode('CoreCharacteristics', TXMLCoreCharacteristics);
  RegisterChildNode('Embossing', TXMLEmbossing);
  RegisterChildNode('Watermark', TXMLWatermark);
  FReelWidth := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReelWidth') as IXMLMeasurementList;
  FReelDiameter := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReelDiameter') as IXMLMeasurementList;
  FReelLength := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReelLength') as IXMLMeasurementList;
  FCoreCharacteristics := CreateCollection(TXMLCoreCharacteristicsList, IXMLCoreCharacteristics, 'CoreCharacteristics') as IXMLCoreCharacteristicsList;
  FEmbossing := CreateCollection(TXMLEmbossingList, IXMLEmbossing, 'Embossing') as IXMLEmbossingList;
  FWatermark := CreateCollection(TXMLWatermarkList, IXMLWatermark, 'Watermark') as IXMLWatermarkList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLReelConversionCharacteristicsClass.Get_ConversionCode: IXMLConversionCode;
begin
  Result := ChildNodes['ConversionCode'] as IXMLConversionCode;
end;

function TXMLReelConversionCharacteristicsClass.Get_WindingDirection: UnicodeString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLReelConversionCharacteristicsClass.Set_WindingDirection(Value: UnicodeString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLReelConversionCharacteristicsClass.Get_MakeTo: UnicodeString;
begin
  Result := ChildNodes['MakeTo'].Text;
end;

procedure TXMLReelConversionCharacteristicsClass.Set_MakeTo(Value: UnicodeString);
begin
  ChildNodes['MakeTo'].NodeValue := Value;
end;

function TXMLReelConversionCharacteristicsClass.Get_ReelWidth: IXMLMeasurementList;
begin
  Result := FReelWidth;
end;

function TXMLReelConversionCharacteristicsClass.Get_ReelDiameter: IXMLMeasurementList;
begin
  Result := FReelDiameter;
end;

function TXMLReelConversionCharacteristicsClass.Get_ReelLength: IXMLMeasurementList;
begin
  Result := FReelLength;
end;

function TXMLReelConversionCharacteristicsClass.Get_TargetProductWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TargetProductWeight'] as IXMLMeasurement;
end;

function TXMLReelConversionCharacteristicsClass.Get_CoreCharacteristics: IXMLCoreCharacteristicsList;
begin
  Result := FCoreCharacteristics;
end;

function TXMLReelConversionCharacteristicsClass.Get_Embossing: IXMLEmbossingList;
begin
  Result := FEmbossing;
end;

function TXMLReelConversionCharacteristicsClass.Get_Watermark: IXMLWatermarkList;
begin
  Result := FWatermark;
end;

function TXMLReelConversionCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLConversionCode }

function TXMLConversionCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLConversionCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLCoreCharacteristics }

procedure TXMLCoreCharacteristics.AfterConstruction;
begin
  RegisterChildNode('CoreCode', TXMLCoreCode);
  RegisterChildNode('CoreDiameterInside', TXMLMeasurement);
  RegisterChildNode('CoreDiameterOutside', TXMLMeasurement);
  RegisterChildNode('CoreStrengthCode', TXMLCoreStrengthCode);
  inherited;
end;

function TXMLCoreCharacteristics.Get_CoreEndType: UnicodeString;
begin
  Result := AttributeNodes['CoreEndType'].Text;
end;

procedure TXMLCoreCharacteristics.Set_CoreEndType(Value: UnicodeString);
begin
  SetAttribute('CoreEndType', Value);
end;

function TXMLCoreCharacteristics.Get_CoreMaterialType: UnicodeString;
begin
  Result := AttributeNodes['CoreMaterialType'].Text;
end;

procedure TXMLCoreCharacteristics.Set_CoreMaterialType(Value: UnicodeString);
begin
  SetAttribute('CoreMaterialType', Value);
end;

function TXMLCoreCharacteristics.Get_CoreCode: IXMLCoreCode;
begin
  Result := ChildNodes['CoreCode'] as IXMLCoreCode;
end;

function TXMLCoreCharacteristics.Get_CoreDiameterInside: IXMLMeasurement;
begin
  Result := ChildNodes['CoreDiameterInside'] as IXMLMeasurement;
end;

function TXMLCoreCharacteristics.Get_CoreDiameterOutside: IXMLMeasurement;
begin
  Result := ChildNodes['CoreDiameterOutside'] as IXMLMeasurement;
end;

function TXMLCoreCharacteristics.Get_CoreStrengthCode: IXMLCoreStrengthCode;
begin
  Result := ChildNodes['CoreStrengthCode'] as IXMLCoreStrengthCode;
end;

{ TXMLCoreCharacteristicsList }

function TXMLCoreCharacteristicsList.Add: IXMLCoreCharacteristics;
begin
  Result := AddItem(-1) as IXMLCoreCharacteristics;
end;

function TXMLCoreCharacteristicsList.Insert(const Index: Integer): IXMLCoreCharacteristics;
begin
  Result := AddItem(Index) as IXMLCoreCharacteristics;
end;

function TXMLCoreCharacteristicsList.Get_Item(Index: Integer): IXMLCoreCharacteristics;
begin
  Result := List[Index] as IXMLCoreCharacteristics;
end;

{ TXMLCoreCode }

function TXMLCoreCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCoreCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLCoreStrengthCode }

function TXMLCoreStrengthCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCoreStrengthCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLEmbossing }

procedure TXMLEmbossing.AfterConstruction;
begin
  RegisterChildNode('EmbossingCode', TXMLEmbossingCode);
  FEmbossingDescription := CreateCollection(TXMLS60List, IXMLNode, 'EmbossingDescription') as IXMLS60List;
  inherited;
end;

function TXMLEmbossing.Get_EmbossingCode: IXMLEmbossingCode;
begin
  Result := ChildNodes['EmbossingCode'] as IXMLEmbossingCode;
end;

function TXMLEmbossing.Get_EmbossingDescription: IXMLS60List;
begin
  Result := FEmbossingDescription;
end;

{ TXMLEmbossingList }

function TXMLEmbossingList.Add: IXMLEmbossing;
begin
  Result := AddItem(-1) as IXMLEmbossing;
end;

function TXMLEmbossingList.Insert(const Index: Integer): IXMLEmbossing;
begin
  Result := AddItem(Index) as IXMLEmbossing;
end;

function TXMLEmbossingList.Get_Item(Index: Integer): IXMLEmbossing;
begin
  Result := List[Index] as IXMLEmbossing;
end;

{ TXMLEmbossingCode }

function TXMLEmbossingCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLEmbossingCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLWatermark }

procedure TXMLWatermark.AfterConstruction;
begin
  RegisterChildNode('WatermarkCode', TXMLWatermarkCode);
  FWatermarkDescription := CreateCollection(TXMLS60List, IXMLNode, 'WatermarkDescription') as IXMLS60List;
  inherited;
end;

function TXMLWatermark.Get_WatermarkCode: IXMLWatermarkCode;
begin
  Result := ChildNodes['WatermarkCode'] as IXMLWatermarkCode;
end;

function TXMLWatermark.Get_WatermarkDescription: IXMLS60List;
begin
  Result := FWatermarkDescription;
end;

{ TXMLWatermarkList }

function TXMLWatermarkList.Add: IXMLWatermark;
begin
  Result := AddItem(-1) as IXMLWatermark;
end;

function TXMLWatermarkList.Insert(const Index: Integer): IXMLWatermark;
begin
  Result := AddItem(Index) as IXMLWatermark;
end;

function TXMLWatermarkList.Get_Item(Index: Integer): IXMLWatermark;
begin
  Result := List[Index] as IXMLWatermark;
end;

{ TXMLWatermarkCode }

function TXMLWatermarkCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLWatermarkCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLReelPackagingCharacteristicsClass }

procedure TXMLReelPackagingCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  RegisterChildNode('MaximumClampingForce', TXMLMaximumClampingForce);
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  FEndCaps := CreateCollection(TXMLS20List, IXMLNode, 'EndCaps') as IXMLS20List;
  FCorePlugs := CreateCollection(TXMLBooleanList, IXMLNode, 'CorePlugs') as IXMLBooleanList;
  FBandCharacteristics := CreateCollection(TXMLBandCharacteristicsList, IXMLBandCharacteristics, 'BandCharacteristics') as IXMLBandCharacteristicsList;
  FPalletCharacteristics := CreateCollection(TXMLPalletCharacteristicsList, IXMLPalletCharacteristics, 'PalletCharacteristics') as IXMLPalletCharacteristicsList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLReelPackagingCharacteristicsClass.Get_ActionType: UnicodeString;
begin
  Result := AttributeNodes['ActionType'].Text;
end;

procedure TXMLReelPackagingCharacteristicsClass.Set_ActionType(Value: UnicodeString);
begin
  SetAttribute('ActionType', Value);
end;

function TXMLReelPackagingCharacteristicsClass.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLReelPackagingCharacteristicsClass.Get_PackagingDescription: IXMLPackagingDescription;
begin
  Result := ChildNodes['PackagingDescription'] as IXMLPackagingDescription;
end;

function TXMLReelPackagingCharacteristicsClass.Get_ReelsPerPack: LongWord;
begin
  Result := ChildNodes['ReelsPerPack'].NodeValue;
end;

procedure TXMLReelPackagingCharacteristicsClass.Set_ReelsPerPack(Value: LongWord);
begin
  ChildNodes['ReelsPerPack'].NodeValue := Value;
end;

function TXMLReelPackagingCharacteristicsClass.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

function TXMLReelPackagingCharacteristicsClass.Get_EndCaps: IXMLS20List;
begin
  Result := FEndCaps;
end;

function TXMLReelPackagingCharacteristicsClass.Get_CorePlugs: IXMLBooleanList;
begin
  Result := FCorePlugs;
end;

function TXMLReelPackagingCharacteristicsClass.Get_BandCharacteristics: IXMLBandCharacteristicsList;
begin
  Result := FBandCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
begin
  Result := FPalletCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLReelPackagingCharacteristicsClass.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLReelPackagingCharacteristicsClass.Get_MaximumClampingForce: IXMLMaximumClampingForce;
begin
  Result := ChildNodes['MaximumClampingForce'] as IXMLMaximumClampingForce;
end;

function TXMLReelPackagingCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPackagingCode }

function TXMLPackagingCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLPackagingCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLPackagingCodeList }

function TXMLPackagingCodeList.Add: IXMLPackagingCode;
begin
  Result := AddItem(-1) as IXMLPackagingCode;
end;

function TXMLPackagingCodeList.Insert(const Index: Integer): IXMLPackagingCode;
begin
  Result := AddItem(Index) as IXMLPackagingCode;
end;

function TXMLPackagingCodeList.Get_Item(Index: Integer): IXMLPackagingCode;
begin
  Result := List[Index] as IXMLPackagingCode;
end;

{ TXMLPackagingDescription }

function TXMLPackagingDescription.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLPackagingDescription.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLPackagingDescriptionList }

function TXMLPackagingDescriptionList.Add: IXMLPackagingDescription;
begin
  Result := AddItem(-1) as IXMLPackagingDescription;
end;

function TXMLPackagingDescriptionList.Insert(const Index: Integer): IXMLPackagingDescription;
begin
  Result := AddItem(Index) as IXMLPackagingDescription;
end;

function TXMLPackagingDescriptionList.Get_Item(Index: Integer): IXMLPackagingDescription;
begin
  Result := List[Index] as IXMLPackagingDescription;
end;

{ TXMLWrap }

function TXMLWrap.Get_WrapType: UnicodeString;
begin
  Result := AttributeNodes['WrapType'].Text;
end;

procedure TXMLWrap.Set_WrapType(Value: UnicodeString);
begin
  SetAttribute('WrapType', Value);
end;

function TXMLWrap.Get_WrapProperties: UnicodeString;
begin
  Result := AttributeNodes['WrapProperties'].Text;
end;

procedure TXMLWrap.Set_WrapProperties(Value: UnicodeString);
begin
  SetAttribute('WrapProperties', Value);
end;

function TXMLWrap.Get_WrapLocation: UnicodeString;
begin
  Result := AttributeNodes['WrapLocation'].Text;
end;

procedure TXMLWrap.Set_WrapLocation(Value: UnicodeString);
begin
  SetAttribute('WrapLocation', Value);
end;

function TXMLWrap.Get_NumberOfWraps: Double;
begin
  Result := XmlStrToFloatExt(ChildNodes['NumberOfWraps'].Text);
end;

procedure TXMLWrap.Set_NumberOfWraps(Value: Double);
begin
  ChildNodes['NumberOfWraps'].NodeValue := Value;
end;

function TXMLWrap.Get_Brand: UnicodeString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLWrap.Set_Brand(Value: UnicodeString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

{ TXMLWrapList }

function TXMLWrapList.Add: IXMLWrap;
begin
  Result := AddItem(-1) as IXMLWrap;
end;

function TXMLWrapList.Insert(const Index: Integer): IXMLWrap;
begin
  Result := AddItem(Index) as IXMLWrap;
end;

function TXMLWrapList.Get_Item(Index: Integer): IXMLWrap;
begin
  Result := List[Index] as IXMLWrap;
end;

{ TXMLBandCharacteristics }

procedure TXMLBandCharacteristics.AfterConstruction;
begin
  FBandColour := CreateCollection(TXMLS20List, IXMLNode, 'BandColour') as IXMLS20List;
  inherited;
end;

function TXMLBandCharacteristics.Get_BandType: UnicodeString;
begin
  Result := AttributeNodes['BandType'].Text;
end;

procedure TXMLBandCharacteristics.Set_BandType(Value: UnicodeString);
begin
  SetAttribute('BandType', Value);
end;

function TXMLBandCharacteristics.Get_BandsRequired: UnicodeString;
begin
  Result := AttributeNodes['BandsRequired'].Text;
end;

procedure TXMLBandCharacteristics.Set_BandsRequired(Value: UnicodeString);
begin
  SetAttribute('BandsRequired', Value);
end;

function TXMLBandCharacteristics.Get_BandDirection: UnicodeString;
begin
  Result := AttributeNodes['BandDirection'].Text;
end;

procedure TXMLBandCharacteristics.Set_BandDirection(Value: UnicodeString);
begin
  SetAttribute('BandDirection', Value);
end;

function TXMLBandCharacteristics.Get_NumberOfBands: LongWord;
begin
  Result := ChildNodes['NumberOfBands'].NodeValue;
end;

procedure TXMLBandCharacteristics.Set_NumberOfBands(Value: LongWord);
begin
  ChildNodes['NumberOfBands'].NodeValue := Value;
end;

function TXMLBandCharacteristics.Get_BandColour: IXMLS20List;
begin
  Result := FBandColour;
end;

{ TXMLBandCharacteristicsList }

function TXMLBandCharacteristicsList.Add: IXMLBandCharacteristics;
begin
  Result := AddItem(-1) as IXMLBandCharacteristics;
end;

function TXMLBandCharacteristicsList.Insert(const Index: Integer): IXMLBandCharacteristics;
begin
  Result := AddItem(Index) as IXMLBandCharacteristics;
end;

function TXMLBandCharacteristicsList.Get_Item(Index: Integer): IXMLBandCharacteristics;
begin
  Result := List[Index] as IXMLBandCharacteristics;
end;

{ TXMLPalletCharacteristics }

procedure TXMLPalletCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ProductIdentification', TXMLProductIdentification);
  RegisterChildNode('PalletLength', TXMLMeasurement);
  RegisterChildNode('PalletWidth', TXMLMeasurement);
  RegisterChildNode('PalletHeight', TXMLMeasurement);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  inherited;
end;

function TXMLPalletCharacteristics.Get_MixedProductPalletIndicator: UnicodeString;
begin
  Result := AttributeNodes['MixedProductPalletIndicator'].Text;
end;

procedure TXMLPalletCharacteristics.Set_MixedProductPalletIndicator(Value: UnicodeString);
begin
  SetAttribute('MixedProductPalletIndicator', Value);
end;

function TXMLPalletCharacteristics.Get_PalletType: UnicodeString;
begin
  Result := AttributeNodes['PalletType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletType(Value: UnicodeString);
begin
  SetAttribute('PalletType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletLedgeType: UnicodeString;
begin
  Result := AttributeNodes['PalletLedgeType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletLedgeType(Value: UnicodeString);
begin
  SetAttribute('PalletLedgeType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletCoverType: UnicodeString;
begin
  Result := AttributeNodes['PalletCoverType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletCoverType(Value: UnicodeString);
begin
  SetAttribute('PalletCoverType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletAdditionsType: UnicodeString;
begin
  Result := AttributeNodes['PalletAdditionsType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletAdditionsType(Value: UnicodeString);
begin
  SetAttribute('PalletAdditionsType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletTopType: UnicodeString;
begin
  Result := AttributeNodes['PalletTopType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletTopType(Value: UnicodeString);
begin
  SetAttribute('PalletTopType', Value);
end;

function TXMLPalletCharacteristics.Get_IsPartialPalletsAllowed: UnicodeString;
begin
  Result := AttributeNodes['IsPartialPalletsAllowed'].Text;
end;

procedure TXMLPalletCharacteristics.Set_IsPartialPalletsAllowed(Value: UnicodeString);
begin
  SetAttribute('IsPartialPalletsAllowed', Value);
end;

function TXMLPalletCharacteristics.Get_PalletMaterialType: UnicodeString;
begin
  Result := AttributeNodes['PalletMaterialType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletMaterialType(Value: UnicodeString);
begin
  SetAttribute('PalletMaterialType', Value);
end;

function TXMLPalletCharacteristics.Get_ProductIdentification: IXMLProductIdentification;
begin
  Result := ChildNodes['ProductIdentification'] as IXMLProductIdentification;
end;

function TXMLPalletCharacteristics.Get_PalletLength: IXMLMeasurement;
begin
  Result := ChildNodes['PalletLength'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_PalletWidth: IXMLMeasurement;
begin
  Result := ChildNodes['PalletWidth'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_PalletHeight: IXMLMeasurement;
begin
  Result := ChildNodes['PalletHeight'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_ItemsPerPallet: LongWord;
begin
  Result := ChildNodes['ItemsPerPallet'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_ItemsPerPallet(Value: LongWord);
begin
  ChildNodes['ItemsPerPallet'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_StacksPerPallet: LongWord;
begin
  Result := ChildNodes['StacksPerPallet'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_StacksPerPallet(Value: LongWord);
begin
  ChildNodes['StacksPerPallet'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_TiersPerPallet: LongWord;
begin
  Result := ChildNodes['TiersPerPallet'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_TiersPerPallet(Value: LongWord);
begin
  ChildNodes['TiersPerPallet'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_StackingMethod: UnicodeString;
begin
  Result := ChildNodes['StackingMethod'].Text;
end;

procedure TXMLPalletCharacteristics.Set_StackingMethod(Value: UnicodeString);
begin
  ChildNodes['StackingMethod'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristics;
begin
  Result := ChildNodes['LabelCharacteristics'] as IXMLLabelCharacteristics;
end;

function TXMLPalletCharacteristics.Get_ItemsPerTier: LongWord;
begin
  Result := ChildNodes['ItemsPerTier'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_ItemsPerTier(Value: LongWord);
begin
  ChildNodes['ItemsPerTier'].NodeValue := Value;
end;

{ TXMLPalletCharacteristicsList }

function TXMLPalletCharacteristicsList.Add: IXMLPalletCharacteristics;
begin
  Result := AddItem(-1) as IXMLPalletCharacteristics;
end;

function TXMLPalletCharacteristicsList.Insert(const Index: Integer): IXMLPalletCharacteristics;
begin
  Result := AddItem(Index) as IXMLPalletCharacteristics;
end;

function TXMLPalletCharacteristicsList.Get_Item(Index: Integer): IXMLPalletCharacteristics;
begin
  Result := List[Index] as IXMLPalletCharacteristics;
end;

{ TXMLProductIdentification }

procedure TXMLProductIdentification.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  RegisterChildNode('ProductDescription', TXMLProductDescription);
  FProductDescription := CreateCollection(TXMLProductDescriptionList, IXMLProductDescription, 'ProductDescription') as IXMLProductDescriptionList;
  inherited;
end;

function TXMLProductIdentification.Get_ProductIdentifier: IXMLProductIdentifier;
begin
  Result := ChildNodes['ProductIdentifier'] as IXMLProductIdentifier;
end;

function TXMLProductIdentification.Get_ProductDescription: IXMLProductDescriptionList;
begin
  Result := FProductDescription;
end;

{ TXMLProductIdentificationList }

function TXMLProductIdentificationList.Add: IXMLProductIdentification;
begin
  Result := AddItem(-1) as IXMLProductIdentification;
end;

function TXMLProductIdentificationList.Insert(const Index: Integer): IXMLProductIdentification;
begin
  Result := AddItem(Index) as IXMLProductIdentification;
end;

function TXMLProductIdentificationList.Get_Item(Index: Integer): IXMLProductIdentification;
begin
  Result := List[Index] as IXMLProductIdentification;
end;

{ TXMLLabelCharacteristics }

procedure TXMLLabelCharacteristics.AfterConstruction;
begin
  RegisterChildNode('CustomerMarks', TXMLCustomerMarks);
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('ColourCode', TXMLColourCode);
  FCustomerMarks := CreateCollection(TXMLCustomerMarksList, IXMLCustomerMarks, 'CustomerMarks') as IXMLCustomerMarksList;
  inherited;
end;

function TXMLLabelCharacteristics.Get_CustomerMarks: IXMLCustomerMarksList;
begin
  Result := FCustomerMarks;
end;

function TXMLLabelCharacteristics.Get_LabelStyle: UnicodeString;
begin
  Result := ChildNodes['LabelStyle'].Text;
end;

procedure TXMLLabelCharacteristics.Set_LabelStyle(Value: UnicodeString);
begin
  ChildNodes['LabelStyle'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_LabelBrandName: UnicodeString;
begin
  Result := ChildNodes['LabelBrandName'].Text;
end;

procedure TXMLLabelCharacteristics.Set_LabelBrandName(Value: UnicodeString);
begin
  ChildNodes['LabelBrandName'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_LabelPosition: UnicodeString;
begin
  Result := ChildNodes['LabelPosition'].Text;
end;

procedure TXMLLabelCharacteristics.Set_LabelPosition(Value: UnicodeString);
begin
  ChildNodes['LabelPosition'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_NumberOfLabels: LongWord;
begin
  Result := ChildNodes['NumberOfLabels'].NodeValue;
end;

procedure TXMLLabelCharacteristics.Set_NumberOfLabels(Value: LongWord);
begin
  ChildNodes['NumberOfLabels'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLLabelCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLLabelCharacteristics.Get_ColourCode: IXMLColourCode;
begin
  Result := ChildNodes['ColourCode'] as IXMLColourCode;
end;

function TXMLLabelCharacteristics.Get_ColourDescription: UnicodeString;
begin
  Result := ChildNodes['ColourDescription'].Text;
end;

procedure TXMLLabelCharacteristics.Set_ColourDescription(Value: UnicodeString);
begin
  ChildNodes['ColourDescription'].NodeValue := Value;
end;

{ TXMLLabelCharacteristicsList }

function TXMLLabelCharacteristicsList.Add: IXMLLabelCharacteristics;
begin
  Result := AddItem(-1) as IXMLLabelCharacteristics;
end;

function TXMLLabelCharacteristicsList.Insert(const Index: Integer): IXMLLabelCharacteristics;
begin
  Result := AddItem(Index) as IXMLLabelCharacteristics;
end;

function TXMLLabelCharacteristicsList.Get_Item(Index: Integer): IXMLLabelCharacteristics;
begin
  Result := List[Index] as IXMLLabelCharacteristics;
end;

{ TXMLCustomerMarks }

function TXMLCustomerMarks.Get_CustomerMarksType: UnicodeString;
begin
  Result := AttributeNodes['CustomerMarksType'].Text;
end;

procedure TXMLCustomerMarks.Set_CustomerMarksType(Value: UnicodeString);
begin
  SetAttribute('CustomerMarksType', Value);
end;

function TXMLCustomerMarks.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLCustomerMarks.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLCustomerMarksList }

function TXMLCustomerMarksList.Add: IXMLCustomerMarks;
begin
  Result := AddItem(-1) as IXMLCustomerMarks;
end;

function TXMLCustomerMarksList.Insert(const Index: Integer): IXMLCustomerMarks;
begin
  Result := AddItem(Index) as IXMLCustomerMarks;
end;

function TXMLCustomerMarksList.Get_Item(Index: Integer): IXMLCustomerMarks;
begin
  Result := List[Index] as IXMLCustomerMarks;
end;

{ TXMLStencilCharacteristics }

procedure TXMLStencilCharacteristics.AfterConstruction;
begin
  ItemTag := 'StencilText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLStencilCharacteristics.Get_StencilType: UnicodeString;
begin
  Result := AttributeNodes['StencilType'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilType(Value: UnicodeString);
begin
  SetAttribute('StencilType', Value);
end;

function TXMLStencilCharacteristics.Get_StencilInkType: UnicodeString;
begin
  Result := AttributeNodes['StencilInkType'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilInkType(Value: UnicodeString);
begin
  SetAttribute('StencilInkType', Value);
end;

function TXMLStencilCharacteristics.Get_StencilLocation: UnicodeString;
begin
  Result := AttributeNodes['StencilLocation'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilLocation(Value: UnicodeString);
begin
  SetAttribute('StencilLocation', Value);
end;

function TXMLStencilCharacteristics.Get_StencilFormat: UnicodeString;
begin
  Result := AttributeNodes['StencilFormat'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilFormat(Value: UnicodeString);
begin
  SetAttribute('StencilFormat', Value);
end;

function TXMLStencilCharacteristics.Get_StencilContent: UnicodeString;
begin
  Result := AttributeNodes['StencilContent'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilContent(Value: UnicodeString);
begin
  SetAttribute('StencilContent', Value);
end;

function TXMLStencilCharacteristics.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLStencilCharacteristics.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

function TXMLStencilCharacteristics.Get_StencilText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLStencilCharacteristics.Add(const StencilText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := StencilText;
end;

function TXMLStencilCharacteristics.Insert(const Index: Integer; const StencilText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := StencilText;
end;

{ TXMLStencilCharacteristicsList }

function TXMLStencilCharacteristicsList.Add: IXMLStencilCharacteristics;
begin
  Result := AddItem(-1) as IXMLStencilCharacteristics;
end;

function TXMLStencilCharacteristicsList.Insert(const Index: Integer): IXMLStencilCharacteristics;
begin
  Result := AddItem(Index) as IXMLStencilCharacteristics;
end;

function TXMLStencilCharacteristicsList.Get_Item(Index: Integer): IXMLStencilCharacteristics;
begin
  Result := List[Index] as IXMLStencilCharacteristics;
end;

{ TXMLMaximumClampingForce }

procedure TXMLMaximumClampingForce.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLMaximumClampingForce.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLMaximumClampingForce.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLMaximumClampingForce.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLSheet }

procedure TXMLSheet.AfterConstruction;
begin
  RegisterChildNode('SheetConversionCharacteristics', TXMLSheetConversionCharacteristicsClass);
  RegisterChildNode('SheetPackagingCharacteristics', TXMLSheetPackagingCharacteristicsClass);
  inherited;
end;

function TXMLSheet.Get_SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass;
begin
  Result := ChildNodes['SheetConversionCharacteristics'] as IXMLSheetConversionCharacteristicsClass;
end;

function TXMLSheet.Get_SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass;
begin
  Result := ChildNodes['SheetPackagingCharacteristics'] as IXMLSheetPackagingCharacteristicsClass;
end;

{ TXMLSheetConversionCharacteristicsClass }

procedure TXMLSheetConversionCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('ConversionCode', TXMLConversionCode);
  RegisterChildNode('SheetSize', TXMLSheetSize);
  RegisterChildNode('TargetProductWeight', TXMLMeasurement);
  RegisterChildNode('PunchedHoleDetails', TXMLPunchedHoleDetails);
  RegisterChildNode('CuttingDetails', TXMLCuttingDetails);
  RegisterChildNode('Embossing', TXMLEmbossing);
  RegisterChildNode('Watermark', TXMLWatermark);
  FSheetSize := CreateCollection(TXMLSheetSizeList, IXMLSheetSize, 'SheetSize') as IXMLSheetSizeList;
  FPunchedHoleDetails := CreateCollection(TXMLPunchedHoleDetailsList, IXMLPunchedHoleDetails, 'PunchedHoleDetails') as IXMLPunchedHoleDetailsList;
  FCuttingDetails := CreateCollection(TXMLCuttingDetailsList, IXMLCuttingDetails, 'CuttingDetails') as IXMLCuttingDetailsList;
  FEmbossing := CreateCollection(TXMLEmbossingList, IXMLEmbossing, 'Embossing') as IXMLEmbossingList;
  FWatermark := CreateCollection(TXMLWatermarkList, IXMLWatermark, 'Watermark') as IXMLWatermarkList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSheetConversionCharacteristicsClass.Get_ConversionCode: IXMLConversionCode;
begin
  Result := ChildNodes['ConversionCode'] as IXMLConversionCode;
end;

function TXMLSheetConversionCharacteristicsClass.Get_GrainDirection: UnicodeString;
begin
  Result := ChildNodes['GrainDirection'].Text;
end;

procedure TXMLSheetConversionCharacteristicsClass.Set_GrainDirection(Value: UnicodeString);
begin
  ChildNodes['GrainDirection'].NodeValue := Value;
end;

function TXMLSheetConversionCharacteristicsClass.Get_WindingDirection: UnicodeString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLSheetConversionCharacteristicsClass.Set_WindingDirection(Value: UnicodeString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLSheetConversionCharacteristicsClass.Get_SheetSize: IXMLSheetSizeList;
begin
  Result := FSheetSize;
end;

function TXMLSheetConversionCharacteristicsClass.Get_TargetProductWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TargetProductWeight'] as IXMLMeasurement;
end;

function TXMLSheetConversionCharacteristicsClass.Get_PunchedHoleDetails: IXMLPunchedHoleDetailsList;
begin
  Result := FPunchedHoleDetails;
end;

function TXMLSheetConversionCharacteristicsClass.Get_CuttingDetails: IXMLCuttingDetailsList;
begin
  Result := FCuttingDetails;
end;

function TXMLSheetConversionCharacteristicsClass.Get_Embossing: IXMLEmbossingList;
begin
  Result := FEmbossing;
end;

function TXMLSheetConversionCharacteristicsClass.Get_Watermark: IXMLWatermarkList;
begin
  Result := FWatermark;
end;

function TXMLSheetConversionCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSheetSize }

procedure TXMLSheetSize.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  inherited;
end;

function TXMLSheetSize.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLSheetSize.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLSheetSize.Get_PaperSizeType: UnicodeString;
begin
  Result := ChildNodes['PaperSizeType'].Text;
end;

procedure TXMLSheetSize.Set_PaperSizeType(Value: UnicodeString);
begin
  ChildNodes['PaperSizeType'].NodeValue := Value;
end;

{ TXMLSheetSizeList }

function TXMLSheetSizeList.Add: IXMLSheetSize;
begin
  Result := AddItem(-1) as IXMLSheetSize;
end;

function TXMLSheetSizeList.Insert(const Index: Integer): IXMLSheetSize;
begin
  Result := AddItem(Index) as IXMLSheetSize;
end;

function TXMLSheetSizeList.Get_Item(Index: Integer): IXMLSheetSize;
begin
  Result := List[Index] as IXMLSheetSize;
end;

{ TXMLPunchedHoleDetails }

procedure TXMLPunchedHoleDetails.AfterConstruction;
begin
  RegisterChildNode('NumberOfHoles', TXMLNumberOfHoles);
  RegisterChildNode('SizeOfHolePunch', TXMLSizeOfHolePunch);
  RegisterChildNode('HoleSpacing', TXMLHoleSpacing);
  RegisterChildNode('DistanceFromEdge', TXMLDistanceFromEdge);
  FDistanceFromEdge := CreateCollection(TXMLDistanceFromEdgeList, IXMLDistanceFromEdge, 'DistanceFromEdge') as IXMLDistanceFromEdgeList;
  FHolePunchTemplateReference := CreateCollection(TXMLS72List, IXMLNode, 'HolePunchTemplateReference') as IXMLS72List;
  inherited;
end;

function TXMLPunchedHoleDetails.Get_NumberOfHoles: IXMLNumberOfHoles;
begin
  Result := ChildNodes['NumberOfHoles'] as IXMLNumberOfHoles;
end;

function TXMLPunchedHoleDetails.Get_HoleReinforcement: UnicodeString;
begin
  Result := ChildNodes['HoleReinforcement'].Text;
end;

procedure TXMLPunchedHoleDetails.Set_HoleReinforcement(Value: UnicodeString);
begin
  ChildNodes['HoleReinforcement'].NodeValue := Value;
end;

function TXMLPunchedHoleDetails.Get_HolePunchType: UnicodeString;
begin
  Result := ChildNodes['HolePunchType'].Text;
end;

procedure TXMLPunchedHoleDetails.Set_HolePunchType(Value: UnicodeString);
begin
  ChildNodes['HolePunchType'].NodeValue := Value;
end;

function TXMLPunchedHoleDetails.Get_StandardSpacing: UnicodeString;
begin
  Result := ChildNodes['StandardSpacing'].Text;
end;

procedure TXMLPunchedHoleDetails.Set_StandardSpacing(Value: UnicodeString);
begin
  ChildNodes['StandardSpacing'].NodeValue := Value;
end;

function TXMLPunchedHoleDetails.Get_SizeOfHolePunch: IXMLSizeOfHolePunch;
begin
  Result := ChildNodes['SizeOfHolePunch'] as IXMLSizeOfHolePunch;
end;

function TXMLPunchedHoleDetails.Get_HoleSpacing: IXMLHoleSpacing;
begin
  Result := ChildNodes['HoleSpacing'] as IXMLHoleSpacing;
end;

function TXMLPunchedHoleDetails.Get_DistanceFromEdge: IXMLDistanceFromEdgeList;
begin
  Result := FDistanceFromEdge;
end;

function TXMLPunchedHoleDetails.Get_HolePunchTemplateReference: IXMLS72List;
begin
  Result := FHolePunchTemplateReference;
end;

{ TXMLPunchedHoleDetailsList }

function TXMLPunchedHoleDetailsList.Add: IXMLPunchedHoleDetails;
begin
  Result := AddItem(-1) as IXMLPunchedHoleDetails;
end;

function TXMLPunchedHoleDetailsList.Insert(const Index: Integer): IXMLPunchedHoleDetails;
begin
  Result := AddItem(Index) as IXMLPunchedHoleDetails;
end;

function TXMLPunchedHoleDetailsList.Get_Item(Index: Integer): IXMLPunchedHoleDetails;
begin
  Result := List[Index] as IXMLPunchedHoleDetails;
end;

{ TXMLNumberOfHoles }

{ TXMLSizeOfHolePunch }

function TXMLSizeOfHolePunch.Get_ShapeOfHole: UnicodeString;
begin
  Result := AttributeNodes['ShapeOfHole'].Text;
end;

procedure TXMLSizeOfHolePunch.Set_ShapeOfHole(Value: UnicodeString);
begin
  SetAttribute('ShapeOfHole', Value);
end;

{ TXMLHoleSpacing }

procedure TXMLHoleSpacing.AfterConstruction;
begin
  RegisterChildNode('EvenSpacing', TXMLEvenSpacing);
  inherited;
end;

function TXMLHoleSpacing.Get_EvenSpacing: IXMLEvenSpacing;
begin
  Result := ChildNodes['EvenSpacing'] as IXMLEvenSpacing;
end;

function TXMLHoleSpacing.Get_UnevenSpacing: UnicodeString;
begin
  Result := ChildNodes['UnevenSpacing'].Text;
end;

procedure TXMLHoleSpacing.Set_UnevenSpacing(Value: UnicodeString);
begin
  ChildNodes['UnevenSpacing'].NodeValue := Value;
end;

{ TXMLEvenSpacing }

procedure TXMLEvenSpacing.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLEvenSpacing.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

{ TXMLDistanceFromEdge }

function TXMLDistanceFromEdge.Get_EdgeType: UnicodeString;
begin
  Result := AttributeNodes['EdgeType'].Text;
end;

procedure TXMLDistanceFromEdge.Set_EdgeType(Value: UnicodeString);
begin
  SetAttribute('EdgeType', Value);
end;

function TXMLDistanceFromEdge.Get_DistanceMeasuredTo: UnicodeString;
begin
  Result := AttributeNodes['DistanceMeasuredTo'].Text;
end;

procedure TXMLDistanceFromEdge.Set_DistanceMeasuredTo(Value: UnicodeString);
begin
  SetAttribute('DistanceMeasuredTo', Value);
end;

{ TXMLDistanceFromEdgeList }

function TXMLDistanceFromEdgeList.Add: IXMLDistanceFromEdge;
begin
  Result := AddItem(-1) as IXMLDistanceFromEdge;
end;

function TXMLDistanceFromEdgeList.Insert(const Index: Integer): IXMLDistanceFromEdge;
begin
  Result := AddItem(Index) as IXMLDistanceFromEdge;
end;

function TXMLDistanceFromEdgeList.Get_Item(Index: Integer): IXMLDistanceFromEdge;
begin
  Result := List[Index] as IXMLDistanceFromEdge;
end;

{ TXMLCuttingDetails }

procedure TXMLCuttingDetails.AfterConstruction;
begin
  RegisterChildNode('CuttingTemplateCode', TXMLCuttingTemplateCode);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLCuttingDetails.Get_CuttingTemplateCode: IXMLCuttingTemplateCode;
begin
  Result := ChildNodes['CuttingTemplateCode'] as IXMLCuttingTemplateCode;
end;

function TXMLCuttingDetails.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLCuttingDetailsList }

function TXMLCuttingDetailsList.Add: IXMLCuttingDetails;
begin
  Result := AddItem(-1) as IXMLCuttingDetails;
end;

function TXMLCuttingDetailsList.Insert(const Index: Integer): IXMLCuttingDetails;
begin
  Result := AddItem(Index) as IXMLCuttingDetails;
end;

function TXMLCuttingDetailsList.Get_Item(Index: Integer): IXMLCuttingDetails;
begin
  Result := List[Index] as IXMLCuttingDetails;
end;

{ TXMLCuttingTemplateCode }

function TXMLCuttingTemplateCode.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLCuttingTemplateCode.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

function TXMLCuttingTemplateCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCuttingTemplateCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLSheetPackagingCharacteristicsClass }

procedure TXMLSheetPackagingCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('ReamWeight', TXMLMeasurement);
  RegisterChildNode('MWeight', TXMLMeasurement);
  RegisterChildNode('SheetCount', TXMLSheetCount);
  RegisterChildNode('UnitsPerCarton', TXMLMeasurement);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  FPackagingCode := CreateCollection(TXMLPackagingCodeList, IXMLPackagingCode, 'PackagingCode') as IXMLPackagingCodeList;
  FPackagingDescription := CreateCollection(TXMLPackagingDescriptionList, IXMLPackagingDescription, 'PackagingDescription') as IXMLPackagingDescriptionList;
  FReamType := CreateCollection(TXMLReamTypeList, IXMLNode, 'ReamType') as IXMLReamTypeList;
  FReamWeight := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReamWeight') as IXMLMeasurementList;
  FMWeight := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'MWeight') as IXMLMeasurementList;
  FSheetCount := CreateCollection(TXMLSheetCountList, IXMLSheetCount, 'SheetCount') as IXMLSheetCountList;
  FUnitsPerCarton := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'UnitsPerCarton') as IXMLMeasurementList;
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  FBandCharacteristics := CreateCollection(TXMLBandCharacteristicsList, IXMLBandCharacteristics, 'BandCharacteristics') as IXMLBandCharacteristicsList;
  FPalletCharacteristics := CreateCollection(TXMLPalletCharacteristicsList, IXMLPalletCharacteristics, 'PalletCharacteristics') as IXMLPalletCharacteristicsList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_ActionType: UnicodeString;
begin
  Result := AttributeNodes['ActionType'].Text;
end;

procedure TXMLSheetPackagingCharacteristicsClass.Set_ActionType(Value: UnicodeString);
begin
  SetAttribute('ActionType', Value);
end;

function TXMLSheetPackagingCharacteristicsClass.Get_PackagingCode: IXMLPackagingCodeList;
begin
  Result := FPackagingCode;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_PackagingDescription: IXMLPackagingDescriptionList;
begin
  Result := FPackagingDescription;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_ReamType: IXMLReamTypeList;
begin
  Result := FReamType;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_ReamWeight: IXMLMeasurementList;
begin
  Result := FReamWeight;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_MWeight: IXMLMeasurementList;
begin
  Result := FMWeight;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_SheetCount: IXMLSheetCountList;
begin
  Result := FSheetCount;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_UnitsPerCarton: IXMLMeasurementList;
begin
  Result := FUnitsPerCarton;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_BandCharacteristics: IXMLBandCharacteristicsList;
begin
  Result := FBandCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
begin
  Result := FPalletCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSheetCount }

function TXMLSheetCount.Get_SheetCountMethodType: UnicodeString;
begin
  Result := AttributeNodes['SheetCountMethodType'].Text;
end;

procedure TXMLSheetCount.Set_SheetCountMethodType(Value: UnicodeString);
begin
  SetAttribute('SheetCountMethodType', Value);
end;

function TXMLSheetCount.Get_PerCarton: LongWord;
begin
  Result := ChildNodes['PerCarton'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerCarton(Value: LongWord);
begin
  ChildNodes['PerCarton'].NodeValue := Value;
end;

function TXMLSheetCount.Get_PerReam: LongWord;
begin
  Result := ChildNodes['PerReam'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerReam(Value: LongWord);
begin
  ChildNodes['PerReam'].NodeValue := Value;
end;

function TXMLSheetCount.Get_PerPallet: LongWord;
begin
  Result := ChildNodes['PerPallet'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerPallet(Value: LongWord);
begin
  ChildNodes['PerPallet'].NodeValue := Value;
end;

function TXMLSheetCount.Get_PerTab: LongWord;
begin
  Result := ChildNodes['PerTab'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerTab(Value: LongWord);
begin
  ChildNodes['PerTab'].NodeValue := Value;
end;

{ TXMLSheetCountList }

function TXMLSheetCountList.Add: IXMLSheetCount;
begin
  Result := AddItem(-1) as IXMLSheetCount;
end;

function TXMLSheetCountList.Insert(const Index: Integer): IXMLSheetCount;
begin
  Result := AddItem(Index) as IXMLSheetCount;
end;

function TXMLSheetCountList.Get_Item(Index: Integer): IXMLSheetCount;
begin
  Result := List[Index] as IXMLSheetCount;
end;

{ TXMLSuppliedComponentReference }

function TXMLSuppliedComponentReference.Get_SuppliedComponentReferenceType: UnicodeString;
begin
  Result := AttributeNodes['SuppliedComponentReferenceType'].Text;
end;

procedure TXMLSuppliedComponentReference.Set_SuppliedComponentReferenceType(Value: UnicodeString);
begin
  SetAttribute('SuppliedComponentReferenceType', Value);
end;

function TXMLSuppliedComponentReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLSuppliedComponentReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLSuppliedComponentReferenceList }

function TXMLSuppliedComponentReferenceList.Add: IXMLSuppliedComponentReference;
begin
  Result := AddItem(-1) as IXMLSuppliedComponentReference;
end;

function TXMLSuppliedComponentReferenceList.Insert(const Index: Integer): IXMLSuppliedComponentReference;
begin
  Result := AddItem(Index) as IXMLSuppliedComponentReference;
end;

function TXMLSuppliedComponentReferenceList.Get_Item(Index: Integer): IXMLSuppliedComponentReference;
begin
  Result := List[Index] as IXMLSuppliedComponentReference;
end;

{ TXMLComponentShipDate }

procedure TXMLComponentShipDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLComponentShipDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLComponentShipDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLComponentShipDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLComponentDueDate }

procedure TXMLComponentDueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLComponentDueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLComponentDueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLComponentDueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLComponentNeededDate }

procedure TXMLComponentNeededDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLComponentNeededDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLComponentNeededDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLComponentNeededDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLOrderStatusInformation }

procedure TXMLOrderStatusInformation.AfterConstruction;
begin
  RegisterChildNode('OrderPrimaryStatus', TXMLOrderPrimaryStatus);
  RegisterChildNode('OrderSecondaryStatus', TXMLOrderSecondaryStatus);
  RegisterChildNode('OrderStatusInformationDate', TXMLOrderStatusInformationDate);
  RegisterChildNode('QuantityInformation', TXMLQuantityInformation);
  inherited;
end;

function TXMLOrderStatusInformation.Get_OrderPrimaryStatus: IXMLOrderPrimaryStatus;
begin
  Result := ChildNodes['OrderPrimaryStatus'] as IXMLOrderPrimaryStatus;
end;

function TXMLOrderStatusInformation.Get_OrderSecondaryStatus: IXMLOrderSecondaryStatus;
begin
  Result := ChildNodes['OrderSecondaryStatus'] as IXMLOrderSecondaryStatus;
end;

function TXMLOrderStatusInformation.Get_OrderStatusInformationDate: IXMLOrderStatusInformationDate;
begin
  Result := ChildNodes['OrderStatusInformationDate'] as IXMLOrderStatusInformationDate;
end;

function TXMLOrderStatusInformation.Get_QuantityInformation: IXMLQuantityInformation;
begin
  Result := ChildNodes['QuantityInformation'] as IXMLQuantityInformation;
end;

{ TXMLOrderPrimaryStatus }

function TXMLOrderPrimaryStatus.Get_OrderStatusCode: UnicodeString;
begin
  Result := AttributeNodes['OrderStatusCode'].Text;
end;

procedure TXMLOrderPrimaryStatus.Set_OrderStatusCode(Value: UnicodeString);
begin
  SetAttribute('OrderStatusCode', Value);
end;

{ TXMLOrderSecondaryStatus }

function TXMLOrderSecondaryStatus.Get_OrderStatusCode: UnicodeString;
begin
  Result := AttributeNodes['OrderStatusCode'].Text;
end;

procedure TXMLOrderSecondaryStatus.Set_OrderStatusCode(Value: UnicodeString);
begin
  SetAttribute('OrderStatusCode', Value);
end;

{ TXMLOrderStatusInformationDate }

procedure TXMLOrderStatusInformationDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLOrderStatusInformationDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLOrderStatusInformationDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLOrderStatusInformationDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLPackagingCharacteristics }

procedure TXMLPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('BoxCharacteristics', TXMLBoxCharacteristics);
  RegisterChildNode('PalletPackagingCharacteristics', TXMLPalletPackagingCharacteristics);
  RegisterChildNode('BookUnitPacking', TXMLBookUnitPacking);
  RegisterChildNode('DocumentInformation', TXMLDocumentInformation);
  FDocumentInformation := CreateCollection(TXMLDocumentInformationList, IXMLDocumentInformation, 'DocumentInformation') as IXMLDocumentInformationList;
  inherited;
end;

function TXMLPackagingCharacteristics.Get_IsBoxed: UnicodeString;
begin
  Result := AttributeNodes['IsBoxed'].Text;
end;

procedure TXMLPackagingCharacteristics.Set_IsBoxed(Value: UnicodeString);
begin
  SetAttribute('IsBoxed', Value);
end;

function TXMLPackagingCharacteristics.Get_IsPalletized: UnicodeString;
begin
  Result := AttributeNodes['IsPalletized'].Text;
end;

procedure TXMLPackagingCharacteristics.Set_IsPalletized(Value: UnicodeString);
begin
  SetAttribute('IsPalletized', Value);
end;

function TXMLPackagingCharacteristics.Get_BoxCharacteristics: IXMLBoxCharacteristics;
begin
  Result := ChildNodes['BoxCharacteristics'] as IXMLBoxCharacteristics;
end;

function TXMLPackagingCharacteristics.Get_PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics;
begin
  Result := ChildNodes['PalletPackagingCharacteristics'] as IXMLPalletPackagingCharacteristics;
end;

function TXMLPackagingCharacteristics.Get_BookUnitPacking: IXMLBookUnitPacking;
begin
  Result := ChildNodes['BookUnitPacking'] as IXMLBookUnitPacking;
end;

function TXMLPackagingCharacteristics.Get_DocumentInformation: IXMLDocumentInformationList;
begin
  Result := FDocumentInformation;
end;

{ TXMLPackagingCharacteristicsList }

function TXMLPackagingCharacteristicsList.Add: IXMLPackagingCharacteristics;
begin
  Result := AddItem(-1) as IXMLPackagingCharacteristics;
end;

function TXMLPackagingCharacteristicsList.Insert(const Index: Integer): IXMLPackagingCharacteristics;
begin
  Result := AddItem(Index) as IXMLPackagingCharacteristics;
end;

function TXMLPackagingCharacteristicsList.Get_Item(Index: Integer): IXMLPackagingCharacteristics;
begin
  Result := List[Index] as IXMLPackagingCharacteristics;
end;

{ TXMLBoxCharacteristics }

procedure TXMLBoxCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ProductIdentification', TXMLProductIdentification);
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Weight', TXMLMeasurement);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('UnitsPerCarton', TXMLMeasurement);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('WrapCharacteristics', TXMLWrapCharacteristics);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLBoxCharacteristics.Get_BoxType: UnicodeString;
begin
  Result := AttributeNodes['BoxType'].Text;
end;

procedure TXMLBoxCharacteristics.Set_BoxType(Value: UnicodeString);
begin
  SetAttribute('BoxType', Value);
end;

function TXMLBoxCharacteristics.Get_BoxMeasurementsAppliesTo: UnicodeString;
begin
  Result := AttributeNodes['BoxMeasurementsAppliesTo'].Text;
end;

procedure TXMLBoxCharacteristics.Set_BoxMeasurementsAppliesTo(Value: UnicodeString);
begin
  SetAttribute('BoxMeasurementsAppliesTo', Value);
end;

function TXMLBoxCharacteristics.Get_IsRFTagRequired: UnicodeString;
begin
  Result := AttributeNodes['IsRFTagRequired'].Text;
end;

procedure TXMLBoxCharacteristics.Set_IsRFTagRequired(Value: UnicodeString);
begin
  SetAttribute('IsRFTagRequired', Value);
end;

function TXMLBoxCharacteristics.Get_ProductIdentification: IXMLProductIdentification;
begin
  Result := ChildNodes['ProductIdentification'] as IXMLProductIdentification;
end;

function TXMLBoxCharacteristics.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Burst: IXMLBurst;
begin
  Result := ChildNodes['Burst'] as IXMLBurst;
end;

function TXMLBoxCharacteristics.Get_BurstIndex: IXMLBurstIndex;
begin
  Result := ChildNodes['BurstIndex'] as IXMLBurstIndex;
end;

function TXMLBoxCharacteristics.Get_UnitsPerCarton: IXMLMeasurement;
begin
  Result := ChildNodes['UnitsPerCarton'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLBoxCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLBoxCharacteristics.Get_WrapCharacteristics: IXMLWrapCharacteristics;
begin
  Result := ChildNodes['WrapCharacteristics'] as IXMLWrapCharacteristics;
end;

function TXMLBoxCharacteristics.Get_BandCharacteristics: IXMLBandCharacteristics;
begin
  Result := ChildNodes['BandCharacteristics'] as IXMLBandCharacteristics;
end;

function TXMLBoxCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLWrapCharacteristics }

procedure TXMLWrapCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Wrap', TXMLWrap);
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  inherited;
end;

function TXMLWrapCharacteristics.Get_PackagesPerWrap: LongWord;
begin
  Result := ChildNodes['PackagesPerWrap'].NodeValue;
end;

procedure TXMLWrapCharacteristics.Set_PackagesPerWrap(Value: LongWord);
begin
  ChildNodes['PackagesPerWrap'].NodeValue := Value;
end;

function TXMLWrapCharacteristics.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

{ TXMLPalletPackagingCharacteristics }

procedure TXMLPalletPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('WrapCharacteristics', TXMLWrapCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPalletPackagingCharacteristics.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLPalletPackagingCharacteristics.Get_PackagingDescription: IXMLPackagingDescription;
begin
  Result := ChildNodes['PackagingDescription'] as IXMLPackagingDescription;
end;

function TXMLPalletPackagingCharacteristics.Get_WrapCharacteristics: IXMLWrapCharacteristics;
begin
  Result := ChildNodes['WrapCharacteristics'] as IXMLWrapCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_PalletCharacteristics: IXMLPalletCharacteristics;
begin
  Result := ChildNodes['PalletCharacteristics'] as IXMLPalletCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_BandCharacteristics: IXMLBandCharacteristics;
begin
  Result := ChildNodes['BandCharacteristics'] as IXMLBandCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLPalletPackagingCharacteristics.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLPalletPackagingCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLBookUnitPacking }

procedure TXMLBookUnitPacking.AfterConstruction;
begin
  RegisterChildNode('UnitCharacteristics', TXMLUnitCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('WrapCharacteristics', TXMLWrapCharacteristics);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLBookUnitPacking.Get_BookUnitType: UnicodeString;
begin
  Result := AttributeNodes['BookUnitType'].Text;
end;

procedure TXMLBookUnitPacking.Set_BookUnitType(Value: UnicodeString);
begin
  SetAttribute('BookUnitType', Value);
end;

function TXMLBookUnitPacking.Get_PackageType: UnicodeString;
begin
  Result := AttributeNodes['PackageType'].Text;
end;

procedure TXMLBookUnitPacking.Set_PackageType(Value: UnicodeString);
begin
  SetAttribute('PackageType', Value);
end;

function TXMLBookUnitPacking.Get_UnitCharacteristics: IXMLUnitCharacteristics;
begin
  Result := ChildNodes['UnitCharacteristics'] as IXMLUnitCharacteristics;
end;

function TXMLBookUnitPacking.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLBookUnitPacking.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLBookUnitPacking.Get_WrapCharacteristics: IXMLWrapCharacteristics;
begin
  Result := ChildNodes['WrapCharacteristics'] as IXMLWrapCharacteristics;
end;

function TXMLBookUnitPacking.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLUnitCharacteristics }

procedure TXMLUnitCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('Thickness', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Weight', TXMLMeasurement);
  inherited;
end;

function TXMLUnitCharacteristics.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLUnitCharacteristics.Get_Thickness: IXMLMeasurement;
begin
  Result := ChildNodes['Thickness'] as IXMLMeasurement;
end;

function TXMLUnitCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLUnitCharacteristics.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

{ TXMLDocumentInformation }

procedure TXMLDocumentInformation.AfterConstruction;
begin
  RegisterChildNode('NumberOfDocuments', TXMLNumberOfDocuments);
  RegisterChildNode('DocumentInstruction', TXMLDocumentInstruction);
  FNumberOfDocuments := CreateCollection(TXMLNumberOfDocumentsList, IXMLNumberOfDocuments, 'NumberOfDocuments') as IXMLNumberOfDocumentsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDocumentInformation.Get_DocumentType: UnicodeString;
begin
  Result := AttributeNodes['DocumentType'].Text;
end;

procedure TXMLDocumentInformation.Set_DocumentType(Value: UnicodeString);
begin
  SetAttribute('DocumentType', Value);
end;

function TXMLDocumentInformation.Get_NumberOfDocuments: IXMLNumberOfDocumentsList;
begin
  Result := FNumberOfDocuments;
end;

function TXMLDocumentInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLDocumentInformation.Get_DocumentInstruction: IXMLDocumentInstruction;
begin
  Result := ChildNodes['DocumentInstruction'] as IXMLDocumentInstruction;
end;

{ TXMLDocumentInformationList }

function TXMLDocumentInformationList.Add: IXMLDocumentInformation;
begin
  Result := AddItem(-1) as IXMLDocumentInformation;
end;

function TXMLDocumentInformationList.Insert(const Index: Integer): IXMLDocumentInformation;
begin
  Result := AddItem(Index) as IXMLDocumentInformation;
end;

function TXMLDocumentInformationList.Get_Item(Index: Integer): IXMLDocumentInformation;
begin
  Result := List[Index] as IXMLDocumentInformation;
end;

{ TXMLNumberOfDocuments }

function TXMLNumberOfDocuments.Get_Original: UnicodeString;
begin
  Result := AttributeNodes['Original'].Text;
end;

procedure TXMLNumberOfDocuments.Set_Original(Value: UnicodeString);
begin
  SetAttribute('Original', Value);
end;

{ TXMLNumberOfDocumentsList }

function TXMLNumberOfDocumentsList.Add: IXMLNumberOfDocuments;
begin
  Result := AddItem(-1) as IXMLNumberOfDocuments;
end;

function TXMLNumberOfDocumentsList.Insert(const Index: Integer): IXMLNumberOfDocuments;
begin
  Result := AddItem(Index) as IXMLNumberOfDocuments;
end;

function TXMLNumberOfDocumentsList.Get_Item(Index: Integer): IXMLNumberOfDocuments;
begin
  Result := List[Index] as IXMLNumberOfDocuments;
end;

{ TXMLDocumentInstruction }

procedure TXMLDocumentInstruction.AfterConstruction;
begin
  RegisterChildNode('DocumentContent', TXMLDocumentContent);
  FDocumentInstructionText := CreateCollection(TXMLS255List, IXMLNode, 'DocumentInstructionText') as IXMLS255List;
  FDocumentContent := CreateCollection(TXMLDocumentContentList, IXMLDocumentContent, 'DocumentContent') as IXMLDocumentContentList;
  inherited;
end;

function TXMLDocumentInstruction.Get_DocumentInstructionText: IXMLS255List;
begin
  Result := FDocumentInstructionText;
end;

function TXMLDocumentInstruction.Get_DocumentContent: IXMLDocumentContentList;
begin
  Result := FDocumentContent;
end;

{ TXMLDocumentContent }

procedure TXMLDocumentContent.AfterConstruction;
begin
  ItemTag := 'DocumentContentText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLDocumentContent.Get_DocumentContentType: UnicodeString;
begin
  Result := AttributeNodes['DocumentContentType'].Text;
end;

procedure TXMLDocumentContent.Set_DocumentContentType(Value: UnicodeString);
begin
  SetAttribute('DocumentContentType', Value);
end;

function TXMLDocumentContent.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDocumentContent.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

function TXMLDocumentContent.Get_DocumentContentText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLDocumentContent.Add(const DocumentContentText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := DocumentContentText;
end;

function TXMLDocumentContent.Insert(const Index: Integer; const DocumentContentText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := DocumentContentText;
end;

{ TXMLDocumentContentList }

function TXMLDocumentContentList.Add: IXMLDocumentContent;
begin
  Result := AddItem(-1) as IXMLDocumentContent;
end;

function TXMLDocumentContentList.Insert(const Index: Integer): IXMLDocumentContent;
begin
  Result := AddItem(Index) as IXMLDocumentContent;
end;

function TXMLDocumentContentList.Get_Item(Index: Integer): IXMLDocumentContent;
begin
  Result := List[Index] as IXMLDocumentContent;
end;

{ TXMLForestWood }

procedure TXMLForestWood.AfterConstruction;
begin
  RegisterChildNode('TreeSpeciesGroup', TXMLTreeSpeciesGroup);
  RegisterChildNode('ForestWoodClass', TXMLForestWoodClass);
  RegisterChildNode('ForestWoodCharacteristics', TXMLForestWoodCharacteristics);
  RegisterChildNode('ForestWoodPackagingCharacteristics', TXMLForestWoodPackagingCharacteristics);
  RegisterChildNode('ForestWoodProcessingCharacteristics', TXMLForestWoodProcessingCharacteristics);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FTreeSpeciesGroup := CreateCollection(TXMLTreeSpeciesGroupList, IXMLTreeSpeciesGroup, 'TreeSpeciesGroup') as IXMLTreeSpeciesGroupList;
  FForestWoodClass := CreateCollection(TXMLForestWoodClassList, IXMLForestWoodClass, 'ForestWoodClass') as IXMLForestWoodClassList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLForestWood.Get_ForestWoodType: UnicodeString;
begin
  Result := AttributeNodes['ForestWoodType'].Text;
end;

procedure TXMLForestWood.Set_ForestWoodType(Value: UnicodeString);
begin
  SetAttribute('ForestWoodType', Value);
end;

function TXMLForestWood.Get_ForestWoodItemType: UnicodeString;
begin
  Result := AttributeNodes['ForestWoodItemType'].Text;
end;

procedure TXMLForestWood.Set_ForestWoodItemType(Value: UnicodeString);
begin
  SetAttribute('ForestWoodItemType', Value);
end;

function TXMLForestWood.Get_IsForestWoodReject: UnicodeString;
begin
  Result := AttributeNodes['IsForestWoodReject'].Text;
end;

procedure TXMLForestWood.Set_IsForestWoodReject(Value: UnicodeString);
begin
  SetAttribute('IsForestWoodReject', Value);
end;

function TXMLForestWood.Get_TreeSpeciesGroup: IXMLTreeSpeciesGroupList;
begin
  Result := FTreeSpeciesGroup;
end;

function TXMLForestWood.Get_ForestWoodClass: IXMLForestWoodClassList;
begin
  Result := FForestWoodClass;
end;

function TXMLForestWood.Get_ForestWoodCharacteristics: IXMLForestWoodCharacteristics;
begin
  Result := ChildNodes['ForestWoodCharacteristics'] as IXMLForestWoodCharacteristics;
end;

function TXMLForestWood.Get_ForestWoodPackagingCharacteristics: IXMLForestWoodPackagingCharacteristics;
begin
  Result := ChildNodes['ForestWoodPackagingCharacteristics'] as IXMLForestWoodPackagingCharacteristics;
end;

function TXMLForestWood.Get_ForestWoodProcessingCharacteristics: IXMLForestWoodProcessingCharacteristics;
begin
  Result := ChildNodes['ForestWoodProcessingCharacteristics'] as IXMLForestWoodProcessingCharacteristics;
end;

function TXMLForestWood.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLTreeSpeciesGroup }

procedure TXMLTreeSpeciesGroup.AfterConstruction;
begin
  RegisterChildNode('TreeSpeciesGroupCode', TXMLTreeSpeciesGroupCode);
  FTreeSpeciesGroupDescription := CreateCollection(TXMLS255List, IXMLNode, 'TreeSpeciesGroupDescription') as IXMLS255List;
  inherited;
end;

function TXMLTreeSpeciesGroup.Get_TreeSpeciesGroupCode: IXMLTreeSpeciesGroupCode;
begin
  Result := ChildNodes['TreeSpeciesGroupCode'] as IXMLTreeSpeciesGroupCode;
end;

function TXMLTreeSpeciesGroup.Get_TreeSpeciesGroupDescription: IXMLS255List;
begin
  Result := FTreeSpeciesGroupDescription;
end;

{ TXMLTreeSpeciesGroupList }

function TXMLTreeSpeciesGroupList.Add: IXMLTreeSpeciesGroup;
begin
  Result := AddItem(-1) as IXMLTreeSpeciesGroup;
end;

function TXMLTreeSpeciesGroupList.Insert(const Index: Integer): IXMLTreeSpeciesGroup;
begin
  Result := AddItem(Index) as IXMLTreeSpeciesGroup;
end;

function TXMLTreeSpeciesGroupList.Get_Item(Index: Integer): IXMLTreeSpeciesGroup;
begin
  Result := List[Index] as IXMLTreeSpeciesGroup;
end;

{ TXMLTreeSpeciesGroupCode }

function TXMLTreeSpeciesGroupCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTreeSpeciesGroupCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLForestWoodClass }

procedure TXMLForestWoodClass.AfterConstruction;
begin
  RegisterChildNode('ForestWoodClassCode', TXMLForestWoodClassCode);
  FForestWoodClassDescription := CreateCollection(TXMLS255List, IXMLNode, 'ForestWoodClassDescription') as IXMLS255List;
  inherited;
end;

function TXMLForestWoodClass.Get_ForestWoodClassType: UnicodeString;
begin
  Result := AttributeNodes['ForestWoodClassType'].Text;
end;

procedure TXMLForestWoodClass.Set_ForestWoodClassType(Value: UnicodeString);
begin
  SetAttribute('ForestWoodClassType', Value);
end;

function TXMLForestWoodClass.Get_ForestWoodClassCode: IXMLForestWoodClassCode;
begin
  Result := ChildNodes['ForestWoodClassCode'] as IXMLForestWoodClassCode;
end;

function TXMLForestWoodClass.Get_ForestWoodClassDescription: IXMLS255List;
begin
  Result := FForestWoodClassDescription;
end;

{ TXMLForestWoodClassList }

function TXMLForestWoodClassList.Add: IXMLForestWoodClass;
begin
  Result := AddItem(-1) as IXMLForestWoodClass;
end;

function TXMLForestWoodClassList.Insert(const Index: Integer): IXMLForestWoodClass;
begin
  Result := AddItem(Index) as IXMLForestWoodClass;
end;

function TXMLForestWoodClassList.Get_Item(Index: Integer): IXMLForestWoodClass;
begin
  Result := List[Index] as IXMLForestWoodClass;
end;

{ TXMLForestWoodClassCode }

function TXMLForestWoodClassCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLForestWoodClassCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLForestWoodCharacteristics }

procedure TXMLForestWoodCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PropertyValue', TXMLPropertyValue);
  RegisterChildNode('ProductAdaptedFor', TXMLProductAdaptedFor);
  FPropertyValue := CreateCollection(TXMLPropertyValueList, IXMLPropertyValue, 'PropertyValue') as IXMLPropertyValueList;
  inherited;
end;

function TXMLForestWoodCharacteristics.Get_PropertyValue: IXMLPropertyValueList;
begin
  Result := FPropertyValue;
end;

function TXMLForestWoodCharacteristics.Get_ProductAdaptedFor: IXMLProductAdaptedFor;
begin
  Result := ChildNodes['ProductAdaptedFor'] as IXMLProductAdaptedFor;
end;

{ TXMLProductAdaptedFor }

procedure TXMLProductAdaptedFor.AfterConstruction;
begin
  RegisterChildNode('OtherParty', TXMLTypedParty);
  inherited;
end;

function TXMLProductAdaptedFor.Get_OtherParty: IXMLTypedParty;
begin
  Result := ChildNodes['OtherParty'] as IXMLTypedParty;
end;

{ TXMLForestWoodPackagingCharacteristics }

procedure TXMLForestWoodPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingCodeSpecification', TXMLPackagingCodeSpecification);
  ItemTag := 'PackagingCodeSpecification';
  ItemInterface := IXMLPackagingCodeSpecification;
  inherited;
end;

function TXMLForestWoodPackagingCharacteristics.Get_PackagingCodeSpecification(Index: Integer): IXMLPackagingCodeSpecification;
begin
  Result := List[Index] as IXMLPackagingCodeSpecification;
end;

function TXMLForestWoodPackagingCharacteristics.Add: IXMLPackagingCodeSpecification;
begin
  Result := AddItem(-1) as IXMLPackagingCodeSpecification;
end;

function TXMLForestWoodPackagingCharacteristics.Insert(const Index: Integer): IXMLPackagingCodeSpecification;
begin
  Result := AddItem(Index) as IXMLPackagingCodeSpecification;
end;

{ TXMLPackagingCodeSpecification }

procedure TXMLPackagingCodeSpecification.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  FPackagingDescription := CreateCollection(TXMLPackagingDescriptionList, IXMLPackagingDescription, 'PackagingDescription') as IXMLPackagingDescriptionList;
  inherited;
end;

function TXMLPackagingCodeSpecification.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLPackagingCodeSpecification.Get_PackagingDescription: IXMLPackagingDescriptionList;
begin
  Result := FPackagingDescription;
end;

{ TXMLForestWoodProcessingCharacteristics }

procedure TXMLForestWoodProcessingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ProcessingCodeSpecification', TXMLProcessingCodeSpecification);
  ItemTag := 'ProcessingCodeSpecification';
  ItemInterface := IXMLProcessingCodeSpecification;
  inherited;
end;

function TXMLForestWoodProcessingCharacteristics.Get_ProcessingCodeSpecification(Index: Integer): IXMLProcessingCodeSpecification;
begin
  Result := List[Index] as IXMLProcessingCodeSpecification;
end;

function TXMLForestWoodProcessingCharacteristics.Add: IXMLProcessingCodeSpecification;
begin
  Result := AddItem(-1) as IXMLProcessingCodeSpecification;
end;

function TXMLForestWoodProcessingCharacteristics.Insert(const Index: Integer): IXMLProcessingCodeSpecification;
begin
  Result := AddItem(Index) as IXMLProcessingCodeSpecification;
end;

{ TXMLProcessingCodeSpecification }

procedure TXMLProcessingCodeSpecification.AfterConstruction;
begin
  RegisterChildNode('ProcessingCode', TXMLProcessingCode);
  FProcessingDescription := CreateCollection(TXMLS255List, IXMLNode, 'ProcessingDescription') as IXMLS255List;
  inherited;
end;

function TXMLProcessingCodeSpecification.Get_ProcessingCode: IXMLProcessingCode;
begin
  Result := ChildNodes['ProcessingCode'] as IXMLProcessingCode;
end;

function TXMLProcessingCodeSpecification.Get_ProcessingDescription: IXMLS255List;
begin
  Result := FProcessingDescription;
end;

{ TXMLProcessingCode }

function TXMLProcessingCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLProcessingCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLSafetyAndEnvironmentalInformationClass }

procedure TXMLSafetyAndEnvironmentalInformationClass.AfterConstruction;
begin
  RegisterChildNode('ChainOfCustody', TXMLChainOfCustody);
  RegisterChildNode('SafetyAndEnvironmentalCertification', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_SafetyAndEnvironmentalType: UnicodeString;
begin
  Result := AttributeNodes['SafetyAndEnvironmentalType'].Text;
end;

procedure TXMLSafetyAndEnvironmentalInformationClass.Set_SafetyAndEnvironmentalType(Value: UnicodeString);
begin
  SetAttribute('SafetyAndEnvironmentalType', Value);
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLSafetyAndEnvironmentalInformationClass.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_LicenceNumber: UnicodeString;
begin
  Result := ChildNodes['LicenceNumber'].Text;
end;

procedure TXMLSafetyAndEnvironmentalInformationClass.Set_LicenceNumber(Value: UnicodeString);
begin
  ChildNodes['LicenceNumber'].NodeValue := Value;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_ChainOfCustody: IXMLChainOfCustody;
begin
  Result := ChildNodes['ChainOfCustody'] as IXMLChainOfCustody;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_SafetyAndEnvironmentalCertification: IXMLMeasurement;
begin
  Result := ChildNodes['SafetyAndEnvironmentalCertification'] as IXMLMeasurement;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSafetyAndEnvironmentalInformationClassList }

function TXMLSafetyAndEnvironmentalInformationClassList.Add: IXMLSafetyAndEnvironmentalInformationClass;
begin
  Result := AddItem(-1) as IXMLSafetyAndEnvironmentalInformationClass;
end;

function TXMLSafetyAndEnvironmentalInformationClassList.Insert(const Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
begin
  Result := AddItem(Index) as IXMLSafetyAndEnvironmentalInformationClass;
end;

function TXMLSafetyAndEnvironmentalInformationClassList.Get_Item(Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
begin
  Result := List[Index] as IXMLSafetyAndEnvironmentalInformationClass;
end;

{ TXMLChainOfCustody }

function TXMLChainOfCustody.Get_CertificationBody: UnicodeString;
begin
  Result := AttributeNodes['CertificationBody'].Text;
end;

procedure TXMLChainOfCustody.Set_CertificationBody(Value: UnicodeString);
begin
  SetAttribute('CertificationBody', Value);
end;

{ TXMLLabelStock }

procedure TXMLLabelStock.AfterConstruction;
begin
  RegisterChildNode('LabelStockCharacteristics', TXMLLabelStockCharacteristics);
  RegisterChildNode('SingleWidthReel', TXMLSingleWidthReel);
  RegisterChildNode('TrimmedReel', TXMLTrimmedReel);
  RegisterChildNode('Sheet', TXMLSheet);
  inherited;
end;

function TXMLLabelStock.Get_LabelStockCharacteristics: IXMLLabelStockCharacteristics;
begin
  Result := ChildNodes['LabelStockCharacteristics'] as IXMLLabelStockCharacteristics;
end;

function TXMLLabelStock.Get_SingleWidthReel: IXMLSingleWidthReel;
begin
  Result := ChildNodes['SingleWidthReel'] as IXMLSingleWidthReel;
end;

function TXMLLabelStock.Get_TrimmedReel: IXMLTrimmedReel;
begin
  Result := ChildNodes['TrimmedReel'] as IXMLTrimmedReel;
end;

function TXMLLabelStock.Get_Sheet: IXMLSheet;
begin
  Result := ChildNodes['Sheet'] as IXMLSheet;
end;

{ TXMLLabelStockCharacteristics }

procedure TXMLLabelStockCharacteristics.AfterConstruction;
begin
  RegisterChildNode('LabelStockLayer', TXMLLabelStockLayer);
  RegisterChildNode('ExtraFeature', TXMLExtraFeature);
  FLabelStockLayer := CreateCollection(TXMLLabelStockLayerList, IXMLLabelStockLayer, 'LabelStockLayer') as IXMLLabelStockLayerList;
  FExtraFeature := CreateCollection(TXMLExtraFeatureList, IXMLExtraFeature, 'ExtraFeature') as IXMLExtraFeatureList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLLabelStockCharacteristics.Get_LabelStockLayer: IXMLLabelStockLayerList;
begin
  Result := FLabelStockLayer;
end;

function TXMLLabelStockCharacteristics.Get_ExtraFeature: IXMLExtraFeatureList;
begin
  Result := FExtraFeature;
end;

function TXMLLabelStockCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLLabelStockLayer }

procedure TXMLLabelStockLayer.AfterConstruction;
begin
  RegisterChildNode('LayerMaterial', TXMLLayerMaterial);
  inherited;
end;

function TXMLLabelStockLayer.Get_LabelStockLayerType: UnicodeString;
begin
  Result := ChildNodes['LabelStockLayerType'].Text;
end;

procedure TXMLLabelStockLayer.Set_LabelStockLayerType(Value: UnicodeString);
begin
  ChildNodes['LabelStockLayerType'].NodeValue := Value;
end;

function TXMLLabelStockLayer.Get_LabelStockLayerNumber: LongWord;
begin
  Result := ChildNodes['LabelStockLayerNumber'].NodeValue;
end;

procedure TXMLLabelStockLayer.Set_LabelStockLayerNumber(Value: LongWord);
begin
  ChildNodes['LabelStockLayerNumber'].NodeValue := Value;
end;

function TXMLLabelStockLayer.Get_LayerMaterial: IXMLLayerMaterial;
begin
  Result := ChildNodes['LayerMaterial'] as IXMLLayerMaterial;
end;

{ TXMLLabelStockLayerList }

function TXMLLabelStockLayerList.Add: IXMLLabelStockLayer;
begin
  Result := AddItem(-1) as IXMLLabelStockLayer;
end;

function TXMLLabelStockLayerList.Insert(const Index: Integer): IXMLLabelStockLayer;
begin
  Result := AddItem(Index) as IXMLLabelStockLayer;
end;

function TXMLLabelStockLayerList.Get_Item(Index: Integer): IXMLLabelStockLayer;
begin
  Result := List[Index] as IXMLLabelStockLayer;
end;

{ TXMLLayerMaterial }

procedure TXMLLayerMaterial.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  inherited;
end;

function TXMLLayerMaterial.Get_ProductIdentifier: IXMLProductIdentifier;
begin
  Result := ChildNodes['ProductIdentifier'] as IXMLProductIdentifier;
end;

function TXMLLayerMaterial.Get_LayerMaterialName: UnicodeString;
begin
  Result := ChildNodes['LayerMaterialName'].Text;
end;

procedure TXMLLayerMaterial.Set_LayerMaterialName(Value: UnicodeString);
begin
  ChildNodes['LayerMaterialName'].NodeValue := Value;
end;

{ TXMLExtraFeature }

procedure TXMLExtraFeature.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  inherited;
end;

function TXMLExtraFeature.Get_ProductIdentifier: IXMLProductIdentifier;
begin
  Result := ChildNodes['ProductIdentifier'] as IXMLProductIdentifier;
end;

function TXMLExtraFeature.Get_ExtraFeatureDescription: UnicodeString;
begin
  Result := ChildNodes['ExtraFeatureDescription'].Text;
end;

procedure TXMLExtraFeature.Set_ExtraFeatureDescription(Value: UnicodeString);
begin
  ChildNodes['ExtraFeatureDescription'].NodeValue := Value;
end;

{ TXMLExtraFeatureList }

function TXMLExtraFeatureList.Add: IXMLExtraFeature;
begin
  Result := AddItem(-1) as IXMLExtraFeature;
end;

function TXMLExtraFeatureList.Insert(const Index: Integer): IXMLExtraFeature;
begin
  Result := AddItem(Index) as IXMLExtraFeature;
end;

function TXMLExtraFeatureList.Get_Item(Index: Integer): IXMLExtraFeature;
begin
  Result := List[Index] as IXMLExtraFeature;
end;

{ TXMLSingleWidthReel }

procedure TXMLSingleWidthReel.AfterConstruction;
begin
  RegisterChildNode('SingleWidthReelConversionCharacteristics', TXMLSingleWidthReelConversionCharacteristics);
  RegisterChildNode('ReelPackagingCharacteristics', TXMLReelPackagingCharacteristicsClass);
  inherited;
end;

function TXMLSingleWidthReel.Get_SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics;
begin
  Result := ChildNodes['SingleWidthReelConversionCharacteristics'] as IXMLSingleWidthReelConversionCharacteristics;
end;

function TXMLSingleWidthReel.Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
begin
  Result := ChildNodes['ReelPackagingCharacteristics'] as IXMLReelPackagingCharacteristicsClass;
end;

{ TXMLSingleWidthReelConversionCharacteristics }

procedure TXMLSingleWidthReelConversionCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('CoreCharacteristics', TXMLCoreCharacteristics);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_WindingDirection: UnicodeString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLSingleWidthReelConversionCharacteristics.Set_WindingDirection(Value: UnicodeString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_TrimmedOrderType: UnicodeString;
begin
  Result := ChildNodes['TrimmedOrderType'].Text;
end;

procedure TXMLSingleWidthReelConversionCharacteristics.Set_TrimmedOrderType(Value: UnicodeString);
begin
  ChildNodes['TrimmedOrderType'].NodeValue := Value;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_ReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['ReelWidth'] as IXMLMeasurement;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_ReelDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['ReelDiameter'] as IXMLMeasurement;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_ReelLength: IXMLMeasurement;
begin
  Result := ChildNodes['ReelLength'] as IXMLMeasurement;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_CoreCharacteristics: IXMLCoreCharacteristics;
begin
  Result := ChildNodes['CoreCharacteristics'] as IXMLCoreCharacteristics;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_MaximumNumberOfJoins: LongWord;
begin
  Result := ChildNodes['MaximumNumberOfJoins'].NodeValue;
end;

procedure TXMLSingleWidthReelConversionCharacteristics.Set_MaximumNumberOfJoins(Value: LongWord);
begin
  ChildNodes['MaximumNumberOfJoins'].NodeValue := Value;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLTrimmedReel }

procedure TXMLTrimmedReel.AfterConstruction;
begin
  RegisterChildNode('TrimmedReelConversionCharacteristics', TXMLTrimmedReelConversionCharacteristics);
  RegisterChildNode('ReelPackagingCharacteristics', TXMLReelPackagingCharacteristicsClass);
  inherited;
end;

function TXMLTrimmedReel.Get_TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics;
begin
  Result := ChildNodes['TrimmedReelConversionCharacteristics'] as IXMLTrimmedReelConversionCharacteristics;
end;

function TXMLTrimmedReel.Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
begin
  Result := ChildNodes['ReelPackagingCharacteristics'] as IXMLReelPackagingCharacteristicsClass;
end;

{ TXMLTrimmedReelConversionCharacteristics }

procedure TXMLTrimmedReelConversionCharacteristics.AfterConstruction;
begin
  RegisterChildNode('MasterReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('MaximumOffcut', TXMLMeasurement);
  RegisterChildNode('CoreCharacteristics', TXMLCoreCharacteristics);
  RegisterChildNode('SlitReel', TXMLSlitReel);
  FSlitReel := CreateCollection(TXMLSlitReelList, IXMLSlitReel, 'SlitReel') as IXMLSlitReelList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_WindingDirection: UnicodeString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLTrimmedReelConversionCharacteristics.Set_WindingDirection(Value: UnicodeString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_TrimmedOrderType: UnicodeString;
begin
  Result := ChildNodes['TrimmedOrderType'].Text;
end;

procedure TXMLTrimmedReelConversionCharacteristics.Set_TrimmedOrderType(Value: UnicodeString);
begin
  ChildNodes['TrimmedOrderType'].NodeValue := Value;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_MasterReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['MasterReelWidth'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_ReelDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['ReelDiameter'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_ReelLength: IXMLMeasurement;
begin
  Result := ChildNodes['ReelLength'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_MaximumOffcut: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumOffcut'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_CoreCharacteristics: IXMLCoreCharacteristics;
begin
  Result := ChildNodes['CoreCharacteristics'] as IXMLCoreCharacteristics;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_MaximumNumberOfJoins: LongWord;
begin
  Result := ChildNodes['MaximumNumberOfJoins'].NodeValue;
end;

procedure TXMLTrimmedReelConversionCharacteristics.Set_MaximumNumberOfJoins(Value: LongWord);
begin
  ChildNodes['MaximumNumberOfJoins'].NodeValue := Value;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_SlitReel: IXMLSlitReelList;
begin
  Result := FSlitReel;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSlitReel }

procedure TXMLSlitReel.AfterConstruction;
begin
  RegisterChildNode('SlitReelWidth', TXMLMeasurement);
  RegisterChildNode('SlitReelOrderQuantity', TXMLSlitReelOrderQuantity);
  RegisterChildNode('SlitReelReference', TXMLSlitReelReference);
  FSlitReelReference := CreateCollection(TXMLSlitReelReferenceList, IXMLSlitReelReference, 'SlitReelReference') as IXMLSlitReelReferenceList;
  inherited;
end;

function TXMLSlitReel.Get_DeliveryIndicator: UnicodeString;
begin
  Result := ChildNodes['DeliveryIndicator'].Text;
end;

procedure TXMLSlitReel.Set_DeliveryIndicator(Value: UnicodeString);
begin
  ChildNodes['DeliveryIndicator'].NodeValue := Value;
end;

function TXMLSlitReel.Get_SlitReelLineNumber: LongWord;
begin
  Result := ChildNodes['SlitReelLineNumber'].NodeValue;
end;

procedure TXMLSlitReel.Set_SlitReelLineNumber(Value: LongWord);
begin
  ChildNodes['SlitReelLineNumber'].NodeValue := Value;
end;

function TXMLSlitReel.Get_SlitReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['SlitReelWidth'] as IXMLMeasurement;
end;

function TXMLSlitReel.Get_SlitReelOrderQuantity: IXMLSlitReelOrderQuantity;
begin
  Result := ChildNodes['SlitReelOrderQuantity'] as IXMLSlitReelOrderQuantity;
end;

function TXMLSlitReel.Get_SlitReelsInSet: LongWord;
begin
  Result := ChildNodes['SlitReelsInSet'].NodeValue;
end;

procedure TXMLSlitReel.Set_SlitReelsInSet(Value: LongWord);
begin
  ChildNodes['SlitReelsInSet'].NodeValue := Value;
end;

function TXMLSlitReel.Get_SlitReelReference: IXMLSlitReelReferenceList;
begin
  Result := FSlitReelReference;
end;

{ TXMLSlitReelList }

function TXMLSlitReelList.Add: IXMLSlitReel;
begin
  Result := AddItem(-1) as IXMLSlitReel;
end;

function TXMLSlitReelList.Insert(const Index: Integer): IXMLSlitReel;
begin
  Result := AddItem(Index) as IXMLSlitReel;
end;

function TXMLSlitReelList.Get_Item(Index: Integer): IXMLSlitReel;
begin
  Result := List[Index] as IXMLSlitReel;
end;

{ TXMLSlitReelOrderQuantity }

function TXMLSlitReelOrderQuantity.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLSlitReelOrderQuantity.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLSlitReelOrderQuantity.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLSlitReelOrderQuantity.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLSlitReelOrderQuantity.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLSlitReelOrderQuantity.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLSlitReelReference }

function TXMLSlitReelReference.Get_SlitReelReferenceType: UnicodeString;
begin
  Result := AttributeNodes['SlitReelReferenceType'].Text;
end;

procedure TXMLSlitReelReference.Set_SlitReelReferenceType(Value: UnicodeString);
begin
  SetAttribute('SlitReelReferenceType', Value);
end;

function TXMLSlitReelReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLSlitReelReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLSlitReelReferenceList }

function TXMLSlitReelReferenceList.Add: IXMLSlitReelReference;
begin
  Result := AddItem(-1) as IXMLSlitReelReference;
end;

function TXMLSlitReelReferenceList.Insert(const Index: Integer): IXMLSlitReelReference;
begin
  Result := AddItem(Index) as IXMLSlitReelReference;
end;

function TXMLSlitReelReferenceList.Get_Item(Index: Integer): IXMLSlitReelReference;
begin
  Result := List[Index] as IXMLSlitReelReference;
end;

{ TXMLPulpClass }

procedure TXMLPulpClass.AfterConstruction;
begin
  RegisterChildNode('PulpCharacteristics', TXMLPulpCharacteristics);
  RegisterChildNode('Bale', TXMLBale);
  RegisterChildNode('Reel', TXMLReel);
  RegisterChildNode('Slurry', TXMLSlurry);
  RegisterChildNode('NonStandardPulp', TXMLNonStandardPulp);
  inherited;
end;

function TXMLPulpClass.Get_PulpCharacteristics: IXMLPulpCharacteristics;
begin
  Result := ChildNodes['PulpCharacteristics'] as IXMLPulpCharacteristics;
end;

function TXMLPulpClass.Get_Bale: IXMLBale;
begin
  Result := ChildNodes['Bale'] as IXMLBale;
end;

function TXMLPulpClass.Get_Reel: IXMLReel;
begin
  Result := ChildNodes['Reel'] as IXMLReel;
end;

function TXMLPulpClass.Get_Slurry: IXMLSlurry;
begin
  Result := ChildNodes['Slurry'] as IXMLSlurry;
end;

function TXMLPulpClass.Get_NonStandardPulp: IXMLNonStandardPulp;
begin
  Result := ChildNodes['NonStandardPulp'] as IXMLNonStandardPulp;
end;

{ TXMLPulpCharacteristics }

procedure TXMLPulpCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Ash', TXMLAsh);
  RegisterChildNode('BasisWeight', TXMLBasisWeight);
  RegisterChildNode('Brightness', TXMLBrightness);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('ColourDetail', TXMLColourDetail);
  RegisterChildNode('Density', TXMLDensity);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('DrainageResistance', TXMLDrainageResistance);
  RegisterChildNode('FibreLength', TXMLFibreLength);
  RegisterChildNode('FibreClassification', TXMLFibreClassification);
  RegisterChildNode('Freeness', TXMLFreeness);
  RegisterChildNode('LightScattering', TXMLLightScattering);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Opacity', TXMLOpacity);
  RegisterChildNode('pH', TXMLPH);
  RegisterChildNode('PostConsumerWaste', TXMLPostConsumerWaste);
  RegisterChildNode('PreConsumerWaste', TXMLPreConsumerWaste);
  RegisterChildNode('Recycled', TXMLRecycled);
  RegisterChildNode('Tear', TXMLTear);
  RegisterChildNode('TearIndex', TXMLTearIndex);
  RegisterChildNode('Tensile', TXMLTensile);
  RegisterChildNode('TensileIndex', TXMLTensileIndex);
  RegisterChildNode('Viscosity', TXMLViscosity);
  RegisterChildNode('Whiteness', TXMLWhiteness);
  RegisterChildNode('AdditionalTest', TXMLAdditionalTest);
  FAsh := CreateCollection(TXMLAshList, IXMLAsh, 'Ash') as IXMLAshList;
  FBasisWeight := CreateCollection(TXMLBasisWeightList, IXMLBasisWeight, 'BasisWeight') as IXMLBasisWeightList;
  FBrightness := CreateCollection(TXMLBrightnessList, IXMLBrightness, 'Brightness') as IXMLBrightnessList;
  FBurst := CreateCollection(TXMLBurstList, IXMLBurst, 'Burst') as IXMLBurstList;
  FBurstIndex := CreateCollection(TXMLBurstIndexList, IXMLBurstIndex, 'BurstIndex') as IXMLBurstIndexList;
  FColourDetail := CreateCollection(TXMLColourDetailList, IXMLColourDetail, 'ColourDetail') as IXMLColourDetailList;
  FDensity := CreateCollection(TXMLDensityList, IXMLDensity, 'Density') as IXMLDensityList;
  FDirt := CreateCollection(TXMLDirtList, IXMLDirt, 'Dirt') as IXMLDirtList;
  FDrainageResistance := CreateCollection(TXMLDrainageResistanceList, IXMLDrainageResistance, 'DrainageResistance') as IXMLDrainageResistanceList;
  FFibreLength := CreateCollection(TXMLFibreLengthList, IXMLFibreLength, 'FibreLength') as IXMLFibreLengthList;
  FFibreClassification := CreateCollection(TXMLFibreClassificationList, IXMLFibreClassification, 'FibreClassification') as IXMLFibreClassificationList;
  FFreeness := CreateCollection(TXMLFreenessList, IXMLFreeness, 'Freeness') as IXMLFreenessList;
  FLightScattering := CreateCollection(TXMLLightScatteringList, IXMLLightScattering, 'LightScattering') as IXMLLightScatteringList;
  FMoisture := CreateCollection(TXMLMoistureList, IXMLMoisture, 'Moisture') as IXMLMoistureList;
  FOpacity := CreateCollection(TXMLOpacityList, IXMLOpacity, 'Opacity') as IXMLOpacityList;
  FPH := CreateCollection(TXMLPHList, IXMLPH, 'pH') as IXMLPHList;
  FPostConsumerWaste := CreateCollection(TXMLPostConsumerWasteList, IXMLPostConsumerWaste, 'PostConsumerWaste') as IXMLPostConsumerWasteList;
  FPreConsumerWaste := CreateCollection(TXMLPreConsumerWasteList, IXMLPreConsumerWaste, 'PreConsumerWaste') as IXMLPreConsumerWasteList;
  FRecycled := CreateCollection(TXMLRecycledList, IXMLRecycled, 'Recycled') as IXMLRecycledList;
  FTear := CreateCollection(TXMLTearList, IXMLTear, 'Tear') as IXMLTearList;
  FTearIndex := CreateCollection(TXMLTearIndexList, IXMLTearIndex, 'TearIndex') as IXMLTearIndexList;
  FTensile := CreateCollection(TXMLTensileList, IXMLTensile, 'Tensile') as IXMLTensileList;
  FTensileIndex := CreateCollection(TXMLTensileIndexList, IXMLTensileIndex, 'TensileIndex') as IXMLTensileIndexList;
  FViscosity := CreateCollection(TXMLViscosityList, IXMLViscosity, 'Viscosity') as IXMLViscosityList;
  FWhiteness := CreateCollection(TXMLWhitenessList, IXMLWhiteness, 'Whiteness') as IXMLWhitenessList;
  inherited;
end;

function TXMLPulpCharacteristics.Get_PulpingProcess: UnicodeString;
begin
  Result := AttributeNodes['PulpingProcess'].Text;
end;

procedure TXMLPulpCharacteristics.Set_PulpingProcess(Value: UnicodeString);
begin
  SetAttribute('PulpingProcess', Value);
end;

function TXMLPulpCharacteristics.Get_BleachingProcess: UnicodeString;
begin
  Result := AttributeNodes['BleachingProcess'].Text;
end;

procedure TXMLPulpCharacteristics.Set_BleachingProcess(Value: UnicodeString);
begin
  SetAttribute('BleachingProcess', Value);
end;

function TXMLPulpCharacteristics.Get_FibreSource: UnicodeString;
begin
  Result := AttributeNodes['FibreSource'].Text;
end;

procedure TXMLPulpCharacteristics.Set_FibreSource(Value: UnicodeString);
begin
  SetAttribute('FibreSource', Value);
end;

function TXMLPulpCharacteristics.Get_Ash: IXMLAshList;
begin
  Result := FAsh;
end;

function TXMLPulpCharacteristics.Get_BasisWeight: IXMLBasisWeightList;
begin
  Result := FBasisWeight;
end;

function TXMLPulpCharacteristics.Get_Brightness: IXMLBrightnessList;
begin
  Result := FBrightness;
end;

function TXMLPulpCharacteristics.Get_Burst: IXMLBurstList;
begin
  Result := FBurst;
end;

function TXMLPulpCharacteristics.Get_BurstIndex: IXMLBurstIndexList;
begin
  Result := FBurstIndex;
end;

function TXMLPulpCharacteristics.Get_ColourDetail: IXMLColourDetailList;
begin
  Result := FColourDetail;
end;

function TXMLPulpCharacteristics.Get_Density: IXMLDensityList;
begin
  Result := FDensity;
end;

function TXMLPulpCharacteristics.Get_Dirt: IXMLDirtList;
begin
  Result := FDirt;
end;

function TXMLPulpCharacteristics.Get_DrainageResistance: IXMLDrainageResistanceList;
begin
  Result := FDrainageResistance;
end;

function TXMLPulpCharacteristics.Get_FibreLength: IXMLFibreLengthList;
begin
  Result := FFibreLength;
end;

function TXMLPulpCharacteristics.Get_FibreClassification: IXMLFibreClassificationList;
begin
  Result := FFibreClassification;
end;

function TXMLPulpCharacteristics.Get_Freeness: IXMLFreenessList;
begin
  Result := FFreeness;
end;

function TXMLPulpCharacteristics.Get_LightScattering: IXMLLightScatteringList;
begin
  Result := FLightScattering;
end;

function TXMLPulpCharacteristics.Get_Moisture: IXMLMoistureList;
begin
  Result := FMoisture;
end;

function TXMLPulpCharacteristics.Get_Opacity: IXMLOpacityList;
begin
  Result := FOpacity;
end;

function TXMLPulpCharacteristics.Get_PH: IXMLPHList;
begin
  Result := FPH;
end;

function TXMLPulpCharacteristics.Get_PostConsumerWaste: IXMLPostConsumerWasteList;
begin
  Result := FPostConsumerWaste;
end;

function TXMLPulpCharacteristics.Get_PreConsumerWaste: IXMLPreConsumerWasteList;
begin
  Result := FPreConsumerWaste;
end;

function TXMLPulpCharacteristics.Get_Recycled: IXMLRecycledList;
begin
  Result := FRecycled;
end;

function TXMLPulpCharacteristics.Get_Tear: IXMLTearList;
begin
  Result := FTear;
end;

function TXMLPulpCharacteristics.Get_TearIndex: IXMLTearIndexList;
begin
  Result := FTearIndex;
end;

function TXMLPulpCharacteristics.Get_Tensile: IXMLTensileList;
begin
  Result := FTensile;
end;

function TXMLPulpCharacteristics.Get_TensileIndex: IXMLTensileIndexList;
begin
  Result := FTensileIndex;
end;

function TXMLPulpCharacteristics.Get_Viscosity: IXMLViscosityList;
begin
  Result := FViscosity;
end;

function TXMLPulpCharacteristics.Get_Whiteness: IXMLWhitenessList;
begin
  Result := FWhiteness;
end;

function TXMLPulpCharacteristics.Get_AdditionalTest: IXMLAdditionalTest;
begin
  Result := ChildNodes['AdditionalTest'] as IXMLAdditionalTest;
end;

{ TXMLDrainageResistance }

function TXMLDrainageResistance.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDrainageResistance.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDrainageResistance.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDrainageResistance.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDrainageResistance.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDrainageResistance.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDrainageResistance.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDrainageResistance.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDrainageResistanceList }

function TXMLDrainageResistanceList.Add: IXMLDrainageResistance;
begin
  Result := AddItem(-1) as IXMLDrainageResistance;
end;

function TXMLDrainageResistanceList.Insert(const Index: Integer): IXMLDrainageResistance;
begin
  Result := AddItem(Index) as IXMLDrainageResistance;
end;

function TXMLDrainageResistanceList.Get_Item(Index: Integer): IXMLDrainageResistance;
begin
  Result := List[Index] as IXMLDrainageResistance;
end;

{ TXMLViscosity }

function TXMLViscosity.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLViscosity.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLViscosity.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLViscosity.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLViscosity.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLViscosity.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLViscosity.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLViscosity.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLViscosityList }

function TXMLViscosityList.Add: IXMLViscosity;
begin
  Result := AddItem(-1) as IXMLViscosity;
end;

function TXMLViscosityList.Insert(const Index: Integer): IXMLViscosity;
begin
  Result := AddItem(Index) as IXMLViscosity;
end;

function TXMLViscosityList.Get_Item(Index: Integer): IXMLViscosity;
begin
  Result := List[Index] as IXMLViscosity;
end;

{ TXMLBale }

procedure TXMLBale.AfterConstruction;
begin
  RegisterChildNode('BaleConversionCharacteristics', TXMLBaleConversionCharacteristics);
  RegisterChildNode('BalePackagingCharacteristics', TXMLBalePackagingCharacteristics);
  inherited;
end;

function TXMLBale.Get_BaleType: UnicodeString;
begin
  Result := AttributeNodes['BaleType'].Text;
end;

procedure TXMLBale.Set_BaleType(Value: UnicodeString);
begin
  SetAttribute('BaleType', Value);
end;

function TXMLBale.Get_BaleConversionCharacteristics: IXMLBaleConversionCharacteristics;
begin
  Result := ChildNodes['BaleConversionCharacteristics'] as IXMLBaleConversionCharacteristics;
end;

function TXMLBale.Get_BalePackagingCharacteristics: IXMLBalePackagingCharacteristics;
begin
  Result := ChildNodes['BalePackagingCharacteristics'] as IXMLBalePackagingCharacteristics;
end;

{ TXMLBaleConversionCharacteristics }

procedure TXMLBaleConversionCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ConversionCode', TXMLConversionCode);
  RegisterChildNode('BaleHeight', TXMLMeasurement);
  RegisterChildNode('BaleWidth', TXMLMeasurement);
  RegisterChildNode('BaleDepth', TXMLMeasurement);
  RegisterChildNode('BaleStandardWeight', TXMLMeasurement);
  inherited;
end;

function TXMLBaleConversionCharacteristics.Get_ConversionCode: IXMLConversionCode;
begin
  Result := ChildNodes['ConversionCode'] as IXMLConversionCode;
end;

function TXMLBaleConversionCharacteristics.Get_BaleHeight: IXMLMeasurement;
begin
  Result := ChildNodes['BaleHeight'] as IXMLMeasurement;
end;

function TXMLBaleConversionCharacteristics.Get_BaleWidth: IXMLMeasurement;
begin
  Result := ChildNodes['BaleWidth'] as IXMLMeasurement;
end;

function TXMLBaleConversionCharacteristics.Get_BaleDepth: IXMLMeasurement;
begin
  Result := ChildNodes['BaleDepth'] as IXMLMeasurement;
end;

function TXMLBaleConversionCharacteristics.Get_BaleStandardWeight: IXMLMeasurement;
begin
  Result := ChildNodes['BaleStandardWeight'] as IXMLMeasurement;
end;

{ TXMLBalePackagingCharacteristics }

procedure TXMLBalePackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('CustomerMarks', TXMLCustomerMarks);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('PulpUnitCharacteristics', TXMLPulpUnitCharacteristics);
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  inherited;
end;

function TXMLBalePackagingCharacteristics.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLBalePackagingCharacteristics.Get_CustomerMarks: IXMLCustomerMarks;
begin
  Result := ChildNodes['CustomerMarks'] as IXMLCustomerMarks;
end;

function TXMLBalePackagingCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLBalePackagingCharacteristics.Get_PulpUnitCharacteristics: IXMLPulpUnitCharacteristics;
begin
  Result := ChildNodes['PulpUnitCharacteristics'] as IXMLPulpUnitCharacteristics;
end;

{ TXMLPulpUnitCharacteristics }

procedure TXMLPulpUnitCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPulpUnitCharacteristics.Get_PackagingDescription: IXMLPackagingDescription;
begin
  Result := ChildNodes['PackagingDescription'] as IXMLPackagingDescription;
end;

function TXMLPulpUnitCharacteristics.Get_Wrap: IXMLWrap;
begin
  Result := ChildNodes['Wrap'] as IXMLWrap;
end;

function TXMLPulpUnitCharacteristics.Get_PalletCharacteristics: IXMLPalletCharacteristics;
begin
  Result := ChildNodes['PalletCharacteristics'] as IXMLPalletCharacteristics;
end;

function TXMLPulpUnitCharacteristics.Get_BalesPerUnit: LongWord;
begin
  Result := ChildNodes['BalesPerUnit'].NodeValue;
end;

procedure TXMLPulpUnitCharacteristics.Set_BalesPerUnit(Value: LongWord);
begin
  ChildNodes['BalesPerUnit'].NodeValue := Value;
end;

function TXMLPulpUnitCharacteristics.Get_LayersPerUnit: LongWord;
begin
  Result := ChildNodes['LayersPerUnit'].NodeValue;
end;

procedure TXMLPulpUnitCharacteristics.Set_LayersPerUnit(Value: LongWord);
begin
  ChildNodes['LayersPerUnit'].NodeValue := Value;
end;

function TXMLPulpUnitCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristics;
begin
  Result := ChildNodes['LabelCharacteristics'] as IXMLLabelCharacteristics;
end;

function TXMLPulpUnitCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLPulpUnitCharacteristics.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLPulpUnitCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSlurry }

procedure TXMLSlurry.AfterConstruction;
begin
  RegisterChildNode('TargetSolidsContent', TXMLMeasurement);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSlurry.Get_TargetSolidsContent: IXMLMeasurement;
begin
  Result := ChildNodes['TargetSolidsContent'] as IXMLMeasurement;
end;

function TXMLSlurry.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLNonStandardPulp }

procedure TXMLNonStandardPulp.AfterConstruction;
begin
  RegisterChildNode('TargetMoisture', TXMLMeasurement);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLNonStandardPulp.Get_TargetMoisture: IXMLMeasurement;
begin
  Result := ChildNodes['TargetMoisture'] as IXMLMeasurement;
end;

function TXMLNonStandardPulp.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLRecoveredPaper }

function TXMLRecoveredPaper.Get_RecoveredPaperAttributes: UnicodeString;
begin
  Result := ChildNodes['RecoveredPaperAttributes'].Text;
end;

procedure TXMLRecoveredPaper.Set_RecoveredPaperAttributes(Value: UnicodeString);
begin
  ChildNodes['RecoveredPaperAttributes'].NodeValue := Value;
end;

{ TXMLVirginFibre }

procedure TXMLVirginFibre.AfterConstruction;
begin
  RegisterChildNode('TimberCharacteristics', TXMLTimberCharacteristics);
  RegisterChildNode('Log', TXMLLog);
  RegisterChildNode('Chip', TXMLChip);
  inherited;
end;

function TXMLVirginFibre.Get_TimberCharacteristics: IXMLTimberCharacteristics;
begin
  Result := ChildNodes['TimberCharacteristics'] as IXMLTimberCharacteristics;
end;

function TXMLVirginFibre.Get_Log: IXMLLog;
begin
  Result := ChildNodes['Log'] as IXMLLog;
end;

function TXMLVirginFibre.Get_Chip: IXMLChip;
begin
  Result := ChildNodes['Chip'] as IXMLChip;
end;

{ TXMLTimberCharacteristics }

procedure TXMLTimberCharacteristics.AfterConstruction;
begin
  RegisterChildNode('LumberSpecies', TXMLLumberSpeciesClass);
  RegisterChildNode('Age', TXMLMeasurement);
  FLumberSpecies := CreateCollection(TXMLLumberSpeciesClassList, IXMLLumberSpeciesClass, 'LumberSpecies') as IXMLLumberSpeciesClassList;
  inherited;
end;

function TXMLTimberCharacteristics.Get_LumberSpecies: IXMLLumberSpeciesClassList;
begin
  Result := FLumberSpecies;
end;

function TXMLTimberCharacteristics.Get_Age: IXMLMeasurement;
begin
  Result := ChildNodes['Age'] as IXMLMeasurement;
end;

function TXMLTimberCharacteristics.Get_Grade: UnicodeString;
begin
  Result := ChildNodes['Grade'].Text;
end;

procedure TXMLTimberCharacteristics.Set_Grade(Value: UnicodeString);
begin
  ChildNodes['Grade'].NodeValue := Value;
end;

{ TXMLLumberSpeciesClass }

function TXMLLumberSpeciesClass.Get_SpeciesType: UnicodeString;
begin
  Result := AttributeNodes['SpeciesType'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesType(Value: UnicodeString);
begin
  SetAttribute('SpeciesType', Value);
end;

function TXMLLumberSpeciesClass.Get_SpeciesOrigin: UnicodeString;
begin
  Result := AttributeNodes['SpeciesOrigin'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesOrigin(Value: UnicodeString);
begin
  SetAttribute('SpeciesOrigin', Value);
end;

function TXMLLumberSpeciesClass.Get_SpeciesAgency: UnicodeString;
begin
  Result := AttributeNodes['SpeciesAgency'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesAgency(Value: UnicodeString);
begin
  SetAttribute('SpeciesAgency', Value);
end;

function TXMLLumberSpeciesClass.Get_SpeciesCode: UnicodeString;
begin
  Result := ChildNodes['SpeciesCode'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesCode(Value: UnicodeString);
begin
  ChildNodes['SpeciesCode'].NodeValue := Value;
end;

function TXMLLumberSpeciesClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberSpeciesClassList }

function TXMLLumberSpeciesClassList.Add: IXMLLumberSpeciesClass;
begin
  Result := AddItem(-1) as IXMLLumberSpeciesClass;
end;

function TXMLLumberSpeciesClassList.Insert(const Index: Integer): IXMLLumberSpeciesClass;
begin
  Result := AddItem(Index) as IXMLLumberSpeciesClass;
end;

function TXMLLumberSpeciesClassList.Get_Item(Index: Integer): IXMLLumberSpeciesClass;
begin
  Result := List[Index] as IXMLLumberSpeciesClass;
end;

{ TXMLLog }

procedure TXMLLog.AfterConstruction;
begin
  RegisterChildNode('LogCharacteristics', TXMLLogCharacteristics);
  RegisterChildNode('LogPackagingCharacteristics', TXMLLogPackagingCharacteristics);
  inherited;
end;

function TXMLLog.Get_LogCharacteristics: IXMLLogCharacteristics;
begin
  Result := ChildNodes['LogCharacteristics'] as IXMLLogCharacteristics;
end;

function TXMLLog.Get_LogPackagingCharacteristics: IXMLLogPackagingCharacteristics;
begin
  Result := ChildNodes['LogPackagingCharacteristics'] as IXMLLogPackagingCharacteristics;
end;

{ TXMLLogCharacteristics }

procedure TXMLLogCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('SmallEndDiameter', TXMLMeasurement);
  RegisterChildNode('LargeEndDiameter', TXMLMeasurement);
  RegisterChildNode('DiameterBreastHeight', TXMLMeasurement);
  inherited;
end;

function TXMLLogCharacteristics.Get_LogLengthType: UnicodeString;
begin
  Result := AttributeNodes['LogLengthType'].Text;
end;

procedure TXMLLogCharacteristics.Set_LogLengthType(Value: UnicodeString);
begin
  SetAttribute('LogLengthType', Value);
end;

function TXMLLogCharacteristics.Get_Debarked: UnicodeString;
begin
  Result := AttributeNodes['Debarked'].Text;
end;

procedure TXMLLogCharacteristics.Set_Debarked(Value: UnicodeString);
begin
  SetAttribute('Debarked', Value);
end;

function TXMLLogCharacteristics.Get_LogConversionRule: UnicodeString;
begin
  Result := AttributeNodes['LogConversionRule'].Text;
end;

procedure TXMLLogCharacteristics.Set_LogConversionRule(Value: UnicodeString);
begin
  SetAttribute('LogConversionRule', Value);
end;

function TXMLLogCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLLogCharacteristics.Get_SmallEndDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['SmallEndDiameter'] as IXMLMeasurement;
end;

function TXMLLogCharacteristics.Get_LargeEndDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['LargeEndDiameter'] as IXMLMeasurement;
end;

function TXMLLogCharacteristics.Get_DiameterBreastHeight: IXMLMeasurement;
begin
  Result := ChildNodes['DiameterBreastHeight'] as IXMLMeasurement;
end;

{ TXMLLogPackagingCharacteristics }

procedure TXMLLogPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLLogPackagingCharacteristics.Get_DoubleBunked: UnicodeString;
begin
  Result := AttributeNodes['DoubleBunked'].Text;
end;

procedure TXMLLogPackagingCharacteristics.Set_DoubleBunked(Value: UnicodeString);
begin
  SetAttribute('DoubleBunked', Value);
end;

function TXMLLogPackagingCharacteristics.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLLogPackagingCharacteristics.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLLogPackagingCharacteristics.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLLogPackagingCharacteristics.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLIdentifierS60 }

function TXMLIdentifierS60.Get_IdentifierCodeType: UnicodeString;
begin
  Result := AttributeNodes['IdentifierCodeType'].Text;
end;

procedure TXMLIdentifierS60.Set_IdentifierCodeType(Value: UnicodeString);
begin
  SetAttribute('IdentifierCodeType', Value);
end;

function TXMLIdentifierS60.Get_IdentifierType: UnicodeString;
begin
  Result := AttributeNodes['IdentifierType'].Text;
end;

procedure TXMLIdentifierS60.Set_IdentifierType(Value: UnicodeString);
begin
  SetAttribute('IdentifierType', Value);
end;

function TXMLIdentifierS60.Get_IdentifierFormatType: UnicodeString;
begin
  Result := AttributeNodes['IdentifierFormatType'].Text;
end;

procedure TXMLIdentifierS60.Set_IdentifierFormatType(Value: UnicodeString);
begin
  SetAttribute('IdentifierFormatType', Value);
end;

{ TXMLIdentifierS60List }

function TXMLIdentifierS60List.Add: IXMLIdentifierS60;
begin
  Result := AddItem(-1) as IXMLIdentifierS60;
end;

function TXMLIdentifierS60List.Insert(const Index: Integer): IXMLIdentifierS60;
begin
  Result := AddItem(Index) as IXMLIdentifierS60;
end;

function TXMLIdentifierS60List.Get_Item(Index: Integer): IXMLIdentifierS60;
begin
  Result := List[Index] as IXMLIdentifierS60;
end;

{ TXMLChip }

procedure TXMLChip.AfterConstruction;
begin
  RegisterChildNode('ChipCharacteristics', TXMLChipCharacteristics);
  RegisterChildNode('ChipPackagingCharacteristics', TXMLChipPackagingCharacteristics);
  inherited;
end;

function TXMLChip.Get_ChipCharacteristics: IXMLChipCharacteristics;
begin
  Result := ChildNodes['ChipCharacteristics'] as IXMLChipCharacteristics;
end;

function TXMLChip.Get_ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics;
begin
  Result := ChildNodes['ChipPackagingCharacteristics'] as IXMLChipPackagingCharacteristics;
end;

{ TXMLChipCharacteristics }

procedure TXMLChipCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Thickness', TXMLMeasurement);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('Bark', TXMLBark);
  RegisterChildNode('Sawdust', TXMLSawdust);
  inherited;
end;

function TXMLChipCharacteristics.Get_Screened: UnicodeString;
begin
  Result := AttributeNodes['Screened'].Text;
end;

procedure TXMLChipCharacteristics.Set_Screened(Value: UnicodeString);
begin
  SetAttribute('Screened', Value);
end;

function TXMLChipCharacteristics.Get_Debarked: UnicodeString;
begin
  Result := AttributeNodes['Debarked'].Text;
end;

procedure TXMLChipCharacteristics.Set_Debarked(Value: UnicodeString);
begin
  SetAttribute('Debarked', Value);
end;

function TXMLChipCharacteristics.Get_Thickness: IXMLMeasurement;
begin
  Result := ChildNodes['Thickness'] as IXMLMeasurement;
end;

function TXMLChipCharacteristics.Get_Moisture: IXMLMoisture;
begin
  Result := ChildNodes['Moisture'] as IXMLMoisture;
end;

function TXMLChipCharacteristics.Get_Dirt: IXMLDirt;
begin
  Result := ChildNodes['Dirt'] as IXMLDirt;
end;

function TXMLChipCharacteristics.Get_Bark: IXMLBark;
begin
  Result := ChildNodes['Bark'] as IXMLBark;
end;

function TXMLChipCharacteristics.Get_Sawdust: IXMLSawdust;
begin
  Result := ChildNodes['Sawdust'] as IXMLSawdust;
end;

{ TXMLBark }

function TXMLBark.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBark.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBark.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBark.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBark.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBark.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBark.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBark.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSawdust }

function TXMLSawdust.Get_TestMethod: UnicodeString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSawdust.Set_TestMethod(Value: UnicodeString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSawdust.Get_TestAgency: UnicodeString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSawdust.Set_TestAgency(Value: UnicodeString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSawdust.Get_SampleType: UnicodeString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSawdust.Set_SampleType(Value: UnicodeString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSawdust.Get_ResultSource: UnicodeString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSawdust.Set_ResultSource(Value: UnicodeString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLChipPackagingCharacteristics }

procedure TXMLChipPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  inherited;
end;

function TXMLChipPackagingCharacteristics.Get_Identifier: IXMLIdentifierS60;
begin
  Result := ChildNodes['Identifier'] as IXMLIdentifierS60;
end;

function TXMLChipPackagingCharacteristics.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLChipPackagingCharacteristics.Get_InformationalQuantity: IXMLInformationalQuantity;
begin
  Result := ChildNodes['InformationalQuantity'] as IXMLInformationalQuantity;
end;

{ TXMLWoodProducts }

procedure TXMLWoodProducts.AfterConstruction;
begin
  RegisterChildNode('WoodTimbersDimensionalLumberBoards', TXMLWoodTimbersDimensionalLumberBoards);
  RegisterChildNode('RoofingSidingDeckingFencing', TXMLRoofingSidingDeckingFencing);
  RegisterChildNode('CompositeAndVeneerWoodPanels', TXMLCompositeAndVeneerWoodPanels);
  RegisterChildNode('ConstructionPackagesAndPreFabPanels', TXMLConstructionPackagesAndPreFabPanels);
  RegisterChildNode('ProofInformationalQuantity', TXMLProofInformationalQuantity);
  RegisterChildNode('SuppliedComponentInformation', TXMLSuppliedComponentInformation);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FProofInformationalQuantity := CreateCollection(TXMLProofInformationalQuantityList, IXMLProofInformationalQuantity, 'ProofInformationalQuantity') as IXMLProofInformationalQuantityList;
  FSuppliedComponentInformation := CreateCollection(TXMLSuppliedComponentInformationList, IXMLSuppliedComponentInformation, 'SuppliedComponentInformation') as IXMLSuppliedComponentInformationList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLWoodProducts.Get_WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards;
begin
  Result := ChildNodes['WoodTimbersDimensionalLumberBoards'] as IXMLWoodTimbersDimensionalLumberBoards;
end;

function TXMLWoodProducts.Get_RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing;
begin
  Result := ChildNodes['RoofingSidingDeckingFencing'] as IXMLRoofingSidingDeckingFencing;
end;

function TXMLWoodProducts.Get_CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels;
begin
  Result := ChildNodes['CompositeAndVeneerWoodPanels'] as IXMLCompositeAndVeneerWoodPanels;
end;

function TXMLWoodProducts.Get_ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels;
begin
  Result := ChildNodes['ConstructionPackagesAndPreFabPanels'] as IXMLConstructionPackagesAndPreFabPanels;
end;

function TXMLWoodProducts.Get_Millwork: UnicodeString;
begin
  Result := ChildNodes['Millwork'].Text;
end;

procedure TXMLWoodProducts.Set_Millwork(Value: UnicodeString);
begin
  ChildNodes['Millwork'].NodeValue := Value;
end;

function TXMLWoodProducts.Get_Gypsum: UnicodeString;
begin
  Result := ChildNodes['Gypsum'].Text;
end;

procedure TXMLWoodProducts.Set_Gypsum(Value: UnicodeString);
begin
  ChildNodes['Gypsum'].NodeValue := Value;
end;

function TXMLWoodProducts.Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
begin
  Result := FProofInformationalQuantity;
end;

function TXMLWoodProducts.Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
begin
  Result := FSuppliedComponentInformation;
end;

function TXMLWoodProducts.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLWoodTimbersDimensionalLumberBoards }

procedure TXMLWoodTimbersDimensionalLumberBoards.AfterConstruction;
begin
  RegisterChildNode('SoftwoodLumber', TXMLSoftwoodLumber);
  RegisterChildNode('HardwoodLumber', TXMLHardwoodLumber);
  inherited;
end;

function TXMLWoodTimbersDimensionalLumberBoards.Get_SoftwoodLumber: IXMLSoftwoodLumber;
begin
  Result := ChildNodes['SoftwoodLumber'] as IXMLSoftwoodLumber;
end;

function TXMLWoodTimbersDimensionalLumberBoards.Get_HardwoodLumber: IXMLHardwoodLumber;
begin
  Result := ChildNodes['HardwoodLumber'] as IXMLHardwoodLumber;
end;

{ TXMLSoftwoodLumber }

procedure TXMLSoftwoodLumber.AfterConstruction;
begin
  RegisterChildNode('SoftwoodLumberCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLSoftwoodLumber.Get_SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['SoftwoodLumberCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLSoftwoodLumber.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLSoftwoodLumberCharacteristicsClass }

procedure TXMLSoftwoodLumberCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('LumberSpecies', TXMLLumberSpeciesClass);
  RegisterChildNode('LumberGrade', TXMLLumberGradeClass);
  RegisterChildNode('Length', TXMLDimensionConstructionClass);
  RegisterChildNode('Width', TXMLDimensionConstructionClass);
  RegisterChildNode('Thickness', TXMLDimensionThicknessClass);
  RegisterChildNode('Seasoning', TXMLLumberSeasoningClass);
  RegisterChildNode('MoistureContent', TXMLLumberMoistureContentClass);
  RegisterChildNode('HeatTreatment', TXMLHeatTreatmentClass);
  RegisterChildNode('ManufacturingProcess', TXMLLumberManufacturingProcessClass);
  RegisterChildNode('PatternProfile', TXMLLumberPatternProfileClass);
  RegisterChildNode('Trim', TXMLLumberTrimClass);
  RegisterChildNode('Joining', TXMLLumberJoiningClass);
  RegisterChildNode('PressureTreatment', TXMLPressureTreatmentClass);
  RegisterChildNode('FireTreatment', TXMLFireTreatmentClass);
  RegisterChildNode('OtherTreatment', TXMLOtherTreatmentClass);
  RegisterChildNode('GradeStamp', TXMLConstructionGradeStampClass);
  RegisterChildNode('ExLog', TXMLExLogClass);
  RegisterChildNode('ClassIdentifier', TXMLIdentifierS60);
  RegisterChildNode('Weight', TXMLMeasurement);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  RegisterChildNode('LengthCutDescription', TXMLLengthCutDescription);
  FLumberSpecies := CreateCollection(TXMLLumberSpeciesClassList, IXMLLumberSpeciesClass, 'LumberSpecies') as IXMLLumberSpeciesClassList;
  FLength := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Length') as IXMLDimensionConstructionClassList;
  FWidth := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Width') as IXMLDimensionConstructionClassList;
  FThickness := CreateCollection(TXMLDimensionThicknessClassList, IXMLDimensionThicknessClass, 'Thickness') as IXMLDimensionThicknessClassList;
  FManufacturingProcess := CreateCollection(TXMLLumberManufacturingProcessClassList, IXMLLumberManufacturingProcessClass, 'ManufacturingProcess') as IXMLLumberManufacturingProcessClassList;
  FClassIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'ClassIdentifier') as IXMLIdentifierS60List;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LumberSpecies: IXMLLumberSpeciesClassList;
begin
  Result := FLumberSpecies;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LumberGrade: IXMLLumberGradeClass;
begin
  Result := ChildNodes['LumberGrade'] as IXMLLumberGradeClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Length: IXMLDimensionConstructionClassList;
begin
  Result := FLength;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Width: IXMLDimensionConstructionClassList;
begin
  Result := FWidth;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Thickness: IXMLDimensionThicknessClassList;
begin
  Result := FThickness;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Seasoning: IXMLLumberSeasoningClass;
begin
  Result := ChildNodes['Seasoning'] as IXMLLumberSeasoningClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_MoistureContent: IXMLLumberMoistureContentClass;
begin
  Result := ChildNodes['MoistureContent'] as IXMLLumberMoistureContentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_HeatTreatment: IXMLHeatTreatmentClass;
begin
  Result := ChildNodes['HeatTreatment'] as IXMLHeatTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ManufacturingProcess: IXMLLumberManufacturingProcessClassList;
begin
  Result := FManufacturingProcess;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_PatternProfile: IXMLLumberPatternProfileClass;
begin
  Result := ChildNodes['PatternProfile'] as IXMLLumberPatternProfileClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Trim: IXMLLumberTrimClass;
begin
  Result := ChildNodes['Trim'] as IXMLLumberTrimClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Joining: IXMLLumberJoiningClass;
begin
  Result := ChildNodes['Joining'] as IXMLLumberJoiningClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_PressureTreatment: IXMLPressureTreatmentClass;
begin
  Result := ChildNodes['PressureTreatment'] as IXMLPressureTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_FireTreatment: IXMLFireTreatmentClass;
begin
  Result := ChildNodes['FireTreatment'] as IXMLFireTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_OtherTreatment: IXMLOtherTreatmentClass;
begin
  Result := ChildNodes['OtherTreatment'] as IXMLOtherTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_GradeStamp: IXMLConstructionGradeStampClass;
begin
  Result := ChildNodes['GradeStamp'] as IXMLConstructionGradeStampClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ExLog: IXMLExLogClass;
begin
  Result := ChildNodes['ExLog'] as IXMLExLogClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ClassIdentifier: IXMLIdentifierS60List;
begin
  Result := FClassIdentifier;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristics;
begin
  Result := ChildNodes['LabelCharacteristics'] as IXMLLabelCharacteristics;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristics;
begin
  Result := ChildNodes['StencilCharacteristics'] as IXMLStencilCharacteristics;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Wrap: IXMLWrap;
begin
  Result := ChildNodes['Wrap'] as IXMLWrap;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LengthCutDescription: IXMLLengthCutDescription;
begin
  Result := ChildNodes['LengthCutDescription'] as IXMLLengthCutDescription;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ShippingMark: UnicodeString;
begin
  Result := ChildNodes['ShippingMark'].Text;
end;

procedure TXMLSoftwoodLumberCharacteristicsClass.Set_ShippingMark(Value: UnicodeString);
begin
  ChildNodes['ShippingMark'].NodeValue := Value;
end;

{ TXMLLumberGradeClass }

function TXMLLumberGradeClass.Get_GradeType: UnicodeString;
begin
  Result := AttributeNodes['GradeType'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeType(Value: UnicodeString);
begin
  SetAttribute('GradeType', Value);
end;

function TXMLLumberGradeClass.Get_GradingRule: UnicodeString;
begin
  Result := AttributeNodes['GradingRule'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradingRule(Value: UnicodeString);
begin
  SetAttribute('GradingRule', Value);
end;

function TXMLLumberGradeClass.Get_GradeAgency: UnicodeString;
begin
  Result := AttributeNodes['GradeAgency'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeAgency(Value: UnicodeString);
begin
  SetAttribute('GradeAgency', Value);
end;

function TXMLLumberGradeClass.Get_ModulusElasticity: UnicodeString;
begin
  Result := AttributeNodes['ModulusElasticity'].Text;
end;

procedure TXMLLumberGradeClass.Set_ModulusElasticity(Value: UnicodeString);
begin
  SetAttribute('ModulusElasticity', Value);
end;

function TXMLLumberGradeClass.Get_Face: UnicodeString;
begin
  Result := AttributeNodes['Face'].Text;
end;

procedure TXMLLumberGradeClass.Set_Face(Value: UnicodeString);
begin
  SetAttribute('Face', Value);
end;

function TXMLLumberGradeClass.Get_GradeName: UnicodeString;
begin
  Result := ChildNodes['GradeName'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeName(Value: UnicodeString);
begin
  ChildNodes['GradeName'].NodeValue := Value;
end;

function TXMLLumberGradeClass.Get_GradeCode: UnicodeString;
begin
  Result := ChildNodes['GradeCode'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeCode(Value: UnicodeString);
begin
  ChildNodes['GradeCode'].NodeValue := Value;
end;

function TXMLLumberGradeClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberGradeClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLDimensionConstructionClass }

procedure TXMLDimensionConstructionClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDimensionConstructionClass.Get_ActualNominal: UnicodeString;
begin
  Result := AttributeNodes['ActualNominal'].Text;
end;

procedure TXMLDimensionConstructionClass.Set_ActualNominal(Value: UnicodeString);
begin
  SetAttribute('ActualNominal', Value);
end;

function TXMLDimensionConstructionClass.Get_WithGrain: UnicodeString;
begin
  Result := AttributeNodes['WithGrain'].Text;
end;

procedure TXMLDimensionConstructionClass.Set_WithGrain(Value: UnicodeString);
begin
  SetAttribute('WithGrain', Value);
end;

function TXMLDimensionConstructionClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLDimensionConstructionClass.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLDimensionConstructionClass.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

function TXMLDimensionConstructionClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDimensionConstructionClassList }

function TXMLDimensionConstructionClassList.Add: IXMLDimensionConstructionClass;
begin
  Result := AddItem(-1) as IXMLDimensionConstructionClass;
end;

function TXMLDimensionConstructionClassList.Insert(const Index: Integer): IXMLDimensionConstructionClass;
begin
  Result := AddItem(Index) as IXMLDimensionConstructionClass;
end;

function TXMLDimensionConstructionClassList.Get_Item(Index: Integer): IXMLDimensionConstructionClass;
begin
  Result := List[Index] as IXMLDimensionConstructionClass;
end;

{ TXMLDimensionThicknessClass }

procedure TXMLDimensionThicknessClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDimensionThicknessClass.Get_ActualNominal: UnicodeString;
begin
  Result := AttributeNodes['ActualNominal'].Text;
end;

procedure TXMLDimensionThicknessClass.Set_ActualNominal(Value: UnicodeString);
begin
  SetAttribute('ActualNominal', Value);
end;

function TXMLDimensionThicknessClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLDimensionThicknessClass.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLDimensionThicknessClass.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

function TXMLDimensionThicknessClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDimensionThicknessClassList }

function TXMLDimensionThicknessClassList.Add: IXMLDimensionThicknessClass;
begin
  Result := AddItem(-1) as IXMLDimensionThicknessClass;
end;

function TXMLDimensionThicknessClassList.Insert(const Index: Integer): IXMLDimensionThicknessClass;
begin
  Result := AddItem(Index) as IXMLDimensionThicknessClass;
end;

function TXMLDimensionThicknessClassList.Get_Item(Index: Integer): IXMLDimensionThicknessClass;
begin
  Result := List[Index] as IXMLDimensionThicknessClass;
end;

{ TXMLLumberSeasoningClass }

function TXMLLumberSeasoningClass.Get_SeasoningType: UnicodeString;
begin
  Result := AttributeNodes['SeasoningType'].Text;
end;

procedure TXMLLumberSeasoningClass.Set_SeasoningType(Value: UnicodeString);
begin
  SetAttribute('SeasoningType', Value);
end;

function TXMLLumberSeasoningClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberSeasoningClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberMoistureContentClass }

function TXMLLumberMoistureContentClass.Get_MoistureContentPercentage: UnicodeString;
begin
  Result := AttributeNodes['MoistureContentPercentage'].Text;
end;

procedure TXMLLumberMoistureContentClass.Set_MoistureContentPercentage(Value: UnicodeString);
begin
  SetAttribute('MoistureContentPercentage', Value);
end;

function TXMLLumberMoistureContentClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberMoistureContentClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLHeatTreatmentClass }

procedure TXMLHeatTreatmentClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLHeatTreatmentClass.Get_HeatTreatmentType: UnicodeString;
begin
  Result := AttributeNodes['HeatTreatmentType'].Text;
end;

procedure TXMLHeatTreatmentClass.Set_HeatTreatmentType(Value: UnicodeString);
begin
  SetAttribute('HeatTreatmentType', Value);
end;

function TXMLHeatTreatmentClass.Get_AdditionalText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLHeatTreatmentClass.Add(const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLHeatTreatmentClass.Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLLumberManufacturingProcessClass }

procedure TXMLLumberManufacturingProcessClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLLumberManufacturingProcessClass.Get_ManufacturingProcessType: UnicodeString;
begin
  Result := AttributeNodes['ManufacturingProcessType'].Text;
end;

procedure TXMLLumberManufacturingProcessClass.Set_ManufacturingProcessType(Value: UnicodeString);
begin
  SetAttribute('ManufacturingProcessType', Value);
end;

function TXMLLumberManufacturingProcessClass.Get_ManufacturingProcessAgency: UnicodeString;
begin
  Result := AttributeNodes['ManufacturingProcessAgency'].Text;
end;

procedure TXMLLumberManufacturingProcessClass.Set_ManufacturingProcessAgency(Value: UnicodeString);
begin
  SetAttribute('ManufacturingProcessAgency', Value);
end;

function TXMLLumberManufacturingProcessClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLLumberManufacturingProcessClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberManufacturingProcessClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberManufacturingProcessClassList }

function TXMLLumberManufacturingProcessClassList.Add: IXMLLumberManufacturingProcessClass;
begin
  Result := AddItem(-1) as IXMLLumberManufacturingProcessClass;
end;

function TXMLLumberManufacturingProcessClassList.Insert(const Index: Integer): IXMLLumberManufacturingProcessClass;
begin
  Result := AddItem(Index) as IXMLLumberManufacturingProcessClass;
end;

function TXMLLumberManufacturingProcessClassList.Get_Item(Index: Integer): IXMLLumberManufacturingProcessClass;
begin
  Result := List[Index] as IXMLLumberManufacturingProcessClass;
end;

{ TXMLLumberPatternProfileClass }

function TXMLLumberPatternProfileClass.Get_PatternProfileType: UnicodeString;
begin
  Result := AttributeNodes['PatternProfileType'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_PatternProfileType(Value: UnicodeString);
begin
  SetAttribute('PatternProfileType', Value);
end;

function TXMLLumberPatternProfileClass.Get_PatternProfileAgency: UnicodeString;
begin
  Result := AttributeNodes['PatternProfileAgency'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_PatternProfileAgency(Value: UnicodeString);
begin
  SetAttribute('PatternProfileAgency', Value);
end;

function TXMLLumberPatternProfileClass.Get_PatternProfileCode: UnicodeString;
begin
  Result := ChildNodes['PatternProfileCode'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_PatternProfileCode(Value: UnicodeString);
begin
  ChildNodes['PatternProfileCode'].NodeValue := Value;
end;

function TXMLLumberPatternProfileClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberTrimClass }

function TXMLLumberTrimClass.Get_TrimType: UnicodeString;
begin
  Result := AttributeNodes['TrimType'].Text;
end;

procedure TXMLLumberTrimClass.Set_TrimType(Value: UnicodeString);
begin
  SetAttribute('TrimType', Value);
end;

function TXMLLumberTrimClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberTrimClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberJoiningClass }

function TXMLLumberJoiningClass.Get_JoiningType: UnicodeString;
begin
  Result := AttributeNodes['JoiningType'].Text;
end;

procedure TXMLLumberJoiningClass.Set_JoiningType(Value: UnicodeString);
begin
  SetAttribute('JoiningType', Value);
end;

function TXMLLumberJoiningClass.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberJoiningClass.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLPressureTreatmentClass }

procedure TXMLPressureTreatmentClass.AfterConstruction;
begin
  RegisterChildNode('PressureTreatmentCompound', TXMLPressureTreatmentCompoundClass);
  RegisterChildNode('PressureTreatmentConcentration', TXMLPressureTreatmentConcentration);
  inherited;
end;

function TXMLPressureTreatmentClass.Get_PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass;
begin
  Result := ChildNodes['PressureTreatmentCompound'] as IXMLPressureTreatmentCompoundClass;
end;

function TXMLPressureTreatmentClass.Get_PressureTreatmentConcentration: IXMLPressureTreatmentConcentration;
begin
  Result := ChildNodes['PressureTreatmentConcentration'] as IXMLPressureTreatmentConcentration;
end;

function TXMLPressureTreatmentClass.Get_PressureTreatmentComStdorUseCategory: UnicodeString;
begin
  Result := ChildNodes['PressureTreatmentComStdorUseCategory'].Text;
end;

procedure TXMLPressureTreatmentClass.Set_PressureTreatmentComStdorUseCategory(Value: UnicodeString);
begin
  ChildNodes['PressureTreatmentComStdorUseCategory'].NodeValue := Value;
end;

{ TXMLPressureTreatmentCompoundClass }

procedure TXMLPressureTreatmentCompoundClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPressureTreatmentCompoundClass.Get_CompoundType: UnicodeString;
begin
  Result := AttributeNodes['CompoundType'].Text;
end;

procedure TXMLPressureTreatmentCompoundClass.Set_CompoundType(Value: UnicodeString);
begin
  SetAttribute('CompoundType', Value);
end;

function TXMLPressureTreatmentCompoundClass.Get_CompoundAgency: UnicodeString;
begin
  Result := AttributeNodes['CompoundAgency'].Text;
end;

procedure TXMLPressureTreatmentCompoundClass.Set_CompoundAgency(Value: UnicodeString);
begin
  SetAttribute('CompoundAgency', Value);
end;

function TXMLPressureTreatmentCompoundClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLPressureTreatmentCompoundClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPressureTreatmentConcentration }

function TXMLPressureTreatmentConcentration.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLPressureTreatmentConcentration.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLFireTreatmentClass }

procedure TXMLFireTreatmentClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLFireTreatmentClass.Get_FireTreatmentType: UnicodeString;
begin
  Result := AttributeNodes['FireTreatmentType'].Text;
end;

procedure TXMLFireTreatmentClass.Set_FireTreatmentType(Value: UnicodeString);
begin
  SetAttribute('FireTreatmentType', Value);
end;

function TXMLFireTreatmentClass.Get_AdditionalText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLFireTreatmentClass.Add(const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLFireTreatmentClass.Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLOtherTreatmentClass }

procedure TXMLOtherTreatmentClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLOtherTreatmentClass.Get_AdditionalText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLOtherTreatmentClass.Add(const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLOtherTreatmentClass.Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLConstructionGradeStampClass }

procedure TXMLConstructionGradeStampClass.AfterConstruction;
begin
  FGradeStampMillNumber := CreateCollection(TXMLS255List, IXMLNode, 'GradeStampMillNumber') as IXMLS255List;
  inherited;
end;

function TXMLConstructionGradeStampClass.Get_GradeStamped: UnicodeString;
begin
  Result := AttributeNodes['GradeStamped'].Text;
end;

procedure TXMLConstructionGradeStampClass.Set_GradeStamped(Value: UnicodeString);
begin
  SetAttribute('GradeStamped', Value);
end;

function TXMLConstructionGradeStampClass.Get_GradeStampMillNumber: IXMLS255List;
begin
  Result := FGradeStampMillNumber;
end;

function TXMLConstructionGradeStampClass.Get_GradeStampLocation: UnicodeString;
begin
  Result := ChildNodes['GradeStampLocation'].Text;
end;

procedure TXMLConstructionGradeStampClass.Set_GradeStampLocation(Value: UnicodeString);
begin
  ChildNodes['GradeStampLocation'].NodeValue := Value;
end;

{ TXMLExLogClass }

procedure TXMLExLogClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLExLogClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

{ TXMLLengthCutDescription }

function TXMLLengthCutDescription.Get_LengthCutType: UnicodeString;
begin
  Result := AttributeNodes['LengthCutType'].Text;
end;

procedure TXMLLengthCutDescription.Set_LengthCutType(Value: UnicodeString);
begin
  SetAttribute('LengthCutType', Value);
end;

{ TXMLPackaging }

procedure TXMLPackaging.AfterConstruction;
begin
  RegisterChildNode('ProductPackaging', TXMLProductPackagingClass);
  inherited;
end;

function TXMLPackaging.Get_ProductPackaging: IXMLProductPackagingClass;
begin
  Result := ChildNodes['ProductPackaging'] as IXMLProductPackagingClass;
end;

{ TXMLProductPackagingClass }

procedure TXMLProductPackagingClass.AfterConstruction;
begin
  RegisterChildNode('QuantityInUnit', TXMLMeasurement);
  RegisterChildNode('UnitDimension', TXMLUnitDimensionType);
  RegisterChildNode('Weight', TXMLMeasurement);
  RegisterChildNode('PackageIDInformation', TXMLLumberPackageCodeClass);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('Wrap', TXMLWrap);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FBandCharacteristics := CreateCollection(TXMLBandCharacteristicsList, IXMLBandCharacteristics, 'BandCharacteristics') as IXMLBandCharacteristicsList;
  FPalletCharacteristics := CreateCollection(TXMLPalletCharacteristicsList, IXMLPalletCharacteristics, 'PalletCharacteristics') as IXMLPalletCharacteristicsList;
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLProductPackagingClass.Get_QuantityInUnit: IXMLMeasurement;
begin
  Result := ChildNodes['QuantityInUnit'] as IXMLMeasurement;
end;

function TXMLProductPackagingClass.Get_UnitDimension: IXMLUnitDimensionType;
begin
  Result := ChildNodes['UnitDimension'] as IXMLUnitDimensionType;
end;

function TXMLProductPackagingClass.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

function TXMLProductPackagingClass.Get_PackageIDInformation: IXMLLumberPackageCodeClass;
begin
  Result := ChildNodes['PackageIDInformation'] as IXMLLumberPackageCodeClass;
end;

function TXMLProductPackagingClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLProductPackagingClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLProductPackagingClass.Get_BandCharacteristics: IXMLBandCharacteristicsList;
begin
  Result := FBandCharacteristics;
end;

function TXMLProductPackagingClass.Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
begin
  Result := FPalletCharacteristics;
end;

function TXMLProductPackagingClass.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

function TXMLProductPackagingClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLProductPackagingClass.Get_PackageType: UnicodeString;
begin
  Result := ChildNodes['PackageType'].Text;
end;

procedure TXMLProductPackagingClass.Set_PackageType(Value: UnicodeString);
begin
  ChildNodes['PackageType'].NodeValue := Value;
end;

{ TXMLUnitDimensionType }

procedure TXMLUnitDimensionType.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLDimensionMeasurementClass);
  RegisterChildNode('Width', TXMLDimensionMeasurementClass);
  RegisterChildNode('Height', TXMLDimensionMeasurementClass);
  inherited;
end;

function TXMLUnitDimensionType.Get_Length: IXMLDimensionMeasurementClass;
begin
  Result := ChildNodes['Length'] as IXMLDimensionMeasurementClass;
end;

function TXMLUnitDimensionType.Get_Width: IXMLDimensionMeasurementClass;
begin
  Result := ChildNodes['Width'] as IXMLDimensionMeasurementClass;
end;

function TXMLUnitDimensionType.Get_Height: IXMLDimensionMeasurementClass;
begin
  Result := ChildNodes['Height'] as IXMLDimensionMeasurementClass;
end;

function TXMLUnitDimensionType.Get_PiecesPerRow: LongWord;
begin
  Result := ChildNodes['PiecesPerRow'].NodeValue;
end;

procedure TXMLUnitDimensionType.Set_PiecesPerRow(Value: LongWord);
begin
  ChildNodes['PiecesPerRow'].NodeValue := Value;
end;

function TXMLUnitDimensionType.Get_RowsPerUnit: LongWord;
begin
  Result := ChildNodes['RowsPerUnit'].NodeValue;
end;

procedure TXMLUnitDimensionType.Set_RowsPerUnit(Value: LongWord);
begin
  ChildNodes['RowsPerUnit'].NodeValue := Value;
end;

{ TXMLDimensionMeasurementClass }

procedure TXMLDimensionMeasurementClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLDimensionMeasurementClass.Get_ActualNominal: UnicodeString;
begin
  Result := AttributeNodes['ActualNominal'].Text;
end;

procedure TXMLDimensionMeasurementClass.Set_ActualNominal(Value: UnicodeString);
begin
  SetAttribute('ActualNominal', Value);
end;

function TXMLDimensionMeasurementClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLDimensionMeasurementClass.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLDimensionMeasurementClass.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLLumberPackageCodeClass }

function TXMLLumberPackageCodeClass.Get_PackageAgency: UnicodeString;
begin
  Result := AttributeNodes['PackageAgency'].Text;
end;

procedure TXMLLumberPackageCodeClass.Set_PackageAgency(Value: UnicodeString);
begin
  SetAttribute('PackageAgency', Value);
end;

function TXMLLumberPackageCodeClass.Get_PackageCode: UnicodeString;
begin
  Result := ChildNodes['PackageCode'].Text;
end;

procedure TXMLLumberPackageCodeClass.Set_PackageCode(Value: UnicodeString);
begin
  ChildNodes['PackageCode'].NodeValue := Value;
end;

function TXMLLumberPackageCodeClass.Get_PackageName: UnicodeString;
begin
  Result := ChildNodes['PackageName'].Text;
end;

procedure TXMLLumberPackageCodeClass.Set_PackageName(Value: UnicodeString);
begin
  ChildNodes['PackageName'].NodeValue := Value;
end;

{ TXMLHardwoodLumber }

procedure TXMLHardwoodLumber.AfterConstruction;
begin
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLHardwoodLumber.Get_HardwoodLumberCharacteristics: UnicodeString;
begin
  Result := ChildNodes['HardwoodLumberCharacteristics'].Text;
end;

procedure TXMLHardwoodLumber.Set_HardwoodLumberCharacteristics(Value: UnicodeString);
begin
  ChildNodes['HardwoodLumberCharacteristics'].NodeValue := Value;
end;

function TXMLHardwoodLumber.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLRoofingSidingDeckingFencing }

procedure TXMLRoofingSidingDeckingFencing.AfterConstruction;
begin
  RegisterChildNode('NaturalWoodSiding', TXMLNaturalWoodSiding);
  RegisterChildNode('NaturalWoodSiding-Other', TXMLNaturalWoodSidingOther);
  RegisterChildNode('DeckAndPorchFlooringMaterials-NaturalWood', TXMLDeckAndPorchFlooringMaterialsNaturalWood);
  inherited;
end;

function TXMLRoofingSidingDeckingFencing.Get_NaturalWoodSiding: IXMLNaturalWoodSiding;
begin
  Result := ChildNodes['NaturalWoodSiding'] as IXMLNaturalWoodSiding;
end;

function TXMLRoofingSidingDeckingFencing.Get_NaturalWoodSidingOther: IXMLNaturalWoodSidingOther;
begin
  Result := ChildNodes['NaturalWoodSiding-Other'] as IXMLNaturalWoodSidingOther;
end;

function TXMLRoofingSidingDeckingFencing.Get_DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood;
begin
  Result := ChildNodes['DeckAndPorchFlooringMaterials-NaturalWood'] as IXMLDeckAndPorchFlooringMaterialsNaturalWood;
end;

{ TXMLNaturalWoodSiding }

procedure TXMLNaturalWoodSiding.AfterConstruction;
begin
  RegisterChildNode('NaturalWoodSidingCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLNaturalWoodSiding.Get_NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['NaturalWoodSidingCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLNaturalWoodSiding.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLNaturalWoodSidingOther }

procedure TXMLNaturalWoodSidingOther.AfterConstruction;
begin
  RegisterChildNode('NaturalWoodSiding-OtherCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLNaturalWoodSidingOther.Get_NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['NaturalWoodSiding-OtherCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLNaturalWoodSidingOther.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLDeckAndPorchFlooringMaterialsNaturalWood }

procedure TXMLDeckAndPorchFlooringMaterialsNaturalWood.AfterConstruction;
begin
  RegisterChildNode('DeckAndPorchFlooringMaterials-NaturalWoodCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLDeckAndPorchFlooringMaterialsNaturalWood.Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['DeckAndPorchFlooringMaterials-NaturalWoodCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLDeckAndPorchFlooringMaterialsNaturalWood.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLCompositeAndVeneerWoodPanels }

procedure TXMLCompositeAndVeneerWoodPanels.AfterConstruction;
begin
  RegisterChildNode('SoftwoodPlywood', TXMLNAPlywoodOSBCharacteristicsClass);
  RegisterChildNode('WoodPanelProducts', TXMLWoodPanelProductsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLCompositeAndVeneerWoodPanels.Get_SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass;
begin
  Result := ChildNodes['SoftwoodPlywood'] as IXMLNAPlywoodOSBCharacteristicsClass;
end;

function TXMLCompositeAndVeneerWoodPanels.Get_WoodPanelProducts: IXMLWoodPanelProductsClass;
begin
  Result := ChildNodes['WoodPanelProducts'] as IXMLWoodPanelProductsClass;
end;

function TXMLCompositeAndVeneerWoodPanels.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLNAPlywoodOSBCharacteristicsClass }

procedure TXMLNAPlywoodOSBCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('PlywoodOSBGrade', TXMLPlywoodOSBGradeClass);
  RegisterChildNode('Thickness', TXMLDimensionThicknessClass);
  RegisterChildNode('Width', TXMLDimensionConstructionClass);
  RegisterChildNode('Length', TXMLDimensionConstructionClass);
  RegisterChildNode('Surface', TXMLPlywoodOSBSurfaceClass);
  RegisterChildNode('Overlay', TXMLPlywoodOSBOverlayClass);
  RegisterChildNode('Edge', TXMLPlywoodOSBEdgeClass);
  RegisterChildNode('PressureTreatment', TXMLPressureTreatmentClass);
  RegisterChildNode('FireTreatment', TXMLFireTreatmentClass);
  RegisterChildNode('Supplemental', TXMLPlywoodOSBSupplementalClass);
  RegisterChildNode('GradeStamp', TXMLConstructionGradeStampClass);
  RegisterChildNode('ClassIdentifier', TXMLIdentifierS60);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FWidth := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Width') as IXMLDimensionConstructionClassList;
  FLength := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Length') as IXMLDimensionConstructionClassList;
  FPlywoodOSBSpecies := CreateCollection(TXMLPlywoodOSBSpeciesTypeList, IXMLNode, 'PlywoodOSBSpecies') as IXMLPlywoodOSBSpeciesTypeList;
  FOverlay := CreateCollection(TXMLPlywoodOSBOverlayClassList, IXMLPlywoodOSBOverlayClass, 'Overlay') as IXMLPlywoodOSBOverlayClassList;
  FSupplemental := CreateCollection(TXMLPlywoodOSBSupplementalClassList, IXMLPlywoodOSBSupplementalClass, 'Supplemental') as IXMLPlywoodOSBSupplementalClassList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PlywoodOSBGrade: IXMLPlywoodOSBGradeClass;
begin
  Result := ChildNodes['PlywoodOSBGrade'] as IXMLPlywoodOSBGradeClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Thickness: IXMLDimensionThicknessClass;
begin
  Result := ChildNodes['Thickness'] as IXMLDimensionThicknessClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Width: IXMLDimensionConstructionClassList;
begin
  Result := FWidth;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Length: IXMLDimensionConstructionClassList;
begin
  Result := FLength;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
begin
  Result := FPlywoodOSBSpecies;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PlyNumber: LongWord;
begin
  Result := ChildNodes['PlyNumber'].NodeValue;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_PlyNumber(Value: LongWord);
begin
  ChildNodes['PlyNumber'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Surface: IXMLPlywoodOSBSurfaceClass;
begin
  Result := ChildNodes['Surface'] as IXMLPlywoodOSBSurfaceClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Overlay: IXMLPlywoodOSBOverlayClassList;
begin
  Result := FOverlay;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_GlueExposure: UnicodeString;
begin
  Result := ChildNodes['GlueExposure'].Text;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_GlueExposure(Value: UnicodeString);
begin
  ChildNodes['GlueExposure'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Edge: IXMLPlywoodOSBEdgeClass;
begin
  Result := ChildNodes['Edge'] as IXMLPlywoodOSBEdgeClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PressureTreatment: IXMLPressureTreatmentClass;
begin
  Result := ChildNodes['PressureTreatment'] as IXMLPressureTreatmentClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_FireTreatment: IXMLFireTreatmentClass;
begin
  Result := ChildNodes['FireTreatment'] as IXMLFireTreatmentClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
begin
  Result := FSupplemental;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Brand: UnicodeString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_Brand(Value: UnicodeString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_GradeAgency: UnicodeString;
begin
  Result := ChildNodes['GradeAgency'].Text;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_GradeAgency(Value: UnicodeString);
begin
  ChildNodes['GradeAgency'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_GradeStamp: IXMLConstructionGradeStampClass;
begin
  Result := ChildNodes['GradeStamp'] as IXMLConstructionGradeStampClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_ClassIdentifier: IXMLIdentifierS60;
begin
  Result := ChildNodes['ClassIdentifier'] as IXMLIdentifierS60;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLPlywoodOSBGradeClass }

function TXMLPlywoodOSBGradeClass.Get_Face: UnicodeString;
begin
  Result := AttributeNodes['Face'].Text;
end;

procedure TXMLPlywoodOSBGradeClass.Set_Face(Value: UnicodeString);
begin
  SetAttribute('Face', Value);
end;

function TXMLPlywoodOSBGradeClass.Get_SpanRating: UnicodeString;
begin
  Result := ChildNodes['SpanRating'].Text;
end;

procedure TXMLPlywoodOSBGradeClass.Set_SpanRating(Value: UnicodeString);
begin
  ChildNodes['SpanRating'].NodeValue := Value;
end;

function TXMLPlywoodOSBGradeClass.Get_StrengthGroup: UnicodeString;
begin
  Result := ChildNodes['StrengthGroup'].Text;
end;

procedure TXMLPlywoodOSBGradeClass.Set_StrengthGroup(Value: UnicodeString);
begin
  ChildNodes['StrengthGroup'].NodeValue := Value;
end;

{ TXMLPlywoodOSBSurfaceClass }

procedure TXMLPlywoodOSBSurfaceClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLPlywoodOSBSurfaceClass.Get_SurfaceType: UnicodeString;
begin
  Result := AttributeNodes['SurfaceType'].Text;
end;

procedure TXMLPlywoodOSBSurfaceClass.Set_SurfaceType(Value: UnicodeString);
begin
  SetAttribute('SurfaceType', Value);
end;

function TXMLPlywoodOSBSurfaceClass.Get_AdditionalText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLPlywoodOSBSurfaceClass.Add(const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLPlywoodOSBSurfaceClass.Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLPlywoodOSBOverlayClass }

procedure TXMLPlywoodOSBOverlayClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLPlywoodOSBOverlayClass.Get_OverlaySide: UnicodeString;
begin
  Result := AttributeNodes['OverlaySide'].Text;
end;

procedure TXMLPlywoodOSBOverlayClass.Set_OverlaySide(Value: UnicodeString);
begin
  SetAttribute('OverlaySide', Value);
end;

function TXMLPlywoodOSBOverlayClass.Get_AdditionalText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLPlywoodOSBOverlayClass.Add(const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLPlywoodOSBOverlayClass.Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLPlywoodOSBOverlayClassList }

function TXMLPlywoodOSBOverlayClassList.Add: IXMLPlywoodOSBOverlayClass;
begin
  Result := AddItem(-1) as IXMLPlywoodOSBOverlayClass;
end;

function TXMLPlywoodOSBOverlayClassList.Insert(const Index: Integer): IXMLPlywoodOSBOverlayClass;
begin
  Result := AddItem(Index) as IXMLPlywoodOSBOverlayClass;
end;

function TXMLPlywoodOSBOverlayClassList.Get_Item(Index: Integer): IXMLPlywoodOSBOverlayClass;
begin
  Result := List[Index] as IXMLPlywoodOSBOverlayClass;
end;

{ TXMLPlywoodOSBEdgeClass }

procedure TXMLPlywoodOSBEdgeClass.AfterConstruction;
begin
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPlywoodOSBEdgeClass.Get_EdgeType: UnicodeString;
begin
  Result := AttributeNodes['EdgeType'].Text;
end;

procedure TXMLPlywoodOSBEdgeClass.Set_EdgeType(Value: UnicodeString);
begin
  SetAttribute('EdgeType', Value);
end;

function TXMLPlywoodOSBEdgeClass.Get_EdgeLocation: UnicodeString;
begin
  Result := AttributeNodes['EdgeLocation'].Text;
end;

procedure TXMLPlywoodOSBEdgeClass.Set_EdgeLocation(Value: UnicodeString);
begin
  SetAttribute('EdgeLocation', Value);
end;

function TXMLPlywoodOSBEdgeClass.Get_EdgeMachiningProfile: UnicodeString;
begin
  Result := ChildNodes['EdgeMachiningProfile'].Text;
end;

procedure TXMLPlywoodOSBEdgeClass.Set_EdgeMachiningProfile(Value: UnicodeString);
begin
  ChildNodes['EdgeMachiningProfile'].NodeValue := Value;
end;

function TXMLPlywoodOSBEdgeClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPlywoodOSBSupplementalClass }

procedure TXMLPlywoodOSBSupplementalClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLPlywoodOSBSupplementalClass.Get_SupplementalSpecification: UnicodeString;
begin
  Result := AttributeNodes['SupplementalSpecification'].Text;
end;

procedure TXMLPlywoodOSBSupplementalClass.Set_SupplementalSpecification(Value: UnicodeString);
begin
  SetAttribute('SupplementalSpecification', Value);
end;

function TXMLPlywoodOSBSupplementalClass.Get_AdditionalText(Index: Integer): UnicodeString;
begin
  Result := List[Index].Text;
end;

function TXMLPlywoodOSBSupplementalClass.Add(const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLPlywoodOSBSupplementalClass.Insert(const Index: Integer; const AdditionalText: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLPlywoodOSBSupplementalClassList }

function TXMLPlywoodOSBSupplementalClassList.Add: IXMLPlywoodOSBSupplementalClass;
begin
  Result := AddItem(-1) as IXMLPlywoodOSBSupplementalClass;
end;

function TXMLPlywoodOSBSupplementalClassList.Insert(const Index: Integer): IXMLPlywoodOSBSupplementalClass;
begin
  Result := AddItem(Index) as IXMLPlywoodOSBSupplementalClass;
end;

function TXMLPlywoodOSBSupplementalClassList.Get_Item(Index: Integer): IXMLPlywoodOSBSupplementalClass;
begin
  Result := List[Index] as IXMLPlywoodOSBSupplementalClass;
end;

{ TXMLWoodPanelProductsClass }

procedure TXMLWoodPanelProductsClass.AfterConstruction;
begin
  RegisterChildNode('WoodBasedPanelGrade', TXMLPlywoodOSBGradeClass);
  RegisterChildNode('WoodPanelSpecies', TXMLLumberSpeciesClass);
  RegisterChildNode('Thickness', TXMLDimensionThicknessClass);
  RegisterChildNode('Width', TXMLDimensionConstructionClass);
  RegisterChildNode('Length', TXMLDimensionConstructionClass);
  RegisterChildNode('PlywoodLayupStructure', TXMLPlywoodLayupStructureClass);
  RegisterChildNode('Edge', TXMLEdgeClass);
  RegisterChildNode('Side', TXMLPlywoodSideClass);
  RegisterChildNode('PressureTreatment', TXMLPressureTreatmentClass);
  RegisterChildNode('FireTreatment', TXMLFireTreatmentClass);
  RegisterChildNode('Supplemental', TXMLPlywoodOSBSupplementalClass);
  RegisterChildNode('GradeStamp', TXMLConstructionGradeStampClass);
  RegisterChildNode('ClassIdentifier', TXMLIdentifierS60);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  FWoodPanelSpecies := CreateCollection(TXMLLumberSpeciesClassList, IXMLLumberSpeciesClass, 'WoodPanelSpecies') as IXMLLumberSpeciesClassList;
  FThickness := CreateCollection(TXMLDimensionThicknessClassList, IXMLDimensionThicknessClass, 'Thickness') as IXMLDimensionThicknessClassList;
  FWidth := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Width') as IXMLDimensionConstructionClassList;
  FLength := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Length') as IXMLDimensionConstructionClassList;
  FEdge := CreateCollection(TXMLEdgeClassList, IXMLEdgeClass, 'Edge') as IXMLEdgeClassList;
  FSide := CreateCollection(TXMLPlywoodSideClassList, IXMLPlywoodSideClass, 'Side') as IXMLPlywoodSideClassList;
  FSupplemental := CreateCollection(TXMLPlywoodOSBSupplementalClassList, IXMLPlywoodOSBSupplementalClass, 'Supplemental') as IXMLPlywoodOSBSupplementalClassList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  inherited;
end;

function TXMLWoodPanelProductsClass.Get_WoodBasedPanelGrade: IXMLPlywoodOSBGradeClass;
begin
  Result := ChildNodes['WoodBasedPanelGrade'] as IXMLPlywoodOSBGradeClass;
end;

function TXMLWoodPanelProductsClass.Get_WoodPanelSpecies: IXMLLumberSpeciesClassList;
begin
  Result := FWoodPanelSpecies;
end;

function TXMLWoodPanelProductsClass.Get_Thickness: IXMLDimensionThicknessClassList;
begin
  Result := FThickness;
end;

function TXMLWoodPanelProductsClass.Get_Width: IXMLDimensionConstructionClassList;
begin
  Result := FWidth;
end;

function TXMLWoodPanelProductsClass.Get_Length: IXMLDimensionConstructionClassList;
begin
  Result := FLength;
end;

function TXMLWoodPanelProductsClass.Get_PlywoodLayupStructure: IXMLPlywoodLayupStructureClass;
begin
  Result := ChildNodes['PlywoodLayupStructure'] as IXMLPlywoodLayupStructureClass;
end;

function TXMLWoodPanelProductsClass.Get_Edge: IXMLEdgeClassList;
begin
  Result := FEdge;
end;

function TXMLWoodPanelProductsClass.Get_Side: IXMLPlywoodSideClassList;
begin
  Result := FSide;
end;

function TXMLWoodPanelProductsClass.Get_PressureTreatment: IXMLPressureTreatmentClass;
begin
  Result := ChildNodes['PressureTreatment'] as IXMLPressureTreatmentClass;
end;

function TXMLWoodPanelProductsClass.Get_FireTreatment: IXMLFireTreatmentClass;
begin
  Result := ChildNodes['FireTreatment'] as IXMLFireTreatmentClass;
end;

function TXMLWoodPanelProductsClass.Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
begin
  Result := FSupplemental;
end;

function TXMLWoodPanelProductsClass.Get_Brand: UnicodeString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLWoodPanelProductsClass.Set_Brand(Value: UnicodeString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

function TXMLWoodPanelProductsClass.Get_GradeAgency: UnicodeString;
begin
  Result := ChildNodes['GradeAgency'].Text;
end;

procedure TXMLWoodPanelProductsClass.Set_GradeAgency(Value: UnicodeString);
begin
  ChildNodes['GradeAgency'].NodeValue := Value;
end;

function TXMLWoodPanelProductsClass.Get_GradeStamp: IXMLConstructionGradeStampClass;
begin
  Result := ChildNodes['GradeStamp'] as IXMLConstructionGradeStampClass;
end;

function TXMLWoodPanelProductsClass.Get_ClassIdentifier: IXMLIdentifierS60;
begin
  Result := ChildNodes['ClassIdentifier'] as IXMLIdentifierS60;
end;

function TXMLWoodPanelProductsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLWoodPanelProductsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

{ TXMLPlywoodLayupStructureClass }

procedure TXMLPlywoodLayupStructureClass.AfterConstruction;
begin
  RegisterChildNode('PlywoodPlySet', TXMLPlywoodPlySetClass);
  RegisterChildNode('GlueExposure', TXMLWoodPanelGlueExposureClass);
  FGlueExposure := CreateCollection(TXMLWoodPanelGlueExposureClassList, IXMLWoodPanelGlueExposureClass, 'GlueExposure') as IXMLWoodPanelGlueExposureClassList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPlywoodLayupStructureClass.Get_PlywoodPlySet: IXMLPlywoodPlySetClass;
begin
  Result := ChildNodes['PlywoodPlySet'] as IXMLPlywoodPlySetClass;
end;

function TXMLPlywoodLayupStructureClass.Get_GlueExposure: IXMLWoodPanelGlueExposureClassList;
begin
  Result := FGlueExposure;
end;

function TXMLPlywoodLayupStructureClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPlywoodPlySetClass }

procedure TXMLPlywoodPlySetClass.AfterConstruction;
begin
  RegisterChildNode('PlywoodPlyCharacteristics', TXMLPlywoodPlyCharacteristicsClass);
  FPlywoodPlyCharacteristics := CreateCollection(TXMLPlywoodPlyCharacteristicsClassList, IXMLPlywoodPlyCharacteristicsClass, 'PlywoodPlyCharacteristics') as IXMLPlywoodPlyCharacteristicsClassList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPlywoodPlySetClass.Get_NumberOfPlies: LongWord;
begin
  Result := ChildNodes['NumberOfPlies'].NodeValue;
end;

procedure TXMLPlywoodPlySetClass.Set_NumberOfPlies(Value: LongWord);
begin
  ChildNodes['NumberOfPlies'].NodeValue := Value;
end;

function TXMLPlywoodPlySetClass.Get_PlywoodPlyCharacteristics: IXMLPlywoodPlyCharacteristicsClassList;
begin
  Result := FPlywoodPlyCharacteristics;
end;

function TXMLPlywoodPlySetClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPlywoodPlyCharacteristicsClass }

procedure TXMLPlywoodPlyCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('WoodPanelChracteristics', TXMLWoodPanelCharacteristicsClass);
  inherited;
end;

function TXMLPlywoodPlyCharacteristicsClass.Get_PlyNumber: LongWord;
begin
  Result := ChildNodes['PlyNumber'].NodeValue;
end;

procedure TXMLPlywoodPlyCharacteristicsClass.Set_PlyNumber(Value: LongWord);
begin
  ChildNodes['PlyNumber'].NodeValue := Value;
end;

function TXMLPlywoodPlyCharacteristicsClass.Get_WoodPanelChracteristics: IXMLWoodPanelCharacteristicsClass;
begin
  Result := ChildNodes['WoodPanelChracteristics'] as IXMLWoodPanelCharacteristicsClass;
end;

{ TXMLPlywoodPlyCharacteristicsClassList }

function TXMLPlywoodPlyCharacteristicsClassList.Add: IXMLPlywoodPlyCharacteristicsClass;
begin
  Result := AddItem(-1) as IXMLPlywoodPlyCharacteristicsClass;
end;

function TXMLPlywoodPlyCharacteristicsClassList.Insert(const Index: Integer): IXMLPlywoodPlyCharacteristicsClass;
begin
  Result := AddItem(Index) as IXMLPlywoodPlyCharacteristicsClass;
end;

function TXMLPlywoodPlyCharacteristicsClassList.Get_Item(Index: Integer): IXMLPlywoodPlyCharacteristicsClass;
begin
  Result := List[Index] as IXMLPlywoodPlyCharacteristicsClass;
end;

{ TXMLWoodPanelCharacteristicsClass }

procedure TXMLWoodPanelCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('WoodPanelSpecies', TXMLLumberSpeciesClass);
  RegisterChildNode('PlywoodPlyGrade', TXMLPlywoodPlyGrade);
  RegisterChildNode('Thickness', TXMLDimensionThicknessClass);
  RegisterChildNode('Width', TXMLDimensionConstructionClass);
  RegisterChildNode('Length', TXMLDimensionConstructionClass);
  FWoodPanelSpecies := CreateCollection(TXMLLumberSpeciesClassList, IXMLLumberSpeciesClass, 'WoodPanelSpecies') as IXMLLumberSpeciesClassList;
  FThickness := CreateCollection(TXMLDimensionThicknessClassList, IXMLDimensionThicknessClass, 'Thickness') as IXMLDimensionThicknessClassList;
  FWidth := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Width') as IXMLDimensionConstructionClassList;
  FLength := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Length') as IXMLDimensionConstructionClassList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLWoodPanelCharacteristicsClass.Get_OrientationWithFaceWoodPanelGrain: UnicodeString;
begin
  Result := AttributeNodes['OrientationWithFaceWoodPanelGrain'].Text;
end;

procedure TXMLWoodPanelCharacteristicsClass.Set_OrientationWithFaceWoodPanelGrain(Value: UnicodeString);
begin
  SetAttribute('OrientationWithFaceWoodPanelGrain', Value);
end;

function TXMLWoodPanelCharacteristicsClass.Get_WoodPanelSpecies: IXMLLumberSpeciesClassList;
begin
  Result := FWoodPanelSpecies;
end;

function TXMLWoodPanelCharacteristicsClass.Get_PlywoodPlyGrade: IXMLPlywoodPlyGrade;
begin
  Result := ChildNodes['PlywoodPlyGrade'] as IXMLPlywoodPlyGrade;
end;

function TXMLWoodPanelCharacteristicsClass.Get_WoodPanelManufacturingMethod: UnicodeString;
begin
  Result := ChildNodes['WoodPanelManufacturingMethod'].Text;
end;

procedure TXMLWoodPanelCharacteristicsClass.Set_WoodPanelManufacturingMethod(Value: UnicodeString);
begin
  ChildNodes['WoodPanelManufacturingMethod'].NodeValue := Value;
end;

function TXMLWoodPanelCharacteristicsClass.Get_Thickness: IXMLDimensionThicknessClassList;
begin
  Result := FThickness;
end;

function TXMLWoodPanelCharacteristicsClass.Get_Width: IXMLDimensionConstructionClassList;
begin
  Result := FWidth;
end;

function TXMLWoodPanelCharacteristicsClass.Get_Length: IXMLDimensionConstructionClassList;
begin
  Result := FLength;
end;

function TXMLWoodPanelCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPlywoodPlyGrade }

function TXMLPlywoodPlyGrade.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLPlywoodPlyGrade.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLWoodPanelGlueExposureClass }

procedure TXMLWoodPanelGlueExposureClass.AfterConstruction;
begin
  FGlueExposureID := CreateCollection(TXMLGlueExposureIDTypeList, IXMLNode, 'GlueExposureID') as IXMLGlueExposureIDTypeList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLWoodPanelGlueExposureClass.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLWoodPanelGlueExposureClass.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLWoodPanelGlueExposureClass.Get_GlueExposureID: IXMLGlueExposureIDTypeList;
begin
  Result := FGlueExposureID;
end;

function TXMLWoodPanelGlueExposureClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLWoodPanelGlueExposureClassList }

function TXMLWoodPanelGlueExposureClassList.Add: IXMLWoodPanelGlueExposureClass;
begin
  Result := AddItem(-1) as IXMLWoodPanelGlueExposureClass;
end;

function TXMLWoodPanelGlueExposureClassList.Insert(const Index: Integer): IXMLWoodPanelGlueExposureClass;
begin
  Result := AddItem(Index) as IXMLWoodPanelGlueExposureClass;
end;

function TXMLWoodPanelGlueExposureClassList.Get_Item(Index: Integer): IXMLWoodPanelGlueExposureClass;
begin
  Result := List[Index] as IXMLWoodPanelGlueExposureClass;
end;

{ TXMLEdgeClass }

procedure TXMLEdgeClass.AfterConstruction;
begin
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLEdgeClass.Get_EdgeType: UnicodeString;
begin
  Result := AttributeNodes['EdgeType'].Text;
end;

procedure TXMLEdgeClass.Set_EdgeType(Value: UnicodeString);
begin
  SetAttribute('EdgeType', Value);
end;

function TXMLEdgeClass.Get_EdgeLocation: UnicodeString;
begin
  Result := AttributeNodes['EdgeLocation'].Text;
end;

procedure TXMLEdgeClass.Set_EdgeLocation(Value: UnicodeString);
begin
  SetAttribute('EdgeLocation', Value);
end;

function TXMLEdgeClass.Get_EdgeMachiningProfile: UnicodeString;
begin
  Result := ChildNodes['EdgeMachiningProfile'].Text;
end;

procedure TXMLEdgeClass.Set_EdgeMachiningProfile(Value: UnicodeString);
begin
  ChildNodes['EdgeMachiningProfile'].NodeValue := Value;
end;

function TXMLEdgeClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLEdgeClassList }

function TXMLEdgeClassList.Add: IXMLEdgeClass;
begin
  Result := AddItem(-1) as IXMLEdgeClass;
end;

function TXMLEdgeClassList.Insert(const Index: Integer): IXMLEdgeClass;
begin
  Result := AddItem(Index) as IXMLEdgeClass;
end;

function TXMLEdgeClassList.Get_Item(Index: Integer): IXMLEdgeClass;
begin
  Result := List[Index] as IXMLEdgeClass;
end;

{ TXMLPlywoodSideClass }

procedure TXMLPlywoodSideClass.AfterConstruction;
begin
  RegisterChildNode('Surface', TXMLPlywoodOSBSurfaceClass);
  RegisterChildNode('PlywoodPlyGrade', TXMLPlywoodPlyGrade);
  RegisterChildNode('Embossing', TXMLEmbossing);
  RegisterChildNode('PlywoodMachining', TXMLPlywoodMachining);
  inherited;
end;

function TXMLPlywoodSideClass.Get_TopSide: UnicodeString;
begin
  Result := AttributeNodes['TopSide'].Text;
end;

procedure TXMLPlywoodSideClass.Set_TopSide(Value: UnicodeString);
begin
  SetAttribute('TopSide', Value);
end;

function TXMLPlywoodSideClass.Get_Surface: IXMLPlywoodOSBSurfaceClass;
begin
  Result := ChildNodes['Surface'] as IXMLPlywoodOSBSurfaceClass;
end;

function TXMLPlywoodSideClass.Get_PlywoodPlyGrade: IXMLPlywoodPlyGrade;
begin
  Result := ChildNodes['PlywoodPlyGrade'] as IXMLPlywoodPlyGrade;
end;

function TXMLPlywoodSideClass.Get_Embossing: IXMLEmbossing;
begin
  Result := ChildNodes['Embossing'] as IXMLEmbossing;
end;

function TXMLPlywoodSideClass.Get_PlywoodMachining: IXMLPlywoodMachining;
begin
  Result := ChildNodes['PlywoodMachining'] as IXMLPlywoodMachining;
end;

{ TXMLPlywoodSideClassList }

function TXMLPlywoodSideClassList.Add: IXMLPlywoodSideClass;
begin
  Result := AddItem(-1) as IXMLPlywoodSideClass;
end;

function TXMLPlywoodSideClassList.Insert(const Index: Integer): IXMLPlywoodSideClass;
begin
  Result := AddItem(Index) as IXMLPlywoodSideClass;
end;

function TXMLPlywoodSideClassList.Get_Item(Index: Integer): IXMLPlywoodSideClass;
begin
  Result := List[Index] as IXMLPlywoodSideClass;
end;

{ TXMLPlywoodMachining }

function TXMLPlywoodMachining.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLPlywoodMachining.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLConstructionPackagesAndPreFabPanels }

procedure TXMLConstructionPackagesAndPreFabPanels.AfterConstruction;
begin
  RegisterChildNode('Floor', TXMLFloor);
  RegisterChildNode('Wall', TXMLWall);
  RegisterChildNode('Roof', TXMLRoof);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Floor: IXMLFloor;
begin
  Result := ChildNodes['Floor'] as IXMLFloor;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Wall: IXMLWall;
begin
  Result := ChildNodes['Wall'] as IXMLWall;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Roof: IXMLRoof;
begin
  Result := ChildNodes['Roof'] as IXMLRoof;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLFloor }

function TXMLFloor.Get_FloorPanel: UnicodeString;
begin
  Result := ChildNodes['FloorPanel'].Text;
end;

procedure TXMLFloor.Set_FloorPanel(Value: UnicodeString);
begin
  ChildNodes['FloorPanel'].NodeValue := Value;
end;

function TXMLFloor.Get_FloorPackage: UnicodeString;
begin
  Result := ChildNodes['FloorPackage'].Text;
end;

procedure TXMLFloor.Set_FloorPackage(Value: UnicodeString);
begin
  ChildNodes['FloorPackage'].NodeValue := Value;
end;

function TXMLFloor.Get_FloorTruss: UnicodeString;
begin
  Result := ChildNodes['FloorTruss'].Text;
end;

procedure TXMLFloor.Set_FloorTruss(Value: UnicodeString);
begin
  ChildNodes['FloorTruss'].NodeValue := Value;
end;

{ TXMLWall }

function TXMLWall.Get_WallPanel: UnicodeString;
begin
  Result := ChildNodes['WallPanel'].Text;
end;

procedure TXMLWall.Set_WallPanel(Value: UnicodeString);
begin
  ChildNodes['WallPanel'].NodeValue := Value;
end;

function TXMLWall.Get_WallPackage: UnicodeString;
begin
  Result := ChildNodes['WallPackage'].Text;
end;

procedure TXMLWall.Set_WallPackage(Value: UnicodeString);
begin
  ChildNodes['WallPackage'].NodeValue := Value;
end;

{ TXMLRoof }

function TXMLRoof.Get_RoofPanel: UnicodeString;
begin
  Result := ChildNodes['RoofPanel'].Text;
end;

procedure TXMLRoof.Set_RoofPanel(Value: UnicodeString);
begin
  ChildNodes['RoofPanel'].NodeValue := Value;
end;

function TXMLRoof.Get_RoofPackage: UnicodeString;
begin
  Result := ChildNodes['RoofPackage'].Text;
end;

procedure TXMLRoof.Set_RoofPackage(Value: UnicodeString);
begin
  ChildNodes['RoofPackage'].NodeValue := Value;
end;

function TXMLRoof.Get_RoofTruss: UnicodeString;
begin
  Result := ChildNodes['RoofTruss'].Text;
end;

procedure TXMLRoof.Set_RoofTruss(Value: UnicodeString);
begin
  ChildNodes['RoofTruss'].NodeValue := Value;
end;

{ TXMLOtherProducts }

procedure TXMLOtherProducts.AfterConstruction;
begin
  RegisterChildNode('OtherProductsItemCodeInfo', TXMLCodeInfo);
  RegisterChildNode('OtherProductsClass', TXMLOtherProductsClass);
  RegisterChildNode('OtherProductsCharacteristics', TXMLOtherProductsCharacteristics);
  RegisterChildNode('OtherProductsPackagingCharacteristics', TXMLOtherProductsPackagingCharacteristics);
  RegisterChildNode('OtherProductsProcessingCharacteristics', TXMLOtherProductsProcessingCharacteristics);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FOtherProductsClass := CreateCollection(TXMLOtherProductsClassList, IXMLOtherProductsClass, 'OtherProductsClass') as IXMLOtherProductsClassList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLOtherProducts.Get_OtherProductsType: UnicodeString;
begin
  Result := AttributeNodes['OtherProductsType'].Text;
end;

procedure TXMLOtherProducts.Set_OtherProductsType(Value: UnicodeString);
begin
  SetAttribute('OtherProductsType', Value);
end;

function TXMLOtherProducts.Get_OtherProductsItemType: UnicodeString;
begin
  Result := AttributeNodes['OtherProductsItemType'].Text;
end;

procedure TXMLOtherProducts.Set_OtherProductsItemType(Value: UnicodeString);
begin
  SetAttribute('OtherProductsItemType', Value);
end;

function TXMLOtherProducts.Get_OtherProductsItemCodeInfo: IXMLCodeInfo;
begin
  Result := ChildNodes['OtherProductsItemCodeInfo'] as IXMLCodeInfo;
end;

function TXMLOtherProducts.Get_OtherProductsClass: IXMLOtherProductsClassList;
begin
  Result := FOtherProductsClass;
end;

function TXMLOtherProducts.Get_OtherProductsCharacteristics: IXMLOtherProductsCharacteristics;
begin
  Result := ChildNodes['OtherProductsCharacteristics'] as IXMLOtherProductsCharacteristics;
end;

function TXMLOtherProducts.Get_OtherProductsPackagingCharacteristics: IXMLOtherProductsPackagingCharacteristics;
begin
  Result := ChildNodes['OtherProductsPackagingCharacteristics'] as IXMLOtherProductsPackagingCharacteristics;
end;

function TXMLOtherProducts.Get_OtherProductsProcessingCharacteristics: IXMLOtherProductsProcessingCharacteristics;
begin
  Result := ChildNodes['OtherProductsProcessingCharacteristics'] as IXMLOtherProductsProcessingCharacteristics;
end;

function TXMLOtherProducts.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLOtherProductsClass }

procedure TXMLOtherProductsClass.AfterConstruction;
begin
  RegisterChildNode('ClassCodeInfo', TXMLCodeInfo);
  inherited;
end;

function TXMLOtherProductsClass.Get_OtherProductsClassType: UnicodeString;
begin
  Result := AttributeNodes['OtherProductsClassType'].Text;
end;

procedure TXMLOtherProductsClass.Set_OtherProductsClassType(Value: UnicodeString);
begin
  SetAttribute('OtherProductsClassType', Value);
end;

function TXMLOtherProductsClass.Get_ClassCodeInfo: IXMLCodeInfo;
begin
  Result := ChildNodes['ClassCodeInfo'] as IXMLCodeInfo;
end;

{ TXMLOtherProductsClassList }

function TXMLOtherProductsClassList.Add: IXMLOtherProductsClass;
begin
  Result := AddItem(-1) as IXMLOtherProductsClass;
end;

function TXMLOtherProductsClassList.Insert(const Index: Integer): IXMLOtherProductsClass;
begin
  Result := AddItem(Index) as IXMLOtherProductsClass;
end;

function TXMLOtherProductsClassList.Get_Item(Index: Integer): IXMLOtherProductsClass;
begin
  Result := List[Index] as IXMLOtherProductsClass;
end;

{ TXMLOtherProductsCharacteristics }

procedure TXMLOtherProductsCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PropertyValue', TXMLPropertyValue);
  ItemTag := 'PropertyValue';
  ItemInterface := IXMLPropertyValue;
  inherited;
end;

function TXMLOtherProductsCharacteristics.Get_PropertyValue(Index: Integer): IXMLPropertyValue;
begin
  Result := List[Index] as IXMLPropertyValue;
end;

function TXMLOtherProductsCharacteristics.Add: IXMLPropertyValue;
begin
  Result := AddItem(-1) as IXMLPropertyValue;
end;

function TXMLOtherProductsCharacteristics.Insert(const Index: Integer): IXMLPropertyValue;
begin
  Result := AddItem(Index) as IXMLPropertyValue;
end;

{ TXMLOtherProductsPackagingCharacteristics }

procedure TXMLOtherProductsPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingCodeInfo', TXMLCodeInfo);
  ItemTag := 'PackagingCodeInfo';
  ItemInterface := IXMLCodeInfo;
  inherited;
end;

function TXMLOtherProductsPackagingCharacteristics.Get_PackagingCodeInfo(Index: Integer): IXMLCodeInfo;
begin
  Result := List[Index] as IXMLCodeInfo;
end;

function TXMLOtherProductsPackagingCharacteristics.Add: IXMLCodeInfo;
begin
  Result := AddItem(-1) as IXMLCodeInfo;
end;

function TXMLOtherProductsPackagingCharacteristics.Insert(const Index: Integer): IXMLCodeInfo;
begin
  Result := AddItem(Index) as IXMLCodeInfo;
end;

{ TXMLOtherProductsProcessingCharacteristics }

procedure TXMLOtherProductsProcessingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ProcessingCodeInfo', TXMLCodeInfo);
  ItemTag := 'ProcessingCodeInfo';
  ItemInterface := IXMLCodeInfo;
  inherited;
end;

function TXMLOtherProductsProcessingCharacteristics.Get_ProcessingCodeInfo(Index: Integer): IXMLCodeInfo;
begin
  Result := List[Index] as IXMLCodeInfo;
end;

function TXMLOtherProductsProcessingCharacteristics.Add: IXMLCodeInfo;
begin
  Result := AddItem(-1) as IXMLCodeInfo;
end;

function TXMLOtherProductsProcessingCharacteristics.Insert(const Index: Integer): IXMLCodeInfo;
begin
  Result := AddItem(Index) as IXMLCodeInfo;
end;

{ TXMLInvoiceLineBaseAmountInformation }

procedure TXMLInvoiceLineBaseAmountInformation.AfterConstruction;
begin
  RegisterChildNode('PriceDetails', TXMLPriceDetails);
  RegisterChildNode('InvoiceLineBaseAmount', TXMLInvoiceLineBaseAmount);
  inherited;
end;

function TXMLInvoiceLineBaseAmountInformation.Get_PriceDetails: IXMLPriceDetails;
begin
  Result := ChildNodes['PriceDetails'] as IXMLPriceDetails;
end;

function TXMLInvoiceLineBaseAmountInformation.Get_InvoiceLineBaseAmount: IXMLInvoiceLineBaseAmount;
begin
  Result := ChildNodes['InvoiceLineBaseAmount'] as IXMLInvoiceLineBaseAmount;
end;

{ TXMLPriceDetails }

procedure TXMLPriceDetails.AfterConstruction;
begin
  RegisterChildNode('PricePerUnit', TXMLPricePerUnit);
  RegisterChildNode('InformationalPricePerUnit', TXMLInformationalPricePerUnit);
  RegisterChildNode('ExchangeRate', TXMLExchangeRate);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('GeneralLedgerAccount', TXMLGeneralLedgerAccount);
  RegisterChildNode('PriceSpecification', TXMLPriceSpecification);
  FInformationalPricePerUnit := CreateCollection(TXMLInformationalPricePerUnitList, IXMLInformationalPricePerUnit, 'InformationalPricePerUnit') as IXMLInformationalPricePerUnitList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  FPriceSpecification := CreateCollection(TXMLPriceSpecificationList, IXMLPriceSpecification, 'PriceSpecification') as IXMLPriceSpecificationList;
  inherited;
end;

function TXMLPriceDetails.Get_PriceQuantityBasis: UnicodeString;
begin
  Result := AttributeNodes['PriceQuantityBasis'].Text;
end;

procedure TXMLPriceDetails.Set_PriceQuantityBasis(Value: UnicodeString);
begin
  SetAttribute('PriceQuantityBasis', Value);
end;

function TXMLPriceDetails.Get_PriceTaxBasis: UnicodeString;
begin
  Result := AttributeNodes['PriceTaxBasis'].Text;
end;

procedure TXMLPriceDetails.Set_PriceTaxBasis(Value: UnicodeString);
begin
  SetAttribute('PriceTaxBasis', Value);
end;

function TXMLPriceDetails.Get_PricePerUnit: IXMLPricePerUnit;
begin
  Result := ChildNodes['PricePerUnit'] as IXMLPricePerUnit;
end;

function TXMLPriceDetails.Get_InformationalPricePerUnit: IXMLInformationalPricePerUnitList;
begin
  Result := FInformationalPricePerUnit;
end;

function TXMLPriceDetails.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLPriceDetails.Get_ExchangeRate: IXMLExchangeRate;
begin
  Result := ChildNodes['ExchangeRate'] as IXMLExchangeRate;
end;

function TXMLPriceDetails.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLPriceDetails.Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
begin
  Result := ChildNodes['GeneralLedgerAccount'] as IXMLGeneralLedgerAccount;
end;

function TXMLPriceDetails.Get_PriceSpecification: IXMLPriceSpecificationList;
begin
  Result := FPriceSpecification;
end;

{ TXMLPricePerUnit }

procedure TXMLPricePerUnit.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLPricePerUnit.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLPricePerUnit.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLPricePerUnit.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLPricePerUnit.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLInformationalPricePerUnit }

procedure TXMLInformationalPricePerUnit.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLInformationalPricePerUnit.Get_InformationalPricePerUnitType: UnicodeString;
begin
  Result := AttributeNodes['InformationalPricePerUnitType'].Text;
end;

procedure TXMLInformationalPricePerUnit.Set_InformationalPricePerUnitType(Value: UnicodeString);
begin
  SetAttribute('InformationalPricePerUnitType', Value);
end;

function TXMLInformationalPricePerUnit.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLInformationalPricePerUnitList }

function TXMLInformationalPricePerUnitList.Add: IXMLInformationalPricePerUnit;
begin
  Result := AddItem(-1) as IXMLInformationalPricePerUnit;
end;

function TXMLInformationalPricePerUnitList.Insert(const Index: Integer): IXMLInformationalPricePerUnit;
begin
  Result := AddItem(Index) as IXMLInformationalPricePerUnit;
end;

function TXMLInformationalPricePerUnitList.Get_Item(Index: Integer): IXMLInformationalPricePerUnit;
begin
  Result := List[Index] as IXMLInformationalPricePerUnit;
end;

{ TXMLExchangeRate }

procedure TXMLExchangeRate.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('MinCurrencyValue', TXMLMinCurrencyValue);
  RegisterChildNode('MaxCurrencyValue', TXMLMaxCurrencyValue);
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLExchangeRate.Get_ExchangeRateType: UnicodeString;
begin
  Result := AttributeNodes['ExchangeRateType'].Text;
end;

procedure TXMLExchangeRate.Set_ExchangeRateType(Value: UnicodeString);
begin
  SetAttribute('ExchangeRateType', Value);
end;

function TXMLExchangeRate.Get_CurrencyFromType: UnicodeString;
begin
  Result := AttributeNodes['CurrencyFromType'].Text;
end;

procedure TXMLExchangeRate.Set_CurrencyFromType(Value: UnicodeString);
begin
  SetAttribute('CurrencyFromType', Value);
end;

function TXMLExchangeRate.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLExchangeRate.Get_MinCurrencyValue: IXMLMinCurrencyValue;
begin
  Result := ChildNodes['MinCurrencyValue'] as IXMLMinCurrencyValue;
end;

function TXMLExchangeRate.Get_MaxCurrencyValue: IXMLMaxCurrencyValue;
begin
  Result := ChildNodes['MaxCurrencyValue'] as IXMLMaxCurrencyValue;
end;

function TXMLExchangeRate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

{ TXMLMinCurrencyValue }

function TXMLMinCurrencyValue.Get_CurrencyType: UnicodeString;
begin
  Result := AttributeNodes['CurrencyType'].Text;
end;

procedure TXMLMinCurrencyValue.Set_CurrencyType(Value: UnicodeString);
begin
  SetAttribute('CurrencyType', Value);
end;

{ TXMLMaxCurrencyValue }

function TXMLMaxCurrencyValue.Get_CurrencyType: UnicodeString;
begin
  Result := AttributeNodes['CurrencyType'].Text;
end;

procedure TXMLMaxCurrencyValue.Set_CurrencyType(Value: UnicodeString);
begin
  SetAttribute('CurrencyType', Value);
end;

{ TXMLMonetaryAdjustment }

procedure TXMLMonetaryAdjustment.AfterConstruction;
begin
  RegisterChildNode('MonetaryAdjustmentComponent', TXMLCodeInfo);
  RegisterChildNode('MonetaryAdjustmentStartAmount', TXMLMonetaryAdjustmentStartAmount);
  RegisterChildNode('MonetaryAdjustmentStartQuantity', TXMLMonetaryAdjustmentStartQuantity);
  RegisterChildNode('PriceAdjustment', TXMLPriceAdjustment);
  RegisterChildNode('FlatAmountAdjustment', TXMLFlatAmountAdjustment);
  RegisterChildNode('TaxAdjustment', TXMLTaxAdjustment);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  RegisterChildNode('GeneralLedgerAccount', TXMLGeneralLedgerAccount);
  RegisterChildNode('MonetaryAdjustmentAmount', TXMLMonetaryAdjustmentAmount);
  RegisterChildNode('MonetaryAdjustmentReference', TXMLMonetaryAdjustmentReference);
  FMonetaryAdjustmentComponent := CreateCollection(TXMLCodeInfoList, IXMLCodeInfo, 'MonetaryAdjustmentComponent') as IXMLCodeInfoList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FMonetaryAdjustmentReference := CreateCollection(TXMLMonetaryAdjustmentReferenceList, IXMLMonetaryAdjustmentReference, 'MonetaryAdjustmentReference') as IXMLMonetaryAdjustmentReferenceList;
  inherited;
end;

function TXMLMonetaryAdjustment.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLMonetaryAdjustment.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentLine: LongWord;
begin
  Result := ChildNodes['MonetaryAdjustmentLine'].NodeValue;
end;

procedure TXMLMonetaryAdjustment.Set_MonetaryAdjustmentLine(Value: LongWord);
begin
  ChildNodes['MonetaryAdjustmentLine'].NodeValue := Value;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentComponent: IXMLCodeInfoList;
begin
  Result := FMonetaryAdjustmentComponent;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount;
begin
  Result := ChildNodes['MonetaryAdjustmentStartAmount'] as IXMLMonetaryAdjustmentStartAmount;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentStartQuantity: IXMLMonetaryAdjustmentStartQuantity;
begin
  Result := ChildNodes['MonetaryAdjustmentStartQuantity'] as IXMLMonetaryAdjustmentStartQuantity;
end;

function TXMLMonetaryAdjustment.Get_PriceAdjustment: IXMLPriceAdjustment;
begin
  Result := ChildNodes['PriceAdjustment'] as IXMLPriceAdjustment;
end;

function TXMLMonetaryAdjustment.Get_FlatAmountAdjustment: IXMLFlatAmountAdjustment;
begin
  Result := ChildNodes['FlatAmountAdjustment'] as IXMLFlatAmountAdjustment;
end;

function TXMLMonetaryAdjustment.Get_TaxAdjustment: IXMLTaxAdjustment;
begin
  Result := ChildNodes['TaxAdjustment'] as IXMLTaxAdjustment;
end;

function TXMLMonetaryAdjustment.Get_InformationalAmount: IXMLInformationalAmount;
begin
  Result := ChildNodes['InformationalAmount'] as IXMLInformationalAmount;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentReferenceLine: LongWord;
begin
  Result := ChildNodes['MonetaryAdjustmentReferenceLine'].NodeValue;
end;

procedure TXMLMonetaryAdjustment.Set_MonetaryAdjustmentReferenceLine(Value: LongWord);
begin
  ChildNodes['MonetaryAdjustmentReferenceLine'].NodeValue := Value;
end;

function TXMLMonetaryAdjustment.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLMonetaryAdjustment.Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
begin
  Result := ChildNodes['GeneralLedgerAccount'] as IXMLGeneralLedgerAccount;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount;
begin
  Result := ChildNodes['MonetaryAdjustmentAmount'] as IXMLMonetaryAdjustmentAmount;
end;

function TXMLMonetaryAdjustment.Get_AdjustmentTypeReason: UnicodeString;
begin
  Result := ChildNodes['AdjustmentTypeReason'].Text;
end;

procedure TXMLMonetaryAdjustment.Set_AdjustmentTypeReason(Value: UnicodeString);
begin
  ChildNodes['AdjustmentTypeReason'].NodeValue := Value;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentReference: IXMLMonetaryAdjustmentReferenceList;
begin
  Result := FMonetaryAdjustmentReference;
end;

{ TXMLMonetaryAdjustmentList }

function TXMLMonetaryAdjustmentList.Add: IXMLMonetaryAdjustment;
begin
  Result := AddItem(-1) as IXMLMonetaryAdjustment;
end;

function TXMLMonetaryAdjustmentList.Insert(const Index: Integer): IXMLMonetaryAdjustment;
begin
  Result := AddItem(Index) as IXMLMonetaryAdjustment;
end;

function TXMLMonetaryAdjustmentList.Get_Item(Index: Integer): IXMLMonetaryAdjustment;
begin
  Result := List[Index] as IXMLMonetaryAdjustment;
end;

{ TXMLMonetaryAdjustmentStartAmount }

procedure TXMLMonetaryAdjustmentStartAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLMonetaryAdjustmentStartAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLMonetaryAdjustmentStartQuantity }

function TXMLMonetaryAdjustmentStartQuantity.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLMonetaryAdjustmentStartQuantity.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLMonetaryAdjustmentStartQuantity.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLMonetaryAdjustmentStartQuantity.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLMonetaryAdjustmentStartQuantity.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLMonetaryAdjustmentStartQuantity.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLMonetaryAdjustmentStartQuantity.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLMonetaryAdjustmentStartQuantity.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLMonetaryAdjustmentStartQuantity.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLMonetaryAdjustmentStartQuantity.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLMonetaryAdjustmentStartQuantity.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLMonetaryAdjustmentStartQuantity.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

{ TXMLPriceAdjustment }

procedure TXMLPriceAdjustment.AfterConstruction;
begin
  RegisterChildNode('AdjustmentPercentage', TXMLMeasurement);
  RegisterChildNode('AdjustmentValue', TXMLPricePerUnit);
  inherited;
end;

function TXMLPriceAdjustment.Get_AdjustmentPercentage: IXMLMeasurement;
begin
  Result := ChildNodes['AdjustmentPercentage'] as IXMLMeasurement;
end;

function TXMLPriceAdjustment.Get_AdjustmentValue: IXMLPricePerUnit;
begin
  Result := ChildNodes['AdjustmentValue'] as IXMLPricePerUnit;
end;

{ TXMLFlatAmountAdjustment }

procedure TXMLFlatAmountAdjustment.AfterConstruction;
begin
  RegisterChildNode('AdjustmentPercentage', TXMLMeasurement);
  RegisterChildNode('AdjustmentFixedAmount', TXMLAdjustmentFixedAmount);
  inherited;
end;

function TXMLFlatAmountAdjustment.Get_AdjustmentPercentage: IXMLMeasurement;
begin
  Result := ChildNodes['AdjustmentPercentage'] as IXMLMeasurement;
end;

function TXMLFlatAmountAdjustment.Get_AdjustmentFixedAmount: IXMLAdjustmentFixedAmount;
begin
  Result := ChildNodes['AdjustmentFixedAmount'] as IXMLAdjustmentFixedAmount;
end;

{ TXMLAdjustmentFixedAmount }

procedure TXMLAdjustmentFixedAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLAdjustmentFixedAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTaxAdjustment }

procedure TXMLTaxAdjustment.AfterConstruction;
begin
  RegisterChildNode('TaxAmount', TXMLTaxAmount);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  FInformationalAmount := CreateCollection(TXMLInformationalAmountList, IXMLInformationalAmount, 'InformationalAmount') as IXMLInformationalAmountList;
  inherited;
end;

function TXMLTaxAdjustment.Get_TaxCategoryType: UnicodeString;
begin
  Result := AttributeNodes['TaxCategoryType'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxCategoryType(Value: UnicodeString);
begin
  SetAttribute('TaxCategoryType', Value);
end;

function TXMLTaxAdjustment.Get_TaxType: UnicodeString;
begin
  Result := AttributeNodes['TaxType'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxType(Value: UnicodeString);
begin
  SetAttribute('TaxType', Value);
end;

function TXMLTaxAdjustment.Get_TaxPercent: Double;
begin
  Result := XmlStrToFloatExt(ChildNodes['TaxPercent'].Text);
end;

procedure TXMLTaxAdjustment.Set_TaxPercent(Value: Double);
begin
  ChildNodes['TaxPercent'].NodeValue := Value;
end;

function TXMLTaxAdjustment.Get_TaxAmount: IXMLTaxAmount;
begin
  Result := ChildNodes['TaxAmount'] as IXMLTaxAmount;
end;

function TXMLTaxAdjustment.Get_TaxLocation: UnicodeString;
begin
  Result := ChildNodes['TaxLocation'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxLocation(Value: UnicodeString);
begin
  ChildNodes['TaxLocation'].NodeValue := Value;
end;

function TXMLTaxAdjustment.Get_InformationalAmount: IXMLInformationalAmountList;
begin
  Result := FInformationalAmount;
end;

{ TXMLTaxAmount }

procedure TXMLTaxAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTaxAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLInformationalAmount }

procedure TXMLInformationalAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('ExchangeRate', TXMLExchangeRate);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLInformationalAmount.Get_AmountType: UnicodeString;
begin
  Result := AttributeNodes['AmountType'].Text;
end;

procedure TXMLInformationalAmount.Set_AmountType(Value: UnicodeString);
begin
  SetAttribute('AmountType', Value);
end;

function TXMLInformationalAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLInformationalAmount.Get_ExchangeRate: IXMLExchangeRate;
begin
  Result := ChildNodes['ExchangeRate'] as IXMLExchangeRate;
end;

function TXMLInformationalAmount.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLInformationalAmountList }

function TXMLInformationalAmountList.Add: IXMLInformationalAmount;
begin
  Result := AddItem(-1) as IXMLInformationalAmount;
end;

function TXMLInformationalAmountList.Insert(const Index: Integer): IXMLInformationalAmount;
begin
  Result := AddItem(Index) as IXMLInformationalAmount;
end;

function TXMLInformationalAmountList.Get_Item(Index: Integer): IXMLInformationalAmount;
begin
  Result := List[Index] as IXMLInformationalAmount;
end;

{ TXMLGeneralLedgerAccount }

function TXMLGeneralLedgerAccount.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLGeneralLedgerAccount.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLMonetaryAdjustmentAmount }

procedure TXMLMonetaryAdjustmentAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLMonetaryAdjustmentAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLMonetaryAdjustmentReference }

function TXMLMonetaryAdjustmentReference.Get_MonetaryAdjustmentReferenceType: UnicodeString;
begin
  Result := AttributeNodes['MonetaryAdjustmentReferenceType'].Text;
end;

procedure TXMLMonetaryAdjustmentReference.Set_MonetaryAdjustmentReferenceType(Value: UnicodeString);
begin
  SetAttribute('MonetaryAdjustmentReferenceType', Value);
end;

function TXMLMonetaryAdjustmentReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLMonetaryAdjustmentReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLMonetaryAdjustmentReferenceList }

function TXMLMonetaryAdjustmentReferenceList.Add: IXMLMonetaryAdjustmentReference;
begin
  Result := AddItem(-1) as IXMLMonetaryAdjustmentReference;
end;

function TXMLMonetaryAdjustmentReferenceList.Insert(const Index: Integer): IXMLMonetaryAdjustmentReference;
begin
  Result := AddItem(Index) as IXMLMonetaryAdjustmentReference;
end;

function TXMLMonetaryAdjustmentReferenceList.Get_Item(Index: Integer): IXMLMonetaryAdjustmentReference;
begin
  Result := List[Index] as IXMLMonetaryAdjustmentReference;
end;

{ TXMLPriceSpecification }

procedure TXMLPriceSpecification.AfterConstruction;
begin
  RegisterChildNode('ProductIdentification', TXMLProductIdentification);
  RegisterChildNode('BookSpecIdentification', TXMLBookSpecIdentification);
  inherited;
end;

function TXMLPriceSpecification.Get_ProductIdentification: IXMLProductIdentification;
begin
  Result := ChildNodes['ProductIdentification'] as IXMLProductIdentification;
end;

function TXMLPriceSpecification.Get_BookSpecIdentification: IXMLBookSpecIdentification;
begin
  Result := ChildNodes['BookSpecIdentification'] as IXMLBookSpecIdentification;
end;

{ TXMLPriceSpecificationList }

function TXMLPriceSpecificationList.Add: IXMLPriceSpecification;
begin
  Result := AddItem(-1) as IXMLPriceSpecification;
end;

function TXMLPriceSpecificationList.Insert(const Index: Integer): IXMLPriceSpecification;
begin
  Result := AddItem(Index) as IXMLPriceSpecification;
end;

function TXMLPriceSpecificationList.Get_Item(Index: Integer): IXMLPriceSpecification;
begin
  Result := List[Index] as IXMLPriceSpecification;
end;

{ TXMLBookSpecIdentification }

procedure TXMLBookSpecIdentification.AfterConstruction;
begin
  RegisterChildNode('SpecIssueDate', TXMLSpecIssueDate);
  inherited;
end;

function TXMLBookSpecIdentification.Get_SpecificationNumber: UnicodeString;
begin
  Result := ChildNodes['SpecificationNumber'].Text;
end;

procedure TXMLBookSpecIdentification.Set_SpecificationNumber(Value: UnicodeString);
begin
  ChildNodes['SpecificationNumber'].NodeValue := Value;
end;

function TXMLBookSpecIdentification.Get_SpecVersion: UnicodeString;
begin
  Result := ChildNodes['SpecVersion'].Text;
end;

procedure TXMLBookSpecIdentification.Set_SpecVersion(Value: UnicodeString);
begin
  ChildNodes['SpecVersion'].NodeValue := Value;
end;

function TXMLBookSpecIdentification.Get_SpecIssueDate: IXMLSpecIssueDate;
begin
  Result := ChildNodes['SpecIssueDate'] as IXMLSpecIssueDate;
end;

{ TXMLSpecIssueDate }

procedure TXMLSpecIssueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLSpecIssueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLSpecIssueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLSpecIssueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLInvoiceLineBaseAmount }

procedure TXMLInvoiceLineBaseAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLInvoiceLineBaseAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLChargeInformation }

procedure TXMLChargeInformation.AfterConstruction;
begin
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('CostComponent', TXMLCostComponent);
  RegisterChildNode('PriceDetails', TXMLPriceDetails);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('QuantityInformation', TXMLQuantityInformation);
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  RegisterChildNode('TransportVehicleCharacteristics', TXMLTransportVehicleCharacteristics);
  RegisterChildNode('ChargeReference', TXMLChargeReference);
  RegisterChildNode('ChargeAmount', TXMLChargeAmount);
  RegisterChildNode('ChargeNetAmount', TXMLChargeNetAmount);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FCostComponent := CreateCollection(TXMLCostComponentList, IXMLCostComponent, 'CostComponent') as IXMLCostComponentList;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  FTransportUnitCharacteristics := CreateCollection(TXMLTransportUnitCharacteristicsList, IXMLTransportUnitCharacteristics, 'TransportUnitCharacteristics') as IXMLTransportUnitCharacteristicsList;
  FChargeReference := CreateCollection(TXMLChargeReferenceList, IXMLChargeReference, 'ChargeReference') as IXMLChargeReferenceList;
  FInformationalAmount := CreateCollection(TXMLInformationalAmountList, IXMLInformationalAmount, 'InformationalAmount') as IXMLInformationalAmountList;
  inherited;
end;

function TXMLChargeInformation.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLChargeInformation.Get_CostComponent: IXMLCostComponentList;
begin
  Result := FCostComponent;
end;

function TXMLChargeInformation.Get_PriceDetails: IXMLPriceDetails;
begin
  Result := ChildNodes['PriceDetails'] as IXMLPriceDetails;
end;

function TXMLChargeInformation.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLChargeInformation.Get_QuantityInformation: IXMLQuantityInformation;
begin
  Result := ChildNodes['QuantityInformation'] as IXMLQuantityInformation;
end;

function TXMLChargeInformation.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
begin
  Result := FTransportUnitCharacteristics;
end;

function TXMLChargeInformation.Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
begin
  Result := ChildNodes['TransportVehicleCharacteristics'] as IXMLTransportVehicleCharacteristics;
end;

function TXMLChargeInformation.Get_ChargeReference: IXMLChargeReferenceList;
begin
  Result := FChargeReference;
end;

function TXMLChargeInformation.Get_ChargeAmount: IXMLChargeAmount;
begin
  Result := ChildNodes['ChargeAmount'] as IXMLChargeAmount;
end;

function TXMLChargeInformation.Get_ChargeNetAmount: IXMLChargeNetAmount;
begin
  Result := ChildNodes['ChargeNetAmount'] as IXMLChargeNetAmount;
end;

function TXMLChargeInformation.Get_InformationalAmount: IXMLInformationalAmountList;
begin
  Result := FInformationalAmount;
end;

{ TXMLChargeInformationList }

function TXMLChargeInformationList.Add: IXMLChargeInformation;
begin
  Result := AddItem(-1) as IXMLChargeInformation;
end;

function TXMLChargeInformationList.Insert(const Index: Integer): IXMLChargeInformation;
begin
  Result := AddItem(Index) as IXMLChargeInformation;
end;

function TXMLChargeInformationList.Get_Item(Index: Integer): IXMLChargeInformation;
begin
  Result := List[Index] as IXMLChargeInformation;
end;

{ TXMLCostComponent }

procedure TXMLCostComponent.AfterConstruction;
begin
  RegisterChildNode('CostComponentCode', TXMLCostComponentCode);
  RegisterChildNode('CostComponentCodeValue', TXMLCostComponentCodeValue);
  RegisterChildNode('CostComponentDescription', TXMLCostComponentDescription);
  FCostComponentDescription := CreateCollection(TXMLCostComponentDescriptionList, IXMLCostComponentDescription, 'CostComponentDescription') as IXMLCostComponentDescriptionList;
  inherited;
end;

function TXMLCostComponent.Get_CostComponentCode: IXMLCostComponentCode;
begin
  Result := ChildNodes['CostComponentCode'] as IXMLCostComponentCode;
end;

function TXMLCostComponent.Get_CostComponentCodeValue: IXMLCostComponentCodeValue;
begin
  Result := ChildNodes['CostComponentCodeValue'] as IXMLCostComponentCodeValue;
end;

function TXMLCostComponent.Get_CostComponentDescription: IXMLCostComponentDescriptionList;
begin
  Result := FCostComponentDescription;
end;

{ TXMLCostComponentList }

function TXMLCostComponentList.Add: IXMLCostComponent;
begin
  Result := AddItem(-1) as IXMLCostComponent;
end;

function TXMLCostComponentList.Insert(const Index: Integer): IXMLCostComponent;
begin
  Result := AddItem(Index) as IXMLCostComponent;
end;

function TXMLCostComponentList.Get_Item(Index: Integer): IXMLCostComponent;
begin
  Result := List[Index] as IXMLCostComponent;
end;

{ TXMLCostComponentCode }

function TXMLCostComponentCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCostComponentCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLCostComponentCodeValue }

procedure TXMLCostComponentCodeValue.AfterConstruction;
begin
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLCostComponentCodeValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLCostComponentCodeValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLCostComponentCodeValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

{ TXMLCostComponentDescription }

function TXMLCostComponentDescription.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLCostComponentDescription.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLCostComponentDescriptionList }

function TXMLCostComponentDescriptionList.Add: IXMLCostComponentDescription;
begin
  Result := AddItem(-1) as IXMLCostComponentDescription;
end;

function TXMLCostComponentDescriptionList.Insert(const Index: Integer): IXMLCostComponentDescription;
begin
  Result := AddItem(Index) as IXMLCostComponentDescription;
end;

function TXMLCostComponentDescriptionList.Get_Item(Index: Integer): IXMLCostComponentDescription;
begin
  Result := List[Index] as IXMLCostComponentDescription;
end;

{ TXMLTransportUnitCharacteristics }

procedure TXMLTransportUnitCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportUnitCode', TXMLTransportUnitCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  RegisterChildNode('TransportUnitMeasurements', TXMLTransportUnitMeasurements);
  RegisterChildNode('TransportUnitEquipment', TXMLTransportUnitEquipment);
  RegisterChildNode('TransportUnitIdentifier', TXMLTransportUnitIdentifier);
  RegisterChildNode('TransportUnitDetail', TXMLTransportUnitDetail);
  RegisterChildNode('TransportUnitReferenceIDInfo', TXMLTransportUnitReferenceIDInfo);
  FCodeDescription := CreateCollection(TXMLS255List, IXMLNode, 'CodeDescription') as IXMLS255List;
  FTransportUnitMeasurements := CreateCollection(TXMLTransportUnitMeasurementsList, IXMLTransportUnitMeasurements, 'TransportUnitMeasurements') as IXMLTransportUnitMeasurementsList;
  FTransportUnitEquipment := CreateCollection(TXMLTransportUnitEquipmentList, IXMLTransportUnitEquipment, 'TransportUnitEquipment') as IXMLTransportUnitEquipmentList;
  FTransportUnitIdentifier := CreateCollection(TXMLTransportUnitIdentifierList, IXMLTransportUnitIdentifier, 'TransportUnitIdentifier') as IXMLTransportUnitIdentifierList;
  FTransportUnitReferenceIDInfo := CreateCollection(TXMLTransportUnitReferenceIDInfoList, IXMLTransportUnitReferenceIDInfo, 'TransportUnitReferenceIDInfo') as IXMLTransportUnitReferenceIDInfoList;
  inherited;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitType: UnicodeString;
begin
  Result := AttributeNodes['TransportUnitType'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitType(Value: UnicodeString);
begin
  SetAttribute('TransportUnitType', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitVariable: UnicodeString;
begin
  Result := AttributeNodes['TransportUnitVariable'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitVariable(Value: UnicodeString);
begin
  SetAttribute('TransportUnitVariable', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitLevel: LongWord;
begin
  Result := AttributeNodes['TransportUnitLevel'].NodeValue;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitLevel(Value: LongWord);
begin
  SetAttribute('TransportUnitLevel', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitHorizontalOrder: LongWord;
begin
  Result := AttributeNodes['TransportUnitHorizontalOrder'].NodeValue;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitHorizontalOrder(Value: LongWord);
begin
  SetAttribute('TransportUnitHorizontalOrder', Value);
end;

function TXMLTransportUnitCharacteristics.Get_ChangesAllowed: UnicodeString;
begin
  Result := AttributeNodes['ChangesAllowed'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_ChangesAllowed(Value: UnicodeString);
begin
  SetAttribute('ChangesAllowed', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitCode: IXMLTransportUnitCode;
begin
  Result := ChildNodes['TransportUnitCode'] as IXMLTransportUnitCode;
end;

function TXMLTransportUnitCharacteristics.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLTransportUnitCharacteristics.Get_CodeDescription: IXMLS255List;
begin
  Result := FCodeDescription;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
begin
  Result := FTransportUnitMeasurements;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitEquipment: IXMLTransportUnitEquipmentList;
begin
  Result := FTransportUnitEquipment;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitCount: LongWord;
begin
  Result := ChildNodes['TransportUnitCount'].NodeValue;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitCount(Value: LongWord);
begin
  ChildNodes['TransportUnitCount'].NodeValue := Value;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
begin
  Result := FTransportUnitIdentifier;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitText: UnicodeString;
begin
  Result := ChildNodes['TransportUnitText'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitText(Value: UnicodeString);
begin
  ChildNodes['TransportUnitText'].NodeValue := Value;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitDetail: IXMLTransportUnitDetail;
begin
  Result := ChildNodes['TransportUnitDetail'] as IXMLTransportUnitDetail;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
begin
  Result := FTransportUnitReferenceIDInfo;
end;

{ TXMLTransportUnitCharacteristicsList }

function TXMLTransportUnitCharacteristicsList.Add: IXMLTransportUnitCharacteristics;
begin
  Result := AddItem(-1) as IXMLTransportUnitCharacteristics;
end;

function TXMLTransportUnitCharacteristicsList.Insert(const Index: Integer): IXMLTransportUnitCharacteristics;
begin
  Result := AddItem(Index) as IXMLTransportUnitCharacteristics;
end;

function TXMLTransportUnitCharacteristicsList.Get_Item(Index: Integer): IXMLTransportUnitCharacteristics;
begin
  Result := List[Index] as IXMLTransportUnitCharacteristics;
end;

{ TXMLTransportUnitCode }

function TXMLTransportUnitCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnitCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnitMeasurements }

procedure TXMLTransportUnitMeasurements.AfterConstruction;
begin
  RegisterChildNode('TransportUnitLength', TXMLMeasurement);
  RegisterChildNode('TransportUnitWidth', TXMLMeasurement);
  RegisterChildNode('TransportUnitHeight', TXMLMeasurement);
  RegisterChildNode('TransportUnitWeight', TXMLMeasurement);
  RegisterChildNode('TransportUnitCapacity', TXMLMeasurement);
  FTransportUnitCapacity := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'TransportUnitCapacity') as IXMLMeasurementList;
  inherited;
end;

function TXMLTransportUnitMeasurements.Get_AppliesTo: UnicodeString;
begin
  Result := AttributeNodes['AppliesTo'].Text;
end;

procedure TXMLTransportUnitMeasurements.Set_AppliesTo(Value: UnicodeString);
begin
  SetAttribute('AppliesTo', Value);
end;

function TXMLTransportUnitMeasurements.Get_IsLoaded: UnicodeString;
begin
  Result := AttributeNodes['IsLoaded'].Text;
end;

procedure TXMLTransportUnitMeasurements.Set_IsLoaded(Value: UnicodeString);
begin
  SetAttribute('IsLoaded', Value);
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitLength: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitLength'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitWidth: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitWidth'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitHeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitHeight'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitWeight'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitCapacity: IXMLMeasurementList;
begin
  Result := FTransportUnitCapacity;
end;

{ TXMLTransportUnitMeasurementsList }

function TXMLTransportUnitMeasurementsList.Add: IXMLTransportUnitMeasurements;
begin
  Result := AddItem(-1) as IXMLTransportUnitMeasurements;
end;

function TXMLTransportUnitMeasurementsList.Insert(const Index: Integer): IXMLTransportUnitMeasurements;
begin
  Result := AddItem(Index) as IXMLTransportUnitMeasurements;
end;

function TXMLTransportUnitMeasurementsList.Get_Item(Index: Integer): IXMLTransportUnitMeasurements;
begin
  Result := List[Index] as IXMLTransportUnitMeasurements;
end;

{ TXMLTransportUnitEquipment }

procedure TXMLTransportUnitEquipment.AfterConstruction;
begin
  RegisterChildNode('TransportUnitEquipmentCode', TXMLTransportUnitEquipmentCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  RegisterChildNode('TransportUnitEquipmentDescription', TXMLTransportUnitEquipmentDescription);
  RegisterChildNode('EquipmentPropertyValue', TXMLEquipmentPropertyValue);
  FTransportUnitEquipmentDescription := CreateCollection(TXMLTransportUnitEquipmentDescriptionList, IXMLTransportUnitEquipmentDescription, 'TransportUnitEquipmentDescription') as IXMLTransportUnitEquipmentDescriptionList;
  FEquipmentPropertyValue := CreateCollection(TXMLEquipmentPropertyValueList, IXMLEquipmentPropertyValue, 'EquipmentPropertyValue') as IXMLEquipmentPropertyValueList;
  inherited;
end;

function TXMLTransportUnitEquipment.Get_TransportUnitEquipmentType: UnicodeString;
begin
  Result := AttributeNodes['TransportUnitEquipmentType'].Text;
end;

procedure TXMLTransportUnitEquipment.Set_TransportUnitEquipmentType(Value: UnicodeString);
begin
  SetAttribute('TransportUnitEquipmentType', Value);
end;

function TXMLTransportUnitEquipment.Get_TransportUnitEquipmentCode: IXMLTransportUnitEquipmentCode;
begin
  Result := ChildNodes['TransportUnitEquipmentCode'] as IXMLTransportUnitEquipmentCode;
end;

function TXMLTransportUnitEquipment.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLTransportUnitEquipment.Get_TransportUnitEquipmentDescription: IXMLTransportUnitEquipmentDescriptionList;
begin
  Result := FTransportUnitEquipmentDescription;
end;

function TXMLTransportUnitEquipment.Get_EquipmentPropertyValue: IXMLEquipmentPropertyValueList;
begin
  Result := FEquipmentPropertyValue;
end;

{ TXMLTransportUnitEquipmentList }

function TXMLTransportUnitEquipmentList.Add: IXMLTransportUnitEquipment;
begin
  Result := AddItem(-1) as IXMLTransportUnitEquipment;
end;

function TXMLTransportUnitEquipmentList.Insert(const Index: Integer): IXMLTransportUnitEquipment;
begin
  Result := AddItem(Index) as IXMLTransportUnitEquipment;
end;

function TXMLTransportUnitEquipmentList.Get_Item(Index: Integer): IXMLTransportUnitEquipment;
begin
  Result := List[Index] as IXMLTransportUnitEquipment;
end;

{ TXMLTransportUnitEquipmentCode }

function TXMLTransportUnitEquipmentCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnitEquipmentCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnitEquipmentDescription }

function TXMLTransportUnitEquipmentDescription.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLTransportUnitEquipmentDescription.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLTransportUnitEquipmentDescriptionList }

function TXMLTransportUnitEquipmentDescriptionList.Add: IXMLTransportUnitEquipmentDescription;
begin
  Result := AddItem(-1) as IXMLTransportUnitEquipmentDescription;
end;

function TXMLTransportUnitEquipmentDescriptionList.Insert(const Index: Integer): IXMLTransportUnitEquipmentDescription;
begin
  Result := AddItem(Index) as IXMLTransportUnitEquipmentDescription;
end;

function TXMLTransportUnitEquipmentDescriptionList.Get_Item(Index: Integer): IXMLTransportUnitEquipmentDescription;
begin
  Result := List[Index] as IXMLTransportUnitEquipmentDescription;
end;

{ TXMLEquipmentPropertyValue }

procedure TXMLEquipmentPropertyValue.AfterConstruction;
begin
  RegisterChildNode('PositionOnItem', TXMLPositionOnItem);
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLEquipmentPropertyValue.Get_EquipmentPropertyType: UnicodeString;
begin
  Result := AttributeNodes['EquipmentPropertyType'].Text;
end;

procedure TXMLEquipmentPropertyValue.Set_EquipmentPropertyType(Value: UnicodeString);
begin
  SetAttribute('EquipmentPropertyType', Value);
end;

function TXMLEquipmentPropertyValue.Get_AppliesTo: UnicodeString;
begin
  Result := AttributeNodes['AppliesTo'].Text;
end;

procedure TXMLEquipmentPropertyValue.Set_AppliesTo(Value: UnicodeString);
begin
  SetAttribute('AppliesTo', Value);
end;

function TXMLEquipmentPropertyValue.Get_IsAverageValue: UnicodeString;
begin
  Result := AttributeNodes['IsAverageValue'].Text;
end;

procedure TXMLEquipmentPropertyValue.Set_IsAverageValue(Value: UnicodeString);
begin
  SetAttribute('IsAverageValue', Value);
end;

function TXMLEquipmentPropertyValue.Get_PositionOnItem: IXMLPositionOnItem;
begin
  Result := ChildNodes['PositionOnItem'] as IXMLPositionOnItem;
end;

function TXMLEquipmentPropertyValue.Get_BinaryValue: UnicodeString;
begin
  Result := ChildNodes['BinaryValue'].Text;
end;

procedure TXMLEquipmentPropertyValue.Set_BinaryValue(Value: UnicodeString);
begin
  ChildNodes['BinaryValue'].NodeValue := Value;
end;

function TXMLEquipmentPropertyValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLEquipmentPropertyValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLEquipmentPropertyValue.Get_DateTimeValue: UnicodeString;
begin
  Result := ChildNodes['DateTimeValue'].Text;
end;

procedure TXMLEquipmentPropertyValue.Set_DateTimeValue(Value: UnicodeString);
begin
  ChildNodes['DateTimeValue'].NodeValue := Value;
end;

function TXMLEquipmentPropertyValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLEquipmentPropertyValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLEquipmentPropertyValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

{ TXMLEquipmentPropertyValueList }

function TXMLEquipmentPropertyValueList.Add: IXMLEquipmentPropertyValue;
begin
  Result := AddItem(-1) as IXMLEquipmentPropertyValue;
end;

function TXMLEquipmentPropertyValueList.Insert(const Index: Integer): IXMLEquipmentPropertyValue;
begin
  Result := AddItem(Index) as IXMLEquipmentPropertyValue;
end;

function TXMLEquipmentPropertyValueList.Get_Item(Index: Integer): IXMLEquipmentPropertyValue;
begin
  Result := List[Index] as IXMLEquipmentPropertyValue;
end;

{ TXMLTransportUnitDetail }

procedure TXMLTransportUnitDetail.AfterConstruction;
begin
  RegisterChildNode('TransportUnitDetailCode', TXMLTransportUnitDetailCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  FCodeDescription := CreateCollection(TXMLS255List, IXMLNode, 'CodeDescription') as IXMLS255List;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTransportUnitDetail.Get_TransportUnitDetailType: UnicodeString;
begin
  Result := AttributeNodes['TransportUnitDetailType'].Text;
end;

procedure TXMLTransportUnitDetail.Set_TransportUnitDetailType(Value: UnicodeString);
begin
  SetAttribute('TransportUnitDetailType', Value);
end;

function TXMLTransportUnitDetail.Get_LoadOpeningSide: UnicodeString;
begin
  Result := AttributeNodes['LoadOpeningSide'].Text;
end;

procedure TXMLTransportUnitDetail.Set_LoadOpeningSide(Value: UnicodeString);
begin
  SetAttribute('LoadOpeningSide', Value);
end;

function TXMLTransportUnitDetail.Get_FrontCouplingType: UnicodeString;
begin
  Result := AttributeNodes['FrontCouplingType'].Text;
end;

procedure TXMLTransportUnitDetail.Set_FrontCouplingType(Value: UnicodeString);
begin
  SetAttribute('FrontCouplingType', Value);
end;

function TXMLTransportUnitDetail.Get_RearCouplingType: UnicodeString;
begin
  Result := AttributeNodes['RearCouplingType'].Text;
end;

procedure TXMLTransportUnitDetail.Set_RearCouplingType(Value: UnicodeString);
begin
  SetAttribute('RearCouplingType', Value);
end;

function TXMLTransportUnitDetail.Get_TransportUnitDetailCode: IXMLTransportUnitDetailCode;
begin
  Result := ChildNodes['TransportUnitDetailCode'] as IXMLTransportUnitDetailCode;
end;

function TXMLTransportUnitDetail.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLTransportUnitDetail.Get_CodeDescription: IXMLS255List;
begin
  Result := FCodeDescription;
end;

function TXMLTransportUnitDetail.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLTransportUnitDetailCode }

function TXMLTransportUnitDetailCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnitDetailCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnitReferenceIDInfo }

procedure TXMLTransportUnitReferenceIDInfo.AfterConstruction;
begin
  RegisterChildNode('TransportUnitIdentifier', TXMLTransportUnitIdentifier);
  ItemTag := 'TransportUnitIdentifier';
  ItemInterface := IXMLTransportUnitIdentifier;
  inherited;
end;

function TXMLTransportUnitReferenceIDInfo.Get_TransportUnitType: UnicodeString;
begin
  Result := AttributeNodes['TransportUnitType'].Text;
end;

procedure TXMLTransportUnitReferenceIDInfo.Set_TransportUnitType(Value: UnicodeString);
begin
  SetAttribute('TransportUnitType', Value);
end;

function TXMLTransportUnitReferenceIDInfo.Get_TransportUnitLevel: LongWord;
begin
  Result := AttributeNodes['TransportUnitLevel'].NodeValue;
end;

procedure TXMLTransportUnitReferenceIDInfo.Set_TransportUnitLevel(Value: LongWord);
begin
  SetAttribute('TransportUnitLevel', Value);
end;

function TXMLTransportUnitReferenceIDInfo.Get_TransportUnitIdentifier(Index: Integer): IXMLTransportUnitIdentifier;
begin
  Result := List[Index] as IXMLTransportUnitIdentifier;
end;

function TXMLTransportUnitReferenceIDInfo.Add: IXMLTransportUnitIdentifier;
begin
  Result := AddItem(-1) as IXMLTransportUnitIdentifier;
end;

function TXMLTransportUnitReferenceIDInfo.Insert(const Index: Integer): IXMLTransportUnitIdentifier;
begin
  Result := AddItem(Index) as IXMLTransportUnitIdentifier;
end;

{ TXMLTransportUnitReferenceIDInfoList }

function TXMLTransportUnitReferenceIDInfoList.Add: IXMLTransportUnitReferenceIDInfo;
begin
  Result := AddItem(-1) as IXMLTransportUnitReferenceIDInfo;
end;

function TXMLTransportUnitReferenceIDInfoList.Insert(const Index: Integer): IXMLTransportUnitReferenceIDInfo;
begin
  Result := AddItem(Index) as IXMLTransportUnitReferenceIDInfo;
end;

function TXMLTransportUnitReferenceIDInfoList.Get_Item(Index: Integer): IXMLTransportUnitReferenceIDInfo;
begin
  Result := List[Index] as IXMLTransportUnitReferenceIDInfo;
end;

{ TXMLTransportVehicleCharacteristics }

procedure TXMLTransportVehicleCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportVehicleCode', TXMLTransportVehicleCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  RegisterChildNode('TransportVehicleMeasurements', TXMLTransportVehicleMeasurements);
  RegisterChildNode('TransportVehicleEquipment', TXMLTransportVehicleEquipment);
  RegisterChildNode('TransportVehicleIdentifier', TXMLTransportVehicleIdentifier);
  RegisterChildNode('BrandAndModel', TXMLBrandAndModel);
  RegisterChildNode('TransportVehicleEmissionClass', TXMLCodeInfo);
  RegisterChildNode('TransportVehicleDetail', TXMLTransportVehicleDetail);
  FCodeDescription := CreateCollection(TXMLS255List, IXMLNode, 'CodeDescription') as IXMLS255List;
  FTransportVehicleEquipment := CreateCollection(TXMLTransportVehicleEquipmentList, IXMLTransportVehicleEquipment, 'TransportVehicleEquipment') as IXMLTransportVehicleEquipmentList;
  FTransportVehicleIdentifier := CreateCollection(TXMLTransportVehicleIdentifierList, IXMLTransportVehicleIdentifier, 'TransportVehicleIdentifier') as IXMLTransportVehicleIdentifierList;
  FTransportVehicleEmissionClass := CreateCollection(TXMLCodeInfoList, IXMLCodeInfo, 'TransportVehicleEmissionClass') as IXMLCodeInfoList;
  inherited;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleType: UnicodeString;
begin
  Result := AttributeNodes['TransportVehicleType'].Text;
end;

procedure TXMLTransportVehicleCharacteristics.Set_TransportVehicleType(Value: UnicodeString);
begin
  SetAttribute('TransportVehicleType', Value);
end;

function TXMLTransportVehicleCharacteristics.Get_ChangesAllowed: UnicodeString;
begin
  Result := AttributeNodes['ChangesAllowed'].Text;
end;

procedure TXMLTransportVehicleCharacteristics.Set_ChangesAllowed(Value: UnicodeString);
begin
  SetAttribute('ChangesAllowed', Value);
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleCode: IXMLTransportVehicleCode;
begin
  Result := ChildNodes['TransportVehicleCode'] as IXMLTransportVehicleCode;
end;

function TXMLTransportVehicleCharacteristics.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLTransportVehicleCharacteristics.Get_CodeDescription: IXMLS255List;
begin
  Result := FCodeDescription;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleMeasurements: IXMLTransportVehicleMeasurements;
begin
  Result := ChildNodes['TransportVehicleMeasurements'] as IXMLTransportVehicleMeasurements;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleEquipment: IXMLTransportVehicleEquipmentList;
begin
  Result := FTransportVehicleEquipment;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleCount: LongWord;
begin
  Result := ChildNodes['TransportVehicleCount'].NodeValue;
end;

procedure TXMLTransportVehicleCharacteristics.Set_TransportVehicleCount(Value: LongWord);
begin
  ChildNodes['TransportVehicleCount'].NodeValue := Value;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
begin
  Result := FTransportVehicleIdentifier;
end;

function TXMLTransportVehicleCharacteristics.Get_BrandAndModel: IXMLBrandAndModel;
begin
  Result := ChildNodes['BrandAndModel'] as IXMLBrandAndModel;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleText: UnicodeString;
begin
  Result := ChildNodes['TransportVehicleText'].Text;
end;

procedure TXMLTransportVehicleCharacteristics.Set_TransportVehicleText(Value: UnicodeString);
begin
  ChildNodes['TransportVehicleText'].NodeValue := Value;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleEmissionClass: IXMLCodeInfoList;
begin
  Result := FTransportVehicleEmissionClass;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleDetail: IXMLTransportVehicleDetail;
begin
  Result := ChildNodes['TransportVehicleDetail'] as IXMLTransportVehicleDetail;
end;

{ TXMLTransportVehicleCode }

function TXMLTransportVehicleCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportVehicleCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportVehicleMeasurements }

procedure TXMLTransportVehicleMeasurements.AfterConstruction;
begin
  RegisterChildNode('TransportVehicleLength', TXMLMeasurement);
  RegisterChildNode('TransportVehicleWidth', TXMLMeasurement);
  RegisterChildNode('TransportVehicleHeight', TXMLMeasurement);
  RegisterChildNode('TransportVehicleWeight', TXMLMeasurement);
  inherited;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleLength: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleLength'] as IXMLMeasurement;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleWidth: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleWidth'] as IXMLMeasurement;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleHeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleHeight'] as IXMLMeasurement;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleWeight'] as IXMLMeasurement;
end;

{ TXMLTransportVehicleEquipment }

procedure TXMLTransportVehicleEquipment.AfterConstruction;
begin
  RegisterChildNode('TransportVehicleEquipmentCode', TXMLTransportVehicleEquipmentCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  RegisterChildNode('TransportVehicleEquipmentDescription', TXMLTransportVehicleEquipmentDescription);
  FTransportVehicleEquipmentDescription := CreateCollection(TXMLTransportVehicleEquipmentDescriptionList, IXMLTransportVehicleEquipmentDescription, 'TransportVehicleEquipmentDescription') as IXMLTransportVehicleEquipmentDescriptionList;
  inherited;
end;

function TXMLTransportVehicleEquipment.Get_TransportVehicleEquipmentCode: IXMLTransportVehicleEquipmentCode;
begin
  Result := ChildNodes['TransportVehicleEquipmentCode'] as IXMLTransportVehicleEquipmentCode;
end;

function TXMLTransportVehicleEquipment.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLTransportVehicleEquipment.Get_TransportVehicleEquipmentDescription: IXMLTransportVehicleEquipmentDescriptionList;
begin
  Result := FTransportVehicleEquipmentDescription;
end;

{ TXMLTransportVehicleEquipmentList }

function TXMLTransportVehicleEquipmentList.Add: IXMLTransportVehicleEquipment;
begin
  Result := AddItem(-1) as IXMLTransportVehicleEquipment;
end;

function TXMLTransportVehicleEquipmentList.Insert(const Index: Integer): IXMLTransportVehicleEquipment;
begin
  Result := AddItem(Index) as IXMLTransportVehicleEquipment;
end;

function TXMLTransportVehicleEquipmentList.Get_Item(Index: Integer): IXMLTransportVehicleEquipment;
begin
  Result := List[Index] as IXMLTransportVehicleEquipment;
end;

{ TXMLTransportVehicleEquipmentCode }

function TXMLTransportVehicleEquipmentCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportVehicleEquipmentCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportVehicleEquipmentDescription }

function TXMLTransportVehicleEquipmentDescription.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLTransportVehicleEquipmentDescription.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLTransportVehicleEquipmentDescriptionList }

function TXMLTransportVehicleEquipmentDescriptionList.Add: IXMLTransportVehicleEquipmentDescription;
begin
  Result := AddItem(-1) as IXMLTransportVehicleEquipmentDescription;
end;

function TXMLTransportVehicleEquipmentDescriptionList.Insert(const Index: Integer): IXMLTransportVehicleEquipmentDescription;
begin
  Result := AddItem(Index) as IXMLTransportVehicleEquipmentDescription;
end;

function TXMLTransportVehicleEquipmentDescriptionList.Get_Item(Index: Integer): IXMLTransportVehicleEquipmentDescription;
begin
  Result := List[Index] as IXMLTransportVehicleEquipmentDescription;
end;

{ TXMLBrandAndModel }

procedure TXMLBrandAndModel.AfterConstruction;
begin
  RegisterChildNode('Model', TXMLModel);
  inherited;
end;

function TXMLBrandAndModel.Get_Brand: UnicodeString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLBrandAndModel.Set_Brand(Value: UnicodeString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

function TXMLBrandAndModel.Get_Model: IXMLModel;
begin
  Result := ChildNodes['Model'] as IXMLModel;
end;

{ TXMLModel }

function TXMLModel.Get_ModelYear: UnicodeString;
begin
  Result := AttributeNodes['ModelYear'].Text;
end;

procedure TXMLModel.Set_ModelYear(Value: UnicodeString);
begin
  SetAttribute('ModelYear', Value);
end;

{ TXMLTransportVehicleDetail }

function TXMLTransportVehicleDetail.Get_RearCouplingType: UnicodeString;
begin
  Result := AttributeNodes['RearCouplingType'].Text;
end;

procedure TXMLTransportVehicleDetail.Set_RearCouplingType(Value: UnicodeString);
begin
  SetAttribute('RearCouplingType', Value);
end;

{ TXMLChargeReference }

function TXMLChargeReference.Get_ChargeReferenceType: UnicodeString;
begin
  Result := AttributeNodes['ChargeReferenceType'].Text;
end;

procedure TXMLChargeReference.Set_ChargeReferenceType(Value: UnicodeString);
begin
  SetAttribute('ChargeReferenceType', Value);
end;

function TXMLChargeReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLChargeReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLChargeReferenceList }

function TXMLChargeReferenceList.Add: IXMLChargeReference;
begin
  Result := AddItem(-1) as IXMLChargeReference;
end;

function TXMLChargeReferenceList.Insert(const Index: Integer): IXMLChargeReference;
begin
  Result := AddItem(Index) as IXMLChargeReference;
end;

function TXMLChargeReferenceList.Get_Item(Index: Integer): IXMLChargeReference;
begin
  Result := List[Index] as IXMLChargeReference;
end;

{ TXMLChargeAmount }

procedure TXMLChargeAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLChargeAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLChargeNetAmount }

procedure TXMLChargeNetAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLChargeNetAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLInvoiceLineAmount }

procedure TXMLInvoiceLineAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLInvoiceLineAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLInvoiceDeliveryInformation }

procedure TXMLInvoiceDeliveryInformation.AfterConstruction;
begin
  RegisterChildNode('DeliveryMessageDate', TXMLDeliveryMessageDate);
  RegisterChildNode('DeliveryDate', TXMLDeliveryDate);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('ChargeInformation', TXMLChargeInformation);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('TransportVehicleIdentifier', TXMLTransportVehicleIdentifier);
  RegisterChildNode('TransportUnitIdentifier', TXMLTransportUnitIdentifier);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('DeliveryMessageReference', TXMLDeliveryMessageReference);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FChargeInformation := CreateCollection(TXMLChargeInformationList, IXMLChargeInformation, 'ChargeInformation') as IXMLChargeInformationList;
  FTransportVehicleIdentifier := CreateCollection(TXMLTransportVehicleIdentifierList, IXMLTransportVehicleIdentifier, 'TransportVehicleIdentifier') as IXMLTransportVehicleIdentifierList;
  FTransportUnitIdentifier := CreateCollection(TXMLTransportUnitIdentifierList, IXMLTransportUnitIdentifier, 'TransportUnitIdentifier') as IXMLTransportUnitIdentifierList;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FDeliveryMessageReference := CreateCollection(TXMLDeliveryMessageReferenceList, IXMLDeliveryMessageReference, 'DeliveryMessageReference') as IXMLDeliveryMessageReferenceList;
  inherited;
end;

function TXMLInvoiceDeliveryInformation.Get_DeliveryMessageNumber: UnicodeString;
begin
  Result := ChildNodes['DeliveryMessageNumber'].Text;
end;

procedure TXMLInvoiceDeliveryInformation.Set_DeliveryMessageNumber(Value: UnicodeString);
begin
  ChildNodes['DeliveryMessageNumber'].NodeValue := Value;
end;

function TXMLInvoiceDeliveryInformation.Get_DeliveryMessageLineItemNumber: LongWord;
begin
  Result := ChildNodes['DeliveryMessageLineItemNumber'].NodeValue;
end;

procedure TXMLInvoiceDeliveryInformation.Set_DeliveryMessageLineItemNumber(Value: LongWord);
begin
  ChildNodes['DeliveryMessageLineItemNumber'].NodeValue := Value;
end;

function TXMLInvoiceDeliveryInformation.Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
begin
  Result := ChildNodes['DeliveryMessageDate'] as IXMLDeliveryMessageDate;
end;

function TXMLInvoiceDeliveryInformation.Get_DeliveryDate: IXMLDeliveryDate;
begin
  Result := ChildNodes['DeliveryDate'] as IXMLDeliveryDate;
end;

function TXMLInvoiceDeliveryInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLInvoiceDeliveryInformation.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLInvoiceDeliveryInformation.Get_ChargeInformation: IXMLChargeInformationList;
begin
  Result := FChargeInformation;
end;

function TXMLInvoiceDeliveryInformation.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLInvoiceDeliveryInformation.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLInvoiceDeliveryInformation.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLInvoiceDeliveryInformation.Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
begin
  Result := FTransportVehicleIdentifier;
end;

function TXMLInvoiceDeliveryInformation.Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
begin
  Result := FTransportUnitIdentifier;
end;

function TXMLInvoiceDeliveryInformation.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLInvoiceDeliveryInformation.Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
begin
  Result := FDeliveryMessageReference;
end;

{ TXMLInvoiceDeliveryInformationList }

function TXMLInvoiceDeliveryInformationList.Add: IXMLInvoiceDeliveryInformation;
begin
  Result := AddItem(-1) as IXMLInvoiceDeliveryInformation;
end;

function TXMLInvoiceDeliveryInformationList.Insert(const Index: Integer): IXMLInvoiceDeliveryInformation;
begin
  Result := AddItem(Index) as IXMLInvoiceDeliveryInformation;
end;

function TXMLInvoiceDeliveryInformationList.Get_Item(Index: Integer): IXMLInvoiceDeliveryInformation;
begin
  Result := List[Index] as IXMLInvoiceDeliveryInformation;
end;

{ TXMLDeliveryMessageDate }

procedure TXMLDeliveryMessageDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryMessageDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryMessageDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryMessageDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryDate }

procedure TXMLDeliveryDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryMessageReference }

function TXMLDeliveryMessageReference.Get_DeliveryMessageReferenceType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryMessageReferenceType'].Text;
end;

procedure TXMLDeliveryMessageReference.Set_DeliveryMessageReferenceType(Value: UnicodeString);
begin
  SetAttribute('DeliveryMessageReferenceType', Value);
end;

function TXMLDeliveryMessageReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDeliveryMessageReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDeliveryMessageReferenceList }

function TXMLDeliveryMessageReferenceList.Add: IXMLDeliveryMessageReference;
begin
  Result := AddItem(-1) as IXMLDeliveryMessageReference;
end;

function TXMLDeliveryMessageReferenceList.Insert(const Index: Integer): IXMLDeliveryMessageReference;
begin
  Result := AddItem(Index) as IXMLDeliveryMessageReference;
end;

function TXMLDeliveryMessageReferenceList.Get_Item(Index: Integer): IXMLDeliveryMessageReference;
begin
  Result := List[Index] as IXMLDeliveryMessageReference;
end;

{ TXMLMillCharacteristics }

procedure TXMLMillCharacteristics.AfterConstruction;
begin
  RegisterChildNode('MillParty', TXMLParty);
  inherited;
end;

function TXMLMillCharacteristics.Get_MillParty: IXMLParty;
begin
  Result := ChildNodes['MillParty'] as IXMLParty;
end;

function TXMLMillCharacteristics.Get_MachineID: UnicodeString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLMillCharacteristics.Set_MachineID(Value: UnicodeString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

{ TXMLTransportModeCharacteristics }

procedure TXMLTransportModeCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportModeCode', TXMLTransportModeCode);
  inherited;
end;

function TXMLTransportModeCharacteristics.Get_TransportModeType: UnicodeString;
begin
  Result := AttributeNodes['TransportModeType'].Text;
end;

procedure TXMLTransportModeCharacteristics.Set_TransportModeType(Value: UnicodeString);
begin
  SetAttribute('TransportModeType', Value);
end;

function TXMLTransportModeCharacteristics.Get_TransportModeCode: IXMLTransportModeCode;
begin
  Result := ChildNodes['TransportModeCode'] as IXMLTransportModeCode;
end;

function TXMLTransportModeCharacteristics.Get_TransportModeText: UnicodeString;
begin
  Result := ChildNodes['TransportModeText'].Text;
end;

procedure TXMLTransportModeCharacteristics.Set_TransportModeText(Value: UnicodeString);
begin
  ChildNodes['TransportModeText'].NodeValue := Value;
end;

{ TXMLTransportModeCharacteristicsList }

function TXMLTransportModeCharacteristicsList.Add: IXMLTransportModeCharacteristics;
begin
  Result := AddItem(-1) as IXMLTransportModeCharacteristics;
end;

function TXMLTransportModeCharacteristicsList.Insert(const Index: Integer): IXMLTransportModeCharacteristics;
begin
  Result := AddItem(Index) as IXMLTransportModeCharacteristics;
end;

function TXMLTransportModeCharacteristicsList.Get_Item(Index: Integer): IXMLTransportModeCharacteristics;
begin
  Result := List[Index] as IXMLTransportModeCharacteristics;
end;

{ TXMLTransportModeCode }

function TXMLTransportModeCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportModeCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLDeliveryDateWindow }

procedure TXMLDeliveryDateWindow.AfterConstruction;
begin
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryDateWindow.Get_DeliveryDateType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryDateType'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_DeliveryDateType(Value: UnicodeString);
begin
  SetAttribute('DeliveryDateType', Value);
end;

function TXMLDeliveryDateWindow.Get_DateTimeRange: IXMLDateTimeRange;
begin
  Result := ChildNodes['DateTimeRange'] as IXMLDateTimeRange;
end;

function TXMLDeliveryDateWindow.Get_Year: UnicodeString;
begin
  Result := ChildNodes['Year'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_Year(Value: UnicodeString);
begin
  ChildNodes['Year'].NodeValue := Value;
end;

function TXMLDeliveryDateWindow.Get_YearMonth: UnicodeString;
begin
  Result := ChildNodes['YearMonth'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_YearMonth(Value: UnicodeString);
begin
  ChildNodes['YearMonth'].NodeValue := Value;
end;

function TXMLDeliveryDateWindow.Get_Month: LongWord;
begin
  Result := ChildNodes['Month'].NodeValue;
end;

procedure TXMLDeliveryDateWindow.Set_Month(Value: LongWord);
begin
  ChildNodes['Month'].NodeValue := Value;
end;

function TXMLDeliveryDateWindow.Get_Week: UnicodeString;
begin
  Result := ChildNodes['Week'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_Week(Value: UnicodeString);
begin
  ChildNodes['Week'].NodeValue := Value;
end;

function TXMLDeliveryDateWindow.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryDateWindow.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryDateWindowList }

function TXMLDeliveryDateWindowList.Add: IXMLDeliveryDateWindow;
begin
  Result := AddItem(-1) as IXMLDeliveryDateWindow;
end;

function TXMLDeliveryDateWindowList.Insert(const Index: Integer): IXMLDeliveryDateWindow;
begin
  Result := AddItem(Index) as IXMLDeliveryDateWindow;
end;

function TXMLDeliveryDateWindowList.Get_Item(Index: Integer): IXMLDeliveryDateWindow;
begin
  Result := List[Index] as IXMLDeliveryDateWindow;
end;

{ TXMLTaxStatement }

procedure TXMLTaxStatement.AfterConstruction;
begin
  RegisterChildNode('TaxStatementCode', TXMLTaxStatementCode);
  inherited;
end;

function TXMLTaxStatement.Get_TaxStatementCode: IXMLTaxStatementCode;
begin
  Result := ChildNodes['TaxStatementCode'] as IXMLTaxStatementCode;
end;

function TXMLTaxStatement.Get_TaxStatementDescription: UnicodeString;
begin
  Result := ChildNodes['TaxStatementDescription'].Text;
end;

procedure TXMLTaxStatement.Set_TaxStatementDescription(Value: UnicodeString);
begin
  ChildNodes['TaxStatementDescription'].NodeValue := Value;
end;

{ TXMLTaxStatementCode }

function TXMLTaxStatementCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTaxStatementCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLStatisticalGoodsInformation }

procedure TXMLStatisticalGoodsInformation.AfterConstruction;
begin
  RegisterChildNode('CommodityGoodsCode', TXMLCommodityGoodsCode);
  RegisterChildNode('PriceDetails', TXMLPriceDetails);
  inherited;
end;

function TXMLStatisticalGoodsInformation.Get_CommodityGoodsCode: IXMLCommodityGoodsCode;
begin
  Result := ChildNodes['CommodityGoodsCode'] as IXMLCommodityGoodsCode;
end;

function TXMLStatisticalGoodsInformation.Get_PriceDetails: IXMLPriceDetails;
begin
  Result := ChildNodes['PriceDetails'] as IXMLPriceDetails;
end;

{ TXMLCommodityGoodsCode }

function TXMLCommodityGoodsCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCommodityGoodsCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLProductGroupSummary }

procedure TXMLProductGroupSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLProductGroupSummary.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLProductGroupSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLProductGroupSummary.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLProductGroupSummary.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

{ TXMLTotalQuantity }

function TXMLTotalQuantity.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLTotalQuantity.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLTotalQuantity.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLTotalQuantity.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLTotalQuantity.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLTotalQuantity.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLTotalQuantity.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLTotalQuantity.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLTotalQuantity.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLTotalQuantity.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLTotalQuantity.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLTotalQuantity.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

{ TXMLTotalQuantityList }

function TXMLTotalQuantityList.Add: IXMLTotalQuantity;
begin
  Result := AddItem(-1) as IXMLTotalQuantity;
end;

function TXMLTotalQuantityList.Insert(const Index: Integer): IXMLTotalQuantity;
begin
  Result := AddItem(Index) as IXMLTotalQuantity;
end;

function TXMLTotalQuantityList.Get_Item(Index: Integer): IXMLTotalQuantity;
begin
  Result := List[Index] as IXMLTotalQuantity;
end;

{ TXMLTotalInformationalQuantity }

function TXMLTotalInformationalQuantity.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLTotalInformationalQuantity.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLTotalInformationalQuantity.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLTotalInformationalQuantity.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLTotalInformationalQuantity.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLTotalInformationalQuantity.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

{ TXMLTotalInformationalQuantityList }

function TXMLTotalInformationalQuantityList.Add: IXMLTotalInformationalQuantity;
begin
  Result := AddItem(-1) as IXMLTotalInformationalQuantity;
end;

function TXMLTotalInformationalQuantityList.Insert(const Index: Integer): IXMLTotalInformationalQuantity;
begin
  Result := AddItem(Index) as IXMLTotalInformationalQuantity;
end;

function TXMLTotalInformationalQuantityList.Get_Item(Index: Integer): IXMLTotalInformationalQuantity;
begin
  Result := List[Index] as IXMLTotalInformationalQuantity;
end;

{ TXMLProductSummary }

procedure TXMLProductSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  inherited;
end;

function TXMLProductSummary.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLProductSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

{ TXMLLengthSpecification }

procedure TXMLLengthSpecification.AfterConstruction;
begin
  RegisterChildNode('LengthCategory', TXMLLengthCategory);
  RegisterChildNode('TotalNumberOfUnits', TXMLMeasurement);
  inherited;
end;

function TXMLLengthSpecification.Get_LengthCategory: IXMLLengthCategory;
begin
  Result := ChildNodes['LengthCategory'] as IXMLLengthCategory;
end;

function TXMLLengthSpecification.Get_TotalNumberOfUnits: IXMLMeasurement;
begin
  Result := ChildNodes['TotalNumberOfUnits'] as IXMLMeasurement;
end;

{ TXMLLengthSpecificationList }

function TXMLLengthSpecificationList.Add: IXMLLengthSpecification;
begin
  Result := AddItem(-1) as IXMLLengthSpecification;
end;

function TXMLLengthSpecificationList.Insert(const Index: Integer): IXMLLengthSpecification;
begin
  Result := AddItem(Index) as IXMLLengthSpecification;
end;

function TXMLLengthSpecificationList.Get_Item(Index: Integer): IXMLLengthSpecification;
begin
  Result := List[Index] as IXMLLengthSpecification;
end;

{ TXMLLengthCategory }

function TXMLLengthCategory.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLLengthCategory.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLShipmentSummary }

procedure TXMLShipmentSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLShipmentSummary.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLShipmentSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLShipmentSummary.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLShipmentSummary.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

{ TXMLInvoiceWoodSummary }

procedure TXMLInvoiceWoodSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('LineItemSubTotal', TXMLLineItemSubTotal);
  RegisterChildNode('TotalAdjustments', TXMLTotalAdjustments);
  RegisterChildNode('TotalTaxAmount', TXMLTotalTaxAmount);
  RegisterChildNode('TotalFASAmount', TXMLTotalFASAmount);
  RegisterChildNode('TotalNetAmount', TXMLTotalNetAmount);
  RegisterChildNode('TotalAmount', TXMLTotalAmount);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  RegisterChildNode('TermsOfPayment', TXMLTermsOfPayment);
  RegisterChildNode('TotalNetOfTermsDiscount', TXMLTotalNetOfTermsDiscount);
  RegisterChildNode('CustomsTotals', TXMLCustomsTotals);
  RegisterChildNode('CustomsStampInformation', TXMLCustomsStampInformation);
  RegisterChildNode('TermsAndDisclaimers', TXMLTermsAndDisclaimers);
  RegisterChildNode('TaxStatement', TXMLTaxStatement);
  FTotalQuantity := CreateCollection(TXMLTotalQuantityList, IXMLTotalQuantity, 'TotalQuantity') as IXMLTotalQuantityList;
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FInformationalAmount := CreateCollection(TXMLInformationalAmountList, IXMLInformationalAmount, 'InformationalAmount') as IXMLInformationalAmountList;
  FTermsOfPayment := CreateCollection(TXMLTermsOfPaymentList, IXMLTermsOfPayment, 'TermsOfPayment') as IXMLTermsOfPaymentList;
  FTotalNetOfTermsDiscount := CreateCollection(TXMLTotalNetOfTermsDiscountList, IXMLTotalNetOfTermsDiscount, 'TotalNetOfTermsDiscount') as IXMLTotalNetOfTermsDiscountList;
  FCustomsTotals := CreateCollection(TXMLCustomsTotalsList, IXMLCustomsTotals, 'CustomsTotals') as IXMLCustomsTotalsList;
  FCustomsStampInformation := CreateCollection(TXMLCustomsStampInformationList, IXMLCustomsStampInformation, 'CustomsStampInformation') as IXMLCustomsStampInformationList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FTermsAndDisclaimers := CreateCollection(TXMLTermsAndDisclaimersList, IXMLTermsAndDisclaimers, 'TermsAndDisclaimers') as IXMLTermsAndDisclaimersList;
  inherited;
end;

function TXMLInvoiceWoodSummary.Get_TotalNumberOfLineItems: LongWord;
begin
  Result := ChildNodes['TotalNumberOfLineItems'].NodeValue;
end;

procedure TXMLInvoiceWoodSummary.Set_TotalNumberOfLineItems(Value: LongWord);
begin
  ChildNodes['TotalNumberOfLineItems'].NodeValue := Value;
end;

function TXMLInvoiceWoodSummary.Get_TotalQuantity: IXMLTotalQuantityList;
begin
  Result := FTotalQuantity;
end;

function TXMLInvoiceWoodSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLInvoiceWoodSummary.Get_LineItemSubTotal: IXMLLineItemSubTotal;
begin
  Result := ChildNodes['LineItemSubTotal'] as IXMLLineItemSubTotal;
end;

function TXMLInvoiceWoodSummary.Get_TotalAdjustments: IXMLTotalAdjustments;
begin
  Result := ChildNodes['TotalAdjustments'] as IXMLTotalAdjustments;
end;

function TXMLInvoiceWoodSummary.Get_TotalTaxAmount: IXMLTotalTaxAmount;
begin
  Result := ChildNodes['TotalTaxAmount'] as IXMLTotalTaxAmount;
end;

function TXMLInvoiceWoodSummary.Get_TotalFASAmount: IXMLTotalFASAmount;
begin
  Result := ChildNodes['TotalFASAmount'] as IXMLTotalFASAmount;
end;

function TXMLInvoiceWoodSummary.Get_TotalNetAmount: IXMLTotalNetAmount;
begin
  Result := ChildNodes['TotalNetAmount'] as IXMLTotalNetAmount;
end;

function TXMLInvoiceWoodSummary.Get_TotalAmount: IXMLTotalAmount;
begin
  Result := ChildNodes['TotalAmount'] as IXMLTotalAmount;
end;

function TXMLInvoiceWoodSummary.Get_InformationalAmount: IXMLInformationalAmountList;
begin
  Result := FInformationalAmount;
end;

function TXMLInvoiceWoodSummary.Get_TermsOfPayment: IXMLTermsOfPaymentList;
begin
  Result := FTermsOfPayment;
end;

function TXMLInvoiceWoodSummary.Get_TotalNetOfTermsDiscount: IXMLTotalNetOfTermsDiscountList;
begin
  Result := FTotalNetOfTermsDiscount;
end;

function TXMLInvoiceWoodSummary.Get_CustomsTotals: IXMLCustomsTotalsList;
begin
  Result := FCustomsTotals;
end;

function TXMLInvoiceWoodSummary.Get_CustomsStampInformation: IXMLCustomsStampInformationList;
begin
  Result := FCustomsStampInformation;
end;

function TXMLInvoiceWoodSummary.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLInvoiceWoodSummary.Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
begin
  Result := FTermsAndDisclaimers;
end;

function TXMLInvoiceWoodSummary.Get_TaxStatement: IXMLTaxStatement;
begin
  Result := ChildNodes['TaxStatement'] as IXMLTaxStatement;
end;

{ TXMLLineItemSubTotal }

procedure TXMLLineItemSubTotal.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLLineItemSubTotal.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalAdjustments }

procedure TXMLTotalAdjustments.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalAdjustments.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTaxAmount }

procedure TXMLTotalTaxAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTaxAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalFASAmount }

procedure TXMLTotalFASAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalFASAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalNetAmount }

procedure TXMLTotalNetAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalNetAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalAmount }

procedure TXMLTotalAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTermsOfPayment }

procedure TXMLTermsOfPayment.AfterConstruction;
begin
  RegisterChildNode('TermsOfPaymentCode', TXMLTermsOfPaymentCode);
  RegisterChildNode('TermsBasisDate', TXMLTermsBasisDate);
  RegisterChildNode('TermsDiscountPercent', TXMLMeasurement);
  RegisterChildNode('TermsDiscountDueDate', TXMLTermsDiscountDueDate);
  RegisterChildNode('TermsNetDueDate', TXMLTermsNetDueDate);
  RegisterChildNode('ExchangeRate', TXMLExchangeRate);
  inherited;
end;

function TXMLTermsOfPayment.Get_TermsBasisDateType: UnicodeString;
begin
  Result := AttributeNodes['TermsBasisDateType'].Text;
end;

procedure TXMLTermsOfPayment.Set_TermsBasisDateType(Value: UnicodeString);
begin
  SetAttribute('TermsBasisDateType', Value);
end;

function TXMLTermsOfPayment.Get_TermsOfPaymentCode: IXMLTermsOfPaymentCode;
begin
  Result := ChildNodes['TermsOfPaymentCode'] as IXMLTermsOfPaymentCode;
end;

function TXMLTermsOfPayment.Get_TermsDescription: UnicodeString;
begin
  Result := ChildNodes['TermsDescription'].Text;
end;

procedure TXMLTermsOfPayment.Set_TermsDescription(Value: UnicodeString);
begin
  ChildNodes['TermsDescription'].NodeValue := Value;
end;

function TXMLTermsOfPayment.Get_TermsBasisDate: IXMLTermsBasisDate;
begin
  Result := ChildNodes['TermsBasisDate'] as IXMLTermsBasisDate;
end;

function TXMLTermsOfPayment.Get_TermsDiscountPercent: IXMLMeasurement;
begin
  Result := ChildNodes['TermsDiscountPercent'] as IXMLMeasurement;
end;

function TXMLTermsOfPayment.Get_TermsDiscountDueDate: IXMLTermsDiscountDueDate;
begin
  Result := ChildNodes['TermsDiscountDueDate'] as IXMLTermsDiscountDueDate;
end;

function TXMLTermsOfPayment.Get_TermsDiscountDaysDue: LongWord;
begin
  Result := ChildNodes['TermsDiscountDaysDue'].NodeValue;
end;

procedure TXMLTermsOfPayment.Set_TermsDiscountDaysDue(Value: LongWord);
begin
  ChildNodes['TermsDiscountDaysDue'].NodeValue := Value;
end;

function TXMLTermsOfPayment.Get_TermsNetDueDate: IXMLTermsNetDueDate;
begin
  Result := ChildNodes['TermsNetDueDate'] as IXMLTermsNetDueDate;
end;

function TXMLTermsOfPayment.Get_TermsNetDaysDue: LongWord;
begin
  Result := ChildNodes['TermsNetDaysDue'].NodeValue;
end;

procedure TXMLTermsOfPayment.Set_TermsNetDaysDue(Value: LongWord);
begin
  ChildNodes['TermsNetDaysDue'].NodeValue := Value;
end;

function TXMLTermsOfPayment.Get_TermsInterestPenaltyPercent: Double;
begin
  Result := XmlStrToFloatExt(ChildNodes['TermsInterestPenaltyPercent'].Text);
end;

procedure TXMLTermsOfPayment.Set_TermsInterestPenaltyPercent(Value: Double);
begin
  ChildNodes['TermsInterestPenaltyPercent'].NodeValue := Value;
end;

function TXMLTermsOfPayment.Get_ExchangeRate: IXMLExchangeRate;
begin
  Result := ChildNodes['ExchangeRate'] as IXMLExchangeRate;
end;

function TXMLTermsOfPayment.Get_MethodOfPayment: UnicodeString;
begin
  Result := ChildNodes['MethodOfPayment'].Text;
end;

procedure TXMLTermsOfPayment.Set_MethodOfPayment(Value: UnicodeString);
begin
  ChildNodes['MethodOfPayment'].NodeValue := Value;
end;

{ TXMLTermsOfPaymentList }

function TXMLTermsOfPaymentList.Add: IXMLTermsOfPayment;
begin
  Result := AddItem(-1) as IXMLTermsOfPayment;
end;

function TXMLTermsOfPaymentList.Insert(const Index: Integer): IXMLTermsOfPayment;
begin
  Result := AddItem(Index) as IXMLTermsOfPayment;
end;

function TXMLTermsOfPaymentList.Get_Item(Index: Integer): IXMLTermsOfPayment;
begin
  Result := List[Index] as IXMLTermsOfPayment;
end;

{ TXMLTermsOfPaymentCode }

function TXMLTermsOfPaymentCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTermsOfPaymentCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTermsBasisDate }

procedure TXMLTermsBasisDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLTermsBasisDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLTermsBasisDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLTermsBasisDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLTermsDiscountDueDate }

procedure TXMLTermsDiscountDueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLTermsDiscountDueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLTermsDiscountDueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLTermsDiscountDueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLTermsNetDueDate }

procedure TXMLTermsNetDueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLTermsNetDueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLTermsNetDueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLTermsNetDueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLTotalNetOfTermsDiscount }

procedure TXMLTotalNetOfTermsDiscount.AfterConstruction;
begin
  RegisterChildNode('AmountSubjectToTermsDiscount', TXMLAmountSubjectToTermsDiscount);
  RegisterChildNode('TotalTermsDiscountNetAmount', TXMLTotalTermsDiscountNetAmount);
  RegisterChildNode('TotalTermsDiscountNetAmountTax', TXMLTotalTermsDiscountNetAmountTax);
  RegisterChildNode('TotalTermsDiscountAmount', TXMLTotalTermsDiscountAmount);
  RegisterChildNode('TotalTermsDiscountNetAmountDue', TXMLTotalTermsDiscountNetAmountDue);
  RegisterChildNode('TotalTermsDiscountTaxAmount', TXMLTotalTermsDiscountTaxAmount);
  RegisterChildNode('TotalTermsDiscountAmountDue', TXMLTotalTermsDiscountAmountDue);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  FInformationalAmount := CreateCollection(TXMLInformationalAmountList, IXMLInformationalAmount, 'InformationalAmount') as IXMLInformationalAmountList;
  inherited;
end;

function TXMLTotalNetOfTermsDiscount.Get_AmountSubjectToTermsDiscount: IXMLAmountSubjectToTermsDiscount;
begin
  Result := ChildNodes['AmountSubjectToTermsDiscount'] as IXMLAmountSubjectToTermsDiscount;
end;

function TXMLTotalNetOfTermsDiscount.Get_TotalTermsDiscountNetAmount: IXMLTotalTermsDiscountNetAmount;
begin
  Result := ChildNodes['TotalTermsDiscountNetAmount'] as IXMLTotalTermsDiscountNetAmount;
end;

function TXMLTotalNetOfTermsDiscount.Get_TotalTermsDiscountNetAmountTax: IXMLTotalTermsDiscountNetAmountTax;
begin
  Result := ChildNodes['TotalTermsDiscountNetAmountTax'] as IXMLTotalTermsDiscountNetAmountTax;
end;

function TXMLTotalNetOfTermsDiscount.Get_TotalTermsDiscountAmount: IXMLTotalTermsDiscountAmount;
begin
  Result := ChildNodes['TotalTermsDiscountAmount'] as IXMLTotalTermsDiscountAmount;
end;

function TXMLTotalNetOfTermsDiscount.Get_TotalTermsDiscountNetAmountDue: IXMLTotalTermsDiscountNetAmountDue;
begin
  Result := ChildNodes['TotalTermsDiscountNetAmountDue'] as IXMLTotalTermsDiscountNetAmountDue;
end;

function TXMLTotalNetOfTermsDiscount.Get_TotalTermsDiscountTaxAmount: IXMLTotalTermsDiscountTaxAmount;
begin
  Result := ChildNodes['TotalTermsDiscountTaxAmount'] as IXMLTotalTermsDiscountTaxAmount;
end;

function TXMLTotalNetOfTermsDiscount.Get_TotalTermsDiscountAmountDue: IXMLTotalTermsDiscountAmountDue;
begin
  Result := ChildNodes['TotalTermsDiscountAmountDue'] as IXMLTotalTermsDiscountAmountDue;
end;

function TXMLTotalNetOfTermsDiscount.Get_InformationalAmount: IXMLInformationalAmountList;
begin
  Result := FInformationalAmount;
end;

{ TXMLTotalNetOfTermsDiscountList }

function TXMLTotalNetOfTermsDiscountList.Add: IXMLTotalNetOfTermsDiscount;
begin
  Result := AddItem(-1) as IXMLTotalNetOfTermsDiscount;
end;

function TXMLTotalNetOfTermsDiscountList.Insert(const Index: Integer): IXMLTotalNetOfTermsDiscount;
begin
  Result := AddItem(Index) as IXMLTotalNetOfTermsDiscount;
end;

function TXMLTotalNetOfTermsDiscountList.Get_Item(Index: Integer): IXMLTotalNetOfTermsDiscount;
begin
  Result := List[Index] as IXMLTotalNetOfTermsDiscount;
end;

{ TXMLAmountSubjectToTermsDiscount }

procedure TXMLAmountSubjectToTermsDiscount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLAmountSubjectToTermsDiscount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTermsDiscountNetAmount }

procedure TXMLTotalTermsDiscountNetAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTermsDiscountNetAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTermsDiscountNetAmountTax }

procedure TXMLTotalTermsDiscountNetAmountTax.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTermsDiscountNetAmountTax.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTermsDiscountAmount }

procedure TXMLTotalTermsDiscountAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTermsDiscountAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTermsDiscountNetAmountDue }

procedure TXMLTotalTermsDiscountNetAmountDue.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTermsDiscountNetAmountDue.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTermsDiscountTaxAmount }

procedure TXMLTotalTermsDiscountTaxAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTermsDiscountTaxAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTotalTermsDiscountAmountDue }

procedure TXMLTotalTermsDiscountAmountDue.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTotalTermsDiscountAmountDue.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLCustomsTotals }

procedure TXMLCustomsTotals.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLCustomsTotals.Get_CustomsTariffCode: UnicodeString;
begin
  Result := ChildNodes['CustomsTariffCode'].Text;
end;

procedure TXMLCustomsTotals.Set_CustomsTariffCode(Value: UnicodeString);
begin
  ChildNodes['CustomsTariffCode'].NodeValue := Value;
end;

function TXMLCustomsTotals.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLCustomsTotals.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLCustomsTotalsList }

function TXMLCustomsTotalsList.Add: IXMLCustomsTotals;
begin
  Result := AddItem(-1) as IXMLCustomsTotals;
end;

function TXMLCustomsTotalsList.Insert(const Index: Integer): IXMLCustomsTotals;
begin
  Result := AddItem(Index) as IXMLCustomsTotals;
end;

function TXMLCustomsTotalsList.Get_Item(Index: Integer): IXMLCustomsTotals;
begin
  Result := List[Index] as IXMLCustomsTotals;
end;

{ TXMLCustomsStampInformation }

procedure TXMLCustomsStampInformation.AfterConstruction;
begin
  RegisterChildNode('CustomsParty', TXMLParty);
  RegisterChildNode('CustomsStampDate', TXMLCustomsStampDate);
  RegisterChildNode('CustomsReferenceNumber', TXMLCustomsReferenceNumber);
  RegisterChildNode('SupplierCustomsReference', TXMLSupplierCustomsReference);
  RegisterChildNode('MillParty', TXMLParty);
  FCustomsStampHeaderText := CreateCollection(TXMLS255List, IXMLNode, 'CustomsStampHeaderText') as IXMLS255List;
  FCustomsStampTrailerText := CreateCollection(TXMLS255List, IXMLNode, 'CustomsStampTrailerText') as IXMLS255List;
  inherited;
end;

function TXMLCustomsStampInformation.Get_CustomsStampHeaderText: IXMLS255List;
begin
  Result := FCustomsStampHeaderText;
end;

function TXMLCustomsStampInformation.Get_CustomsParty: IXMLParty;
begin
  Result := ChildNodes['CustomsParty'] as IXMLParty;
end;

function TXMLCustomsStampInformation.Get_CustomsStampDate: IXMLCustomsStampDate;
begin
  Result := ChildNodes['CustomsStampDate'] as IXMLCustomsStampDate;
end;

function TXMLCustomsStampInformation.Get_CustomsReferenceNumber: IXMLCustomsReferenceNumber;
begin
  Result := ChildNodes['CustomsReferenceNumber'] as IXMLCustomsReferenceNumber;
end;

function TXMLCustomsStampInformation.Get_SupplierCustomsReference: IXMLSupplierCustomsReference;
begin
  Result := ChildNodes['SupplierCustomsReference'] as IXMLSupplierCustomsReference;
end;

function TXMLCustomsStampInformation.Get_MillParty: IXMLParty;
begin
  Result := ChildNodes['MillParty'] as IXMLParty;
end;

function TXMLCustomsStampInformation.Get_CustomsStampTrailerText: IXMLS255List;
begin
  Result := FCustomsStampTrailerText;
end;

{ TXMLCustomsStampInformationList }

function TXMLCustomsStampInformationList.Add: IXMLCustomsStampInformation;
begin
  Result := AddItem(-1) as IXMLCustomsStampInformation;
end;

function TXMLCustomsStampInformationList.Insert(const Index: Integer): IXMLCustomsStampInformation;
begin
  Result := AddItem(Index) as IXMLCustomsStampInformation;
end;

function TXMLCustomsStampInformationList.Get_Item(Index: Integer): IXMLCustomsStampInformation;
begin
  Result := List[Index] as IXMLCustomsStampInformation;
end;

{ TXMLCustomsStampDate }

procedure TXMLCustomsStampDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLCustomsStampDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLCustomsStampDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLCustomsStampDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLCustomsReferenceNumber }

function TXMLCustomsReferenceNumber.Get_CustomsReferenceNumberType: UnicodeString;
begin
  Result := AttributeNodes['CustomsReferenceNumberType'].Text;
end;

procedure TXMLCustomsReferenceNumber.Set_CustomsReferenceNumberType(Value: UnicodeString);
begin
  SetAttribute('CustomsReferenceNumberType', Value);
end;

{ TXMLSupplierCustomsReference }

function TXMLSupplierCustomsReference.Get_SupplierCustomsReferenceType: UnicodeString;
begin
  Result := AttributeNodes['SupplierCustomsReferenceType'].Text;
end;

procedure TXMLSupplierCustomsReference.Set_SupplierCustomsReferenceType(Value: UnicodeString);
begin
  SetAttribute('SupplierCustomsReferenceType', Value);
end;

function TXMLSupplierCustomsReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLSupplierCustomsReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLTermsAndDisclaimers }

function TXMLTermsAndDisclaimers.Get_Language: UnicodeString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLTermsAndDisclaimers.Set_Language(Value: UnicodeString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLTermsAndDisclaimersList }

function TXMLTermsAndDisclaimersList.Add: IXMLTermsAndDisclaimers;
begin
  Result := AddItem(-1) as IXMLTermsAndDisclaimers;
end;

function TXMLTermsAndDisclaimersList.Insert(const Index: Integer): IXMLTermsAndDisclaimers;
begin
  Result := AddItem(Index) as IXMLTermsAndDisclaimers;
end;

function TXMLTermsAndDisclaimersList.Get_Item(Index: Integer): IXMLTermsAndDisclaimers;
begin
  Result := List[Index] as IXMLTermsAndDisclaimers;
end;

{ TXMLBusinessParty }

procedure TXMLBusinessParty.AfterConstruction;
begin
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('NameAddress', TXMLNameAddress);
  RegisterChildNode('URL', TXMLURL);
  RegisterChildNode('CommonContact', TXMLCommonContact);
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FCommonContact := CreateCollection(TXMLCommonContactList, IXMLCommonContact, 'CommonContact') as IXMLCommonContactList;
  inherited;
end;

function TXMLBusinessParty.Get_PartyType: UnicodeString;
begin
  Result := AttributeNodes['PartyType'].Text;
end;

procedure TXMLBusinessParty.Set_PartyType(Value: UnicodeString);
begin
  SetAttribute('PartyType', Value);
end;

function TXMLBusinessParty.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLBusinessParty.Get_NameAddress: IXMLNameAddress;
begin
  Result := ChildNodes['NameAddress'] as IXMLNameAddress;
end;

function TXMLBusinessParty.Get_URL: IXMLURL;
begin
  Result := ChildNodes['URL'] as IXMLURL;
end;

function TXMLBusinessParty.Get_CommonContact: IXMLCommonContactList;
begin
  Result := FCommonContact;
end;

{ TXMLCurrencyPerUnit }

procedure TXMLCurrencyPerUnit.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLCurrencyPerUnit.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLCurrencyPerUnit.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLCurrencyPerUnit.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLCurrencyPerUnit.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLDeliveryInformationType }

procedure TXMLDeliveryInformationType.AfterConstruction;
begin
  RegisterChildNode('DeliveryMessageDate', TXMLDeliveryMessageDate);
  RegisterChildNode('DeliveryDate', TXMLDeliveryDate);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('ChargeInformation', TXMLChargeInformation);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('TransportVehicleIdentifier', TXMLTransportVehicleIdentifier);
  RegisterChildNode('TransportUnitIdentifier', TXMLTransportUnitIdentifier);
  RegisterChildNode('DeliveryMessageReference', TXMLDeliveryMessageReference);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FChargeInformation := CreateCollection(TXMLChargeInformationList, IXMLChargeInformation, 'ChargeInformation') as IXMLChargeInformationList;
  FTransportVehicleIdentifier := CreateCollection(TXMLTransportVehicleIdentifierList, IXMLTransportVehicleIdentifier, 'TransportVehicleIdentifier') as IXMLTransportVehicleIdentifierList;
  FTransportUnitIdentifier := CreateCollection(TXMLTransportUnitIdentifierList, IXMLTransportUnitIdentifier, 'TransportUnitIdentifier') as IXMLTransportUnitIdentifierList;
  FDeliveryMessageReference := CreateCollection(TXMLDeliveryMessageReferenceList, IXMLDeliveryMessageReference, 'DeliveryMessageReference') as IXMLDeliveryMessageReferenceList;
  inherited;
end;

function TXMLDeliveryInformationType.Get_DeliveryMessageNumber: UnicodeString;
begin
  Result := ChildNodes['DeliveryMessageNumber'].Text;
end;

procedure TXMLDeliveryInformationType.Set_DeliveryMessageNumber(Value: UnicodeString);
begin
  ChildNodes['DeliveryMessageNumber'].NodeValue := Value;
end;

function TXMLDeliveryInformationType.Get_DeliveryMessageLineItemNumber: LongWord;
begin
  Result := ChildNodes['DeliveryMessageLineItemNumber'].NodeValue;
end;

procedure TXMLDeliveryInformationType.Set_DeliveryMessageLineItemNumber(Value: LongWord);
begin
  ChildNodes['DeliveryMessageLineItemNumber'].NodeValue := Value;
end;

function TXMLDeliveryInformationType.Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
begin
  Result := ChildNodes['DeliveryMessageDate'] as IXMLDeliveryMessageDate;
end;

function TXMLDeliveryInformationType.Get_DeliveryDate: IXMLDeliveryDate;
begin
  Result := ChildNodes['DeliveryDate'] as IXMLDeliveryDate;
end;

function TXMLDeliveryInformationType.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLDeliveryInformationType.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLDeliveryInformationType.Get_ChargeInformation: IXMLChargeInformationList;
begin
  Result := FChargeInformation;
end;

function TXMLDeliveryInformationType.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLDeliveryInformationType.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLDeliveryInformationType.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLDeliveryInformationType.Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
begin
  Result := FTransportVehicleIdentifier;
end;

function TXMLDeliveryInformationType.Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
begin
  Result := FTransportUnitIdentifier;
end;

function TXMLDeliveryInformationType.Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
begin
  Result := FDeliveryMessageReference;
end;

{ TXMLDeliveryMessageHeader }

procedure TXMLDeliveryMessageHeader.AfterConstruction;
begin
  RegisterChildNode('DeliveryMessageDate', TXMLDeliveryMessageDate);
  RegisterChildNode('DeliveryMessageReason', TXMLDeliveryMessageReason);
  RegisterChildNode('DeliveryMessageReference', TXMLDeliveryMessageReference);
  RegisterChildNode('BuyerParty', TXMLParty);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('SenderParty', TXMLTypedParty);
  RegisterChildNode('ReceiverParty', TXMLTypedParty);
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('DocumentInformation', TXMLDocumentInformation);
  RegisterChildNode('CoLoading', TXMLCoLoading);
  RegisterChildNode('DeliveryLeg', TXMLDeliveryLeg);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('AdditionalItemInfo', TXMLCodeInfo);
  FDeliveryMessageReason := CreateCollection(TXMLDeliveryMessageReasonList, IXMLDeliveryMessageReason, 'DeliveryMessageReason') as IXMLDeliveryMessageReasonList;
  FDeliveryMessageReference := CreateCollection(TXMLDeliveryMessageReferenceList, IXMLDeliveryMessageReference, 'DeliveryMessageReference') as IXMLDeliveryMessageReferenceList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FReceiverParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'ReceiverParty') as IXMLTypedPartyList;
  FDocumentInformation := CreateCollection(TXMLDocumentInformationList, IXMLDocumentInformation, 'DocumentInformation') as IXMLDocumentInformationList;
  FCoLoading := CreateCollection(TXMLCoLoadingList, IXMLCoLoading, 'CoLoading') as IXMLCoLoadingList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FDeliveryLeg := CreateCollection(TXMLDeliveryLegList, IXMLDeliveryLeg, 'DeliveryLeg') as IXMLDeliveryLegList;
  FAdditionalItemInfo := CreateCollection(TXMLCodeInfoList, IXMLCodeInfo, 'AdditionalItemInfo') as IXMLCodeInfoList;
  inherited;
end;

function TXMLDeliveryMessageHeader.Get_DeliveryMessageNumber: UnicodeString;
begin
  Result := ChildNodes['DeliveryMessageNumber'].Text;
end;

procedure TXMLDeliveryMessageHeader.Set_DeliveryMessageNumber(Value: UnicodeString);
begin
  ChildNodes['DeliveryMessageNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageHeader.Get_TransactionHistoryNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryNumber'].NodeValue;
end;

procedure TXMLDeliveryMessageHeader.Set_TransactionHistoryNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageHeader.Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
begin
  Result := ChildNodes['DeliveryMessageDate'] as IXMLDeliveryMessageDate;
end;

function TXMLDeliveryMessageHeader.Get_DeliveryMessageReason: IXMLDeliveryMessageReasonList;
begin
  Result := FDeliveryMessageReason;
end;

function TXMLDeliveryMessageHeader.Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
begin
  Result := FDeliveryMessageReference;
end;

function TXMLDeliveryMessageHeader.Get_BuyerParty: IXMLParty;
begin
  Result := ChildNodes['BuyerParty'] as IXMLParty;
end;

function TXMLDeliveryMessageHeader.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLDeliveryMessageHeader.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLDeliveryMessageHeader.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLDeliveryMessageHeader.Get_SenderParty: IXMLTypedParty;
begin
  Result := ChildNodes['SenderParty'] as IXMLTypedParty;
end;

function TXMLDeliveryMessageHeader.Get_ReceiverParty: IXMLTypedPartyList;
begin
  Result := FReceiverParty;
end;

function TXMLDeliveryMessageHeader.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLDeliveryMessageHeader.Get_DocumentInformation: IXMLDocumentInformationList;
begin
  Result := FDocumentInformation;
end;

function TXMLDeliveryMessageHeader.Get_CoLoading: IXMLCoLoadingList;
begin
  Result := FCoLoading;
end;

function TXMLDeliveryMessageHeader.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLDeliveryMessageHeader.Get_DeliveryLeg: IXMLDeliveryLegList;
begin
  Result := FDeliveryLeg;
end;

function TXMLDeliveryMessageHeader.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLDeliveryMessageHeader.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLDeliveryMessageHeader.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLDeliveryMessageHeader.Get_AdditionalItemInfo: IXMLCodeInfoList;
begin
  Result := FAdditionalItemInfo;
end;

{ TXMLDeliveryMessageReason }

procedure TXMLDeliveryMessageReason.AfterConstruction;
begin
  RegisterChildNode('DeliveryMessageReasonCode', TXMLDeliveryMessageReasonCode);
  FDeliveryMessageReasonDescription := CreateCollection(TXMLS255List, IXMLNode, 'DeliveryMessageReasonDescription') as IXMLS255List;
  inherited;
end;

function TXMLDeliveryMessageReason.Get_DeliveryMessageReasonCode: IXMLDeliveryMessageReasonCode;
begin
  Result := ChildNodes['DeliveryMessageReasonCode'] as IXMLDeliveryMessageReasonCode;
end;

function TXMLDeliveryMessageReason.Get_DeliveryMessageReasonDescription: IXMLS255List;
begin
  Result := FDeliveryMessageReasonDescription;
end;

{ TXMLDeliveryMessageReasonList }

function TXMLDeliveryMessageReasonList.Add: IXMLDeliveryMessageReason;
begin
  Result := AddItem(-1) as IXMLDeliveryMessageReason;
end;

function TXMLDeliveryMessageReasonList.Insert(const Index: Integer): IXMLDeliveryMessageReason;
begin
  Result := AddItem(Index) as IXMLDeliveryMessageReason;
end;

function TXMLDeliveryMessageReasonList.Get_Item(Index: Integer): IXMLDeliveryMessageReason;
begin
  Result := List[Index] as IXMLDeliveryMessageReason;
end;

{ TXMLDeliveryMessageReasonCode }

function TXMLDeliveryMessageReasonCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLDeliveryMessageReasonCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLCoLoading }

procedure TXMLCoLoading.AfterConstruction;
begin
  RegisterChildNode('CoLoadingNumber', TXMLCoLoadingNumber);
  RegisterChildNode('CoLoadingReference', TXMLCoLoadingReference);
  FCoLoadingReference := CreateCollection(TXMLCoLoadingReferenceList, IXMLCoLoadingReference, 'CoLoadingReference') as IXMLCoLoadingReferenceList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLCoLoading.Get_CoLoadingType: UnicodeString;
begin
  Result := AttributeNodes['CoLoadingType'].Text;
end;

procedure TXMLCoLoading.Set_CoLoadingType(Value: UnicodeString);
begin
  SetAttribute('CoLoadingType', Value);
end;

function TXMLCoLoading.Get_CoLoadingNumber: IXMLCoLoadingNumber;
begin
  Result := ChildNodes['CoLoadingNumber'] as IXMLCoLoadingNumber;
end;

function TXMLCoLoading.Get_DeliveryInstructionNumber: UnicodeString;
begin
  Result := ChildNodes['DeliveryInstructionNumber'].Text;
end;

procedure TXMLCoLoading.Set_DeliveryInstructionNumber(Value: UnicodeString);
begin
  ChildNodes['DeliveryInstructionNumber'].NodeValue := Value;
end;

function TXMLCoLoading.Get_DeliveryInstructionSequenceNumber: LongWord;
begin
  Result := ChildNodes['DeliveryInstructionSequenceNumber'].NodeValue;
end;

procedure TXMLCoLoading.Set_DeliveryInstructionSequenceNumber(Value: LongWord);
begin
  ChildNodes['DeliveryInstructionSequenceNumber'].NodeValue := Value;
end;

function TXMLCoLoading.Get_CoLoadingReference: IXMLCoLoadingReferenceList;
begin
  Result := FCoLoadingReference;
end;

function TXMLCoLoading.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLCoLoadingList }

function TXMLCoLoadingList.Add: IXMLCoLoading;
begin
  Result := AddItem(-1) as IXMLCoLoading;
end;

function TXMLCoLoadingList.Insert(const Index: Integer): IXMLCoLoading;
begin
  Result := AddItem(Index) as IXMLCoLoading;
end;

function TXMLCoLoadingList.Get_Item(Index: Integer): IXMLCoLoading;
begin
  Result := List[Index] as IXMLCoLoading;
end;

{ TXMLCoLoadingNumber }

function TXMLCoLoadingNumber.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLCoLoadingNumber.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLCoLoadingReference }

function TXMLCoLoadingReference.Get_CoLoadingReferenceType: UnicodeString;
begin
  Result := AttributeNodes['CoLoadingReferenceType'].Text;
end;

procedure TXMLCoLoadingReference.Set_CoLoadingReferenceType(Value: UnicodeString);
begin
  SetAttribute('CoLoadingReferenceType', Value);
end;

function TXMLCoLoadingReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLCoLoadingReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLCoLoadingReferenceList }

function TXMLCoLoadingReferenceList.Add: IXMLCoLoadingReference;
begin
  Result := AddItem(-1) as IXMLCoLoadingReference;
end;

function TXMLCoLoadingReferenceList.Insert(const Index: Integer): IXMLCoLoadingReference;
begin
  Result := AddItem(Index) as IXMLCoLoadingReference;
end;

function TXMLCoLoadingReferenceList.Get_Item(Index: Integer): IXMLCoLoadingReference;
begin
  Result := List[Index] as IXMLCoLoadingReference;
end;

{ TXMLDeliveryLeg }

procedure TXMLDeliveryLeg.AfterConstruction;
begin
  RegisterChildNode('DeliveryOrigin', TXMLDeliveryOrigin);
  RegisterChildNode('CarrierParty', TXMLParty);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('TransportModeCharacteristics', TXMLTransportModeCharacteristics);
  RegisterChildNode('TransportVehicleCharacteristics', TXMLTransportVehicleCharacteristics);
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  RegisterChildNode('ResourceInformation', TXMLResourceInformation);
  RegisterChildNode('TransportLoadingCharacteristics', TXMLTransportLoadingCharacteristics);
  RegisterChildNode('TransportUnloadingCharacteristics', TXMLTransportUnloadingCharacteristics);
  RegisterChildNode('TransportOtherInstructions', TXMLTransportOtherInstructions);
  RegisterChildNode('Route', TXMLRoute);
  RegisterChildNode('DeliveryTransitTime', TXMLDeliveryTransitTime);
  RegisterChildNode('DeliveryDestination', TXMLDeliveryDestination);
  RegisterChildNode('DeliveryDateWindow', TXMLDeliveryDateWindow);
  RegisterChildNode('DeliveryLegReference', TXMLDeliveryLegReference);
  RegisterChildNode('TermsOfChartering', TXMLTermsOfChartering);
  RegisterChildNode('BusinessChainInfo', TXMLBusinessChainInfo);
  FDeliveryOrigin := CreateCollection(TXMLDeliveryOriginList, IXMLDeliveryOrigin, 'DeliveryOrigin') as IXMLDeliveryOriginList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FTransportUnitCharacteristics := CreateCollection(TXMLTransportUnitCharacteristicsList, IXMLTransportUnitCharacteristics, 'TransportUnitCharacteristics') as IXMLTransportUnitCharacteristicsList;
  FTransportLoadingCharacteristics := CreateCollection(TXMLTransportLoadingCharacteristicsList, IXMLTransportLoadingCharacteristics, 'TransportLoadingCharacteristics') as IXMLTransportLoadingCharacteristicsList;
  FTransportUnloadingCharacteristics := CreateCollection(TXMLTransportUnloadingCharacteristicsList, IXMLTransportUnloadingCharacteristics, 'TransportUnloadingCharacteristics') as IXMLTransportUnloadingCharacteristicsList;
  FTransportOtherInstructions := CreateCollection(TXMLTransportOtherInstructionsList, IXMLTransportOtherInstructions, 'TransportOtherInstructions') as IXMLTransportOtherInstructionsList;
  FRoute := CreateCollection(TXMLRouteList, IXMLRoute, 'Route') as IXMLRouteList;
  FDeliveryDestination := CreateCollection(TXMLDeliveryDestinationList, IXMLDeliveryDestination, 'DeliveryDestination') as IXMLDeliveryDestinationList;
  FDeliveryDateWindow := CreateCollection(TXMLDeliveryDateWindowList, IXMLDeliveryDateWindow, 'DeliveryDateWindow') as IXMLDeliveryDateWindowList;
  FDeliveryLegReference := CreateCollection(TXMLDeliveryLegReferenceList, IXMLDeliveryLegReference, 'DeliveryLegReference') as IXMLDeliveryLegReferenceList;
  FTermsOfChartering := CreateCollection(TXMLTermsOfCharteringList, IXMLTermsOfChartering, 'TermsOfChartering') as IXMLTermsOfCharteringList;
  inherited;
end;

function TXMLDeliveryLeg.Get_DeliveryModeType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryModeType'].Text;
end;

procedure TXMLDeliveryLeg.Set_DeliveryModeType(Value: UnicodeString);
begin
  SetAttribute('DeliveryModeType', Value);
end;

function TXMLDeliveryLeg.Get_DeliveryLegType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryLegType'].Text;
end;

procedure TXMLDeliveryLeg.Set_DeliveryLegType(Value: UnicodeString);
begin
  SetAttribute('DeliveryLegType', Value);
end;

function TXMLDeliveryLeg.Get_EventType: UnicodeString;
begin
  Result := AttributeNodes['EventType'].Text;
end;

procedure TXMLDeliveryLeg.Set_EventType(Value: UnicodeString);
begin
  SetAttribute('EventType', Value);
end;

function TXMLDeliveryLeg.Get_LegStageType: UnicodeString;
begin
  Result := AttributeNodes['LegStageType'].Text;
end;

procedure TXMLDeliveryLeg.Set_LegStageType(Value: UnicodeString);
begin
  SetAttribute('LegStageType', Value);
end;

function TXMLDeliveryLeg.Get_TransportContextType: UnicodeString;
begin
  Result := AttributeNodes['TransportContextType'].Text;
end;

procedure TXMLDeliveryLeg.Set_TransportContextType(Value: UnicodeString);
begin
  SetAttribute('TransportContextType', Value);
end;

function TXMLDeliveryLeg.Get_IsOpenDeliveryAgreement: UnicodeString;
begin
  Result := AttributeNodes['IsOpenDeliveryAgreement'].Text;
end;

procedure TXMLDeliveryLeg.Set_IsOpenDeliveryAgreement(Value: UnicodeString);
begin
  SetAttribute('IsOpenDeliveryAgreement', Value);
end;

function TXMLDeliveryLeg.Get_DeliveryLegSequenceNumber: LongWord;
begin
  Result := ChildNodes['DeliveryLegSequenceNumber'].NodeValue;
end;

procedure TXMLDeliveryLeg.Set_DeliveryLegSequenceNumber(Value: LongWord);
begin
  ChildNodes['DeliveryLegSequenceNumber'].NodeValue := Value;
end;

function TXMLDeliveryLeg.Get_DeliveryOrigin: IXMLDeliveryOriginList;
begin
  Result := FDeliveryOrigin;
end;

function TXMLDeliveryLeg.Get_CarrierParty: IXMLParty;
begin
  Result := ChildNodes['CarrierParty'] as IXMLParty;
end;

function TXMLDeliveryLeg.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLDeliveryLeg.Get_TransportModeCharacteristics: IXMLTransportModeCharacteristics;
begin
  Result := ChildNodes['TransportModeCharacteristics'] as IXMLTransportModeCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
begin
  Result := ChildNodes['TransportVehicleCharacteristics'] as IXMLTransportVehicleCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
begin
  Result := FTransportUnitCharacteristics;
end;

function TXMLDeliveryLeg.Get_ResourceInformation: IXMLResourceInformation;
begin
  Result := ChildNodes['ResourceInformation'] as IXMLResourceInformation;
end;

function TXMLDeliveryLeg.Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
begin
  Result := FTransportLoadingCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
begin
  Result := FTransportUnloadingCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
begin
  Result := FTransportOtherInstructions;
end;

function TXMLDeliveryLeg.Get_Route: IXMLRouteList;
begin
  Result := FRoute;
end;

function TXMLDeliveryLeg.Get_DeliveryTransitTime: IXMLDeliveryTransitTime;
begin
  Result := ChildNodes['DeliveryTransitTime'] as IXMLDeliveryTransitTime;
end;

function TXMLDeliveryLeg.Get_DeliveryDestination: IXMLDeliveryDestinationList;
begin
  Result := FDeliveryDestination;
end;

function TXMLDeliveryLeg.Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
begin
  Result := FDeliveryDateWindow;
end;

function TXMLDeliveryLeg.Get_DeliveryLegReference: IXMLDeliveryLegReferenceList;
begin
  Result := FDeliveryLegReference;
end;

function TXMLDeliveryLeg.Get_TermsOfChartering: IXMLTermsOfCharteringList;
begin
  Result := FTermsOfChartering;
end;

function TXMLDeliveryLeg.Get_BusinessChainInfo: IXMLBusinessChainInfo;
begin
  Result := ChildNodes['BusinessChainInfo'] as IXMLBusinessChainInfo;
end;

{ TXMLDeliveryLegList }

function TXMLDeliveryLegList.Add: IXMLDeliveryLeg;
begin
  Result := AddItem(-1) as IXMLDeliveryLeg;
end;

function TXMLDeliveryLegList.Insert(const Index: Integer): IXMLDeliveryLeg;
begin
  Result := AddItem(Index) as IXMLDeliveryLeg;
end;

function TXMLDeliveryLegList.Get_Item(Index: Integer): IXMLDeliveryLeg;
begin
  Result := List[Index] as IXMLDeliveryLeg;
end;

{ TXMLDeliveryOrigin }

procedure TXMLDeliveryOrigin.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('LocationCharacteristics', TXMLLocationCharacteristics);
  RegisterChildNode('SupplyPoint', TXMLSupplyPoint);
  RegisterChildNode('LocationCode', TXMLLocationCode);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  FSupplyPoint := CreateCollection(TXMLSupplyPointList, IXMLSupplyPoint, 'SupplyPoint') as IXMLSupplyPointList;
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  inherited;
end;

function TXMLDeliveryOrigin.Get_IsOptionalDeliveryOrigin: UnicodeString;
begin
  Result := AttributeNodes['IsOptionalDeliveryOrigin'].Text;
end;

procedure TXMLDeliveryOrigin.Set_IsOptionalDeliveryOrigin(Value: UnicodeString);
begin
  SetAttribute('IsOptionalDeliveryOrigin', Value);
end;

function TXMLDeliveryOrigin.Get_PriorityOrder: LongWord;
begin
  Result := AttributeNodes['PriorityOrder'].NodeValue;
end;

procedure TXMLDeliveryOrigin.Set_PriorityOrder(Value: LongWord);
begin
  SetAttribute('PriorityOrder', Value);
end;

function TXMLDeliveryOrigin.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryOrigin.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryOrigin.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLDeliveryOrigin.Get_LocationParty: IXMLLocationParty;
begin
  Result := ChildNodes['LocationParty'] as IXMLLocationParty;
end;

function TXMLDeliveryOrigin.Get_LocationCharacteristics: IXMLLocationCharacteristics;
begin
  Result := ChildNodes['LocationCharacteristics'] as IXMLLocationCharacteristics;
end;

function TXMLDeliveryOrigin.Get_SupplyPoint: IXMLSupplyPointList;
begin
  Result := FSupplyPoint;
end;

function TXMLDeliveryOrigin.Get_LocationCode: IXMLLocationCode;
begin
  Result := ChildNodes['LocationCode'] as IXMLLocationCode;
end;

function TXMLDeliveryOrigin.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

function TXMLDeliveryOrigin.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

{ TXMLDeliveryOriginList }

function TXMLDeliveryOriginList.Add: IXMLDeliveryOrigin;
begin
  Result := AddItem(-1) as IXMLDeliveryOrigin;
end;

function TXMLDeliveryOriginList.Insert(const Index: Integer): IXMLDeliveryOrigin;
begin
  Result := AddItem(Index) as IXMLDeliveryOrigin;
end;

function TXMLDeliveryOriginList.Get_Item(Index: Integer): IXMLDeliveryOrigin;
begin
  Result := List[Index] as IXMLDeliveryOrigin;
end;

{ TXMLLocationCharacteristics }

procedure TXMLLocationCharacteristics.AfterConstruction;
begin
  RegisterChildNode('LocationProperty', TXMLCodeInfo);
  RegisterChildNode('MapPoint', TXMLMapPoint);
  RegisterChildNode('AreaInfo', TXMLAreaInfo);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('eAttachment', TXMLEAttachment);
  FLocationProperty := CreateCollection(TXMLCodeInfoList, IXMLCodeInfo, 'LocationProperty') as IXMLCodeInfoList;
  FMapPoint := CreateCollection(TXMLMapPointList, IXMLMapPoint, 'MapPoint') as IXMLMapPointList;
  FAreaInfo := CreateCollection(TXMLAreaInfoList, IXMLAreaInfo, 'AreaInfo') as IXMLAreaInfoList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLLocationCharacteristics.Get_LocationProperty: IXMLCodeInfoList;
begin
  Result := FLocationProperty;
end;

function TXMLLocationCharacteristics.Get_MapPoint: IXMLMapPointList;
begin
  Result := FMapPoint;
end;

function TXMLLocationCharacteristics.Get_AreaInfo: IXMLAreaInfoList;
begin
  Result := FAreaInfo;
end;

function TXMLLocationCharacteristics.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLLocationCharacteristics.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLLocationCharacteristics.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLLocationCharacteristics.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['eAttachment'] as IXMLEAttachment;
end;

function TXMLLocationCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLResourceInformation }

procedure TXMLResourceInformation.AfterConstruction;
begin
  RegisterChildNode('ResourceInformationIssueDate', TXMLResourceInformationIssueDate);
  RegisterChildNode('ResourceCharacteristics', TXMLResourceCharacteristics);
  FResourceCharacteristics := CreateCollection(TXMLResourceCharacteristicsList, IXMLResourceCharacteristics, 'ResourceCharacteristics') as IXMLResourceCharacteristicsList;
  inherited;
end;

function TXMLResourceInformation.Get_ResourceInformationNumber: UnicodeString;
begin
  Result := ChildNodes['ResourceInformationNumber'].Text;
end;

procedure TXMLResourceInformation.Set_ResourceInformationNumber(Value: UnicodeString);
begin
  ChildNodes['ResourceInformationNumber'].NodeValue := Value;
end;

function TXMLResourceInformation.Get_ResourceInformationIssueDate: IXMLResourceInformationIssueDate;
begin
  Result := ChildNodes['ResourceInformationIssueDate'] as IXMLResourceInformationIssueDate;
end;

function TXMLResourceInformation.Get_ResourceCharacteristics: IXMLResourceCharacteristicsList;
begin
  Result := FResourceCharacteristics;
end;

{ TXMLResourceInformationIssueDate }

procedure TXMLResourceInformationIssueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLResourceInformationIssueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLResourceInformationIssueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLResourceInformationIssueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLResourceCharacteristics }

procedure TXMLResourceCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ResourceTypeCode', TXMLResourceTypeCode);
  RegisterChildNode('ResourceIDInfo', TXMLResourceIDInfo);
  RegisterChildNode('ResourceReferenceIDInfo', TXMLResourceReferenceIDInfo);
  RegisterChildNode('ResourceReference', TXMLResourceReference);
  RegisterChildNode('ResourceIntroductionDate', TXMLResourceIntroductionDate);
  RegisterChildNode('ResourceAvailability', TXMLResourceAvailability);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('ResourcePropertyValue', TXMLResourcePropertyValue);
  FResourceTypeDescription := CreateCollection(TXMLS255List, IXMLNode, 'ResourceTypeDescription') as IXMLS255List;
  FResourceIDInfo := CreateCollection(TXMLResourceIDInfoList, IXMLResourceIDInfo, 'ResourceIDInfo') as IXMLResourceIDInfoList;
  FResourceReferenceIDInfo := CreateCollection(TXMLResourceReferenceIDInfoList, IXMLResourceReferenceIDInfo, 'ResourceReferenceIDInfo') as IXMLResourceReferenceIDInfoList;
  FResourceReference := CreateCollection(TXMLResourceReferenceList, IXMLResourceReference, 'ResourceReference') as IXMLResourceReferenceList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FResourcePropertyValue := CreateCollection(TXMLResourcePropertyValueList, IXMLResourcePropertyValue, 'ResourcePropertyValue') as IXMLResourcePropertyValueList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLResourceCharacteristics.Get_ResourceTypeCode: IXMLResourceTypeCode;
begin
  Result := ChildNodes['ResourceTypeCode'] as IXMLResourceTypeCode;
end;

function TXMLResourceCharacteristics.Get_ResourceTypeDescription: IXMLS255List;
begin
  Result := FResourceTypeDescription;
end;

function TXMLResourceCharacteristics.Get_ResourceIDInfo: IXMLResourceIDInfoList;
begin
  Result := FResourceIDInfo;
end;

function TXMLResourceCharacteristics.Get_ResourceReferenceIDInfo: IXMLResourceReferenceIDInfoList;
begin
  Result := FResourceReferenceIDInfo;
end;

function TXMLResourceCharacteristics.Get_ResourceReference: IXMLResourceReferenceList;
begin
  Result := FResourceReference;
end;

function TXMLResourceCharacteristics.Get_ResourceIntroductionDate: IXMLResourceIntroductionDate;
begin
  Result := ChildNodes['ResourceIntroductionDate'] as IXMLResourceIntroductionDate;
end;

function TXMLResourceCharacteristics.Get_ResourceAvailability: IXMLResourceAvailability;
begin
  Result := ChildNodes['ResourceAvailability'] as IXMLResourceAvailability;
end;

function TXMLResourceCharacteristics.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLResourceCharacteristics.Get_ResourcePropertyValue: IXMLResourcePropertyValueList;
begin
  Result := FResourcePropertyValue;
end;

function TXMLResourceCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLResourceCharacteristicsList }

function TXMLResourceCharacteristicsList.Add: IXMLResourceCharacteristics;
begin
  Result := AddItem(-1) as IXMLResourceCharacteristics;
end;

function TXMLResourceCharacteristicsList.Insert(const Index: Integer): IXMLResourceCharacteristics;
begin
  Result := AddItem(Index) as IXMLResourceCharacteristics;
end;

function TXMLResourceCharacteristicsList.Get_Item(Index: Integer): IXMLResourceCharacteristics;
begin
  Result := List[Index] as IXMLResourceCharacteristics;
end;

{ TXMLResourceTypeCode }

function TXMLResourceTypeCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLResourceTypeCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLResourceIDInfo }

procedure TXMLResourceIDInfo.AfterConstruction;
begin
  RegisterChildNode('ResourceIdentifier', TXMLResourceIdentifier);
  FResourceDescription := CreateCollection(TXMLS255List, IXMLNode, 'ResourceDescription') as IXMLS255List;
  inherited;
end;

function TXMLResourceIDInfo.Get_ResourceIdentifier: IXMLResourceIdentifier;
begin
  Result := ChildNodes['ResourceIdentifier'] as IXMLResourceIdentifier;
end;

function TXMLResourceIDInfo.Get_ResourceDescription: IXMLS255List;
begin
  Result := FResourceDescription;
end;

{ TXMLResourceIDInfoList }

function TXMLResourceIDInfoList.Add: IXMLResourceIDInfo;
begin
  Result := AddItem(-1) as IXMLResourceIDInfo;
end;

function TXMLResourceIDInfoList.Insert(const Index: Integer): IXMLResourceIDInfo;
begin
  Result := AddItem(Index) as IXMLResourceIDInfo;
end;

function TXMLResourceIDInfoList.Get_Item(Index: Integer): IXMLResourceIDInfo;
begin
  Result := List[Index] as IXMLResourceIDInfo;
end;

{ TXMLResourceIdentifier }

function TXMLResourceIdentifier.Get_ResourceIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['ResourceIdentifierType'].Text;
end;

procedure TXMLResourceIdentifier.Set_ResourceIdentifierType(Value: UnicodeString);
begin
  SetAttribute('ResourceIdentifierType', Value);
end;

function TXMLResourceIdentifier.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLResourceIdentifier.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLResourceIdentifier.Get_StateOrProvince: UnicodeString;
begin
  Result := AttributeNodes['StateOrProvince'].Text;
end;

procedure TXMLResourceIdentifier.Set_StateOrProvince(Value: UnicodeString);
begin
  SetAttribute('StateOrProvince', Value);
end;

function TXMLResourceIdentifier.Get_ISOCountryCode: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCode'].Text;
end;

procedure TXMLResourceIdentifier.Set_ISOCountryCode(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCode', Value);
end;

function TXMLResourceIdentifier.Get_ISOCountryCodeAlpha3: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeAlpha3'].Text;
end;

procedure TXMLResourceIdentifier.Set_ISOCountryCodeAlpha3(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeAlpha3', Value);
end;

function TXMLResourceIdentifier.Get_ISOCountryCodeNumeric: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeNumeric'].Text;
end;

procedure TXMLResourceIdentifier.Set_ISOCountryCodeNumeric(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeNumeric', Value);
end;

{ TXMLResourceReferenceIDInfo }

procedure TXMLResourceReferenceIDInfo.AfterConstruction;
begin
  RegisterChildNode('ResourceIDInfo', TXMLResourceIDInfo);
  ItemTag := 'ResourceIDInfo';
  ItemInterface := IXMLResourceIDInfo;
  inherited;
end;

function TXMLResourceReferenceIDInfo.Get_ResourceReferenceIDType: UnicodeString;
begin
  Result := AttributeNodes['ResourceReferenceIDType'].Text;
end;

procedure TXMLResourceReferenceIDInfo.Set_ResourceReferenceIDType(Value: UnicodeString);
begin
  SetAttribute('ResourceReferenceIDType', Value);
end;

function TXMLResourceReferenceIDInfo.Get_ResourceIDInfo(Index: Integer): IXMLResourceIDInfo;
begin
  Result := List[Index] as IXMLResourceIDInfo;
end;

function TXMLResourceReferenceIDInfo.Add: IXMLResourceIDInfo;
begin
  Result := AddItem(-1) as IXMLResourceIDInfo;
end;

function TXMLResourceReferenceIDInfo.Insert(const Index: Integer): IXMLResourceIDInfo;
begin
  Result := AddItem(Index) as IXMLResourceIDInfo;
end;

{ TXMLResourceReferenceIDInfoList }

function TXMLResourceReferenceIDInfoList.Add: IXMLResourceReferenceIDInfo;
begin
  Result := AddItem(-1) as IXMLResourceReferenceIDInfo;
end;

function TXMLResourceReferenceIDInfoList.Insert(const Index: Integer): IXMLResourceReferenceIDInfo;
begin
  Result := AddItem(Index) as IXMLResourceReferenceIDInfo;
end;

function TXMLResourceReferenceIDInfoList.Get_Item(Index: Integer): IXMLResourceReferenceIDInfo;
begin
  Result := List[Index] as IXMLResourceReferenceIDInfo;
end;

{ TXMLResourceReference }

function TXMLResourceReference.Get_ResourceReferenceType: UnicodeString;
begin
  Result := AttributeNodes['ResourceReferenceType'].Text;
end;

procedure TXMLResourceReference.Set_ResourceReferenceType(Value: UnicodeString);
begin
  SetAttribute('ResourceReferenceType', Value);
end;

function TXMLResourceReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLResourceReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLResourceReferenceList }

function TXMLResourceReferenceList.Add: IXMLResourceReference;
begin
  Result := AddItem(-1) as IXMLResourceReference;
end;

function TXMLResourceReferenceList.Insert(const Index: Integer): IXMLResourceReference;
begin
  Result := AddItem(Index) as IXMLResourceReference;
end;

function TXMLResourceReferenceList.Get_Item(Index: Integer): IXMLResourceReference;
begin
  Result := List[Index] as IXMLResourceReference;
end;

{ TXMLResourceIntroductionDate }

procedure TXMLResourceIntroductionDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLResourceIntroductionDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

{ TXMLResourceAvailability }

procedure TXMLResourceAvailability.AfterConstruction;
begin
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  RegisterChildNode('ResourceShiftInformation', TXMLResourceShiftInformation);
  FDateTimeRange := CreateCollection(TXMLDateTimeRangeList, IXMLDateTimeRange, 'DateTimeRange') as IXMLDateTimeRangeList;
  FResourceShiftInformation := CreateCollection(TXMLResourceShiftInformationList, IXMLResourceShiftInformation, 'ResourceShiftInformation') as IXMLResourceShiftInformationList;
  inherited;
end;

function TXMLResourceAvailability.Get_DateTimeRange: IXMLDateTimeRangeList;
begin
  Result := FDateTimeRange;
end;

function TXMLResourceAvailability.Get_ResourceShiftInformation: IXMLResourceShiftInformationList;
begin
  Result := FResourceShiftInformation;
end;

{ TXMLResourceShiftInformation }

procedure TXMLResourceShiftInformation.AfterConstruction;
begin
  RegisterChildNode('ResourceShiftCode', TXMLResourceShiftCode);
  FResourceShiftDescription := CreateCollection(TXMLS255List, IXMLNode, 'ResourceShiftDescription') as IXMLS255List;
  inherited;
end;

function TXMLResourceShiftInformation.Get_ResourceShiftCode: IXMLResourceShiftCode;
begin
  Result := ChildNodes['ResourceShiftCode'] as IXMLResourceShiftCode;
end;

function TXMLResourceShiftInformation.Get_ResourceShiftDescription: IXMLS255List;
begin
  Result := FResourceShiftDescription;
end;

{ TXMLResourceShiftInformationList }

function TXMLResourceShiftInformationList.Add: IXMLResourceShiftInformation;
begin
  Result := AddItem(-1) as IXMLResourceShiftInformation;
end;

function TXMLResourceShiftInformationList.Insert(const Index: Integer): IXMLResourceShiftInformation;
begin
  Result := AddItem(Index) as IXMLResourceShiftInformation;
end;

function TXMLResourceShiftInformationList.Get_Item(Index: Integer): IXMLResourceShiftInformation;
begin
  Result := List[Index] as IXMLResourceShiftInformation;
end;

{ TXMLResourceShiftCode }

function TXMLResourceShiftCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLResourceShiftCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLResourcePropertyValue }

procedure TXMLResourcePropertyValue.AfterConstruction;
begin
  RegisterChildNode('PropertyCode', TXMLPropertyCode);
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  RegisterChildNode('QuantityValue', TXMLQuantityValue);
  FPropertyDescription := CreateCollection(TXMLS255List, IXMLNode, 'PropertyDescription') as IXMLS255List;
  FQuantityValue := CreateCollection(TXMLQuantityValueList, IXMLQuantityValue, 'QuantityValue') as IXMLQuantityValueList;
  inherited;
end;

function TXMLResourcePropertyValue.Get_PropertyCode: IXMLPropertyCode;
begin
  Result := ChildNodes['PropertyCode'] as IXMLPropertyCode;
end;

function TXMLResourcePropertyValue.Get_PropertyDescription: IXMLS255List;
begin
  Result := FPropertyDescription;
end;

function TXMLResourcePropertyValue.Get_BinaryValue: UnicodeString;
begin
  Result := ChildNodes['BinaryValue'].Text;
end;

procedure TXMLResourcePropertyValue.Set_BinaryValue(Value: UnicodeString);
begin
  ChildNodes['BinaryValue'].NodeValue := Value;
end;

function TXMLResourcePropertyValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLResourcePropertyValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLResourcePropertyValue.Get_DateTimeValue: UnicodeString;
begin
  Result := ChildNodes['DateTimeValue'].Text;
end;

procedure TXMLResourcePropertyValue.Set_DateTimeValue(Value: UnicodeString);
begin
  ChildNodes['DateTimeValue'].NodeValue := Value;
end;

function TXMLResourcePropertyValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLResourcePropertyValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLResourcePropertyValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

function TXMLResourcePropertyValue.Get_QuantityValue: IXMLQuantityValueList;
begin
  Result := FQuantityValue;
end;

{ TXMLResourcePropertyValueList }

function TXMLResourcePropertyValueList.Add: IXMLResourcePropertyValue;
begin
  Result := AddItem(-1) as IXMLResourcePropertyValue;
end;

function TXMLResourcePropertyValueList.Insert(const Index: Integer): IXMLResourcePropertyValue;
begin
  Result := AddItem(Index) as IXMLResourcePropertyValue;
end;

function TXMLResourcePropertyValueList.Get_Item(Index: Integer): IXMLResourcePropertyValue;
begin
  Result := List[Index] as IXMLResourcePropertyValue;
end;

{ TXMLPropertyCode }

function TXMLPropertyCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLPropertyCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLQuantityValue }

function TXMLQuantityValue.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLQuantityValue.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLQuantityValue.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLQuantityValue.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLQuantityValue.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLQuantityValue.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLQuantityValueList }

function TXMLQuantityValueList.Add: IXMLQuantityValue;
begin
  Result := AddItem(-1) as IXMLQuantityValue;
end;

function TXMLQuantityValueList.Insert(const Index: Integer): IXMLQuantityValue;
begin
  Result := AddItem(Index) as IXMLQuantityValue;
end;

function TXMLQuantityValueList.Get_Item(Index: Integer): IXMLQuantityValue;
begin
  Result := List[Index] as IXMLQuantityValue;
end;

{ TXMLTransportLoadingCharacteristics }

procedure TXMLTransportLoadingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportLoadingCode', TXMLTransportLoadingCode);
  RegisterChildNode('TransportLoadingCodeDescription', TXMLTransportLoadingCodeDescription);
  RegisterChildNode('GoodsLoadingSequence', TXMLGoodsLoadingSequence);
  RegisterChildNode('LoadingFrom', TXMLLoadingFrom);
  FTransportLoadingText := CreateCollection(TXMLS255List, IXMLNode, 'TransportLoadingText') as IXMLS255List;
  inherited;
end;

function TXMLTransportLoadingCharacteristics.Get_MixProductIndicator: UnicodeString;
begin
  Result := AttributeNodes['MixProductIndicator'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_MixProductIndicator(Value: UnicodeString);
begin
  SetAttribute('MixProductIndicator', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingType: UnicodeString;
begin
  Result := AttributeNodes['TransportLoadingType'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_TransportLoadingType(Value: UnicodeString);
begin
  SetAttribute('TransportLoadingType', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_TransportDeckOption: UnicodeString;
begin
  Result := AttributeNodes['TransportDeckOption'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_TransportDeckOption(Value: UnicodeString);
begin
  SetAttribute('TransportDeckOption', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_LoadingTolerance: UnicodeString;
begin
  Result := AttributeNodes['LoadingTolerance'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_LoadingTolerance(Value: UnicodeString);
begin
  SetAttribute('LoadingTolerance', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_DirectLoading: UnicodeString;
begin
  Result := AttributeNodes['DirectLoading'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_DirectLoading(Value: UnicodeString);
begin
  SetAttribute('DirectLoading', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_GoodsLoadingPrinciple: UnicodeString;
begin
  Result := AttributeNodes['GoodsLoadingPrinciple'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_GoodsLoadingPrinciple(Value: UnicodeString);
begin
  SetAttribute('GoodsLoadingPrinciple', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_LabelOrientation: UnicodeString;
begin
  Result := AttributeNodes['LabelOrientation'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_LabelOrientation(Value: UnicodeString);
begin
  SetAttribute('LabelOrientation', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_IsSlotManaged: UnicodeString;
begin
  Result := AttributeNodes['IsSlotManaged'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_IsSlotManaged(Value: UnicodeString);
begin
  SetAttribute('IsSlotManaged', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_IsCarrierLoadingOperator: UnicodeString;
begin
  Result := AttributeNodes['IsCarrierLoadingOperator'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_IsCarrierLoadingOperator(Value: UnicodeString);
begin
  SetAttribute('IsCarrierLoadingOperator', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingCode: IXMLTransportLoadingCode;
begin
  Result := ChildNodes['TransportLoadingCode'] as IXMLTransportLoadingCode;
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription;
begin
  Result := ChildNodes['TransportLoadingCodeDescription'] as IXMLTransportLoadingCodeDescription;
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingText: IXMLS255List;
begin
  Result := FTransportLoadingText;
end;

function TXMLTransportLoadingCharacteristics.Get_GoodsLoadingSequence: IXMLGoodsLoadingSequence;
begin
  Result := ChildNodes['GoodsLoadingSequence'] as IXMLGoodsLoadingSequence;
end;

function TXMLTransportLoadingCharacteristics.Get_LoadingFrom: IXMLLoadingFrom;
begin
  Result := ChildNodes['LoadingFrom'] as IXMLLoadingFrom;
end;

{ TXMLTransportLoadingCharacteristicsList }

function TXMLTransportLoadingCharacteristicsList.Add: IXMLTransportLoadingCharacteristics;
begin
  Result := AddItem(-1) as IXMLTransportLoadingCharacteristics;
end;

function TXMLTransportLoadingCharacteristicsList.Insert(const Index: Integer): IXMLTransportLoadingCharacteristics;
begin
  Result := AddItem(Index) as IXMLTransportLoadingCharacteristics;
end;

function TXMLTransportLoadingCharacteristicsList.Get_Item(Index: Integer): IXMLTransportLoadingCharacteristics;
begin
  Result := List[Index] as IXMLTransportLoadingCharacteristics;
end;

{ TXMLTransportLoadingCode }

function TXMLTransportLoadingCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportLoadingCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportLoadingCodeDescription }

procedure TXMLTransportLoadingCodeDescription.AfterConstruction;
begin
  RegisterChildNode('e-Attachment', TXMLEAttachment);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTransportLoadingCodeDescription.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLTransportLoadingCodeDescription.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['e-Attachment'] as IXMLEAttachment;
end;

{ TXMLGoodsLoadingSequence }

procedure TXMLGoodsLoadingSequence.AfterConstruction;
begin
  RegisterChildNode('TransportUnitReferenceIDInfo', TXMLTransportUnitReferenceIDInfo);
  RegisterChildNode('LoadingSequence', TXMLLoadingSequence);
  FTransportUnitReferenceIDInfo := CreateCollection(TXMLTransportUnitReferenceIDInfoList, IXMLTransportUnitReferenceIDInfo, 'TransportUnitReferenceIDInfo') as IXMLTransportUnitReferenceIDInfoList;
  FLoadingSequence := CreateCollection(TXMLLoadingSequenceList, IXMLLoadingSequence, 'LoadingSequence') as IXMLLoadingSequenceList;
  inherited;
end;

function TXMLGoodsLoadingSequence.Get_LoadingSequenceType: UnicodeString;
begin
  Result := AttributeNodes['LoadingSequenceType'].Text;
end;

procedure TXMLGoodsLoadingSequence.Set_LoadingSequenceType(Value: UnicodeString);
begin
  SetAttribute('LoadingSequenceType', Value);
end;

function TXMLGoodsLoadingSequence.Get_TransportUnitReferenceIDInfo: IXMLTransportUnitReferenceIDInfoList;
begin
  Result := FTransportUnitReferenceIDInfo;
end;

function TXMLGoodsLoadingSequence.Get_LoadingSequence: IXMLLoadingSequenceList;
begin
  Result := FLoadingSequence;
end;

{ TXMLLoadingSequence }

procedure TXMLLoadingSequence.AfterConstruction;
begin
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  inherited;
end;

function TXMLLoadingSequence.Get_SequenceNumber: LongWord;
begin
  Result := ChildNodes['SequenceNumber'].NodeValue;
end;

procedure TXMLLoadingSequence.Set_SequenceNumber(Value: LongWord);
begin
  ChildNodes['SequenceNumber'].NodeValue := Value;
end;

function TXMLLoadingSequence.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

{ TXMLLoadingSequenceList }

function TXMLLoadingSequenceList.Add: IXMLLoadingSequence;
begin
  Result := AddItem(-1) as IXMLLoadingSequence;
end;

function TXMLLoadingSequenceList.Insert(const Index: Integer): IXMLLoadingSequence;
begin
  Result := AddItem(Index) as IXMLLoadingSequence;
end;

function TXMLLoadingSequenceList.Get_Item(Index: Integer): IXMLLoadingSequence;
begin
  Result := List[Index] as IXMLLoadingSequence;
end;

{ TXMLLoadingFrom }

procedure TXMLLoadingFrom.AfterConstruction;
begin
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  inherited;
end;

function TXMLLoadingFrom.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristics;
begin
  Result := ChildNodes['TransportUnitCharacteristics'] as IXMLTransportUnitCharacteristics;
end;

{ TXMLTransportUnloadingCharacteristics }

procedure TXMLTransportUnloadingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportUnloadingCode', TXMLTransportUnloadingCode);
  RegisterChildNode('TransportUnloadingCodeDescription', TXMLTransportUnloadingCodeDescription);
  FTransportUnloadingText := CreateCollection(TXMLS255List, IXMLNode, 'TransportUnloadingText') as IXMLS255List;
  inherited;
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingType: UnicodeString;
begin
  Result := AttributeNodes['TransportUnloadingType'].Text;
end;

procedure TXMLTransportUnloadingCharacteristics.Set_TransportUnloadingType(Value: UnicodeString);
begin
  SetAttribute('TransportUnloadingType', Value);
end;

function TXMLTransportUnloadingCharacteristics.Get_DirectUnloading: UnicodeString;
begin
  Result := AttributeNodes['DirectUnloading'].Text;
end;

procedure TXMLTransportUnloadingCharacteristics.Set_DirectUnloading(Value: UnicodeString);
begin
  SetAttribute('DirectUnloading', Value);
end;

function TXMLTransportUnloadingCharacteristics.Get_IsSlotManaged: UnicodeString;
begin
  Result := AttributeNodes['IsSlotManaged'].Text;
end;

procedure TXMLTransportUnloadingCharacteristics.Set_IsSlotManaged(Value: UnicodeString);
begin
  SetAttribute('IsSlotManaged', Value);
end;

function TXMLTransportUnloadingCharacteristics.Get_IsCarrierUnloadingOperator: UnicodeString;
begin
  Result := AttributeNodes['IsCarrierUnloadingOperator'].Text;
end;

procedure TXMLTransportUnloadingCharacteristics.Set_IsCarrierUnloadingOperator(Value: UnicodeString);
begin
  SetAttribute('IsCarrierUnloadingOperator', Value);
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingCode: IXMLTransportUnloadingCode;
begin
  Result := ChildNodes['TransportUnloadingCode'] as IXMLTransportUnloadingCode;
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription;
begin
  Result := ChildNodes['TransportUnloadingCodeDescription'] as IXMLTransportUnloadingCodeDescription;
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingText: IXMLS255List;
begin
  Result := FTransportUnloadingText;
end;

{ TXMLTransportUnloadingCharacteristicsList }

function TXMLTransportUnloadingCharacteristicsList.Add: IXMLTransportUnloadingCharacteristics;
begin
  Result := AddItem(-1) as IXMLTransportUnloadingCharacteristics;
end;

function TXMLTransportUnloadingCharacteristicsList.Insert(const Index: Integer): IXMLTransportUnloadingCharacteristics;
begin
  Result := AddItem(Index) as IXMLTransportUnloadingCharacteristics;
end;

function TXMLTransportUnloadingCharacteristicsList.Get_Item(Index: Integer): IXMLTransportUnloadingCharacteristics;
begin
  Result := List[Index] as IXMLTransportUnloadingCharacteristics;
end;

{ TXMLTransportUnloadingCode }

function TXMLTransportUnloadingCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnloadingCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnloadingCodeDescription }

procedure TXMLTransportUnloadingCodeDescription.AfterConstruction;
begin
  RegisterChildNode('e-Attachment', TXMLEAttachment);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTransportUnloadingCodeDescription.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLTransportUnloadingCodeDescription.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['e-Attachment'] as IXMLEAttachment;
end;

{ TXMLTransportOtherInstructions }

procedure TXMLTransportOtherInstructions.AfterConstruction;
begin
  RegisterChildNode('TransportInstructionCode', TXMLTransportInstructionCode);
  RegisterChildNode('TransportPropertyValue', TXMLTransportPropertyValue);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  FTransportInstructionText := CreateCollection(TXMLS255List, IXMLNode, 'TransportInstructionText') as IXMLS255List;
  FTransportPropertyValue := CreateCollection(TXMLTransportPropertyValueList, IXMLTransportPropertyValue, 'TransportPropertyValue') as IXMLTransportPropertyValueList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FLocationParty := CreateCollection(TXMLLocationPartyList, IXMLLocationParty, 'LocationParty') as IXMLLocationPartyList;
  inherited;
end;

function TXMLTransportOtherInstructions.Get_TransportInstructionType: UnicodeString;
begin
  Result := AttributeNodes['TransportInstructionType'].Text;
end;

procedure TXMLTransportOtherInstructions.Set_TransportInstructionType(Value: UnicodeString);
begin
  SetAttribute('TransportInstructionType', Value);
end;

function TXMLTransportOtherInstructions.Get_TransportInstructionCode: IXMLTransportInstructionCode;
begin
  Result := ChildNodes['TransportInstructionCode'] as IXMLTransportInstructionCode;
end;

function TXMLTransportOtherInstructions.Get_TransportInstructionText: IXMLS255List;
begin
  Result := FTransportInstructionText;
end;

function TXMLTransportOtherInstructions.Get_TransportPropertyValue: IXMLTransportPropertyValueList;
begin
  Result := FTransportPropertyValue;
end;

function TXMLTransportOtherInstructions.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLTransportOtherInstructions.Get_LocationParty: IXMLLocationPartyList;
begin
  Result := FLocationParty;
end;

{ TXMLTransportOtherInstructionsList }

function TXMLTransportOtherInstructionsList.Add: IXMLTransportOtherInstructions;
begin
  Result := AddItem(-1) as IXMLTransportOtherInstructions;
end;

function TXMLTransportOtherInstructionsList.Insert(const Index: Integer): IXMLTransportOtherInstructions;
begin
  Result := AddItem(Index) as IXMLTransportOtherInstructions;
end;

function TXMLTransportOtherInstructionsList.Get_Item(Index: Integer): IXMLTransportOtherInstructions;
begin
  Result := List[Index] as IXMLTransportOtherInstructions;
end;

{ TXMLTransportInstructionCode }

function TXMLTransportInstructionCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportInstructionCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportPropertyValue }

procedure TXMLTransportPropertyValue.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  RegisterChildNode('PriceDetails', TXMLPriceDetails);
  inherited;
end;

function TXMLTransportPropertyValue.Get_TransportPropertyType: UnicodeString;
begin
  Result := AttributeNodes['TransportPropertyType'].Text;
end;

procedure TXMLTransportPropertyValue.Set_TransportPropertyType(Value: UnicodeString);
begin
  SetAttribute('TransportPropertyType', Value);
end;

function TXMLTransportPropertyValue.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLTransportPropertyValue.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLTransportPropertyValue.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

function TXMLTransportPropertyValue.Get_PriceDetails: IXMLPriceDetails;
begin
  Result := ChildNodes['PriceDetails'] as IXMLPriceDetails;
end;

{ TXMLTransportPropertyValueList }

function TXMLTransportPropertyValueList.Add: IXMLTransportPropertyValue;
begin
  Result := AddItem(-1) as IXMLTransportPropertyValue;
end;

function TXMLTransportPropertyValueList.Insert(const Index: Integer): IXMLTransportPropertyValue;
begin
  Result := AddItem(Index) as IXMLTransportPropertyValue;
end;

function TXMLTransportPropertyValueList.Get_Item(Index: Integer): IXMLTransportPropertyValue;
begin
  Result := List[Index] as IXMLTransportPropertyValue;
end;

{ TXMLRoute }

procedure TXMLRoute.AfterConstruction;
begin
  RegisterChildNode('RouteLocation', TXMLRouteLocation);
  RegisterChildNode('SupplyPoint', TXMLSupplyPoint);
  RegisterChildNode('MapPoint', TXMLMapPoint);
  RegisterChildNode('RouteReference', TXMLRouteReference);
  RegisterChildNode('RouteLength', TXMLRouteLength);
  RegisterChildNode('RouteDefinition', TXMLRouteDefinition);
  RegisterChildNode('eAttachment', TXMLEAttachment);
  RegisterChildNode('RouteLeg', TXMLRouteLeg);
  FRouteComment := CreateCollection(TXMLS255List, IXMLNode, 'RouteComment') as IXMLS255List;
  FRouteLocation := CreateCollection(TXMLRouteLocationList, IXMLRouteLocation, 'RouteLocation') as IXMLRouteLocationList;
  FSupplyPoint := CreateCollection(TXMLSupplyPointList, IXMLSupplyPoint, 'SupplyPoint') as IXMLSupplyPointList;
  FMapPoint := CreateCollection(TXMLMapPointList, IXMLMapPoint, 'MapPoint') as IXMLMapPointList;
  FRouteReference := CreateCollection(TXMLRouteReferenceList, IXMLRouteReference, 'RouteReference') as IXMLRouteReferenceList;
  FRouteLength := CreateCollection(TXMLRouteLengthList, IXMLRouteLength, 'RouteLength') as IXMLRouteLengthList;
  FRouteLeg := CreateCollection(TXMLRouteLegList, IXMLRouteLeg, 'RouteLeg') as IXMLRouteLegList;
  inherited;
end;

function TXMLRoute.Get_RouteType: UnicodeString;
begin
  Result := AttributeNodes['RouteType'].Text;
end;

procedure TXMLRoute.Set_RouteType(Value: UnicodeString);
begin
  SetAttribute('RouteType', Value);
end;

function TXMLRoute.Get_IsWithLoad: UnicodeString;
begin
  Result := AttributeNodes['IsWithLoad'].Text;
end;

procedure TXMLRoute.Set_IsWithLoad(Value: UnicodeString);
begin
  SetAttribute('IsWithLoad', Value);
end;

function TXMLRoute.Get_RouteSeasonType: UnicodeString;
begin
  Result := AttributeNodes['RouteSeasonType'].Text;
end;

procedure TXMLRoute.Set_RouteSeasonType(Value: UnicodeString);
begin
  SetAttribute('RouteSeasonType', Value);
end;

function TXMLRoute.Get_IsRouteAsInstructed: UnicodeString;
begin
  Result := AttributeNodes['IsRouteAsInstructed'].Text;
end;

procedure TXMLRoute.Set_IsRouteAsInstructed(Value: UnicodeString);
begin
  SetAttribute('IsRouteAsInstructed', Value);
end;

function TXMLRoute.Get_RouteName: UnicodeString;
begin
  Result := ChildNodes['RouteName'].Text;
end;

procedure TXMLRoute.Set_RouteName(Value: UnicodeString);
begin
  ChildNodes['RouteName'].NodeValue := Value;
end;

function TXMLRoute.Get_RouteComment: IXMLS255List;
begin
  Result := FRouteComment;
end;

function TXMLRoute.Get_RouteLocation: IXMLRouteLocationList;
begin
  Result := FRouteLocation;
end;

function TXMLRoute.Get_SupplyPoint: IXMLSupplyPointList;
begin
  Result := FSupplyPoint;
end;

function TXMLRoute.Get_MapPoint: IXMLMapPointList;
begin
  Result := FMapPoint;
end;

function TXMLRoute.Get_RouteReference: IXMLRouteReferenceList;
begin
  Result := FRouteReference;
end;

function TXMLRoute.Get_RouteLength: IXMLRouteLengthList;
begin
  Result := FRouteLength;
end;

function TXMLRoute.Get_RouteDefinition: IXMLRouteDefinition;
begin
  Result := ChildNodes['RouteDefinition'] as IXMLRouteDefinition;
end;

function TXMLRoute.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['eAttachment'] as IXMLEAttachment;
end;

function TXMLRoute.Get_RouteLeg: IXMLRouteLegList;
begin
  Result := FRouteLeg;
end;

{ TXMLRouteList }

function TXMLRouteList.Add: IXMLRoute;
begin
  Result := AddItem(-1) as IXMLRoute;
end;

function TXMLRouteList.Insert(const Index: Integer): IXMLRoute;
begin
  Result := AddItem(Index) as IXMLRoute;
end;

function TXMLRouteList.Get_Item(Index: Integer): IXMLRoute;
begin
  Result := List[Index] as IXMLRoute;
end;

{ TXMLRouteLocation }

procedure TXMLRouteLocation.AfterConstruction;
begin
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('SupplyPoint', TXMLSupplyPoint);
  inherited;
end;

function TXMLRouteLocation.Get_LocationParty: IXMLLocationParty;
begin
  Result := ChildNodes['LocationParty'] as IXMLLocationParty;
end;

function TXMLRouteLocation.Get_SupplyPoint: IXMLSupplyPoint;
begin
  Result := ChildNodes['SupplyPoint'] as IXMLSupplyPoint;
end;

{ TXMLRouteLocationList }

function TXMLRouteLocationList.Add: IXMLRouteLocation;
begin
  Result := AddItem(-1) as IXMLRouteLocation;
end;

function TXMLRouteLocationList.Insert(const Index: Integer): IXMLRouteLocation;
begin
  Result := AddItem(Index) as IXMLRouteLocation;
end;

function TXMLRouteLocationList.Get_Item(Index: Integer): IXMLRouteLocation;
begin
  Result := List[Index] as IXMLRouteLocation;
end;

{ TXMLRouteReference }

function TXMLRouteReference.Get_RouteReferenceType: UnicodeString;
begin
  Result := AttributeNodes['RouteReferenceType'].Text;
end;

procedure TXMLRouteReference.Set_RouteReferenceType(Value: UnicodeString);
begin
  SetAttribute('RouteReferenceType', Value);
end;

function TXMLRouteReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLRouteReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLRouteReferenceList }

function TXMLRouteReferenceList.Add: IXMLRouteReference;
begin
  Result := AddItem(-1) as IXMLRouteReference;
end;

function TXMLRouteReferenceList.Insert(const Index: Integer): IXMLRouteReference;
begin
  Result := AddItem(Index) as IXMLRouteReference;
end;

function TXMLRouteReferenceList.Get_Item(Index: Integer): IXMLRouteReference;
begin
  Result := List[Index] as IXMLRouteReference;
end;

{ TXMLRouteLength }

function TXMLRouteLength.Get_LengthType: UnicodeString;
begin
  Result := AttributeNodes['LengthType'].Text;
end;

procedure TXMLRouteLength.Set_LengthType(Value: UnicodeString);
begin
  SetAttribute('LengthType', Value);
end;

function TXMLRouteLength.Get_LengthTypeVersion: UnicodeString;
begin
  Result := AttributeNodes['LengthTypeVersion'].Text;
end;

procedure TXMLRouteLength.Set_LengthTypeVersion(Value: UnicodeString);
begin
  SetAttribute('LengthTypeVersion', Value);
end;

function TXMLRouteLength.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLRouteLength.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLRouteLengthList }

function TXMLRouteLengthList.Add: IXMLRouteLength;
begin
  Result := AddItem(-1) as IXMLRouteLength;
end;

function TXMLRouteLengthList.Insert(const Index: Integer): IXMLRouteLength;
begin
  Result := AddItem(Index) as IXMLRouteLength;
end;

function TXMLRouteLengthList.Get_Item(Index: Integer): IXMLRouteLength;
begin
  Result := List[Index] as IXMLRouteLength;
end;

{ TXMLRouteDefinition }

function TXMLRouteDefinition.Get_RouteDefinitionFormat: UnicodeString;
begin
  Result := AttributeNodes['RouteDefinitionFormat'].Text;
end;

procedure TXMLRouteDefinition.Set_RouteDefinitionFormat(Value: UnicodeString);
begin
  SetAttribute('RouteDefinitionFormat', Value);
end;

{ TXMLRouteLeg }

procedure TXMLRouteLeg.AfterConstruction;
begin
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('MapPoint', TXMLMapPoint);
  RegisterChildNode('RouteReference', TXMLRouteReference);
  RegisterChildNode('RouteLegLength', TXMLRouteLegLength);
  RegisterChildNode('RoadCharacteristics', TXMLRoadCharacteristics);
  RegisterChildNode('eAttachment', TXMLEAttachment);
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FMapPoint := CreateCollection(TXMLMapPointList, IXMLMapPoint, 'MapPoint') as IXMLMapPointList;
  FRouteReference := CreateCollection(TXMLRouteReferenceList, IXMLRouteReference, 'RouteReference') as IXMLRouteReferenceList;
  FRouteLegLength := CreateCollection(TXMLRouteLegLengthList, IXMLRouteLegLength, 'RouteLegLength') as IXMLRouteLegLengthList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLRouteLeg.Get_RouteLegNumber: LongWord;
begin
  Result := ChildNodes['RouteLegNumber'].NodeValue;
end;

procedure TXMLRouteLeg.Set_RouteLegNumber(Value: LongWord);
begin
  ChildNodes['RouteLegNumber'].NodeValue := Value;
end;

function TXMLRouteLeg.Get_RouteLegName: UnicodeString;
begin
  Result := ChildNodes['RouteLegName'].Text;
end;

procedure TXMLRouteLeg.Set_RouteLegName(Value: UnicodeString);
begin
  ChildNodes['RouteLegName'].NodeValue := Value;
end;

function TXMLRouteLeg.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLRouteLeg.Get_MapPoint: IXMLMapPointList;
begin
  Result := FMapPoint;
end;

function TXMLRouteLeg.Get_RouteReference: IXMLRouteReferenceList;
begin
  Result := FRouteReference;
end;

function TXMLRouteLeg.Get_RouteLegLength: IXMLRouteLegLengthList;
begin
  Result := FRouteLegLength;
end;

function TXMLRouteLeg.Get_RoadCharacteristics: IXMLRoadCharacteristics;
begin
  Result := ChildNodes['RoadCharacteristics'] as IXMLRoadCharacteristics;
end;

function TXMLRouteLeg.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['eAttachment'] as IXMLEAttachment;
end;

function TXMLRouteLeg.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLRouteLegList }

function TXMLRouteLegList.Add: IXMLRouteLeg;
begin
  Result := AddItem(-1) as IXMLRouteLeg;
end;

function TXMLRouteLegList.Insert(const Index: Integer): IXMLRouteLeg;
begin
  Result := AddItem(Index) as IXMLRouteLeg;
end;

function TXMLRouteLegList.Get_Item(Index: Integer): IXMLRouteLeg;
begin
  Result := List[Index] as IXMLRouteLeg;
end;

{ TXMLRouteLegLength }

function TXMLRouteLegLength.Get_LengthType: UnicodeString;
begin
  Result := AttributeNodes['LengthType'].Text;
end;

procedure TXMLRouteLegLength.Set_LengthType(Value: UnicodeString);
begin
  SetAttribute('LengthType', Value);
end;

function TXMLRouteLegLength.Get_LengthTypeVersion: UnicodeString;
begin
  Result := AttributeNodes['LengthTypeVersion'].Text;
end;

procedure TXMLRouteLegLength.Set_LengthTypeVersion(Value: UnicodeString);
begin
  SetAttribute('LengthTypeVersion', Value);
end;

function TXMLRouteLegLength.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLRouteLegLength.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLRouteLegLengthList }

function TXMLRouteLegLengthList.Add: IXMLRouteLegLength;
begin
  Result := AddItem(-1) as IXMLRouteLegLength;
end;

function TXMLRouteLegLengthList.Insert(const Index: Integer): IXMLRouteLegLength;
begin
  Result := AddItem(Index) as IXMLRouteLegLength;
end;

function TXMLRouteLegLengthList.Get_Item(Index: Integer): IXMLRouteLegLength;
begin
  Result := List[Index] as IXMLRouteLegLength;
end;

{ TXMLRoadCharacteristics }

procedure TXMLRoadCharacteristics.AfterConstruction;
begin
  RegisterChildNode('RoadClassification', TXMLRoadClassification);
  RegisterChildNode('RoadBearingCapacity', TXMLRoadBearingCapacity);
  RegisterChildNode('RoadObstruction', TXMLRoadObstruction);
  RegisterChildNode('RoadMaintenanceInfo', TXMLRoadMaintenanceInfo);
  FRoadClassification := CreateCollection(TXMLRoadClassificationList, IXMLRoadClassification, 'RoadClassification') as IXMLRoadClassificationList;
  FRoadAvailability := CreateCollection(TXMLRoadAvailabilityTypeList, IXMLNode, 'RoadAvailability') as IXMLRoadAvailabilityTypeList;
  FRoadBearingCapacity := CreateCollection(TXMLRoadBearingCapacityList, IXMLRoadBearingCapacity, 'RoadBearingCapacity') as IXMLRoadBearingCapacityList;
  FRoadObstruction := CreateCollection(TXMLRoadObstructionList, IXMLRoadObstruction, 'RoadObstruction') as IXMLRoadObstructionList;
  FRoadMaintenanceInfo := CreateCollection(TXMLRoadMaintenanceInfoList, IXMLRoadMaintenanceInfo, 'RoadMaintenanceInfo') as IXMLRoadMaintenanceInfoList;
  inherited;
end;

function TXMLRoadCharacteristics.Get_RoadOwnerType: UnicodeString;
begin
  Result := AttributeNodes['RoadOwnerType'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadOwnerType(Value: UnicodeString);
begin
  SetAttribute('RoadOwnerType', Value);
end;

function TXMLRoadCharacteristics.Get_RoadKeeperType: UnicodeString;
begin
  Result := AttributeNodes['RoadKeeperType'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadKeeperType(Value: UnicodeString);
begin
  SetAttribute('RoadKeeperType', Value);
end;

function TXMLRoadCharacteristics.Get_RoadAccessibilityType: UnicodeString;
begin
  Result := AttributeNodes['RoadAccessibilityType'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadAccessibilityType(Value: UnicodeString);
begin
  SetAttribute('RoadAccessibilityType', Value);
end;

function TXMLRoadCharacteristics.Get_RoadTurningPossibilityType: UnicodeString;
begin
  Result := AttributeNodes['RoadTurningPossibilityType'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadTurningPossibilityType(Value: UnicodeString);
begin
  SetAttribute('RoadTurningPossibilityType', Value);
end;

function TXMLRoadCharacteristics.Get_RoadTurningPointType: UnicodeString;
begin
  Result := AttributeNodes['RoadTurningPointType'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadTurningPointType(Value: UnicodeString);
begin
  SetAttribute('RoadTurningPointType', Value);
end;

function TXMLRoadCharacteristics.Get_RoadPassingPossibility: UnicodeString;
begin
  Result := AttributeNodes['RoadPassingPossibility'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadPassingPossibility(Value: UnicodeString);
begin
  SetAttribute('RoadPassingPossibility', Value);
end;

function TXMLRoadCharacteristics.Get_IsDeadEndRoad: UnicodeString;
begin
  Result := AttributeNodes['IsDeadEndRoad'].Text;
end;

procedure TXMLRoadCharacteristics.Set_IsDeadEndRoad(Value: UnicodeString);
begin
  SetAttribute('IsDeadEndRoad', Value);
end;

function TXMLRoadCharacteristics.Get_RoadName: UnicodeString;
begin
  Result := ChildNodes['RoadName'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadName(Value: UnicodeString);
begin
  ChildNodes['RoadName'].NodeValue := Value;
end;

function TXMLRoadCharacteristics.Get_RoadNumber: UnicodeString;
begin
  Result := ChildNodes['RoadNumber'].Text;
end;

procedure TXMLRoadCharacteristics.Set_RoadNumber(Value: UnicodeString);
begin
  ChildNodes['RoadNumber'].NodeValue := Value;
end;

function TXMLRoadCharacteristics.Get_RoadClassification: IXMLRoadClassificationList;
begin
  Result := FRoadClassification;
end;

function TXMLRoadCharacteristics.Get_RoadAvailability: IXMLRoadAvailabilityTypeList;
begin
  Result := FRoadAvailability;
end;

function TXMLRoadCharacteristics.Get_RoadBearingCapacity: IXMLRoadBearingCapacityList;
begin
  Result := FRoadBearingCapacity;
end;

function TXMLRoadCharacteristics.Get_RoadObstruction: IXMLRoadObstructionList;
begin
  Result := FRoadObstruction;
end;

function TXMLRoadCharacteristics.Get_RoadMaintenanceInfo: IXMLRoadMaintenanceInfoList;
begin
  Result := FRoadMaintenanceInfo;
end;

{ TXMLRoadClassification }

procedure TXMLRoadClassification.AfterConstruction;
begin
  RegisterChildNode('RoadClassificationCode', TXMLRoadClassificationCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  FRoadClassificationDescription := CreateCollection(TXMLS255List, IXMLNode, 'RoadClassificationDescription') as IXMLS255List;
  inherited;
end;

function TXMLRoadClassification.Get_RoadClassificationCode: IXMLRoadClassificationCode;
begin
  Result := ChildNodes['RoadClassificationCode'] as IXMLRoadClassificationCode;
end;

function TXMLRoadClassification.Get_CodeValue: IXMLCodeValue;
begin
  Result := ChildNodes['CodeValue'] as IXMLCodeValue;
end;

function TXMLRoadClassification.Get_RoadClassificationDescription: IXMLS255List;
begin
  Result := FRoadClassificationDescription;
end;

{ TXMLRoadClassificationList }

function TXMLRoadClassificationList.Add: IXMLRoadClassification;
begin
  Result := AddItem(-1) as IXMLRoadClassification;
end;

function TXMLRoadClassificationList.Insert(const Index: Integer): IXMLRoadClassification;
begin
  Result := AddItem(Index) as IXMLRoadClassification;
end;

function TXMLRoadClassificationList.Get_Item(Index: Integer): IXMLRoadClassification;
begin
  Result := List[Index] as IXMLRoadClassification;
end;

{ TXMLRoadClassificationCode }

function TXMLRoadClassificationCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLRoadClassificationCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLRoadBearingCapacity }

function TXMLRoadBearingCapacity.Get_RoadBearingCapacityType: UnicodeString;
begin
  Result := AttributeNodes['RoadBearingCapacityType'].Text;
end;

procedure TXMLRoadBearingCapacity.Set_RoadBearingCapacityType(Value: UnicodeString);
begin
  SetAttribute('RoadBearingCapacityType', Value);
end;

{ TXMLRoadBearingCapacityList }

function TXMLRoadBearingCapacityList.Add: IXMLRoadBearingCapacity;
begin
  Result := AddItem(-1) as IXMLRoadBearingCapacity;
end;

function TXMLRoadBearingCapacityList.Insert(const Index: Integer): IXMLRoadBearingCapacity;
begin
  Result := AddItem(Index) as IXMLRoadBearingCapacity;
end;

function TXMLRoadBearingCapacityList.Get_Item(Index: Integer): IXMLRoadBearingCapacity;
begin
  Result := List[Index] as IXMLRoadBearingCapacity;
end;

{ TXMLRoadObstruction }

procedure TXMLRoadObstruction.AfterConstruction;
begin
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  RegisterChildNode('RoadBearingCapacity', TXMLRoadBearingCapacity);
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('eAttachment', TXMLEAttachment);
  FMapPointComment := CreateCollection(TXMLS255List, IXMLNode, 'MapPointComment') as IXMLS255List;
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  FRoadBearingCapacity := CreateCollection(TXMLRoadBearingCapacityList, IXMLRoadBearingCapacity, 'RoadBearingCapacity') as IXMLRoadBearingCapacityList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLRoadObstruction.Get_RoadObstructionType: UnicodeString;
begin
  Result := AttributeNodes['RoadObstructionType'].Text;
end;

procedure TXMLRoadObstruction.Set_RoadObstructionType(Value: UnicodeString);
begin
  SetAttribute('RoadObstructionType', Value);
end;

function TXMLRoadObstruction.Get_MapPointName: UnicodeString;
begin
  Result := ChildNodes['MapPointName'].Text;
end;

procedure TXMLRoadObstruction.Set_MapPointName(Value: UnicodeString);
begin
  ChildNodes['MapPointName'].NodeValue := Value;
end;

function TXMLRoadObstruction.Get_MapPointComment: IXMLS255List;
begin
  Result := FMapPointComment;
end;

function TXMLRoadObstruction.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

function TXMLRoadObstruction.Get_RoadSlopePercent: Double;
begin
  Result := XmlStrToFloatExt(ChildNodes['RoadSlopePercent'].Text);
end;

procedure TXMLRoadObstruction.Set_RoadSlopePercent(Value: Double);
begin
  ChildNodes['RoadSlopePercent'].NodeValue := Value;
end;

function TXMLRoadObstruction.Get_RoadBearingCapacity: IXMLRoadBearingCapacityList;
begin
  Result := FRoadBearingCapacity;
end;

function TXMLRoadObstruction.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLRoadObstruction.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLRoadObstruction.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLRoadObstruction.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['eAttachment'] as IXMLEAttachment;
end;

function TXMLRoadObstruction.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLRoadObstructionList }

function TXMLRoadObstructionList.Add: IXMLRoadObstruction;
begin
  Result := AddItem(-1) as IXMLRoadObstruction;
end;

function TXMLRoadObstructionList.Insert(const Index: Integer): IXMLRoadObstruction;
begin
  Result := AddItem(Index) as IXMLRoadObstruction;
end;

function TXMLRoadObstructionList.Get_Item(Index: Integer): IXMLRoadObstruction;
begin
  Result := List[Index] as IXMLRoadObstruction;
end;

{ TXMLRoadMaintenanceInfo }

procedure TXMLRoadMaintenanceInfo.AfterConstruction;
begin
  RegisterChildNode('RoadMaintenanceCodeInfo', TXMLCodeInfo);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLRoadMaintenanceInfo.Get_RoadMaintenanceCodeInfo: IXMLCodeInfo;
begin
  Result := ChildNodes['RoadMaintenanceCodeInfo'] as IXMLCodeInfo;
end;

function TXMLRoadMaintenanceInfo.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLRoadMaintenanceInfo.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLRoadMaintenanceInfoList }

function TXMLRoadMaintenanceInfoList.Add: IXMLRoadMaintenanceInfo;
begin
  Result := AddItem(-1) as IXMLRoadMaintenanceInfo;
end;

function TXMLRoadMaintenanceInfoList.Insert(const Index: Integer): IXMLRoadMaintenanceInfo;
begin
  Result := AddItem(Index) as IXMLRoadMaintenanceInfo;
end;

function TXMLRoadMaintenanceInfoList.Get_Item(Index: Integer): IXMLRoadMaintenanceInfo;
begin
  Result := List[Index] as IXMLRoadMaintenanceInfo;
end;

{ TXMLDeliveryTransitTime }

function TXMLDeliveryTransitTime.Get_Days: LongWord;
begin
  Result := ChildNodes['Days'].NodeValue;
end;

procedure TXMLDeliveryTransitTime.Set_Days(Value: LongWord);
begin
  ChildNodes['Days'].NodeValue := Value;
end;

function TXMLDeliveryTransitTime.Get_Hours: LongWord;
begin
  Result := ChildNodes['Hours'].NodeValue;
end;

procedure TXMLDeliveryTransitTime.Set_Hours(Value: LongWord);
begin
  ChildNodes['Hours'].NodeValue := Value;
end;

function TXMLDeliveryTransitTime.Get_Minutes: LongWord;
begin
  Result := ChildNodes['Minutes'].NodeValue;
end;

procedure TXMLDeliveryTransitTime.Set_Minutes(Value: LongWord);
begin
  ChildNodes['Minutes'].NodeValue := Value;
end;

{ TXMLDeliveryDestination }

procedure TXMLDeliveryDestination.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('SupplyPoint', TXMLSupplyPoint);
  RegisterChildNode('LocationCode', TXMLLocationCode);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  RegisterChildNode('MapCoordinates', TXMLMapCoordinates);
  FSupplyPoint := CreateCollection(TXMLSupplyPointList, IXMLSupplyPoint, 'SupplyPoint') as IXMLSupplyPointList;
  FMapCoordinates := CreateCollection(TXMLMapCoordinatesList, IXMLMapCoordinates, 'MapCoordinates') as IXMLMapCoordinatesList;
  inherited;
end;

function TXMLDeliveryDestination.Get_IsOptionalDestination: UnicodeString;
begin
  Result := AttributeNodes['IsOptionalDestination'].Text;
end;

procedure TXMLDeliveryDestination.Set_IsOptionalDestination(Value: UnicodeString);
begin
  SetAttribute('IsOptionalDestination', Value);
end;

function TXMLDeliveryDestination.Get_PriorityOrder: LongWord;
begin
  Result := AttributeNodes['PriorityOrder'].NodeValue;
end;

procedure TXMLDeliveryDestination.Set_PriorityOrder(Value: LongWord);
begin
  SetAttribute('PriorityOrder', Value);
end;

function TXMLDeliveryDestination.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryDestination.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryDestination.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLDeliveryDestination.Get_LocationParty: IXMLLocationParty;
begin
  Result := ChildNodes['LocationParty'] as IXMLLocationParty;
end;

function TXMLDeliveryDestination.Get_SupplyPoint: IXMLSupplyPointList;
begin
  Result := FSupplyPoint;
end;

function TXMLDeliveryDestination.Get_LocationCode: IXMLLocationCode;
begin
  Result := ChildNodes['LocationCode'] as IXMLLocationCode;
end;

function TXMLDeliveryDestination.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

function TXMLDeliveryDestination.Get_MapCoordinates: IXMLMapCoordinatesList;
begin
  Result := FMapCoordinates;
end;

{ TXMLDeliveryDestinationList }

function TXMLDeliveryDestinationList.Add: IXMLDeliveryDestination;
begin
  Result := AddItem(-1) as IXMLDeliveryDestination;
end;

function TXMLDeliveryDestinationList.Insert(const Index: Integer): IXMLDeliveryDestination;
begin
  Result := AddItem(Index) as IXMLDeliveryDestination;
end;

function TXMLDeliveryDestinationList.Get_Item(Index: Integer): IXMLDeliveryDestination;
begin
  Result := List[Index] as IXMLDeliveryDestination;
end;

{ TXMLDeliveryLegReference }

function TXMLDeliveryLegReference.Get_DeliveryLegReferenceType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryLegReferenceType'].Text;
end;

procedure TXMLDeliveryLegReference.Set_DeliveryLegReferenceType(Value: UnicodeString);
begin
  SetAttribute('DeliveryLegReferenceType', Value);
end;

function TXMLDeliveryLegReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDeliveryLegReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDeliveryLegReferenceList }

function TXMLDeliveryLegReferenceList.Add: IXMLDeliveryLegReference;
begin
  Result := AddItem(-1) as IXMLDeliveryLegReference;
end;

function TXMLDeliveryLegReferenceList.Insert(const Index: Integer): IXMLDeliveryLegReference;
begin
  Result := AddItem(Index) as IXMLDeliveryLegReference;
end;

function TXMLDeliveryLegReferenceList.Get_Item(Index: Integer): IXMLDeliveryLegReference;
begin
  Result := List[Index] as IXMLDeliveryLegReference;
end;

{ TXMLTermsOfChartering }

function TXMLTermsOfChartering.Get_TermsOfCharteringType: UnicodeString;
begin
  Result := AttributeNodes['TermsOfCharteringType'].Text;
end;

procedure TXMLTermsOfChartering.Set_TermsOfCharteringType(Value: UnicodeString);
begin
  SetAttribute('TermsOfCharteringType', Value);
end;

{ TXMLTermsOfCharteringList }

function TXMLTermsOfCharteringList.Add: IXMLTermsOfChartering;
begin
  Result := AddItem(-1) as IXMLTermsOfChartering;
end;

function TXMLTermsOfCharteringList.Insert(const Index: Integer): IXMLTermsOfChartering;
begin
  Result := AddItem(Index) as IXMLTermsOfChartering;
end;

function TXMLTermsOfCharteringList.Get_Item(Index: Integer): IXMLTermsOfChartering;
begin
  Result := List[Index] as IXMLTermsOfChartering;
end;

{ TXMLBusinessChainInfo }

procedure TXMLBusinessChainInfo.AfterConstruction;
begin
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('ValidityPeriod', TXMLValidityPeriod);
  RegisterChildNode('BusinessChainSequence', TXMLBusinessChainSequence);
  FBusinessChainDescription := CreateCollection(TXMLS255List, IXMLNode, 'BusinessChainDescription') as IXMLS255List;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FBusinessChainSequence := CreateCollection(TXMLBusinessChainSequenceList, IXMLBusinessChainSequence, 'BusinessChainSequence') as IXMLBusinessChainSequenceList;
  inherited;
end;

function TXMLBusinessChainInfo.Get_BusinessChainContextType: UnicodeString;
begin
  Result := AttributeNodes['BusinessChainContextType'].Text;
end;

procedure TXMLBusinessChainInfo.Set_BusinessChainContextType(Value: UnicodeString);
begin
  SetAttribute('BusinessChainContextType', Value);
end;

function TXMLBusinessChainInfo.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLBusinessChainInfo.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

function TXMLBusinessChainInfo.Get_ValidityStatus: UnicodeString;
begin
  Result := AttributeNodes['ValidityStatus'].Text;
end;

procedure TXMLBusinessChainInfo.Set_ValidityStatus(Value: UnicodeString);
begin
  SetAttribute('ValidityStatus', Value);
end;

function TXMLBusinessChainInfo.Get_BusinessChainNumber: UnicodeString;
begin
  Result := ChildNodes['BusinessChainNumber'].Text;
end;

procedure TXMLBusinessChainInfo.Set_BusinessChainNumber(Value: UnicodeString);
begin
  ChildNodes['BusinessChainNumber'].NodeValue := Value;
end;

function TXMLBusinessChainInfo.Get_BusinessChainDescription: IXMLS255List;
begin
  Result := FBusinessChainDescription;
end;

function TXMLBusinessChainInfo.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLBusinessChainInfo.Get_ValidityPeriod: IXMLValidityPeriod;
begin
  Result := ChildNodes['ValidityPeriod'] as IXMLValidityPeriod;
end;

function TXMLBusinessChainInfo.Get_BusinessChainSequence: IXMLBusinessChainSequenceList;
begin
  Result := FBusinessChainSequence;
end;

{ TXMLValidityPeriod }

procedure TXMLValidityPeriod.AfterConstruction;
begin
  RegisterChildNode('DateTimeFrom', TXMLDateTimeFrom);
  RegisterChildNode('DateTimeTo', TXMLDateTimeTo);
  inherited;
end;

function TXMLValidityPeriod.Get_DateTimeFrom: IXMLDateTimeFrom;
begin
  Result := ChildNodes['DateTimeFrom'] as IXMLDateTimeFrom;
end;

function TXMLValidityPeriod.Get_DateTimeTo: IXMLDateTimeTo;
begin
  Result := ChildNodes['DateTimeTo'] as IXMLDateTimeTo;
end;

{ TXMLBusinessChainSequence }

procedure TXMLBusinessChainSequence.AfterConstruction;
begin
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('DocumentRequiredInfo', TXMLDocumentRequiredInfo);
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FDocumentRequiredInfo := CreateCollection(TXMLDocumentRequiredInfoList, IXMLDocumentRequiredInfo, 'DocumentRequiredInfo') as IXMLDocumentRequiredInfoList;
  inherited;
end;

function TXMLBusinessChainSequence.Get_IsBusinessChainSequenceApplicable: UnicodeString;
begin
  Result := AttributeNodes['IsBusinessChainSequenceApplicable'].Text;
end;

procedure TXMLBusinessChainSequence.Set_IsBusinessChainSequenceApplicable(Value: UnicodeString);
begin
  SetAttribute('IsBusinessChainSequenceApplicable', Value);
end;

function TXMLBusinessChainSequence.Get_BusinessChainSequenceNumber: LongWord;
begin
  Result := ChildNodes['BusinessChainSequenceNumber'].NodeValue;
end;

procedure TXMLBusinessChainSequence.Set_BusinessChainSequenceNumber(Value: LongWord);
begin
  ChildNodes['BusinessChainSequenceNumber'].NodeValue := Value;
end;

function TXMLBusinessChainSequence.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLBusinessChainSequence.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLBusinessChainSequence.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLBusinessChainSequence.Get_DocumentRequiredInfo: IXMLDocumentRequiredInfoList;
begin
  Result := FDocumentRequiredInfo;
end;

{ TXMLBusinessChainSequenceList }

function TXMLBusinessChainSequenceList.Add: IXMLBusinessChainSequence;
begin
  Result := AddItem(-1) as IXMLBusinessChainSequence;
end;

function TXMLBusinessChainSequenceList.Insert(const Index: Integer): IXMLBusinessChainSequence;
begin
  Result := AddItem(Index) as IXMLBusinessChainSequence;
end;

function TXMLBusinessChainSequenceList.Get_Item(Index: Integer): IXMLBusinessChainSequence;
begin
  Result := List[Index] as IXMLBusinessChainSequence;
end;

{ TXMLDocumentRequiredInfo }

procedure TXMLDocumentRequiredInfo.AfterConstruction;
begin
  RegisterChildNode('RespondToParty', TXMLTypedParty);
  FRespondToParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'RespondToParty') as IXMLTypedPartyList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDocumentRequiredInfo.Get_DocumentName: UnicodeString;
begin
  Result := AttributeNodes['DocumentName'].Text;
end;

procedure TXMLDocumentRequiredInfo.Set_DocumentName(Value: UnicodeString);
begin
  SetAttribute('DocumentName', Value);
end;

function TXMLDocumentRequiredInfo.Get_DocumentType: UnicodeString;
begin
  Result := AttributeNodes['DocumentType'].Text;
end;

procedure TXMLDocumentRequiredInfo.Set_DocumentType(Value: UnicodeString);
begin
  SetAttribute('DocumentType', Value);
end;

function TXMLDocumentRequiredInfo.Get_DocumentFormatType: UnicodeString;
begin
  Result := AttributeNodes['DocumentFormatType'].Text;
end;

procedure TXMLDocumentRequiredInfo.Set_DocumentFormatType(Value: UnicodeString);
begin
  SetAttribute('DocumentFormatType', Value);
end;

function TXMLDocumentRequiredInfo.Get_DocumentExchangeType: UnicodeString;
begin
  Result := AttributeNodes['DocumentExchangeType'].Text;
end;

procedure TXMLDocumentRequiredInfo.Set_DocumentExchangeType(Value: UnicodeString);
begin
  SetAttribute('DocumentExchangeType', Value);
end;

function TXMLDocumentRequiredInfo.Get_RespondToParty: IXMLTypedPartyList;
begin
  Result := FRespondToParty;
end;

function TXMLDocumentRequiredInfo.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDocumentRequiredInfoList }

function TXMLDocumentRequiredInfoList.Add: IXMLDocumentRequiredInfo;
begin
  Result := AddItem(-1) as IXMLDocumentRequiredInfo;
end;

function TXMLDocumentRequiredInfoList.Insert(const Index: Integer): IXMLDocumentRequiredInfo;
begin
  Result := AddItem(Index) as IXMLDocumentRequiredInfo;
end;

function TXMLDocumentRequiredInfoList.Get_Item(Index: Integer): IXMLDocumentRequiredInfo;
begin
  Result := List[Index] as IXMLDocumentRequiredInfo;
end;

{ TXMLDeliveryMessageLineItem }

procedure TXMLDeliveryMessageLineItem.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderInformation', TXMLPurchaseOrderInformation);
  RegisterChildNode('DeliveryMessageReference', TXMLDeliveryMessageReference);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('SupplyPoint', TXMLSupplyPoint);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('TransportOtherInstructions', TXMLTransportOtherInstructions);
  RegisterChildNode('TransportLoadingCharacteristics', TXMLTransportLoadingCharacteristics);
  RegisterChildNode('TransportUnloadingCharacteristics', TXMLTransportUnloadingCharacteristics);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('MillCharacteristics', TXMLMillCharacteristics);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('StatisticalGoodsInformation', TXMLStatisticalGoodsInformation);
  RegisterChildNode('PackageInformation', TXMLPackageInformationClass);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  RegisterChildNode('MeasuringSpecification', TXMLMeasuringSpecification);
  RegisterChildNode('AdditionalItemInfo', TXMLCodeInfo);
  FDeliveryMessageReference := CreateCollection(TXMLDeliveryMessageReferenceList, IXMLDeliveryMessageReference, 'DeliveryMessageReference') as IXMLDeliveryMessageReferenceList;
  FSupplyPoint := CreateCollection(TXMLSupplyPointList, IXMLSupplyPoint, 'SupplyPoint') as IXMLSupplyPointList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FTransportOtherInstructions := CreateCollection(TXMLTransportOtherInstructionsList, IXMLTransportOtherInstructions, 'TransportOtherInstructions') as IXMLTransportOtherInstructionsList;
  FTransportLoadingCharacteristics := CreateCollection(TXMLTransportLoadingCharacteristicsList, IXMLTransportLoadingCharacteristics, 'TransportLoadingCharacteristics') as IXMLTransportLoadingCharacteristicsList;
  FTransportUnloadingCharacteristics := CreateCollection(TXMLTransportUnloadingCharacteristicsList, IXMLTransportUnloadingCharacteristics, 'TransportUnloadingCharacteristics') as IXMLTransportUnloadingCharacteristicsList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FPackageInformation := CreateCollection(TXMLPackageInformationClassList, IXMLPackageInformationClass, 'PackageInformation') as IXMLPackageInformationClassList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  FMeasuringSpecification := CreateCollection(TXMLMeasuringSpecificationList, IXMLMeasuringSpecification, 'MeasuringSpecification') as IXMLMeasuringSpecificationList;
  FAdditionalItemInfo := CreateCollection(TXMLCodeInfoList, IXMLCodeInfo, 'AdditionalItemInfo') as IXMLCodeInfoList;
  inherited;
end;

function TXMLDeliveryMessageLineItem.Get_ShipmentComplete: UnicodeString;
begin
  Result := AttributeNodes['ShipmentComplete'].Text;
end;

procedure TXMLDeliveryMessageLineItem.Set_ShipmentComplete(Value: UnicodeString);
begin
  SetAttribute('ShipmentComplete', Value);
end;

function TXMLDeliveryMessageLineItem.Get_InstructionByType: UnicodeString;
begin
  Result := AttributeNodes['InstructionByType'].Text;
end;

procedure TXMLDeliveryMessageLineItem.Set_InstructionByType(Value: UnicodeString);
begin
  SetAttribute('InstructionByType', Value);
end;

function TXMLDeliveryMessageLineItem.Get_DeliveryMessageLineItemNumber: LongWord;
begin
  Result := ChildNodes['DeliveryMessageLineItemNumber'].NodeValue;
end;

procedure TXMLDeliveryMessageLineItem.Set_DeliveryMessageLineItemNumber(Value: LongWord);
begin
  ChildNodes['DeliveryMessageLineItemNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageLineItem.Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
begin
  Result := ChildNodes['PurchaseOrderInformation'] as IXMLPurchaseOrderInformation;
end;

function TXMLDeliveryMessageLineItem.Get_PurchaseOrderLineItemNumber: LongWord;
begin
  Result := ChildNodes['PurchaseOrderLineItemNumber'].NodeValue;
end;

procedure TXMLDeliveryMessageLineItem.Set_PurchaseOrderLineItemNumber(Value: LongWord);
begin
  ChildNodes['PurchaseOrderLineItemNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageLineItem.Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
begin
  Result := FDeliveryMessageReference;
end;

function TXMLDeliveryMessageLineItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLDeliveryMessageLineItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLDeliveryMessageLineItem.Get_NumberOfPackages: LongWord;
begin
  Result := ChildNodes['NumberOfPackages'].NodeValue;
end;

procedure TXMLDeliveryMessageLineItem.Set_NumberOfPackages(Value: LongWord);
begin
  ChildNodes['NumberOfPackages'].NodeValue := Value;
end;

function TXMLDeliveryMessageLineItem.Get_SupplyPoint: IXMLSupplyPointList;
begin
  Result := FSupplyPoint;
end;

function TXMLDeliveryMessageLineItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLDeliveryMessageLineItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLDeliveryMessageLineItem.Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
begin
  Result := FTransportOtherInstructions;
end;

function TXMLDeliveryMessageLineItem.Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
begin
  Result := FTransportLoadingCharacteristics;
end;

function TXMLDeliveryMessageLineItem.Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristicsList;
begin
  Result := FTransportUnloadingCharacteristics;
end;

function TXMLDeliveryMessageLineItem.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLDeliveryMessageLineItem.Get_MillCharacteristics: IXMLMillCharacteristics;
begin
  Result := ChildNodes['MillCharacteristics'] as IXMLMillCharacteristics;
end;

function TXMLDeliveryMessageLineItem.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLDeliveryMessageLineItem.Get_StatisticalGoodsInformation: IXMLStatisticalGoodsInformation;
begin
  Result := ChildNodes['StatisticalGoodsInformation'] as IXMLStatisticalGoodsInformation;
end;

function TXMLDeliveryMessageLineItem.Get_PackageInformation: IXMLPackageInformationClassList;
begin
  Result := FPackageInformation;
end;

function TXMLDeliveryMessageLineItem.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLDeliveryMessageLineItem.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLDeliveryMessageLineItem.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLDeliveryMessageLineItem.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLDeliveryMessageLineItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

function TXMLDeliveryMessageLineItem.Get_MeasuringSpecification: IXMLMeasuringSpecificationList;
begin
  Result := FMeasuringSpecification;
end;

function TXMLDeliveryMessageLineItem.Get_AdditionalItemInfo: IXMLCodeInfoList;
begin
  Result := FAdditionalItemInfo;
end;

{ TXMLInventoryClass }

procedure TXMLInventoryClass.AfterConstruction;
begin
  RegisterChildNode('InventoryClassCode', TXMLInventoryClassCode);
  FInventoryClassCode := CreateCollection(TXMLInventoryClassCodeList, IXMLInventoryClassCode, 'InventoryClassCode') as IXMLInventoryClassCodeList;
  FInventoryClassDescription := CreateCollection(TXMLS72List, IXMLNode, 'InventoryClassDescription') as IXMLS72List;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLInventoryClass.Get_InventoryStatusType: UnicodeString;
begin
  Result := AttributeNodes['InventoryStatusType'].Text;
end;

procedure TXMLInventoryClass.Set_InventoryStatusType(Value: UnicodeString);
begin
  SetAttribute('InventoryStatusType', Value);
end;

function TXMLInventoryClass.Get_InventoryOwnedBy: UnicodeString;
begin
  Result := AttributeNodes['InventoryOwnedBy'].Text;
end;

procedure TXMLInventoryClass.Set_InventoryOwnedBy(Value: UnicodeString);
begin
  SetAttribute('InventoryOwnedBy', Value);
end;

function TXMLInventoryClass.Get_InventoryClassCode: IXMLInventoryClassCodeList;
begin
  Result := FInventoryClassCode;
end;

function TXMLInventoryClass.Get_InventoryClassDescription: IXMLS72List;
begin
  Result := FInventoryClassDescription;
end;

function TXMLInventoryClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLInventoryClassCode }

function TXMLInventoryClassCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLInventoryClassCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLInventoryClassCode.Get_InventoryClassLevel: LongWord;
begin
  Result := AttributeNodes['InventoryClassLevel'].NodeValue;
end;

procedure TXMLInventoryClassCode.Set_InventoryClassLevel(Value: LongWord);
begin
  SetAttribute('InventoryClassLevel', Value);
end;

{ TXMLInventoryClassCodeList }

function TXMLInventoryClassCodeList.Add: IXMLInventoryClassCode;
begin
  Result := AddItem(-1) as IXMLInventoryClassCode;
end;

function TXMLInventoryClassCodeList.Insert(const Index: Integer): IXMLInventoryClassCode;
begin
  Result := AddItem(Index) as IXMLInventoryClassCode;
end;

function TXMLInventoryClassCodeList.Get_Item(Index: Integer): IXMLInventoryClassCode;
begin
  Result := List[Index] as IXMLInventoryClassCode;
end;

{ TXMLPackageInformationClass }

procedure TXMLPackageInformationClass.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('RawMaterialSet', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('PackageCharacteristics', TXMLPackageCharacteristics);
  RegisterChildNode('BaleItem', TXMLBaleItem);
  RegisterChildNode('BoxItem', TXMLBoxItem);
  RegisterChildNode('ReelItem', TXMLReelItem);
  RegisterChildNode('ReamItem', TXMLReamItem);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  RegisterChildNode('UnitItem', TXMLUnitItem);
  RegisterChildNode('WoodItem', TXMLWoodItem);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('e-Attachment', TXMLEAttachment);
  RegisterChildNode('PackageReference', TXMLPackageReference);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FSupplierMarks := CreateCollection(TXMLS30List, IXMLNode, 'SupplierMarks') as IXMLS30List;
  FRawMaterialSet := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'RawMaterialSet') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FBaleItem := CreateCollection(TXMLBaleItemList, IXMLBaleItem, 'BaleItem') as IXMLBaleItemList;
  FBoxItem := CreateCollection(TXMLBoxItemList, IXMLBoxItem, 'BoxItem') as IXMLBoxItemList;
  FReelItem := CreateCollection(TXMLReelItemList, IXMLReelItem, 'ReelItem') as IXMLReelItemList;
  FReamItem := CreateCollection(TXMLReamItemList, IXMLReamItem, 'ReamItem') as IXMLReamItemList;
  FSheetItem := CreateCollection(TXMLSheetItemList, IXMLSheetItem, 'SheetItem') as IXMLSheetItemList;
  FUnitItem := CreateCollection(TXMLUnitItemList, IXMLUnitItem, 'UnitItem') as IXMLUnitItemList;
  FWoodItem := CreateCollection(TXMLWoodItemList, IXMLWoodItem, 'WoodItem') as IXMLWoodItemList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FPackageReference := CreateCollection(TXMLPackageReferenceList, IXMLPackageReference, 'PackageReference') as IXMLPackageReferenceList;
  inherited;
end;

function TXMLPackageInformationClass.Get_PackageType: UnicodeString;
begin
  Result := AttributeNodes['PackageType'].Text;
end;

procedure TXMLPackageInformationClass.Set_PackageType(Value: UnicodeString);
begin
  SetAttribute('PackageType', Value);
end;

function TXMLPackageInformationClass.Get_MixedProductPalletIndicator: UnicodeString;
begin
  Result := AttributeNodes['MixedProductPalletIndicator'].Text;
end;

procedure TXMLPackageInformationClass.Set_MixedProductPalletIndicator(Value: UnicodeString);
begin
  SetAttribute('MixedProductPalletIndicator', Value);
end;

function TXMLPackageInformationClass.Get_PackageLevel: Double;
begin
  Result := XmlStrToFloatExt(AttributeNodes['PackageLevel'].Text);
end;

procedure TXMLPackageInformationClass.Set_PackageLevel(Value: Double);
begin
  SetAttribute('PackageLevel', Value);
end;

function TXMLPackageInformationClass.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLPackageInformationClass.Get_SupplierMarks: IXMLS30List;
begin
  Result := FSupplierMarks;
end;

function TXMLPackageInformationClass.Get_RawMaterialSet: IXMLIdentifierS60List;
begin
  Result := FRawMaterialSet;
end;

function TXMLPackageInformationClass.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLPackageInformationClass.Get_MachineID: UnicodeString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLPackageInformationClass.Set_MachineID(Value: UnicodeString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLPackageInformationClass.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLPackageInformationClass.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLPackageInformationClass.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLPackageInformationClass.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLPackageInformationClass.Get_PackageCharacteristics: IXMLPackageCharacteristics;
begin
  Result := ChildNodes['PackageCharacteristics'] as IXMLPackageCharacteristics;
end;

function TXMLPackageInformationClass.Get_BaleItem: IXMLBaleItemList;
begin
  Result := FBaleItem;
end;

function TXMLPackageInformationClass.Get_BoxItem: IXMLBoxItemList;
begin
  Result := FBoxItem;
end;

function TXMLPackageInformationClass.Get_ReelItem: IXMLReelItemList;
begin
  Result := FReelItem;
end;

function TXMLPackageInformationClass.Get_ReamItem: IXMLReamItemList;
begin
  Result := FReamItem;
end;

function TXMLPackageInformationClass.Get_SheetItem: IXMLSheetItemList;
begin
  Result := FSheetItem;
end;

function TXMLPackageInformationClass.Get_UnitItem: IXMLUnitItemList;
begin
  Result := FUnitItem;
end;

function TXMLPackageInformationClass.Get_WoodItem: IXMLWoodItemList;
begin
  Result := FWoodItem;
end;

function TXMLPackageInformationClass.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLPackageInformationClass.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['e-Attachment'] as IXMLEAttachment;
end;

function TXMLPackageInformationClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLPackageInformationClass.Get_PackageReference: IXMLPackageReferenceList;
begin
  Result := FPackageReference;
end;

{ TXMLPackageInformationClassList }

function TXMLPackageInformationClassList.Add: IXMLPackageInformationClass;
begin
  Result := AddItem(-1) as IXMLPackageInformationClass;
end;

function TXMLPackageInformationClassList.Insert(const Index: Integer): IXMLPackageInformationClass;
begin
  Result := AddItem(Index) as IXMLPackageInformationClass;
end;

function TXMLPackageInformationClassList.Get_Item(Index: Integer): IXMLPackageInformationClass;
begin
  Result := List[Index] as IXMLPackageInformationClass;
end;

{ TXMLPackageCharacteristics }

procedure TXMLPackageCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('LengthCutDescription', TXMLLengthCutDescription);
  RegisterChildNode('PropertyValue', TXMLPropertyValue);
  FPropertyValue := CreateCollection(TXMLPropertyValueList, IXMLPropertyValue, 'PropertyValue') as IXMLPropertyValueList;
  inherited;
end;

function TXMLPackageCharacteristics.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLPackageCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLPackageCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLPackageCharacteristics.Get_LengthCutDescription: IXMLLengthCutDescription;
begin
  Result := ChildNodes['LengthCutDescription'] as IXMLLengthCutDescription;
end;

function TXMLPackageCharacteristics.Get_PropertyValue: IXMLPropertyValueList;
begin
  Result := FPropertyValue;
end;

{ TXMLBaleItem }

procedure TXMLBaleItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('BaleCharacteristics', TXMLBaleCharacteristics);
  RegisterChildNode('BaleReference', TXMLBaleReference);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FBaleReference := CreateCollection(TXMLBaleReferenceList, IXMLBaleReference, 'BaleReference') as IXMLBaleReferenceList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLBaleItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLBaleItem.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLBaleItem.Get_MachineID: UnicodeString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLBaleItem.Set_MachineID(Value: UnicodeString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLBaleItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLBaleItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLBaleItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLBaleItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLBaleItem.Get_BaleCharacteristics: IXMLBaleCharacteristics;
begin
  Result := ChildNodes['BaleCharacteristics'] as IXMLBaleCharacteristics;
end;

function TXMLBaleItem.Get_BaleReference: IXMLBaleReferenceList;
begin
  Result := FBaleReference;
end;

function TXMLBaleItem.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLBaleItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLBaleItemList }

function TXMLBaleItemList.Add: IXMLBaleItem;
begin
  Result := AddItem(-1) as IXMLBaleItem;
end;

function TXMLBaleItemList.Insert(const Index: Integer): IXMLBaleItem;
begin
  Result := AddItem(Index) as IXMLBaleItem;
end;

function TXMLBaleItemList.Get_Item(Index: Integer): IXMLBaleItem;
begin
  Result := List[Index] as IXMLBaleItem;
end;

{ TXMLBaleCharacteristics }

procedure TXMLBaleCharacteristics.AfterConstruction;
begin
  RegisterChildNode('BaleHeight', TXMLMeasurement);
  RegisterChildNode('BaleWidth', TXMLMeasurement);
  RegisterChildNode('BaleDepth', TXMLMeasurement);
  RegisterChildNode('DateMade', TXMLDateMade);
  RegisterChildNode('DateFinished', TXMLDateFinished);
  inherited;
end;

function TXMLBaleCharacteristics.Get_BaleHeight: IXMLMeasurement;
begin
  Result := ChildNodes['BaleHeight'] as IXMLMeasurement;
end;

function TXMLBaleCharacteristics.Get_BaleWidth: IXMLMeasurement;
begin
  Result := ChildNodes['BaleWidth'] as IXMLMeasurement;
end;

function TXMLBaleCharacteristics.Get_BaleDepth: IXMLMeasurement;
begin
  Result := ChildNodes['BaleDepth'] as IXMLMeasurement;
end;

function TXMLBaleCharacteristics.Get_DateMade: IXMLDateMade;
begin
  Result := ChildNodes['DateMade'] as IXMLDateMade;
end;

function TXMLBaleCharacteristics.Get_DateFinished: IXMLDateFinished;
begin
  Result := ChildNodes['DateFinished'] as IXMLDateFinished;
end;

{ TXMLDateMade }

procedure TXMLDateMade.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateMade.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateMade.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateMade.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDateFinished }

procedure TXMLDateFinished.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateFinished.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateFinished.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateFinished.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLBaleReference }

function TXMLBaleReference.Get_BaleReferenceType: UnicodeString;
begin
  Result := AttributeNodes['BaleReferenceType'].Text;
end;

procedure TXMLBaleReference.Set_BaleReferenceType(Value: UnicodeString);
begin
  SetAttribute('BaleReferenceType', Value);
end;

function TXMLBaleReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLBaleReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLBaleReferenceList }

function TXMLBaleReferenceList.Add: IXMLBaleReference;
begin
  Result := AddItem(-1) as IXMLBaleReference;
end;

function TXMLBaleReferenceList.Insert(const Index: Integer): IXMLBaleReference;
begin
  Result := AddItem(Index) as IXMLBaleReference;
end;

function TXMLBaleReferenceList.Get_Item(Index: Integer): IXMLBaleReference;
begin
  Result := List[Index] as IXMLBaleReference;
end;

{ TXMLBoxItem }

procedure TXMLBoxItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('ReamItem', TXMLReamItem);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  RegisterChildNode('UnitItem', TXMLUnitItem);
  RegisterChildNode('BoxCharacteristics', TXMLBoxCharacteristics);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('BoxReference', TXMLBoxReference);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FReamItem := CreateCollection(TXMLReamItemList, IXMLReamItem, 'ReamItem') as IXMLReamItemList;
  FUnitItem := CreateCollection(TXMLUnitItemList, IXMLUnitItem, 'UnitItem') as IXMLUnitItemList;
  FBoxReference := CreateCollection(TXMLBoxReferenceList, IXMLBoxReference, 'BoxReference') as IXMLBoxReferenceList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLBoxItem.Get_MixProductIndicator: UnicodeString;
begin
  Result := AttributeNodes['MixProductIndicator'].Text;
end;

procedure TXMLBoxItem.Set_MixProductIndicator(Value: UnicodeString);
begin
  SetAttribute('MixProductIndicator', Value);
end;

function TXMLBoxItem.Get_IsPartialIndicator: UnicodeString;
begin
  Result := AttributeNodes['IsPartialIndicator'].Text;
end;

procedure TXMLBoxItem.Set_IsPartialIndicator(Value: UnicodeString);
begin
  SetAttribute('IsPartialIndicator', Value);
end;

function TXMLBoxItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLBoxItem.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLBoxItem.Get_MachineID: UnicodeString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLBoxItem.Set_MachineID(Value: UnicodeString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLBoxItem.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLBoxItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLBoxItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLBoxItem.Get_ReamItem: IXMLReamItemList;
begin
  Result := FReamItem;
end;

function TXMLBoxItem.Get_SheetItem: IXMLSheetItem;
begin
  Result := ChildNodes['SheetItem'] as IXMLSheetItem;
end;

function TXMLBoxItem.Get_UnitItem: IXMLUnitItemList;
begin
  Result := FUnitItem;
end;

function TXMLBoxItem.Get_BoxCharacteristics: IXMLBoxCharacteristics;
begin
  Result := ChildNodes['BoxCharacteristics'] as IXMLBoxCharacteristics;
end;

function TXMLBoxItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLBoxItem.Get_BoxReference: IXMLBoxReferenceList;
begin
  Result := FBoxReference;
end;

function TXMLBoxItem.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLBoxItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLBoxItemList }

function TXMLBoxItemList.Add: IXMLBoxItem;
begin
  Result := AddItem(-1) as IXMLBoxItem;
end;

function TXMLBoxItemList.Insert(const Index: Integer): IXMLBoxItem;
begin
  Result := AddItem(Index) as IXMLBoxItem;
end;

function TXMLBoxItemList.Get_Item(Index: Integer): IXMLBoxItem;
begin
  Result := List[Index] as IXMLBoxItem;
end;

{ TXMLReamItem }

procedure TXMLReamItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLReamItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLReamItem.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLReamItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLReamItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLReamItem.Get_SheetItem: IXMLSheetItem;
begin
  Result := ChildNodes['SheetItem'] as IXMLSheetItem;
end;

function TXMLReamItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLReamItemList }

function TXMLReamItemList.Add: IXMLReamItem;
begin
  Result := AddItem(-1) as IXMLReamItem;
end;

function TXMLReamItemList.Insert(const Index: Integer): IXMLReamItem;
begin
  Result := AddItem(Index) as IXMLReamItem;
end;

function TXMLReamItemList.Get_Item(Index: Integer): IXMLReamItem;
begin
  Result := List[Index] as IXMLReamItem;
end;

{ TXMLSheetItem }

procedure TXMLSheetItem.AfterConstruction;
begin
  RegisterChildNode('DateSheeted', TXMLDateSheeted);
  RegisterChildNode('DateFinished', TXMLDateFinished);
  inherited;
end;

function TXMLSheetItem.Get_DateSheeted: IXMLDateSheeted;
begin
  Result := ChildNodes['DateSheeted'] as IXMLDateSheeted;
end;

function TXMLSheetItem.Get_DateFinished: IXMLDateFinished;
begin
  Result := ChildNodes['DateFinished'] as IXMLDateFinished;
end;

{ TXMLSheetItemList }

function TXMLSheetItemList.Add: IXMLSheetItem;
begin
  Result := AddItem(-1) as IXMLSheetItem;
end;

function TXMLSheetItemList.Insert(const Index: Integer): IXMLSheetItem;
begin
  Result := AddItem(Index) as IXMLSheetItem;
end;

function TXMLSheetItemList.Get_Item(Index: Integer): IXMLSheetItem;
begin
  Result := List[Index] as IXMLSheetItem;
end;

{ TXMLDateSheeted }

procedure TXMLDateSheeted.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateSheeted.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateSheeted.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateSheeted.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLUnitItem }

procedure TXMLUnitItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('UnitCharacteristics', TXMLUnitCharacteristics);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('UnitReference', TXMLUnitReference);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FUnitReference := CreateCollection(TXMLUnitReferenceList, IXMLUnitReference, 'UnitReference') as IXMLUnitReferenceList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLUnitItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLUnitItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLUnitItem.Get_UnitCharacteristics: IXMLUnitCharacteristics;
begin
  Result := ChildNodes['UnitCharacteristics'] as IXMLUnitCharacteristics;
end;

function TXMLUnitItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLUnitItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLUnitItem.Get_UnitReference: IXMLUnitReferenceList;
begin
  Result := FUnitReference;
end;

function TXMLUnitItem.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLUnitItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLUnitItemList }

function TXMLUnitItemList.Add: IXMLUnitItem;
begin
  Result := AddItem(-1) as IXMLUnitItem;
end;

function TXMLUnitItemList.Insert(const Index: Integer): IXMLUnitItem;
begin
  Result := AddItem(Index) as IXMLUnitItem;
end;

function TXMLUnitItemList.Get_Item(Index: Integer): IXMLUnitItem;
begin
  Result := List[Index] as IXMLUnitItem;
end;

{ TXMLUnitReference }

function TXMLUnitReference.Get_UnitReferenceType: UnicodeString;
begin
  Result := AttributeNodes['UnitReferenceType'].Text;
end;

procedure TXMLUnitReference.Set_UnitReferenceType(Value: UnicodeString);
begin
  SetAttribute('UnitReferenceType', Value);
end;

function TXMLUnitReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLUnitReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLUnitReferenceList }

function TXMLUnitReferenceList.Add: IXMLUnitReference;
begin
  Result := AddItem(-1) as IXMLUnitReference;
end;

function TXMLUnitReferenceList.Insert(const Index: Integer): IXMLUnitReference;
begin
  Result := AddItem(Index) as IXMLUnitReference;
end;

function TXMLUnitReferenceList.Get_Item(Index: Integer): IXMLUnitReference;
begin
  Result := List[Index] as IXMLUnitReference;
end;

{ TXMLBoxReference }

function TXMLBoxReference.Get_BoxReferenceType: UnicodeString;
begin
  Result := AttributeNodes['BoxReferenceType'].Text;
end;

procedure TXMLBoxReference.Set_BoxReferenceType(Value: UnicodeString);
begin
  SetAttribute('BoxReferenceType', Value);
end;

function TXMLBoxReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLBoxReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLBoxReferenceList }

function TXMLBoxReferenceList.Add: IXMLBoxReference;
begin
  Result := AddItem(-1) as IXMLBoxReference;
end;

function TXMLBoxReferenceList.Insert(const Index: Integer): IXMLBoxReference;
begin
  Result := AddItem(Index) as IXMLBoxReference;
end;

function TXMLBoxReferenceList.Get_Item(Index: Integer): IXMLBoxReference;
begin
  Result := List[Index] as IXMLBoxReference;
end;

{ TXMLReelItem }

procedure TXMLReelItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('DeliveryMessageReelCharacteristics', TXMLDeliveryMessageReelCharacteristics);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLReelItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLReelItem.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLReelItem.Get_MachineID: UnicodeString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLReelItem.Set_MachineID(Value: UnicodeString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLReelItem.Get_DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics;
begin
  Result := ChildNodes['DeliveryMessageReelCharacteristics'] as IXMLDeliveryMessageReelCharacteristics;
end;

function TXMLReelItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLReelItem.Get_MillOrderNumber: UnicodeString;
begin
  Result := ChildNodes['MillOrderNumber'].Text;
end;

procedure TXMLReelItem.Set_MillOrderNumber(Value: UnicodeString);
begin
  ChildNodes['MillOrderNumber'].NodeValue := Value;
end;

function TXMLReelItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLReelItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLReelItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLReelItemList }

function TXMLReelItemList.Add: IXMLReelItem;
begin
  Result := AddItem(-1) as IXMLReelItem;
end;

function TXMLReelItemList.Insert(const Index: Integer): IXMLReelItem;
begin
  Result := AddItem(Index) as IXMLReelItem;
end;

function TXMLReelItemList.Get_Item(Index: Integer): IXMLReelItem;
begin
  Result := List[Index] as IXMLReelItem;
end;

{ TXMLDeliveryMessageReelCharacteristics }

procedure TXMLDeliveryMessageReelCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('MillJoinLocation', TXMLMillJoinLocation);
  RegisterChildNode('DateFinished', TXMLDateFinished);
  RegisterChildNode('DateWound', TXMLDateWound);
  RegisterChildNode('Caliper', TXMLCaliper);
  FMillJoinLocation := CreateCollection(TXMLMillJoinLocationList, IXMLMillJoinLocation, 'MillJoinLocation') as IXMLMillJoinLocationList;
  inherited;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_ReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['ReelWidth'] as IXMLMeasurement;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_ReelDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['ReelDiameter'] as IXMLMeasurement;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_ReelLength: IXMLMeasurement;
begin
  Result := ChildNodes['ReelLength'] as IXMLMeasurement;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_MachineID: UnicodeString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_MachineID(Value: UnicodeString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_TambourID: UnicodeString;
begin
  Result := ChildNodes['TambourID'].Text;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_TambourID(Value: UnicodeString);
begin
  ChildNodes['TambourID'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_SetNumber: LongWord;
begin
  Result := ChildNodes['SetNumber'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_SetNumber(Value: LongWord);
begin
  ChildNodes['SetNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_SetPosition: LongWord;
begin
  Result := ChildNodes['SetPosition'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_SetPosition(Value: LongWord);
begin
  ChildNodes['SetPosition'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_TotalSetPositions: LongWord;
begin
  Result := ChildNodes['TotalSetPositions'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_TotalSetPositions(Value: LongWord);
begin
  ChildNodes['TotalSetPositions'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_TotalSetNumbers: LongWord;
begin
  Result := ChildNodes['TotalSetNumbers'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_TotalSetNumbers(Value: LongWord);
begin
  ChildNodes['TotalSetNumbers'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_NumberOfMillJoins: LongWord;
begin
  Result := ChildNodes['NumberOfMillJoins'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_NumberOfMillJoins(Value: LongWord);
begin
  ChildNodes['NumberOfMillJoins'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_MillJoinLocation: IXMLMillJoinLocationList;
begin
  Result := FMillJoinLocation;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_DateFinished: IXMLDateFinished;
begin
  Result := ChildNodes['DateFinished'] as IXMLDateFinished;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_DateWound: IXMLDateWound;
begin
  Result := ChildNodes['DateWound'] as IXMLDateWound;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_Caliper: IXMLCaliper;
begin
  Result := ChildNodes['Caliper'] as IXMLCaliper;
end;

{ TXMLMillJoinLocation }

procedure TXMLMillJoinLocation.AfterConstruction;
begin
  RegisterChildNode('LengthFromCore', TXMLMeasurement);
  RegisterChildNode('DistanceFromCore', TXMLMeasurement);
  inherited;
end;

function TXMLMillJoinLocation.Get_MillJoinNumber: LongWord;
begin
  Result := ChildNodes['MillJoinNumber'].NodeValue;
end;

procedure TXMLMillJoinLocation.Set_MillJoinNumber(Value: LongWord);
begin
  ChildNodes['MillJoinNumber'].NodeValue := Value;
end;

function TXMLMillJoinLocation.Get_LengthFromCore: IXMLMeasurement;
begin
  Result := ChildNodes['LengthFromCore'] as IXMLMeasurement;
end;

function TXMLMillJoinLocation.Get_DistanceFromCore: IXMLMeasurement;
begin
  Result := ChildNodes['DistanceFromCore'] as IXMLMeasurement;
end;

{ TXMLMillJoinLocationList }

function TXMLMillJoinLocationList.Add: IXMLMillJoinLocation;
begin
  Result := AddItem(-1) as IXMLMillJoinLocation;
end;

function TXMLMillJoinLocationList.Insert(const Index: Integer): IXMLMillJoinLocation;
begin
  Result := AddItem(Index) as IXMLMillJoinLocation;
end;

function TXMLMillJoinLocationList.Get_Item(Index: Integer): IXMLMillJoinLocation;
begin
  Result := List[Index] as IXMLMillJoinLocation;
end;

{ TXMLDateWound }

procedure TXMLDateWound.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateWound.Get_RewoundIndicator: UnicodeString;
begin
  Result := AttributeNodes['RewoundIndicator'].Text;
end;

procedure TXMLDateWound.Set_RewoundIndicator(Value: UnicodeString);
begin
  SetAttribute('RewoundIndicator', Value);
end;

function TXMLDateWound.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateWound.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateWound.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLWoodItem }

procedure TXMLWoodItem.AfterConstruction;
begin
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('PackagingInformation', TXMLProductPackagingClass);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLWoodItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLWoodItem.Get_PackagingInformation: IXMLProductPackagingClass;
begin
  Result := ChildNodes['PackagingInformation'] as IXMLProductPackagingClass;
end;

function TXMLWoodItem.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLWoodItem.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

{ TXMLWoodItemList }

function TXMLWoodItemList.Add: IXMLWoodItem;
begin
  Result := AddItem(-1) as IXMLWoodItem;
end;

function TXMLWoodItemList.Insert(const Index: Integer): IXMLWoodItem;
begin
  Result := AddItem(Index) as IXMLWoodItem;
end;

function TXMLWoodItemList.Get_Item(Index: Integer): IXMLWoodItem;
begin
  Result := List[Index] as IXMLWoodItem;
end;

{ TXMLPackageReference }

function TXMLPackageReference.Get_PackageReferenceType: UnicodeString;
begin
  Result := AttributeNodes['PackageReferenceType'].Text;
end;

procedure TXMLPackageReference.Set_PackageReferenceType(Value: UnicodeString);
begin
  SetAttribute('PackageReferenceType', Value);
end;

function TXMLPackageReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLPackageReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLPackageReferenceList }

function TXMLPackageReferenceList.Add: IXMLPackageReference;
begin
  Result := AddItem(-1) as IXMLPackageReference;
end;

function TXMLPackageReferenceList.Insert(const Index: Integer): IXMLPackageReference;
begin
  Result := AddItem(Index) as IXMLPackageReference;
end;

function TXMLPackageReferenceList.Get_Item(Index: Integer): IXMLPackageReference;
begin
  Result := List[Index] as IXMLPackageReference;
end;

{ TXMLMeasuringSpecification }

procedure TXMLMeasuringSpecification.AfterConstruction;
begin
  RegisterChildNode('MeasuringParty', TXMLParty);
  RegisterChildNode('MeasuringLocation', TXMLMeasuringLocation);
  RegisterChildNode('MeasuringReference', TXMLMeasuringReference);
  RegisterChildNode('MeasuringCodeInfo', TXMLMeasuringCodeInfo);
  RegisterChildNode('MeasuringCode', TXMLMeasuringCode);
  RegisterChildNode('MeasuringProduct', TXMLMeasuringProduct);
  RegisterChildNode('MeasurementSpecification', TXMLMeasurementSpecification);
  FMeasuringReference := CreateCollection(TXMLMeasuringReferenceList, IXMLMeasuringReference, 'MeasuringReference') as IXMLMeasuringReferenceList;
  FMeasuringCodeInfo := CreateCollection(TXMLMeasuringCodeInfoList, IXMLMeasuringCodeInfo, 'MeasuringCodeInfo') as IXMLMeasuringCodeInfoList;
  FMeasuringDescription := CreateCollection(TXMLS255List, IXMLNode, 'MeasuringDescription') as IXMLS255List;
  inherited;
end;

function TXMLMeasuringSpecification.Get_MeasuringType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringType'].Text;
end;

procedure TXMLMeasuringSpecification.Set_MeasuringType(Value: UnicodeString);
begin
  SetAttribute('MeasuringType', Value);
end;

function TXMLMeasuringSpecification.Get_PrioritisedMeasuringType: UnicodeString;
begin
  Result := AttributeNodes['PrioritisedMeasuringType'].Text;
end;

procedure TXMLMeasuringSpecification.Set_PrioritisedMeasuringType(Value: UnicodeString);
begin
  SetAttribute('PrioritisedMeasuringType', Value);
end;

function TXMLMeasuringSpecification.Get_CompensationMeasuringType: UnicodeString;
begin
  Result := AttributeNodes['CompensationMeasuringType'].Text;
end;

procedure TXMLMeasuringSpecification.Set_CompensationMeasuringType(Value: UnicodeString);
begin
  SetAttribute('CompensationMeasuringType', Value);
end;

function TXMLMeasuringSpecification.Get_MeasuringParty: IXMLParty;
begin
  Result := ChildNodes['MeasuringParty'] as IXMLParty;
end;

function TXMLMeasuringSpecification.Get_MeasuringLocation: IXMLMeasuringLocation;
begin
  Result := ChildNodes['MeasuringLocation'] as IXMLMeasuringLocation;
end;

function TXMLMeasuringSpecification.Get_MeasuringReference: IXMLMeasuringReferenceList;
begin
  Result := FMeasuringReference;
end;

function TXMLMeasuringSpecification.Get_MeasuringCodeInfo: IXMLMeasuringCodeInfoList;
begin
  Result := FMeasuringCodeInfo;
end;

function TXMLMeasuringSpecification.Get_MeasuringCode: IXMLMeasuringCode;
begin
  Result := ChildNodes['MeasuringCode'] as IXMLMeasuringCode;
end;

function TXMLMeasuringSpecification.Get_MeasuringDescription: IXMLS255List;
begin
  Result := FMeasuringDescription;
end;

function TXMLMeasuringSpecification.Get_MeasuringProduct: IXMLMeasuringProduct;
begin
  Result := ChildNodes['MeasuringProduct'] as IXMLMeasuringProduct;
end;

function TXMLMeasuringSpecification.Get_MeasurementSpecification: IXMLMeasurementSpecification;
begin
  Result := ChildNodes['MeasurementSpecification'] as IXMLMeasurementSpecification;
end;

{ TXMLMeasuringSpecificationList }

function TXMLMeasuringSpecificationList.Add: IXMLMeasuringSpecification;
begin
  Result := AddItem(-1) as IXMLMeasuringSpecification;
end;

function TXMLMeasuringSpecificationList.Insert(const Index: Integer): IXMLMeasuringSpecification;
begin
  Result := AddItem(Index) as IXMLMeasuringSpecification;
end;

function TXMLMeasuringSpecificationList.Get_Item(Index: Integer): IXMLMeasuringSpecification;
begin
  Result := List[Index] as IXMLMeasuringSpecification;
end;

{ TXMLMeasuringLocation }

procedure TXMLMeasuringLocation.AfterConstruction;
begin
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('MeasuringUnitIdentifier', TXMLMeasuringUnitIdentifier);
  RegisterChildNode('MeasuringUnitBrandAndModel', TXMLMeasuringUnitBrandAndModel);
  RegisterChildNode('MeasuringEquipment', TXMLMeasuringEquipment);
  FMeasuringUnitIdentifier := CreateCollection(TXMLMeasuringUnitIdentifierList, IXMLMeasuringUnitIdentifier, 'MeasuringUnitIdentifier') as IXMLMeasuringUnitIdentifierList;
  FMeasuringEquipment := CreateCollection(TXMLMeasuringEquipmentList, IXMLMeasuringEquipment, 'MeasuringEquipment') as IXMLMeasuringEquipmentList;
  inherited;
end;

function TXMLMeasuringLocation.Get_LocationParty: IXMLLocationParty;
begin
  Result := ChildNodes['LocationParty'] as IXMLLocationParty;
end;

function TXMLMeasuringLocation.Get_MeasuringUnitIdentifier: IXMLMeasuringUnitIdentifierList;
begin
  Result := FMeasuringUnitIdentifier;
end;

function TXMLMeasuringLocation.Get_MeasuringUnitBrandAndModel: IXMLMeasuringUnitBrandAndModel;
begin
  Result := ChildNodes['MeasuringUnitBrandAndModel'] as IXMLMeasuringUnitBrandAndModel;
end;

function TXMLMeasuringLocation.Get_MeasuringEquipment: IXMLMeasuringEquipmentList;
begin
  Result := FMeasuringEquipment;
end;

function TXMLMeasuringLocation.Get_MeasuringLineID: UnicodeString;
begin
  Result := ChildNodes['MeasuringLineID'].Text;
end;

procedure TXMLMeasuringLocation.Set_MeasuringLineID(Value: UnicodeString);
begin
  ChildNodes['MeasuringLineID'].NodeValue := Value;
end;

{ TXMLMeasuringUnitIdentifier }

function TXMLMeasuringUnitIdentifier.Get_MeasuringUnitIdentifierType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringUnitIdentifierType'].Text;
end;

procedure TXMLMeasuringUnitIdentifier.Set_MeasuringUnitIdentifierType(Value: UnicodeString);
begin
  SetAttribute('MeasuringUnitIdentifierType', Value);
end;

function TXMLMeasuringUnitIdentifier.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLMeasuringUnitIdentifier.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLMeasuringUnitIdentifier.Get_StateOrProvince: UnicodeString;
begin
  Result := AttributeNodes['StateOrProvince'].Text;
end;

procedure TXMLMeasuringUnitIdentifier.Set_StateOrProvince(Value: UnicodeString);
begin
  SetAttribute('StateOrProvince', Value);
end;

function TXMLMeasuringUnitIdentifier.Get_ISOCountryCode: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCode'].Text;
end;

procedure TXMLMeasuringUnitIdentifier.Set_ISOCountryCode(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCode', Value);
end;

function TXMLMeasuringUnitIdentifier.Get_ISOCountryCodeAlpha3: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeAlpha3'].Text;
end;

procedure TXMLMeasuringUnitIdentifier.Set_ISOCountryCodeAlpha3(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeAlpha3', Value);
end;

function TXMLMeasuringUnitIdentifier.Get_ISOCountryCodeNumeric: UnicodeString;
begin
  Result := AttributeNodes['ISOCountryCodeNumeric'].Text;
end;

procedure TXMLMeasuringUnitIdentifier.Set_ISOCountryCodeNumeric(Value: UnicodeString);
begin
  SetAttribute('ISOCountryCodeNumeric', Value);
end;

{ TXMLMeasuringUnitIdentifierList }

function TXMLMeasuringUnitIdentifierList.Add: IXMLMeasuringUnitIdentifier;
begin
  Result := AddItem(-1) as IXMLMeasuringUnitIdentifier;
end;

function TXMLMeasuringUnitIdentifierList.Insert(const Index: Integer): IXMLMeasuringUnitIdentifier;
begin
  Result := AddItem(Index) as IXMLMeasuringUnitIdentifier;
end;

function TXMLMeasuringUnitIdentifierList.Get_Item(Index: Integer): IXMLMeasuringUnitIdentifier;
begin
  Result := List[Index] as IXMLMeasuringUnitIdentifier;
end;

{ TXMLMeasuringUnitBrandAndModel }

procedure TXMLMeasuringUnitBrandAndModel.AfterConstruction;
begin
  RegisterChildNode('Model', TXMLModel);
  inherited;
end;

function TXMLMeasuringUnitBrandAndModel.Get_Brand: UnicodeString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLMeasuringUnitBrandAndModel.Set_Brand(Value: UnicodeString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

function TXMLMeasuringUnitBrandAndModel.Get_Model: IXMLModel;
begin
  Result := ChildNodes['Model'] as IXMLModel;
end;

{ TXMLMeasuringEquipment }

procedure TXMLMeasuringEquipment.AfterConstruction;
begin
  RegisterChildNode('MeasuringEquipmentCode', TXMLMeasuringEquipmentCode);
  RegisterChildNode('CodeValue', TXMLCodeValue);
  RegisterChildNode('MeasurementModule', TXMLMeasurementModule);
  RegisterChildNode('Calibration', TXMLCalibration);
  FMeasuringEquipmentCode := CreateCollection(TXMLMeasuringEquipmentCodeList, IXMLMeasuringEquipmentCode, 'MeasuringEquipmentCode') as IXMLMeasuringEquipmentCodeList;
  FCodeValue := CreateCollection(TXMLCodeValueList, IXMLCodeValue, 'CodeValue') as IXMLCodeValueList;
  FMeasuringEquipmentDescription := CreateCollection(TXMLS72List, IXMLNode, 'MeasuringEquipmentDescription') as IXMLS72List;
  inherited;
end;

function TXMLMeasuringEquipment.Get_MeasuringEquipmentCode: IXMLMeasuringEquipmentCodeList;
begin
  Result := FMeasuringEquipmentCode;
end;

function TXMLMeasuringEquipment.Get_CodeValue: IXMLCodeValueList;
begin
  Result := FCodeValue;
end;

function TXMLMeasuringEquipment.Get_MeasuringEquipmentDescription: IXMLS72List;
begin
  Result := FMeasuringEquipmentDescription;
end;

function TXMLMeasuringEquipment.Get_MeasurementSystem: UnicodeString;
begin
  Result := ChildNodes['MeasurementSystem'].Text;
end;

procedure TXMLMeasuringEquipment.Set_MeasurementSystem(Value: UnicodeString);
begin
  ChildNodes['MeasurementSystem'].NodeValue := Value;
end;

function TXMLMeasuringEquipment.Get_MeasurementModule: IXMLMeasurementModule;
begin
  Result := ChildNodes['MeasurementModule'] as IXMLMeasurementModule;
end;

function TXMLMeasuringEquipment.Get_Calibration: IXMLCalibration;
begin
  Result := ChildNodes['Calibration'] as IXMLCalibration;
end;

{ TXMLMeasuringEquipmentList }

function TXMLMeasuringEquipmentList.Add: IXMLMeasuringEquipment;
begin
  Result := AddItem(-1) as IXMLMeasuringEquipment;
end;

function TXMLMeasuringEquipmentList.Insert(const Index: Integer): IXMLMeasuringEquipment;
begin
  Result := AddItem(Index) as IXMLMeasuringEquipment;
end;

function TXMLMeasuringEquipmentList.Get_Item(Index: Integer): IXMLMeasuringEquipment;
begin
  Result := List[Index] as IXMLMeasuringEquipment;
end;

{ TXMLMeasuringEquipmentCode }

function TXMLMeasuringEquipmentCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLMeasuringEquipmentCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLMeasuringEquipmentCodeList }

function TXMLMeasuringEquipmentCodeList.Add: IXMLMeasuringEquipmentCode;
begin
  Result := AddItem(-1) as IXMLMeasuringEquipmentCode;
end;

function TXMLMeasuringEquipmentCodeList.Insert(const Index: Integer): IXMLMeasuringEquipmentCode;
begin
  Result := AddItem(Index) as IXMLMeasuringEquipmentCode;
end;

function TXMLMeasuringEquipmentCodeList.Get_Item(Index: Integer): IXMLMeasuringEquipmentCode;
begin
  Result := List[Index] as IXMLMeasuringEquipmentCode;
end;

{ TXMLMeasurementModule }

function TXMLMeasurementModule.Get_BrandName: UnicodeString;
begin
  Result := AttributeNodes['BrandName'].Text;
end;

procedure TXMLMeasurementModule.Set_BrandName(Value: UnicodeString);
begin
  SetAttribute('BrandName', Value);
end;

function TXMLMeasurementModule.Get_ModelYear: UnicodeString;
begin
  Result := AttributeNodes['ModelYear'].Text;
end;

procedure TXMLMeasurementModule.Set_ModelYear(Value: UnicodeString);
begin
  SetAttribute('ModelYear', Value);
end;

{ TXMLCalibration }

procedure TXMLCalibration.AfterConstruction;
begin
  RegisterChildNode('CalibrationDate', TXMLCalibrationDate);
  FCalibrationDescription := CreateCollection(TXMLS255List, IXMLNode, 'CalibrationDescription') as IXMLS255List;
  inherited;
end;

function TXMLCalibration.Get_CalibrationNumber: UnicodeString;
begin
  Result := ChildNodes['CalibrationNumber'].Text;
end;

procedure TXMLCalibration.Set_CalibrationNumber(Value: UnicodeString);
begin
  ChildNodes['CalibrationNumber'].NodeValue := Value;
end;

function TXMLCalibration.Get_CalibrationDescription: IXMLS255List;
begin
  Result := FCalibrationDescription;
end;

function TXMLCalibration.Get_CalibrationDate: IXMLCalibrationDate;
begin
  Result := ChildNodes['CalibrationDate'] as IXMLCalibrationDate;
end;

{ TXMLCalibrationDate }

procedure TXMLCalibrationDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLCalibrationDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLCalibrationDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLCalibrationDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLMeasuringReference }

function TXMLMeasuringReference.Get_MeasuringReferenceType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringReferenceType'].Text;
end;

procedure TXMLMeasuringReference.Set_MeasuringReferenceType(Value: UnicodeString);
begin
  SetAttribute('MeasuringReferenceType', Value);
end;

function TXMLMeasuringReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLMeasuringReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLMeasuringReferenceList }

function TXMLMeasuringReferenceList.Add: IXMLMeasuringReference;
begin
  Result := AddItem(-1) as IXMLMeasuringReference;
end;

function TXMLMeasuringReferenceList.Insert(const Index: Integer): IXMLMeasuringReference;
begin
  Result := AddItem(Index) as IXMLMeasuringReference;
end;

function TXMLMeasuringReferenceList.Get_Item(Index: Integer): IXMLMeasuringReference;
begin
  Result := List[Index] as IXMLMeasuringReference;
end;

{ TXMLMeasuringCodeInfo }

function TXMLMeasuringCodeInfo.Get_MeasuringCodeType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringCodeType'].Text;
end;

procedure TXMLMeasuringCodeInfo.Set_MeasuringCodeType(Value: UnicodeString);
begin
  SetAttribute('MeasuringCodeType', Value);
end;

{ TXMLMeasuringCodeInfoList }

function TXMLMeasuringCodeInfoList.Add: IXMLMeasuringCodeInfo;
begin
  Result := AddItem(-1) as IXMLMeasuringCodeInfo;
end;

function TXMLMeasuringCodeInfoList.Insert(const Index: Integer): IXMLMeasuringCodeInfo;
begin
  Result := AddItem(Index) as IXMLMeasuringCodeInfo;
end;

function TXMLMeasuringCodeInfoList.Get_Item(Index: Integer): IXMLMeasuringCodeInfo;
begin
  Result := List[Index] as IXMLMeasuringCodeInfo;
end;

{ TXMLMeasuringCode }

function TXMLMeasuringCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLMeasuringCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLMeasuringProduct }

procedure TXMLMeasuringProduct.AfterConstruction;
begin
  RegisterChildNode('Product', TXMLProductClass);
  inherited;
end;

function TXMLMeasuringProduct.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

{ TXMLMeasurementSpecification }

procedure TXMLMeasurementSpecification.AfterConstruction;
begin
  RegisterChildNode('PropertySpecification', TXMLPropertySpecification);
  RegisterChildNode('QuantitySpecification', TXMLQuantitySpecification);
  FPropertySpecification := CreateCollection(TXMLPropertySpecificationList, IXMLPropertySpecification, 'PropertySpecification') as IXMLPropertySpecificationList;
  FQuantitySpecification := CreateCollection(TXMLQuantitySpecificationList, IXMLQuantitySpecification, 'QuantitySpecification') as IXMLQuantitySpecificationList;
  inherited;
end;

function TXMLMeasurementSpecification.Get_PropertySpecification: IXMLPropertySpecificationList;
begin
  Result := FPropertySpecification;
end;

function TXMLMeasurementSpecification.Get_QuantitySpecification: IXMLQuantitySpecificationList;
begin
  Result := FQuantitySpecification;
end;

{ TXMLPropertySpecification }

procedure TXMLPropertySpecification.AfterConstruction;
begin
  RegisterChildNode('PositionOnItem', TXMLPositionOnItem);
  RegisterChildNode('PropertySubSpecification', TXMLPropertySubSpecification);
  FPropertySubSpecification := CreateCollection(TXMLPropertySubSpecificationList, IXMLPropertySubSpecification, 'PropertySubSpecification') as IXMLPropertySubSpecificationList;
  inherited;
end;

function TXMLPropertySpecification.Get_PropertyType: UnicodeString;
begin
  Result := AttributeNodes['PropertyType'].Text;
end;

procedure TXMLPropertySpecification.Set_PropertyType(Value: UnicodeString);
begin
  SetAttribute('PropertyType', Value);
end;

function TXMLPropertySpecification.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLPropertySpecification.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLPropertySpecification.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLPropertySpecification.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLPropertySpecification.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLPropertySpecification.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

function TXMLPropertySpecification.Get_ValueType: UnicodeString;
begin
  Result := AttributeNodes['ValueType'].Text;
end;

procedure TXMLPropertySpecification.Set_ValueType(Value: UnicodeString);
begin
  SetAttribute('ValueType', Value);
end;

function TXMLPropertySpecification.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLPropertySpecification.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

function TXMLPropertySpecification.Get_ItemType: UnicodeString;
begin
  Result := AttributeNodes['ItemType'].Text;
end;

procedure TXMLPropertySpecification.Set_ItemType(Value: UnicodeString);
begin
  SetAttribute('ItemType', Value);
end;

function TXMLPropertySpecification.Get_PositionOnItem: IXMLPositionOnItem;
begin
  Result := ChildNodes['PositionOnItem'] as IXMLPositionOnItem;
end;

function TXMLPropertySpecification.Get_PropertySubSpecification: IXMLPropertySubSpecificationList;
begin
  Result := FPropertySubSpecification;
end;

{ TXMLPropertySpecificationList }

function TXMLPropertySpecificationList.Add: IXMLPropertySpecification;
begin
  Result := AddItem(-1) as IXMLPropertySpecification;
end;

function TXMLPropertySpecificationList.Insert(const Index: Integer): IXMLPropertySpecification;
begin
  Result := AddItem(Index) as IXMLPropertySpecification;
end;

function TXMLPropertySpecificationList.Get_Item(Index: Integer): IXMLPropertySpecification;
begin
  Result := List[Index] as IXMLPropertySpecification;
end;

{ TXMLPropertySubSpecification }

procedure TXMLPropertySubSpecification.AfterConstruction;
begin
  RegisterChildNode('PositionOnItem', TXMLPositionOnItem);
  inherited;
end;

function TXMLPropertySubSpecification.Get_PropertyType: UnicodeString;
begin
  Result := AttributeNodes['PropertyType'].Text;
end;

procedure TXMLPropertySubSpecification.Set_PropertyType(Value: UnicodeString);
begin
  SetAttribute('PropertyType', Value);
end;

function TXMLPropertySubSpecification.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLPropertySubSpecification.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLPropertySubSpecification.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLPropertySubSpecification.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLPropertySubSpecification.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLPropertySubSpecification.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

function TXMLPropertySubSpecification.Get_ValueType: UnicodeString;
begin
  Result := AttributeNodes['ValueType'].Text;
end;

procedure TXMLPropertySubSpecification.Set_ValueType(Value: UnicodeString);
begin
  SetAttribute('ValueType', Value);
end;

function TXMLPropertySubSpecification.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLPropertySubSpecification.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

function TXMLPropertySubSpecification.Get_ItemType: UnicodeString;
begin
  Result := AttributeNodes['ItemType'].Text;
end;

procedure TXMLPropertySubSpecification.Set_ItemType(Value: UnicodeString);
begin
  SetAttribute('ItemType', Value);
end;

function TXMLPropertySubSpecification.Get_PositionOnItem: IXMLPositionOnItem;
begin
  Result := ChildNodes['PositionOnItem'] as IXMLPositionOnItem;
end;

{ TXMLPropertySubSpecificationList }

function TXMLPropertySubSpecificationList.Add: IXMLPropertySubSpecification;
begin
  Result := AddItem(-1) as IXMLPropertySubSpecification;
end;

function TXMLPropertySubSpecificationList.Insert(const Index: Integer): IXMLPropertySubSpecification;
begin
  Result := AddItem(Index) as IXMLPropertySubSpecification;
end;

function TXMLPropertySubSpecificationList.Get_Item(Index: Integer): IXMLPropertySubSpecification;
begin
  Result := List[Index] as IXMLPropertySubSpecification;
end;

{ TXMLQuantitySpecification }

function TXMLQuantitySpecification.Get_QuantityType: UnicodeString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLQuantitySpecification.Set_QuantityType(Value: UnicodeString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLQuantitySpecification.Get_QuantityTypeContext: UnicodeString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLQuantitySpecification.Set_QuantityTypeContext(Value: UnicodeString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLQuantitySpecification.Get_AdjustmentType: UnicodeString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLQuantitySpecification.Set_AdjustmentType(Value: UnicodeString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLQuantitySpecification.Get_MeasuringMethodType: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethodType'].Text;
end;

procedure TXMLQuantitySpecification.Set_MeasuringMethodType(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethodType', Value);
end;

function TXMLQuantitySpecification.Get_MeasuringAgency: UnicodeString;
begin
  Result := AttributeNodes['MeasuringAgency'].Text;
end;

procedure TXMLQuantitySpecification.Set_MeasuringAgency(Value: UnicodeString);
begin
  SetAttribute('MeasuringAgency', Value);
end;

function TXMLQuantitySpecification.Get_MeasuringMethod: UnicodeString;
begin
  Result := AttributeNodes['MeasuringMethod'].Text;
end;

procedure TXMLQuantitySpecification.Set_MeasuringMethod(Value: UnicodeString);
begin
  SetAttribute('MeasuringMethod', Value);
end;

function TXMLQuantitySpecification.Get_UOM: UnicodeString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLQuantitySpecification.Set_UOM(Value: UnicodeString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLQuantitySpecificationList }

function TXMLQuantitySpecificationList.Add: IXMLQuantitySpecification;
begin
  Result := AddItem(-1) as IXMLQuantitySpecification;
end;

function TXMLQuantitySpecificationList.Insert(const Index: Integer): IXMLQuantitySpecification;
begin
  Result := AddItem(Index) as IXMLQuantitySpecification;
end;

function TXMLQuantitySpecificationList.Get_Item(Index: Integer): IXMLQuantitySpecification;
begin
  Result := List[Index] as IXMLQuantitySpecification;
end;

{ TXMLDeliveryMessageSummary }

procedure TXMLDeliveryMessageSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('TermsAndDisclaimers', TXMLTermsAndDisclaimers);
  FTotalQuantity := CreateCollection(TXMLTotalQuantityList, IXMLTotalQuantity, 'TotalQuantity') as IXMLTotalQuantityList;
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FTermsAndDisclaimers := CreateCollection(TXMLTermsAndDisclaimersList, IXMLTermsAndDisclaimers, 'TermsAndDisclaimers') as IXMLTermsAndDisclaimersList;
  inherited;
end;

function TXMLDeliveryMessageSummary.Get_TotalNumberOfLineItems: LongWord;
begin
  Result := ChildNodes['TotalNumberOfLineItems'].NodeValue;
end;

procedure TXMLDeliveryMessageSummary.Set_TotalNumberOfLineItems(Value: LongWord);
begin
  ChildNodes['TotalNumberOfLineItems'].NodeValue := Value;
end;

function TXMLDeliveryMessageSummary.Get_TotalQuantity: IXMLTotalQuantityList;
begin
  Result := FTotalQuantity;
end;

function TXMLDeliveryMessageSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLDeliveryMessageSummary.Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
begin
  Result := FTermsAndDisclaimers;
end;

{ TXMLDeliveryPlanningBucket }

procedure TXMLDeliveryPlanningBucket.AfterConstruction;
begin
  RegisterChildNode('TimePeriod', TXMLTimePeriod);
  RegisterChildNode('PlanningOutcome', TXMLPlanningOutcome);
  FPlanningOutcome := CreateCollection(TXMLPlanningOutcomeList, IXMLPlanningOutcome, 'PlanningOutcome') as IXMLPlanningOutcomeList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDeliveryPlanningBucket.Get_BucketStatusType: UnicodeString;
begin
  Result := AttributeNodes['BucketStatusType'].Text;
end;

procedure TXMLDeliveryPlanningBucket.Set_BucketStatusType(Value: UnicodeString);
begin
  SetAttribute('BucketStatusType', Value);
end;

function TXMLDeliveryPlanningBucket.Get_TimePeriod: IXMLTimePeriod;
begin
  Result := ChildNodes['TimePeriod'] as IXMLTimePeriod;
end;

function TXMLDeliveryPlanningBucket.Get_PlanningOutcome: IXMLPlanningOutcomeList;
begin
  Result := FPlanningOutcome;
end;

function TXMLDeliveryPlanningBucket.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLTimePeriod }

procedure TXMLTimePeriod.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  inherited;
end;

function TXMLTimePeriod.Get_PeriodType: UnicodeString;
begin
  Result := AttributeNodes['PeriodType'].Text;
end;

procedure TXMLTimePeriod.Set_PeriodType(Value: UnicodeString);
begin
  SetAttribute('PeriodType', Value);
end;

function TXMLTimePeriod.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLTimePeriod.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLTimePeriod.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLTimePeriod.Get_DateTimeRange: IXMLDateTimeRange;
begin
  Result := ChildNodes['DateTimeRange'] as IXMLDateTimeRange;
end;

function TXMLTimePeriod.Get_Week: UnicodeString;
begin
  Result := ChildNodes['Week'].Text;
end;

procedure TXMLTimePeriod.Set_Week(Value: UnicodeString);
begin
  ChildNodes['Week'].NodeValue := Value;
end;

{ TXMLPlanningOutcome }

procedure TXMLPlanningOutcome.AfterConstruction;
begin
  RegisterChildNode('QuantityInformation', TXMLQuantityInformation);
  RegisterChildNode('PlanningPropertyValue', TXMLPlanningPropertyValue);
  RegisterChildNode('DeviationReason', TXMLDeviationReason);
  RegisterChildNode('PlanningReferenceInformation', TXMLPlanningReferenceInformation);
  RegisterChildNode('ResourceInformation', TXMLResourceInformation);
  FPlanningPropertyValue := CreateCollection(TXMLPlanningPropertyValueList, IXMLPlanningPropertyValue, 'PlanningPropertyValue') as IXMLPlanningPropertyValueList;
  FDeviationReason := CreateCollection(TXMLDeviationReasonList, IXMLDeviationReason, 'DeviationReason') as IXMLDeviationReasonList;
  FPlanningReferenceInformation := CreateCollection(TXMLPlanningReferenceInformationList, IXMLPlanningReferenceInformation, 'PlanningReferenceInformation') as IXMLPlanningReferenceInformationList;
  inherited;
end;

function TXMLPlanningOutcome.Get_PlanningOutcomeType: UnicodeString;
begin
  Result := AttributeNodes['PlanningOutcomeType'].Text;
end;

procedure TXMLPlanningOutcome.Set_PlanningOutcomeType(Value: UnicodeString);
begin
  SetAttribute('PlanningOutcomeType', Value);
end;

function TXMLPlanningOutcome.Get_PlanningOutcomePeriodType: UnicodeString;
begin
  Result := AttributeNodes['PlanningOutcomePeriodType'].Text;
end;

procedure TXMLPlanningOutcome.Set_PlanningOutcomePeriodType(Value: UnicodeString);
begin
  SetAttribute('PlanningOutcomePeriodType', Value);
end;

function TXMLPlanningOutcome.Get_PlanningOutcomeContextType: UnicodeString;
begin
  Result := AttributeNodes['PlanningOutcomeContextType'].Text;
end;

procedure TXMLPlanningOutcome.Set_PlanningOutcomeContextType(Value: UnicodeString);
begin
  SetAttribute('PlanningOutcomeContextType', Value);
end;

function TXMLPlanningOutcome.Get_TransportModeType: UnicodeString;
begin
  Result := AttributeNodes['TransportModeType'].Text;
end;

procedure TXMLPlanningOutcome.Set_TransportModeType(Value: UnicodeString);
begin
  SetAttribute('TransportModeType', Value);
end;

function TXMLPlanningOutcome.Get_TransportContextType: UnicodeString;
begin
  Result := AttributeNodes['TransportContextType'].Text;
end;

procedure TXMLPlanningOutcome.Set_TransportContextType(Value: UnicodeString);
begin
  SetAttribute('TransportContextType', Value);
end;

function TXMLPlanningOutcome.Get_IsTotal: UnicodeString;
begin
  Result := AttributeNodes['IsTotal'].Text;
end;

procedure TXMLPlanningOutcome.Set_IsTotal(Value: UnicodeString);
begin
  SetAttribute('IsTotal', Value);
end;

function TXMLPlanningOutcome.Get_QuantityInformation: IXMLQuantityInformation;
begin
  Result := ChildNodes['QuantityInformation'] as IXMLQuantityInformation;
end;

function TXMLPlanningOutcome.Get_PlanningPropertyValue: IXMLPlanningPropertyValueList;
begin
  Result := FPlanningPropertyValue;
end;

function TXMLPlanningOutcome.Get_DeviationReason: IXMLDeviationReasonList;
begin
  Result := FDeviationReason;
end;

function TXMLPlanningOutcome.Get_PlanningReferenceInformation: IXMLPlanningReferenceInformationList;
begin
  Result := FPlanningReferenceInformation;
end;

function TXMLPlanningOutcome.Get_ResourceInformation: IXMLResourceInformation;
begin
  Result := ChildNodes['ResourceInformation'] as IXMLResourceInformation;
end;

{ TXMLPlanningOutcomeList }

function TXMLPlanningOutcomeList.Add: IXMLPlanningOutcome;
begin
  Result := AddItem(-1) as IXMLPlanningOutcome;
end;

function TXMLPlanningOutcomeList.Insert(const Index: Integer): IXMLPlanningOutcome;
begin
  Result := AddItem(Index) as IXMLPlanningOutcome;
end;

function TXMLPlanningOutcomeList.Get_Item(Index: Integer): IXMLPlanningOutcome;
begin
  Result := List[Index] as IXMLPlanningOutcome;
end;

{ TXMLPlanningPropertyValue }

procedure TXMLPlanningPropertyValue.AfterConstruction;
begin
  RegisterChildNode('NumericValue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLPlanningPropertyValue.Get_PlanningPropertyType: UnicodeString;
begin
  Result := AttributeNodes['PlanningPropertyType'].Text;
end;

procedure TXMLPlanningPropertyValue.Set_PlanningPropertyType(Value: UnicodeString);
begin
  SetAttribute('PlanningPropertyType', Value);
end;

function TXMLPlanningPropertyValue.Get_BinaryValue: UnicodeString;
begin
  Result := ChildNodes['BinaryValue'].Text;
end;

procedure TXMLPlanningPropertyValue.Set_BinaryValue(Value: UnicodeString);
begin
  ChildNodes['BinaryValue'].NodeValue := Value;
end;

function TXMLPlanningPropertyValue.Get_BooleanValue: Boolean;
begin
  Result := ChildNodes['BooleanValue'].NodeValue;
end;

procedure TXMLPlanningPropertyValue.Set_BooleanValue(Value: Boolean);
begin
  ChildNodes['BooleanValue'].NodeValue := Value;
end;

function TXMLPlanningPropertyValue.Get_DateTimeValue: UnicodeString;
begin
  Result := ChildNodes['DateTimeValue'].Text;
end;

procedure TXMLPlanningPropertyValue.Set_DateTimeValue(Value: UnicodeString);
begin
  ChildNodes['DateTimeValue'].NodeValue := Value;
end;

function TXMLPlanningPropertyValue.Get_NumericValue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['NumericValue'] as IXMLDetailMeasurement;
end;

function TXMLPlanningPropertyValue.Get_TextValue: UnicodeString;
begin
  Result := ChildNodes['TextValue'].Text;
end;

procedure TXMLPlanningPropertyValue.Set_TextValue(Value: UnicodeString);
begin
  ChildNodes['TextValue'].NodeValue := Value;
end;

{ TXMLPlanningPropertyValueList }

function TXMLPlanningPropertyValueList.Add: IXMLPlanningPropertyValue;
begin
  Result := AddItem(-1) as IXMLPlanningPropertyValue;
end;

function TXMLPlanningPropertyValueList.Insert(const Index: Integer): IXMLPlanningPropertyValue;
begin
  Result := AddItem(Index) as IXMLPlanningPropertyValue;
end;

function TXMLPlanningPropertyValueList.Get_Item(Index: Integer): IXMLPlanningPropertyValue;
begin
  Result := List[Index] as IXMLPlanningPropertyValue;
end;

{ TXMLDeviationReason }

procedure TXMLDeviationReason.AfterConstruction;
begin
  RegisterChildNode('DeviationReasonCode', TXMLDeviationReasonCode);
  FDeviationReasonDescription := CreateCollection(TXMLS255List, IXMLNode, 'DeviationReasonDescription') as IXMLS255List;
  inherited;
end;

function TXMLDeviationReason.Get_DeviationReasonCode: IXMLDeviationReasonCode;
begin
  Result := ChildNodes['DeviationReasonCode'] as IXMLDeviationReasonCode;
end;

function TXMLDeviationReason.Get_DeviationReasonDescription: IXMLS255List;
begin
  Result := FDeviationReasonDescription;
end;

{ TXMLDeviationReasonList }

function TXMLDeviationReasonList.Add: IXMLDeviationReason;
begin
  Result := AddItem(-1) as IXMLDeviationReason;
end;

function TXMLDeviationReasonList.Insert(const Index: Integer): IXMLDeviationReason;
begin
  Result := AddItem(Index) as IXMLDeviationReason;
end;

function TXMLDeviationReasonList.Get_Item(Index: Integer): IXMLDeviationReason;
begin
  Result := List[Index] as IXMLDeviationReason;
end;

{ TXMLDeviationReasonCode }

function TXMLDeviationReasonCode.Get_Agency: UnicodeString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLDeviationReasonCode.Set_Agency(Value: UnicodeString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLPlanningReferenceInformation }

procedure TXMLPlanningReferenceInformation.AfterConstruction;
begin
  RegisterChildNode('Document', TXMLDocument);
  inherited;
end;

function TXMLPlanningReferenceInformation.Get_Document: IXMLInvoiceDocument;
begin
  Result := ChildNodes['Document'] as IXMLInvoiceDocument;
end;

{ TXMLPlanningReferenceInformationList }

function TXMLPlanningReferenceInformationList.Add: IXMLPlanningReferenceInformation;
begin
  Result := AddItem(-1) as IXMLPlanningReferenceInformation;
end;

function TXMLPlanningReferenceInformationList.Insert(const Index: Integer): IXMLPlanningReferenceInformation;
begin
  Result := AddItem(Index) as IXMLPlanningReferenceInformation;
end;

function TXMLPlanningReferenceInformationList.Get_Item(Index: Integer): IXMLPlanningReferenceInformation;
begin
  Result := List[Index] as IXMLPlanningReferenceInformation;
end;

{ TXMLDocument }

procedure TXMLDocument.AfterConstruction;
begin
  RegisterChildNode('DocumentDate', TXMLDocumentDate);
  RegisterChildNode('DocumentReference', TXMLDocumentReference);
  FDocumentReference := CreateCollection(TXMLDocumentReferenceList, IXMLDocumentReference, 'DocumentReference') as IXMLDocumentReferenceList;
  inherited;
end;

function TXMLDocument.Get_DocumentName: UnicodeString;
begin
  Result := AttributeNodes['DocumentName'].Text;
end;

procedure TXMLDocument.Set_DocumentName(Value: UnicodeString);
begin
  SetAttribute('DocumentName', Value);
end;

function TXMLDocument.Get_DocumentType: UnicodeString;
begin
  Result := AttributeNodes['DocumentType'].Text;
end;

procedure TXMLDocument.Set_DocumentType(Value: UnicodeString);
begin
  SetAttribute('DocumentType', Value);
end;

function TXMLDocument.Get_OtherDocumentName: UnicodeString;
begin
  Result := AttributeNodes['OtherDocumentName'].Text;
end;

procedure TXMLDocument.Set_OtherDocumentName(Value: UnicodeString);
begin
  SetAttribute('OtherDocumentName', Value);
end;

function TXMLDocument.Get_OtherDocumentType: UnicodeString;
begin
  Result := AttributeNodes['OtherDocumentType'].Text;
end;

procedure TXMLDocument.Set_OtherDocumentType(Value: UnicodeString);
begin
  SetAttribute('OtherDocumentType', Value);
end;

function TXMLDocument.Get_DocumentNumber: UnicodeString;
begin
  Result := ChildNodes['DocumentNumber'].Text;
end;

procedure TXMLDocument.Set_DocumentNumber(Value: UnicodeString);
begin
  ChildNodes['DocumentNumber'].NodeValue := Value;
end;

function TXMLDocument.Get_DocumentVersionNumber: UnicodeString;
begin
  Result := ChildNodes['DocumentVersionNumber'].Text;
end;

procedure TXMLDocument.Set_DocumentVersionNumber(Value: UnicodeString);
begin
  ChildNodes['DocumentVersionNumber'].NodeValue := Value;
end;

function TXMLDocument.Get_DocumentDate: IXMLDocumentDate;
begin
  Result := ChildNodes['DocumentDate'] as IXMLDocumentDate;
end;

function TXMLDocument.Get_TransactionHistoryNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryNumber'].NodeValue;
end;

procedure TXMLDocument.Set_TransactionHistoryNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryNumber'].NodeValue := Value;
end;

function TXMLDocument.Get_DocumentReference: IXMLDocumentReferenceList;
begin
  Result := FDocumentReference;
end;

{ TXMLDocumentDate }

procedure TXMLDocumentDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDocumentDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDocumentDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDocumentDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliverySchedule }

procedure TXMLDeliverySchedule.AfterConstruction;
begin
  RegisterChildNode('ProductionStatus', TXMLProductionStatus);
  RegisterChildNode('DeliveryStatus', TXMLDeliveryStatus);
  RegisterChildNode('DeliveryDateWindow', TXMLDeliveryDateWindow);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('PriceDetails', TXMLPriceDetails);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('DeliveryLeg', TXMLDeliveryLeg);
  RegisterChildNode('DeliveryScheduleReference', TXMLDeliveryScheduleReference);
  FDeliveryDateWindow := CreateCollection(TXMLDeliveryDateWindowList, IXMLDeliveryDateWindow, 'DeliveryDateWindow') as IXMLDeliveryDateWindowList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  FDeliveryLeg := CreateCollection(TXMLDeliveryLegList, IXMLDeliveryLeg, 'DeliveryLeg') as IXMLDeliveryLegList;
  FDeliveryScheduleReference := CreateCollection(TXMLDeliveryScheduleReferenceList, IXMLDeliveryScheduleReference, 'DeliveryScheduleReference') as IXMLDeliveryScheduleReferenceList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDeliverySchedule.Get_DeliveryLineNumber: LongWord;
begin
  Result := ChildNodes['DeliveryLineNumber'].NodeValue;
end;

procedure TXMLDeliverySchedule.Set_DeliveryLineNumber(Value: LongWord);
begin
  ChildNodes['DeliveryLineNumber'].NodeValue := Value;
end;

function TXMLDeliverySchedule.Get_ProductionStatus: IXMLProductionStatus;
begin
  Result := ChildNodes['ProductionStatus'] as IXMLProductionStatus;
end;

function TXMLDeliverySchedule.Get_DeliveryStatus: IXMLDeliveryStatus;
begin
  Result := ChildNodes['DeliveryStatus'] as IXMLDeliveryStatus;
end;

function TXMLDeliverySchedule.Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
begin
  Result := FDeliveryDateWindow;
end;

function TXMLDeliverySchedule.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLDeliverySchedule.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLDeliverySchedule.Get_PriceDetails: IXMLPriceDetails;
begin
  Result := ChildNodes['PriceDetails'] as IXMLPriceDetails;
end;

function TXMLDeliverySchedule.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLDeliverySchedule.Get_DeliveryLeg: IXMLDeliveryLegList;
begin
  Result := FDeliveryLeg;
end;

function TXMLDeliverySchedule.Get_DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
begin
  Result := FDeliveryScheduleReference;
end;

function TXMLDeliverySchedule.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDeliveryScheduleList }

function TXMLDeliveryScheduleList.Add: IXMLDeliverySchedule;
begin
  Result := AddItem(-1) as IXMLDeliverySchedule;
end;

function TXMLDeliveryScheduleList.Insert(const Index: Integer): IXMLDeliverySchedule;
begin
  Result := AddItem(Index) as IXMLDeliverySchedule;
end;

function TXMLDeliveryScheduleList.Get_Item(Index: Integer): IXMLDeliverySchedule;
begin
  Result := List[Index] as IXMLDeliverySchedule;
end;

{ TXMLProductionStatus }

procedure TXMLProductionStatus.AfterConstruction;
begin
  RegisterChildNode('ProductionLastDateOfChange', TXMLProductionLastDateOfChange);
  inherited;
end;

function TXMLProductionStatus.Get_ProductionStatusType: UnicodeString;
begin
  Result := AttributeNodes['ProductionStatusType'].Text;
end;

procedure TXMLProductionStatus.Set_ProductionStatusType(Value: UnicodeString);
begin
  SetAttribute('ProductionStatusType', Value);
end;

function TXMLProductionStatus.Get_ProductionLastDateOfChange: IXMLProductionLastDateOfChange;
begin
  Result := ChildNodes['ProductionLastDateOfChange'] as IXMLProductionLastDateOfChange;
end;

{ TXMLProductionLastDateOfChange }

procedure TXMLProductionLastDateOfChange.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLProductionLastDateOfChange.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLProductionLastDateOfChange.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLProductionLastDateOfChange.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryStatus }

procedure TXMLDeliveryStatus.AfterConstruction;
begin
  RegisterChildNode('DeliveryLastDateOfChange', TXMLDeliveryLastDateOfChange);
  inherited;
end;

function TXMLDeliveryStatus.Get_DeliveryStatusType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryStatusType'].Text;
end;

procedure TXMLDeliveryStatus.Set_DeliveryStatusType(Value: UnicodeString);
begin
  SetAttribute('DeliveryStatusType', Value);
end;

function TXMLDeliveryStatus.Get_DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange;
begin
  Result := ChildNodes['DeliveryLastDateOfChange'] as IXMLDeliveryLastDateOfChange;
end;

{ TXMLDeliveryLastDateOfChange }

procedure TXMLDeliveryLastDateOfChange.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryLastDateOfChange.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryLastDateOfChange.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryLastDateOfChange.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryScheduleReference }

function TXMLDeliveryScheduleReference.Get_DeliveryScheduleReferenceType: UnicodeString;
begin
  Result := AttributeNodes['DeliveryScheduleReferenceType'].Text;
end;

procedure TXMLDeliveryScheduleReference.Set_DeliveryScheduleReferenceType(Value: UnicodeString);
begin
  SetAttribute('DeliveryScheduleReferenceType', Value);
end;

function TXMLDeliveryScheduleReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDeliveryScheduleReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDeliveryScheduleReferenceList }

function TXMLDeliveryScheduleReferenceList.Add: IXMLDeliveryScheduleReference;
begin
  Result := AddItem(-1) as IXMLDeliveryScheduleReference;
end;

function TXMLDeliveryScheduleReferenceList.Insert(const Index: Integer): IXMLDeliveryScheduleReference;
begin
  Result := AddItem(Index) as IXMLDeliveryScheduleReference;
end;

function TXMLDeliveryScheduleReferenceList.Get_Item(Index: Integer): IXMLDeliveryScheduleReference;
begin
  Result := List[Index] as IXMLDeliveryScheduleReference;
end;

{ TXMLGoodsReceiptHeader }

procedure TXMLGoodsReceiptHeader.AfterConstruction;
begin
  RegisterChildNode('GoodsReceiptIssueDate', TXMLGoodsReceiptIssueDate);
  RegisterChildNode('GoodsReceiptArrivalDate', TXMLGoodsReceiptArrivalDate);
  RegisterChildNode('TimePeriod', TXMLTimePeriod);
  RegisterChildNode('GoodsReceiptUnloadDate', TXMLGoodsReceiptUnloadDate);
  RegisterChildNode('GoodsReceiptReference', TXMLGoodsReceiptReference);
  RegisterChildNode('DeliveryMessageDate', TXMLDeliveryMessageDate);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('BuyerParty', TXMLParty);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('CarrierParty', TXMLParty);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('SenderParty', TXMLTypedParty);
  RegisterChildNode('ReceiverParty', TXMLTypedParty);
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('TransportVehicleCharacteristics', TXMLTransportVehicleCharacteristics);
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  RegisterChildNode('TransportationComment', TXMLTransportationComment);
  FGoodsReceiptReference := CreateCollection(TXMLGoodsReceiptReferenceList, IXMLGoodsReceiptReference, 'GoodsReceiptReference') as IXMLGoodsReceiptReferenceList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FReceiverParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'ReceiverParty') as IXMLTypedPartyList;
  FTransportUnitCharacteristics := CreateCollection(TXMLTransportUnitCharacteristicsList, IXMLTransportUnitCharacteristics, 'TransportUnitCharacteristics') as IXMLTransportUnitCharacteristicsList;
  FTransportationComment := CreateCollection(TXMLTransportationCommentList, IXMLTransportationComment, 'TransportationComment') as IXMLTransportationCommentList;
  inherited;
end;

function TXMLGoodsReceiptHeader.Get_GoodsReceiptHeaderAcceptance: UnicodeString;
begin
  Result := AttributeNodes['GoodsReceiptHeaderAcceptance'].Text;
end;

procedure TXMLGoodsReceiptHeader.Set_GoodsReceiptHeaderAcceptance(Value: UnicodeString);
begin
  SetAttribute('GoodsReceiptHeaderAcceptance', Value);
end;

function TXMLGoodsReceiptHeader.Get_GoodsReceiptNumber: UnicodeString;
begin
  Result := ChildNodes['GoodsReceiptNumber'].Text;
end;

procedure TXMLGoodsReceiptHeader.Set_GoodsReceiptNumber(Value: UnicodeString);
begin
  ChildNodes['GoodsReceiptNumber'].NodeValue := Value;
end;

function TXMLGoodsReceiptHeader.Get_GoodsReceiptIssueDate: IXMLGoodsReceiptIssueDate;
begin
  Result := ChildNodes['GoodsReceiptIssueDate'] as IXMLGoodsReceiptIssueDate;
end;

function TXMLGoodsReceiptHeader.Get_TransactionHistoryNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryNumber'].NodeValue;
end;

procedure TXMLGoodsReceiptHeader.Set_TransactionHistoryNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryNumber'].NodeValue := Value;
end;

function TXMLGoodsReceiptHeader.Get_GoodsReceiptArrivalDate: IXMLGoodsReceiptArrivalDate;
begin
  Result := ChildNodes['GoodsReceiptArrivalDate'] as IXMLGoodsReceiptArrivalDate;
end;

function TXMLGoodsReceiptHeader.Get_TimePeriod: IXMLTimePeriod;
begin
  Result := ChildNodes['TimePeriod'] as IXMLTimePeriod;
end;

function TXMLGoodsReceiptHeader.Get_GoodsReceiptUnloadDate: IXMLGoodsReceiptUnloadDate;
begin
  Result := ChildNodes['GoodsReceiptUnloadDate'] as IXMLGoodsReceiptUnloadDate;
end;

function TXMLGoodsReceiptHeader.Get_GoodsReceiptReference: IXMLGoodsReceiptReferenceList;
begin
  Result := FGoodsReceiptReference;
end;

function TXMLGoodsReceiptHeader.Get_DeliveryMessageNumber: UnicodeString;
begin
  Result := ChildNodes['DeliveryMessageNumber'].Text;
end;

procedure TXMLGoodsReceiptHeader.Set_DeliveryMessageNumber(Value: UnicodeString);
begin
  ChildNodes['DeliveryMessageNumber'].NodeValue := Value;
end;

function TXMLGoodsReceiptHeader.Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
begin
  Result := ChildNodes['DeliveryMessageDate'] as IXMLDeliveryMessageDate;
end;

function TXMLGoodsReceiptHeader.Get_OtherDate: IXMLOtherDate;
begin
  Result := ChildNodes['OtherDate'] as IXMLOtherDate;
end;

function TXMLGoodsReceiptHeader.Get_BuyerParty: IXMLParty;
begin
  Result := ChildNodes['BuyerParty'] as IXMLParty;
end;

function TXMLGoodsReceiptHeader.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLGoodsReceiptHeader.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLGoodsReceiptHeader.Get_CarrierParty: IXMLParty;
begin
  Result := ChildNodes['CarrierParty'] as IXMLParty;
end;

function TXMLGoodsReceiptHeader.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLGoodsReceiptHeader.Get_SenderParty: IXMLTypedParty;
begin
  Result := ChildNodes['SenderParty'] as IXMLTypedParty;
end;

function TXMLGoodsReceiptHeader.Get_ReceiverParty: IXMLTypedPartyList;
begin
  Result := FReceiverParty;
end;

function TXMLGoodsReceiptHeader.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLGoodsReceiptHeader.Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
begin
  Result := ChildNodes['TransportVehicleCharacteristics'] as IXMLTransportVehicleCharacteristics;
end;

function TXMLGoodsReceiptHeader.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
begin
  Result := FTransportUnitCharacteristics;
end;

function TXMLGoodsReceiptHeader.Get_TransportationComment: IXMLTransportationCommentList;
begin
  Result := FTransportationComment;
end;

{ TXMLGoodsReceiptIssueDate }

procedure TXMLGoodsReceiptIssueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLGoodsReceiptIssueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLGoodsReceiptIssueDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLGoodsReceiptIssueDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLGoodsReceiptArrivalDate }

procedure TXMLGoodsReceiptArrivalDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLGoodsReceiptArrivalDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLGoodsReceiptArrivalDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLGoodsReceiptArrivalDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLGoodsReceiptUnloadDate }

procedure TXMLGoodsReceiptUnloadDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  inherited;
end;

function TXMLGoodsReceiptUnloadDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLGoodsReceiptUnloadDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLGoodsReceiptUnloadDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLGoodsReceiptUnloadDate.Get_DateTimeRange: IXMLDateTimeRange;
begin
  Result := ChildNodes['DateTimeRange'] as IXMLDateTimeRange;
end;

{ TXMLGoodsReceiptReference }

function TXMLGoodsReceiptReference.Get_GoodsReceiptReferenceType: UnicodeString;
begin
  Result := AttributeNodes['GoodsReceiptReferenceType'].Text;
end;

procedure TXMLGoodsReceiptReference.Set_GoodsReceiptReferenceType(Value: UnicodeString);
begin
  SetAttribute('GoodsReceiptReferenceType', Value);
end;

function TXMLGoodsReceiptReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLGoodsReceiptReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLGoodsReceiptReferenceList }

function TXMLGoodsReceiptReferenceList.Add: IXMLGoodsReceiptReference;
begin
  Result := AddItem(-1) as IXMLGoodsReceiptReference;
end;

function TXMLGoodsReceiptReferenceList.Insert(const Index: Integer): IXMLGoodsReceiptReference;
begin
  Result := AddItem(Index) as IXMLGoodsReceiptReference;
end;

function TXMLGoodsReceiptReferenceList.Get_Item(Index: Integer): IXMLGoodsReceiptReference;
begin
  Result := List[Index] as IXMLGoodsReceiptReference;
end;

{ TXMLTransportationComment }

function TXMLTransportationComment.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLTransportationComment.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLTransportationCommentList }

function TXMLTransportationCommentList.Add: IXMLTransportationComment;
begin
  Result := AddItem(-1) as IXMLTransportationComment;
end;

function TXMLTransportationCommentList.Insert(const Index: Integer): IXMLTransportationComment;
begin
  Result := AddItem(Index) as IXMLTransportationComment;
end;

function TXMLTransportationCommentList.Get_Item(Index: Integer): IXMLTransportationComment;
begin
  Result := List[Index] as IXMLTransportationComment;
end;

{ TXMLGoodsReceiptLineItem }

procedure TXMLGoodsReceiptLineItem.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderInformation', TXMLPurchaseOrderInformation);
  RegisterChildNode('MillParty', TXMLParty);
  RegisterChildNode('GoodsReceiptReference', TXMLGoodsReceiptReference);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('GoodsReceiptPackage', TXMLGoodsReceiptPackage);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FGoodsReceiptReference := CreateCollection(TXMLGoodsReceiptReferenceList, IXMLGoodsReceiptReference, 'GoodsReceiptReference') as IXMLGoodsReceiptReferenceList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FGoodsReceiptPackage := CreateCollection(TXMLGoodsReceiptPackageList, IXMLGoodsReceiptPackage, 'GoodsReceiptPackage') as IXMLGoodsReceiptPackageList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLGoodsReceiptLineItem.Get_GoodsReceiptAcceptance: UnicodeString;
begin
  Result := AttributeNodes['GoodsReceiptAcceptance'].Text;
end;

procedure TXMLGoodsReceiptLineItem.Set_GoodsReceiptAcceptance(Value: UnicodeString);
begin
  SetAttribute('GoodsReceiptAcceptance', Value);
end;

function TXMLGoodsReceiptLineItem.Get_GoodsReceivedRejectedType: UnicodeString;
begin
  Result := AttributeNodes['GoodsReceivedRejectedType'].Text;
end;

procedure TXMLGoodsReceiptLineItem.Set_GoodsReceivedRejectedType(Value: UnicodeString);
begin
  SetAttribute('GoodsReceivedRejectedType', Value);
end;

function TXMLGoodsReceiptLineItem.Get_GoodsReceiptLineItemNumber: LongWord;
begin
  Result := ChildNodes['GoodsReceiptLineItemNumber'].NodeValue;
end;

procedure TXMLGoodsReceiptLineItem.Set_GoodsReceiptLineItemNumber(Value: LongWord);
begin
  ChildNodes['GoodsReceiptLineItemNumber'].NodeValue := Value;
end;

function TXMLGoodsReceiptLineItem.Get_DeliveryMessageLineItemNumber: LongWord;
begin
  Result := ChildNodes['DeliveryMessageLineItemNumber'].NodeValue;
end;

procedure TXMLGoodsReceiptLineItem.Set_DeliveryMessageLineItemNumber(Value: LongWord);
begin
  ChildNodes['DeliveryMessageLineItemNumber'].NodeValue := Value;
end;

function TXMLGoodsReceiptLineItem.Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
begin
  Result := ChildNodes['PurchaseOrderInformation'] as IXMLPurchaseOrderInformation;
end;

function TXMLGoodsReceiptLineItem.Get_PurchaseOrderLineItemNumber: LongWord;
begin
  Result := ChildNodes['PurchaseOrderLineItemNumber'].NodeValue;
end;

procedure TXMLGoodsReceiptLineItem.Set_PurchaseOrderLineItemNumber(Value: LongWord);
begin
  ChildNodes['PurchaseOrderLineItemNumber'].NodeValue := Value;
end;

function TXMLGoodsReceiptLineItem.Get_MillParty: IXMLParty;
begin
  Result := ChildNodes['MillParty'] as IXMLParty;
end;

function TXMLGoodsReceiptLineItem.Get_GoodsReceiptReference: IXMLGoodsReceiptReferenceList;
begin
  Result := FGoodsReceiptReference;
end;

function TXMLGoodsReceiptLineItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLGoodsReceiptLineItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLGoodsReceiptLineItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLGoodsReceiptLineItem.Get_NumberOfGoodsReceiptPackages: LongWord;
begin
  Result := ChildNodes['NumberOfGoodsReceiptPackages'].NodeValue;
end;

procedure TXMLGoodsReceiptLineItem.Set_NumberOfGoodsReceiptPackages(Value: LongWord);
begin
  ChildNodes['NumberOfGoodsReceiptPackages'].NodeValue := Value;
end;

function TXMLGoodsReceiptLineItem.Get_GoodsReceiptPackage: IXMLGoodsReceiptPackageList;
begin
  Result := FGoodsReceiptPackage;
end;

function TXMLGoodsReceiptLineItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLGoodsReceiptPackage }

procedure TXMLGoodsReceiptPackage.AfterConstruction;
begin
  RegisterChildNode('PackageInformation', TXMLPackageInformationClass);
  inherited;
end;

function TXMLGoodsReceiptPackage.Get_GoodsReceiptAcceptance: UnicodeString;
begin
  Result := AttributeNodes['GoodsReceiptAcceptance'].Text;
end;

procedure TXMLGoodsReceiptPackage.Set_GoodsReceiptAcceptance(Value: UnicodeString);
begin
  SetAttribute('GoodsReceiptAcceptance', Value);
end;

function TXMLGoodsReceiptPackage.Get_VarianceType: UnicodeString;
begin
  Result := AttributeNodes['VarianceType'].Text;
end;

procedure TXMLGoodsReceiptPackage.Set_VarianceType(Value: UnicodeString);
begin
  SetAttribute('VarianceType', Value);
end;

function TXMLGoodsReceiptPackage.Get_GoodsReceivedRejectedType: UnicodeString;
begin
  Result := AttributeNodes['GoodsReceivedRejectedType'].Text;
end;

procedure TXMLGoodsReceiptPackage.Set_GoodsReceivedRejectedType(Value: UnicodeString);
begin
  SetAttribute('GoodsReceivedRejectedType', Value);
end;

function TXMLGoodsReceiptPackage.Get_PackageInformation: IXMLPackageInformationClass;
begin
  Result := ChildNodes['PackageInformation'] as IXMLPackageInformationClass;
end;

{ TXMLGoodsReceiptPackageList }

function TXMLGoodsReceiptPackageList.Add: IXMLGoodsReceiptPackage;
begin
  Result := AddItem(-1) as IXMLGoodsReceiptPackage;
end;

function TXMLGoodsReceiptPackageList.Insert(const Index: Integer): IXMLGoodsReceiptPackage;
begin
  Result := AddItem(Index) as IXMLGoodsReceiptPackage;
end;

function TXMLGoodsReceiptPackageList.Get_Item(Index: Integer): IXMLGoodsReceiptPackage;
begin
  Result := List[Index] as IXMLGoodsReceiptPackage;
end;

{ TXMLGoodsReceiptSummary }

procedure TXMLGoodsReceiptSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('TermsAndDisclaimers', TXMLTermsAndDisclaimers);
  FTotalQuantity := CreateCollection(TXMLTotalQuantityList, IXMLTotalQuantity, 'TotalQuantity') as IXMLTotalQuantityList;
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FTermsAndDisclaimers := CreateCollection(TXMLTermsAndDisclaimersList, IXMLTermsAndDisclaimers, 'TermsAndDisclaimers') as IXMLTermsAndDisclaimersList;
  inherited;
end;

function TXMLGoodsReceiptSummary.Get_TotalNumberOfLineItems: LongWord;
begin
  Result := ChildNodes['TotalNumberOfLineItems'].NodeValue;
end;

procedure TXMLGoodsReceiptSummary.Set_TotalNumberOfLineItems(Value: LongWord);
begin
  ChildNodes['TotalNumberOfLineItems'].NodeValue := Value;
end;

function TXMLGoodsReceiptSummary.Get_TotalQuantity: IXMLTotalQuantityList;
begin
  Result := FTotalQuantity;
end;

function TXMLGoodsReceiptSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLGoodsReceiptSummary.Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
begin
  Result := FTermsAndDisclaimers;
end;

{ TXMLMeasurementWithText }

procedure TXMLMeasurementWithText.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLMeasurementWithText.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLMeasurementWithText.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLMeasurementWithText.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

function TXMLMeasurementWithText.Get_AdditionalText: UnicodeString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLMeasurementWithText.Set_AdditionalText(Value: UnicodeString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLPlanningOutcomeBucket }

procedure TXMLPlanningOutcomeBucket.AfterConstruction;
begin
  RegisterChildNode('TimePeriod', TXMLTimePeriod);
  RegisterChildNode('PlanningOutcome', TXMLPlanningOutcome);
  FPlanningOutcome := CreateCollection(TXMLPlanningOutcomeList, IXMLPlanningOutcome, 'PlanningOutcome') as IXMLPlanningOutcomeList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPlanningOutcomeBucket.Get_BucketStatusType: UnicodeString;
begin
  Result := AttributeNodes['BucketStatusType'].Text;
end;

procedure TXMLPlanningOutcomeBucket.Set_BucketStatusType(Value: UnicodeString);
begin
  SetAttribute('BucketStatusType', Value);
end;

function TXMLPlanningOutcomeBucket.Get_TimePeriod: IXMLTimePeriod;
begin
  Result := ChildNodes['TimePeriod'] as IXMLTimePeriod;
end;

function TXMLPlanningOutcomeBucket.Get_PlanningOutcome: IXMLPlanningOutcomeList;
begin
  Result := FPlanningOutcome;
end;

function TXMLPlanningOutcomeBucket.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLScaleHouse }

procedure TXMLScaleHouse.AfterConstruction;
begin
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  inherited;
end;

function TXMLScaleHouse.Get_ScaleHouseID: UnicodeString;
begin
  Result := ChildNodes['ScaleHouseID'].Text;
end;

procedure TXMLScaleHouse.Set_ScaleHouseID(Value: UnicodeString);
begin
  ChildNodes['ScaleHouseID'].NodeValue := Value;
end;

function TXMLScaleHouse.Get_ScaleHouseName: UnicodeString;
begin
  Result := ChildNodes['ScaleHouseName'].Text;
end;

procedure TXMLScaleHouse.Set_ScaleHouseName(Value: UnicodeString);
begin
  ChildNodes['ScaleHouseName'].NodeValue := Value;
end;

function TXMLScaleHouse.Get_ScalerID: UnicodeString;
begin
  Result := ChildNodes['ScalerID'].Text;
end;

procedure TXMLScaleHouse.Set_ScalerID(Value: UnicodeString);
begin
  ChildNodes['ScalerID'].NodeValue := Value;
end;

function TXMLScaleHouse.Get_ScalerName: UnicodeString;
begin
  Result := ChildNodes['ScalerName'].Text;
end;

procedure TXMLScaleHouse.Set_ScalerName(Value: UnicodeString);
begin
  ChildNodes['ScalerName'].NodeValue := Value;
end;

function TXMLScaleHouse.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLScaleHouse.Get_InformationalQuantity: IXMLInformationalQuantity;
begin
  Result := ChildNodes['InformationalQuantity'] as IXMLInformationalQuantity;
end;

{ TXMLShippingInstructionsHeader }

procedure TXMLShippingInstructionsHeader.AfterConstruction;
begin
  RegisterChildNode('ShippingInstructionsInformation', TXMLShippingInstructionsInformation);
  RegisterChildNode('BuyerParty', TXMLParty);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('SenderParty', TXMLTypedParty);
  RegisterChildNode('ReceiverParty', TXMLTypedParty);
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FReceiverParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'ReceiverParty') as IXMLTypedPartyList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLShippingInstructionsHeader.Get_ShippingInstructionsHeaderStatusType: UnicodeString;
begin
  Result := AttributeNodes['ShippingInstructionsHeaderStatusType'].Text;
end;

procedure TXMLShippingInstructionsHeader.Set_ShippingInstructionsHeaderStatusType(Value: UnicodeString);
begin
  SetAttribute('ShippingInstructionsHeaderStatusType', Value);
end;

function TXMLShippingInstructionsHeader.Get_ShippingInstructionsInformation: IXMLShippingInstructionsInformation;
begin
  Result := ChildNodes['ShippingInstructionsInformation'] as IXMLShippingInstructionsInformation;
end;

function TXMLShippingInstructionsHeader.Get_BuyerParty: IXMLParty;
begin
  Result := ChildNodes['BuyerParty'] as IXMLParty;
end;

function TXMLShippingInstructionsHeader.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLShippingInstructionsHeader.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLShippingInstructionsHeader.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLShippingInstructionsHeader.Get_SenderParty: IXMLTypedParty;
begin
  Result := ChildNodes['SenderParty'] as IXMLTypedParty;
end;

function TXMLShippingInstructionsHeader.Get_ReceiverParty: IXMLTypedPartyList;
begin
  Result := FReceiverParty;
end;

function TXMLShippingInstructionsHeader.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLShippingInstructionsInformation }

procedure TXMLShippingInstructionsInformation.AfterConstruction;
begin
  RegisterChildNode('ShippingInstructionsIssuedDate', TXMLShippingInstructionsIssuedDate);
  RegisterChildNode('ShippingInstructionsConfirmationIssuedDate', TXMLShippingInstructionsConfirmationIssuedDate);
  RegisterChildNode('ShippingInstructionsReference', TXMLShippingInstructionsReference);
  FShippingInstructionsReference := CreateCollection(TXMLShippingInstructionsReferenceList, IXMLShippingInstructionsReference, 'ShippingInstructionsReference') as IXMLShippingInstructionsReferenceList;
  inherited;
end;

function TXMLShippingInstructionsInformation.Get_ShippingInstructionsNumber: UnicodeString;
begin
  Result := ChildNodes['ShippingInstructionsNumber'].Text;
end;

procedure TXMLShippingInstructionsInformation.Set_ShippingInstructionsNumber(Value: UnicodeString);
begin
  ChildNodes['ShippingInstructionsNumber'].NodeValue := Value;
end;

function TXMLShippingInstructionsInformation.Get_ShippingInstructionsIssuedDate: IXMLShippingInstructionsIssuedDate;
begin
  Result := ChildNodes['ShippingInstructionsIssuedDate'] as IXMLShippingInstructionsIssuedDate;
end;

function TXMLShippingInstructionsInformation.Get_ShippingInstructionsConfirmationIssuedDate: IXMLShippingInstructionsConfirmationIssuedDate;
begin
  Result := ChildNodes['ShippingInstructionsConfirmationIssuedDate'] as IXMLShippingInstructionsConfirmationIssuedDate;
end;

function TXMLShippingInstructionsInformation.Get_TransactionHistoryNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryNumber'].NodeValue;
end;

procedure TXMLShippingInstructionsInformation.Set_TransactionHistoryNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryNumber'].NodeValue := Value;
end;

function TXMLShippingInstructionsInformation.Get_TransactionHistoryConfirmationNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryConfirmationNumber'].NodeValue;
end;

procedure TXMLShippingInstructionsInformation.Set_TransactionHistoryConfirmationNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryConfirmationNumber'].NodeValue := Value;
end;

function TXMLShippingInstructionsInformation.Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
begin
  Result := FShippingInstructionsReference;
end;

{ TXMLShippingInstructionsIssuedDate }

procedure TXMLShippingInstructionsIssuedDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLShippingInstructionsIssuedDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLShippingInstructionsIssuedDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLShippingInstructionsIssuedDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLShippingInstructionsConfirmationIssuedDate }

procedure TXMLShippingInstructionsConfirmationIssuedDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLShippingInstructionsConfirmationIssuedDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLShippingInstructionsConfirmationIssuedDate.Get_Time: UnicodeString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLShippingInstructionsConfirmationIssuedDate.Set_Time(Value: UnicodeString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLShippingInstructionsReference }

function TXMLShippingInstructionsReference.Get_ShippingInstructionsReferenceType: UnicodeString;
begin
  Result := AttributeNodes['ShippingInstructionsReferenceType'].Text;
end;

procedure TXMLShippingInstructionsReference.Set_ShippingInstructionsReferenceType(Value: UnicodeString);
begin
  SetAttribute('ShippingInstructionsReferenceType', Value);
end;

function TXMLShippingInstructionsReference.Get_AssignedBy: UnicodeString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLShippingInstructionsReference.Set_AssignedBy(Value: UnicodeString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLShippingInstructionsReferenceList }

function TXMLShippingInstructionsReferenceList.Add: IXMLShippingInstructionsReference;
begin
  Result := AddItem(-1) as IXMLShippingInstructionsReference;
end;

function TXMLShippingInstructionsReferenceList.Insert(const Index: Integer): IXMLShippingInstructionsReference;
begin
  Result := AddItem(Index) as IXMLShippingInstructionsReference;
end;

function TXMLShippingInstructionsReferenceList.Get_Item(Index: Integer): IXMLShippingInstructionsReference;
begin
  Result := List[Index] as IXMLShippingInstructionsReference;
end;

{ TXMLShippingInstructionsLineItemByProduct }

procedure TXMLShippingInstructionsLineItemByProduct.AfterConstruction;
begin
  RegisterChildNode('ShippingInstructionsReference', TXMLShippingInstructionsReference);
  RegisterChildNode('ShipToInformation', TXMLShipToInformation);
  RegisterChildNode('PackagingCharacteristics', TXMLPackagingCharacteristics);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  FShippingInstructionsReference := CreateCollection(TXMLShippingInstructionsReferenceList, IXMLShippingInstructionsReference, 'ShippingInstructionsReference') as IXMLShippingInstructionsReferenceList;
  FShipToInformation := CreateCollection(TXMLShipToInformationList, IXMLShipToInformation, 'ShipToInformation') as IXMLShipToInformationList;
  FPackagingCharacteristics := CreateCollection(TXMLPackagingCharacteristicsList, IXMLPackagingCharacteristics, 'PackagingCharacteristics') as IXMLPackagingCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  inherited;
end;

function TXMLShippingInstructionsLineItemByProduct.Get_ShippingInstructionsLineItemStatusType: UnicodeString;
begin
  Result := AttributeNodes['ShippingInstructionsLineItemStatusType'].Text;
end;

procedure TXMLShippingInstructionsLineItemByProduct.Set_ShippingInstructionsLineItemStatusType(Value: UnicodeString);
begin
  SetAttribute('ShippingInstructionsLineItemStatusType', Value);
end;

function TXMLShippingInstructionsLineItemByProduct.Get_IsThirdPartyShipment: UnicodeString;
begin
  Result := AttributeNodes['IsThirdPartyShipment'].Text;
end;

procedure TXMLShippingInstructionsLineItemByProduct.Set_IsThirdPartyShipment(Value: UnicodeString);
begin
  SetAttribute('IsThirdPartyShipment', Value);
end;

function TXMLShippingInstructionsLineItemByProduct.Get_ShippingInstructionsLineItemNumber: LongWord;
begin
  Result := ChildNodes['ShippingInstructionsLineItemNumber'].NodeValue;
end;

procedure TXMLShippingInstructionsLineItemByProduct.Set_ShippingInstructionsLineItemNumber(Value: LongWord);
begin
  ChildNodes['ShippingInstructionsLineItemNumber'].NodeValue := Value;
end;

function TXMLShippingInstructionsLineItemByProduct.Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
begin
  Result := FShippingInstructionsReference;
end;

function TXMLShippingInstructionsLineItemByProduct.Get_ShipToInformation: IXMLShipToInformationList;
begin
  Result := FShipToInformation;
end;

function TXMLShippingInstructionsLineItemByProduct.Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
begin
  Result := FPackagingCharacteristics;
end;

function TXMLShippingInstructionsLineItemByProduct.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLShippingInstructionsLineItemByProduct.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

{ TXMLShipToInformation }

procedure TXMLShipToInformation.AfterConstruction;
begin
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('DeliverySchedule', TXMLDeliverySchedule);
  FDeliverySchedule := CreateCollection(TXMLDeliveryScheduleList, IXMLDeliverySchedule, 'DeliverySchedule') as IXMLDeliveryScheduleList;
  inherited;
end;

function TXMLShipToInformation.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLShipToInformation.Get_DeliverySchedule: IXMLDeliveryScheduleList;
begin
  Result := FDeliverySchedule;
end;

{ TXMLShipToInformationList }

function TXMLShipToInformationList.Add: IXMLShipToInformation;
begin
  Result := AddItem(-1) as IXMLShipToInformation;
end;

function TXMLShipToInformationList.Insert(const Index: Integer): IXMLShipToInformation;
begin
  Result := AddItem(Index) as IXMLShipToInformation;
end;

function TXMLShipToInformationList.Get_Item(Index: Integer): IXMLShipToInformation;
begin
  Result := List[Index] as IXMLShipToInformation;
end;

{ TXMLShippingInstructionsLineItemByShipTo }

procedure TXMLShippingInstructionsLineItemByShipTo.AfterConstruction;
begin
  RegisterChildNode('ShippingInstructionsReference', TXMLShippingInstructionsReference);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('ShippingInstructionsPurchaseOrderLineItem', TXMLShippingInstructionsPurchaseOrderLineItem);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('DeliverySchedule', TXMLDeliverySchedule);
  RegisterChildNode('PackagingCharacteristics', TXMLPackagingCharacteristics);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  FShippingInstructionsReference := CreateCollection(TXMLShippingInstructionsReferenceList, IXMLShippingInstructionsReference, 'ShippingInstructionsReference') as IXMLShippingInstructionsReferenceList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FDeliverySchedule := CreateCollection(TXMLDeliveryScheduleList, IXMLDeliverySchedule, 'DeliverySchedule') as IXMLDeliveryScheduleList;
  FPackagingCharacteristics := CreateCollection(TXMLPackagingCharacteristicsList, IXMLPackagingCharacteristics, 'PackagingCharacteristics') as IXMLPackagingCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  inherited;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_ShippingInstructionsLineItemStatusType: UnicodeString;
begin
  Result := AttributeNodes['ShippingInstructionsLineItemStatusType'].Text;
end;

procedure TXMLShippingInstructionsLineItemByShipTo.Set_ShippingInstructionsLineItemStatusType(Value: UnicodeString);
begin
  SetAttribute('ShippingInstructionsLineItemStatusType', Value);
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_ShippingInstructionsLineItemNumber: LongWord;
begin
  Result := ChildNodes['ShippingInstructionsLineItemNumber'].NodeValue;
end;

procedure TXMLShippingInstructionsLineItemByShipTo.Set_ShippingInstructionsLineItemNumber(Value: LongWord);
begin
  ChildNodes['ShippingInstructionsLineItemNumber'].NodeValue := Value;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_ShippingInstructionsReference: IXMLShippingInstructionsReferenceList;
begin
  Result := FShippingInstructionsReference;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_ShippingInstructionsPurchaseOrderLineItem: IXMLShippingInstructionsPurchaseOrderLineItem;
begin
  Result := ChildNodes['ShippingInstructionsPurchaseOrderLineItem'] as IXMLShippingInstructionsPurchaseOrderLineItem;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_DeliverySchedule: IXMLDeliveryScheduleList;
begin
  Result := FDeliverySchedule;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_PackagingCharacteristics: IXMLPackagingCharacteristicsList;
begin
  Result := FPackagingCharacteristics;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLShippingInstructionsLineItemByShipTo.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

{ TXMLShippingInstructionsPurchaseOrderLineItem }

procedure TXMLShippingInstructionsPurchaseOrderLineItem.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderInformation', TXMLPurchaseOrderInformation);
  RegisterChildNode('PackageIdentifier', TXMLPackageIdentifier);
  RegisterChildNode('ProductIdentification', TXMLProductIdentification);
  RegisterChildNode('Classification', TXMLClassification);
  FProductIdentification := CreateCollection(TXMLProductIdentificationList, IXMLProductIdentification, 'ProductIdentification') as IXMLProductIdentificationList;
  FClassification := CreateCollection(TXMLClassificationList, IXMLClassification, 'Classification') as IXMLClassificationList;
  inherited;
end;

function TXMLShippingInstructionsPurchaseOrderLineItem.Get_PurchaseOrderLineItemNumber: LongWord;
begin
  Result := ChildNodes['PurchaseOrderLineItemNumber'].NodeValue;
end;

procedure TXMLShippingInstructionsPurchaseOrderLineItem.Set_PurchaseOrderLineItemNumber(Value: LongWord);
begin
  ChildNodes['PurchaseOrderLineItemNumber'].NodeValue := Value;
end;

function TXMLShippingInstructionsPurchaseOrderLineItem.Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
begin
  Result := ChildNodes['PurchaseOrderInformation'] as IXMLPurchaseOrderInformation;
end;

function TXMLShippingInstructionsPurchaseOrderLineItem.Get_PackageIdentifier: IXMLPackageIdentifier;
begin
  Result := ChildNodes['PackageIdentifier'] as IXMLPackageIdentifier;
end;

function TXMLShippingInstructionsPurchaseOrderLineItem.Get_ProductIdentification: IXMLProductIdentificationList;
begin
  Result := FProductIdentification;
end;

function TXMLShippingInstructionsPurchaseOrderLineItem.Get_Classification: IXMLClassificationList;
begin
  Result := FClassification;
end;

{ TXMLPackageIdentifier }

procedure TXMLPackageIdentifier.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  inherited;
end;

function TXMLPackageIdentifier.Get_Identifier: IXMLIdentifierS60;
begin
  Result := ChildNodes['Identifier'] as IXMLIdentifierS60;
end;

{ TXMLShippingInstructionsSummary }

procedure TXMLShippingInstructionsSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('TermsAndDisclaimers', TXMLTermsAndDisclaimers);
  FTotalQuantity := CreateCollection(TXMLTotalQuantityList, IXMLTotalQuantity, 'TotalQuantity') as IXMLTotalQuantityList;
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FTermsAndDisclaimers := CreateCollection(TXMLTermsAndDisclaimersList, IXMLTermsAndDisclaimers, 'TermsAndDisclaimers') as IXMLTermsAndDisclaimersList;
  inherited;
end;

function TXMLShippingInstructionsSummary.Get_TotalNumberOfLineItems: LongWord;
begin
  Result := ChildNodes['TotalNumberOfLineItems'].NodeValue;
end;

procedure TXMLShippingInstructionsSummary.Set_TotalNumberOfLineItems(Value: LongWord);
begin
  ChildNodes['TotalNumberOfLineItems'].NodeValue := Value;
end;

function TXMLShippingInstructionsSummary.Get_TotalQuantity: IXMLTotalQuantityList;
begin
  Result := FTotalQuantity;
end;

function TXMLShippingInstructionsSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLShippingInstructionsSummary.Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
begin
  Result := FTermsAndDisclaimers;
end;

{ TXMLTrimSize }

procedure TXMLTrimSize.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('BookBlockBulk', TXMLBookBlockBulk);
  RegisterChildNode('SpineSize', TXMLSpineSize);
  inherited;
end;

function TXMLTrimSize.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLTrimSize.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLTrimSize.Get_BookBlockBulk: IXMLBookBlockBulk;
begin
  Result := ChildNodes['BookBlockBulk'] as IXMLBookBlockBulk;
end;

function TXMLTrimSize.Get_SpineSize: IXMLSpineSize;
begin
  Result := ChildNodes['SpineSize'] as IXMLSpineSize;
end;

{ TXMLBookBlockBulk }

procedure TXMLBookBlockBulk.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLBookBlockBulk.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

{ TXMLSpineSize }

procedure TXMLSpineSize.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLSpineSize.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

{ TXMLPlywoodOSBSpeciesTypeList }

function TXMLPlywoodOSBSpeciesTypeList.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLPlywoodOSBSpeciesTypeList.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLPlywoodOSBSpeciesTypeList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS60List }

function TXMLS60List.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS60List.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLS60List.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS72List }

function TXMLS72List.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS72List.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLS72List.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS20List }

function TXMLS20List.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS20List.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLS20List.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLNni1List }

function TXMLNni1List.Add(const Value: LongWord): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLNni1List.Insert(const Index: Integer; const Value: LongWord): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLNni1List.Get_Item(Index: Integer): LongWord;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLReamTypeList }

function TXMLReamTypeList.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLReamTypeList.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLReamTypeList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLRoadAvailabilityTypeList }

function TXMLRoadAvailabilityTypeList.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLRoadAvailabilityTypeList.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLRoadAvailabilityTypeList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLGlueExposureIDTypeList }

function TXMLGlueExposureIDTypeList.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLGlueExposureIDTypeList.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLGlueExposureIDTypeList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLBooleanList }

function TXMLBooleanList.Add(const Value: Boolean): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLBooleanList.Insert(const Index: Integer; const Value: Boolean): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLBooleanList.Get_Item(Index: Integer): Boolean;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS30List }

function TXMLS30List.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS30List.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLS30List.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS255List }

function TXMLS255List.Add(const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS255List.Insert(const Index: Integer; const Value: UnicodeString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;

function TXMLS255List.Get_Item(Index: Integer): UnicodeString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLPropertyValueList }

function TXMLPropertyValueList.Add: IXMLPropertyValue;
begin
  Result := AddItem(-1) as IXMLPropertyValue;
end;

function TXMLPropertyValueList.Get_Item(Index: Integer): IXMLPropertyValue;
begin
  Result := List[Index] as IXMLPropertyValue;
end;

function TXMLPropertyValueList.Insert(const Index: Integer): IXMLPropertyValue;
begin
  Result := AddItem(Index) as IXMLPropertyValue;
end;

{ TXMLBasisWeightList }

function TXMLBasisWeightList.Add: IXMLBasisWeight;
begin
  Result := AddItem(-1) as IXMLBasisWeight;
end;

function TXMLBasisWeightList.Get_Item(Index: Integer): IXMLBasisWeight;
begin
  Result := List[Index] as IXMLBasisWeight;
end;

function TXMLBasisWeightList.Insert(const Index: Integer): IXMLBasisWeight;
begin
  Result := AddItem(Index) as IXMLBasisWeight;
end;

end.